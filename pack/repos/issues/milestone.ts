// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as fabric from "@pulumi/pulumi-fabric";

export let MilestoneClosed: MilestoneState = "closed";
export let MilestoneOpen: MilestoneState = "open";

export class Milestone extends fabric.Resource {
    public readonly title: fabric.Computed<string>;
    public dueOn: fabric.Computed<string>;
    public description?: fabric.Computed<string>;
    public state?: fabric.Computed<MilestoneState>;
    public readonly repo?: fabric.Computed<string>;

    public static get(id: fabric.ID): Milestone {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Milestone[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: MilestoneArgs) {
        if (args.title === undefined) {
            throw new Error("Missing required property 'title'");
        }
        if (args.dueOn === undefined) {
            throw new Error("Missing required property 'dueOn'");
        }
        super("github:repos/issues/milestone:Milestone", name, {
            "title": args.title,
            "dueOn": args.dueOn,
            "description": args.description,
            "state": args.state,
            "repo": args.repo,
        });
    }
}

export interface MilestoneArgs {
    readonly title: fabric.MaybeComputed<string>;
    dueOn: fabric.MaybeComputed<string>;
    description?: fabric.MaybeComputed<string>;
    state?: fabric.MaybeComputed<MilestoneState>;
    readonly repo?: fabric.MaybeComputed<string>;
}

export type MilestoneState =
    "closed" |
    "open";

