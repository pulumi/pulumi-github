// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as fabric from "@pulumi/pulumi-fabric";

export let FormContentType: ContentType = "form";
export let JSONContentType: ContentType = "json";

export interface Config {
    url: fabric.MaybeComputed<string>;
    contentType?: fabric.MaybeComputed<ContentType>;
    secret?: fabric.MaybeComputed<string>;
    insecureSSL?: fabric.MaybeComputed<boolean>;
}

export type ContentType =
    "form" |
    "json";

export class Subscription extends fabric.Resource {
    public service: fabric.Computed<string>;
    public config: fabric.Computed<Config>;
    public events?: fabric.Computed<string[]>;
    public active?: fabric.Computed<boolean>;

    public static get(id: fabric.ID): Subscription {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Subscription[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: SubscriptionArgs) {
        if (args.service === undefined) {
            throw new Error("Missing required property 'service'");
        }
        if (args.config === undefined) {
            throw new Error("Missing required property 'config'");
        }
        super("github:webhooks/subscription:Subscription", name, {
            "service": args.service,
            "config": args.config,
            "events": args.events,
            "active": args.active,
        });
    }
}

export interface SubscriptionArgs {
    service: fabric.MaybeComputed<string>;
    config: fabric.MaybeComputed<Config>;
    events?: fabric.MaybeComputed<fabric.MaybeComputed<string>[]>;
    active?: fabric.MaybeComputed<boolean>;
}

