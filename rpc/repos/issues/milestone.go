// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package issues

import (
    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/pulumi-fabric/pkg/resource"
    "github.com/pulumi/pulumi-fabric/pkg/resource/plugin"
    "github.com/pulumi/pulumi-fabric/pkg/tokens"
    "github.com/pulumi/pulumi-fabric/pkg/util/contract"
    "github.com/pulumi/pulumi-fabric/pkg/util/mapper"
    lumirpc "github.com/pulumi/pulumi-fabric/sdk/proto/go"
)

/* RPC stubs for Milestone resource provider */

// MilestoneToken is the type token corresponding to the Milestone package type.
const MilestoneToken = tokens.Type("github:repos/issues/milestone:Milestone")

// MilestoneProviderOps is a pluggable interface for Milestone-related management functionality.
type MilestoneProviderOps interface {
    Configure(ctx context.Context, vars map[tokens.ModuleMember]string) error
    Check(ctx context.Context, obj *Milestone, property string) error
    Diff(ctx context.Context, id resource.ID,
        old *Milestone, new *Milestone, diff *resource.ObjectDiff) ([]string, error)
    Create(ctx context.Context, obj *Milestone) (resource.ID, error)
    Update(ctx context.Context, id resource.ID,
        old *Milestone, new *Milestone, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID, obj Milestone) error
}

// MilestoneProvider is a dynamic gRPC-based plugin for managing Milestone resources.
type MilestoneProvider struct {
    ops MilestoneProviderOps
}

// NewMilestoneProvider allocates a resource provider that delegates to a ops instance.
func NewMilestoneProvider(ops MilestoneProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &MilestoneProvider{ops: ops}
}

func (p *MilestoneProvider) Configure(
    ctx context.Context, req *lumirpc.ConfigureRequest) (*pbempty.Empty, error) {
    vars := make(map[tokens.ModuleMember]string)
    for k, v := range req.GetVariables() {
        vars[tokens.ModuleMember(k)] = v
    }
    if err := p.ops.Configure(ctx, vars); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *MilestoneProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(resource.URN(req.GetUrn()).Type() == MilestoneToken)
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    if failure := p.ops.Check(ctx, obj, "title"); failure != nil {
        failures = append(failures,
            resource.NewPropertyError("Milestone", "title", failure))
    }
    if failure := p.ops.Check(ctx, obj, "dueOn"); failure != nil {
        failures = append(failures,
            resource.NewPropertyError("Milestone", "dueOn", failure))
    }
    if failure := p.ops.Check(ctx, obj, "description"); failure != nil {
        failures = append(failures,
            resource.NewPropertyError("Milestone", "description", failure))
    }
    if failure := p.ops.Check(ctx, obj, "state"); failure != nil {
        failures = append(failures,
            resource.NewPropertyError("Milestone", "state", failure))
    }
    if failure := p.ops.Check(ctx, obj, "repo"); failure != nil {
        failures = append(failures,
            resource.NewPropertyError("Milestone", "repo", failure))
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *MilestoneProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(resource.URN(req.GetUrn()).Type() == MilestoneToken)
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{
        Id: string(id),
        Properties: plugin.MarshalProperties(
            resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *MilestoneProvider) Diff(
    ctx context.Context, req *lumirpc.DiffRequest) (*lumirpc.DiffResponse, error) {
    contract.Assert(resource.URN(req.GetUrn()).Type() == MilestoneToken)
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("title") {
            replaces = append(replaces, "title")
        }
        if diff.Changed("repo") {
            replaces = append(replaces, "repo")
        }
    }
    more, err := p.ops.Diff(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.DiffResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *MilestoneProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*lumirpc.UpdateResponse, error) {
    contract.Assert(resource.URN(req.GetUrn()).Type() == MilestoneToken)
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &lumirpc.UpdateResponse{
        Properties: plugin.MarshalProperties(
            resource.NewPropertyMap(new), plugin.MarshalOptions{}),
    }, nil
}

func (p *MilestoneProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(resource.URN(req.GetUrn()).Type() == MilestoneToken)
    id := resource.ID(req.GetId())
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if err := p.ops.Delete(ctx, id, *obj); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *MilestoneProvider) Unmarshal(
    v *pbstruct.Struct) (*Milestone, resource.PropertyMap, error) {
    var obj Milestone
    props := plugin.UnmarshalProperties(v, plugin.MarshalOptions{})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable Milestone structure(s) */

// Milestone is a marshalable representation of its corresponding IDL type.
type Milestone struct {
    Title string `lumi:"title"`
    DueOn string `lumi:"dueOn"`
    Description *string `lumi:"description,optional"`
    State *MilestoneState `lumi:"state,optional"`
    Repo *string `lumi:"repo,optional"`
}

// Milestone's properties have constants to make dealing with diffs and property bags easier.
const (
    Milestone_Title = "title"
    Milestone_DueOn = "dueOn"
    Milestone_Description = "description"
    Milestone_State = "state"
    Milestone_Repo = "repo"
)

/* Typedefs */

type (
    MilestoneState string
)

/* Constants */

const (
    MilestoneClosed MilestoneState = "closed"
    MilestoneOpen MilestoneState = "open"
)


