// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github.Outputs
{

    [OutputType]
    public sealed class GetOrganizationTeamsTeamResult
    {
        /// <summary>
        /// The team's description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the team.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// List of team members. Not returned if `SummaryOnly = true`
        /// </summary>
        public readonly ImmutableArray<string> Members;
        /// <summary>
        /// The team's full name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Node ID of the team.
        /// </summary>
        public readonly string NodeId;
        /// <summary>
        /// (**DEPRECATED**) The parent team, use `ParentTeamId` or `ParentTeamSlug` instead.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parent;
        /// <summary>
        /// The ID of the parent team, if there is one.
        /// </summary>
        public readonly string ParentTeamId;
        /// <summary>
        /// The slug of the parent team, if there is one.
        /// </summary>
        public readonly string ParentTeamSlug;
        /// <summary>
        /// The team's privacy type.
        /// </summary>
        public readonly string Privacy;
        /// <summary>
        /// List of team repositories. Not returned if `SummaryOnly = true`
        /// </summary>
        public readonly ImmutableArray<string> Repositories;
        /// <summary>
        /// The slug of the team.
        /// </summary>
        public readonly string Slug;

        [OutputConstructor]
        private GetOrganizationTeamsTeamResult(
            string description,

            int id,

            ImmutableArray<string> members,

            string name,

            string nodeId,

            ImmutableDictionary<string, string> parent,

            string parentTeamId,

            string parentTeamSlug,

            string privacy,

            ImmutableArray<string> repositories,

            string slug)
        {
            Description = description;
            Id = id;
            Members = members;
            Name = name;
            NodeId = nodeId;
            Parent = parent;
            ParentTeamId = parentTeamId;
            ParentTeamSlug = parentTeamSlug;
            Privacy = privacy;
            Repositories = repositories;
            Slug = slug;
        }
    }
}
