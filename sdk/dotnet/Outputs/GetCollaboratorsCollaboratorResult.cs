// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github.Outputs
{

    [OutputType]
    public sealed class GetCollaboratorsCollaboratorResult
    {
        /// <summary>
        /// The GitHub API URL for the collaborator's events.
        /// </summary>
        public readonly string EventsUrl;
        /// <summary>
        /// The GitHub API URL for the collaborator's followers.
        /// </summary>
        public readonly string FollowersUrl;
        /// <summary>
        /// The GitHub API URL for those following the collaborator.
        /// </summary>
        public readonly string FollowingUrl;
        /// <summary>
        /// The GitHub API URL for the collaborator's gists.
        /// </summary>
        public readonly string GistsUrl;
        /// <summary>
        /// The GitHub HTML URL for the collaborator.
        /// </summary>
        public readonly string HtmlUrl;
        /// <summary>
        /// The ID of the collaborator.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The collaborator's login.
        /// </summary>
        public readonly string Login;
        /// <summary>
        /// The GitHub API URL for the collaborator's organizations.
        /// </summary>
        public readonly string OrganizationsUrl;
        /// <summary>
        /// Filter collaborators returned by their permission. Can be one of: `Pull`, `Triage`, `Push`, `Maintain`, `Admin`.  Defaults to not doing any filtering on permission.
        /// </summary>
        public readonly string Permission;
        /// <summary>
        /// The GitHub API URL for the collaborator's received events.
        /// </summary>
        public readonly string ReceivedEventsUrl;
        /// <summary>
        /// The GitHub API URL for the collaborator's repositories.
        /// </summary>
        public readonly string ReposUrl;
        /// <summary>
        /// Whether the user is a GitHub admin.
        /// </summary>
        public readonly bool SiteAdmin;
        /// <summary>
        /// The GitHub API URL for the collaborator's starred repositories.
        /// </summary>
        public readonly string StarredUrl;
        /// <summary>
        /// The GitHub API URL for the collaborator's subscribed repositories.
        /// </summary>
        public readonly string SubscriptionsUrl;
        /// <summary>
        /// The type of the collaborator (ex. `User`).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The GitHub API URL for the collaborator.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetCollaboratorsCollaboratorResult(
            string eventsUrl,

            string followersUrl,

            string followingUrl,

            string gistsUrl,

            string htmlUrl,

            int id,

            string login,

            string organizationsUrl,

            string permission,

            string receivedEventsUrl,

            string reposUrl,

            bool siteAdmin,

            string starredUrl,

            string subscriptionsUrl,

            string type,

            string url)
        {
            EventsUrl = eventsUrl;
            FollowersUrl = followersUrl;
            FollowingUrl = followingUrl;
            GistsUrl = gistsUrl;
            HtmlUrl = htmlUrl;
            Id = id;
            Login = login;
            OrganizationsUrl = organizationsUrl;
            Permission = permission;
            ReceivedEventsUrl = receivedEventsUrl;
            ReposUrl = reposUrl;
            SiteAdmin = siteAdmin;
            StarredUrl = starredUrl;
            SubscriptionsUrl = subscriptionsUrl;
            Type = type;
            Url = url;
        }
    }
}
