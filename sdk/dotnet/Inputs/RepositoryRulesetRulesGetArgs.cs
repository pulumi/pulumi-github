// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github.Inputs
{

    public sealed class RepositoryRulesetRulesGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applied to rulesets with target `branch`. (see below for nested schema)
        /// </summary>
        [Input("branchNamePattern")]
        public Input<Inputs.RepositoryRulesetRulesBranchNamePatternGetArgs>? BranchNamePattern { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        /// </summary>
        [Input("commitAuthorEmailPattern")]
        public Input<Inputs.RepositoryRulesetRulesCommitAuthorEmailPatternGetArgs>? CommitAuthorEmailPattern { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        /// </summary>
        [Input("commitMessagePattern")]
        public Input<Inputs.RepositoryRulesetRulesCommitMessagePatternGetArgs>? CommitMessagePattern { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
        /// </summary>
        [Input("committerEmailPattern")]
        public Input<Inputs.RepositoryRulesetRulesCommitterEmailPatternGetArgs>? CommitterEmailPattern { get; set; }

        /// <summary>
        /// (Boolean) Only allow users with bypass permission to create matching refs.
        /// </summary>
        [Input("creation")]
        public Input<bool>? Creation { get; set; }

        /// <summary>
        /// (Boolean) Only allow users with bypass permissions to delete matching refs.
        /// </summary>
        [Input("deletion")]
        public Input<bool>? Deletion { get; set; }

        /// <summary>
        /// (Boolean) Prevent users with push access from force pushing to branches.
        /// </summary>
        [Input("nonFastForward")]
        public Input<bool>? NonFastForward { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
        /// </summary>
        [Input("pullRequest")]
        public Input<Inputs.RepositoryRulesetRulesPullRequestGetArgs>? PullRequest { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
        /// </summary>
        [Input("requiredDeployments")]
        public Input<Inputs.RepositoryRulesetRulesRequiredDeploymentsGetArgs>? RequiredDeployments { get; set; }

        /// <summary>
        /// (Boolean) Prevent merge commits from being pushed to matching branches.
        /// </summary>
        [Input("requiredLinearHistory")]
        public Input<bool>? RequiredLinearHistory { get; set; }

        /// <summary>
        /// (Boolean) Commits pushed to matching branches must have verified signatures.
        /// </summary>
        [Input("requiredSignatures")]
        public Input<bool>? RequiredSignatures { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
        /// </summary>
        [Input("requiredStatusChecks")]
        public Input<Inputs.RepositoryRulesetRulesRequiredStatusChecksGetArgs>? RequiredStatusChecks { get; set; }

        /// <summary>
        /// (Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applied to rulesets with target `tag`. (see below for nested schema)
        /// </summary>
        [Input("tagNamePattern")]
        public Input<Inputs.RepositoryRulesetRulesTagNamePatternGetArgs>? TagNamePattern { get; set; }

        /// <summary>
        /// (Boolean) Only allow users with bypass permission to update matching refs.
        /// </summary>
        [Input("update")]
        public Input<bool>? Update { get; set; }

        /// <summary>
        /// (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
        /// </summary>
        [Input("updateAllowsFetchAndMerge")]
        public Input<bool>? UpdateAllowsFetchAndMerge { get; set; }

        public RepositoryRulesetRulesGetArgs()
        {
        }
        public static new RepositoryRulesetRulesGetArgs Empty => new RepositoryRulesetRulesGetArgs();
    }
}
