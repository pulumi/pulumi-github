// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// This resource allows you to create and manage environments for a GitHub repository.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Github.GetUser.Invoke(new()
    ///     {
    ///         Username = "",
    ///     });
    /// 
    ///     var exampleRepository = new Github.Repository("exampleRepository", new()
    ///     {
    ///         Description = "My awesome codebase",
    ///     });
    /// 
    ///     var exampleRepositoryEnvironment = new Github.RepositoryEnvironment("exampleRepositoryEnvironment", new()
    ///     {
    ///         Environment = "example",
    ///         Repository = exampleRepository.Name,
    ///         Reviewers = new[]
    ///         {
    ///             new Github.Inputs.RepositoryEnvironmentReviewerArgs
    ///             {
    ///                 Users = new[]
    ///                 {
    ///                     current.Apply(getUserResult =&gt; getUserResult.Id),
    ///                 },
    ///             },
    ///         },
    ///         DeploymentBranchPolicy = new Github.Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs
    ///         {
    ///             ProtectedBranches = true,
    ///             CustomBranchPolicies = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GitHub Repository Environment can be imported using an ID made up of `name` of the repository combined with the `environment` name of the environment, separated by a `:` character, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import github:index/repositoryEnvironment:RepositoryEnvironment daily terraform:daily
    /// ```
    /// </summary>
    [GithubResourceType("github:index/repositoryEnvironment:RepositoryEnvironment")]
    public partial class RepositoryEnvironment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The deployment branch policy configuration
        /// </summary>
        [Output("deploymentBranchPolicy")]
        public Output<Outputs.RepositoryEnvironmentDeploymentBranchPolicy?> DeploymentBranchPolicy { get; private set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The repository of the environment.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// The environment reviewers configuration.
        /// </summary>
        [Output("reviewers")]
        public Output<ImmutableArray<Outputs.RepositoryEnvironmentReviewer>> Reviewers { get; private set; } = null!;

        /// <summary>
        /// Amount of time to delay a job after the job is initially triggered.
        /// </summary>
        [Output("waitTimer")]
        public Output<int?> WaitTimer { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryEnvironment(string name, RepositoryEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("github:index/repositoryEnvironment:RepositoryEnvironment", name, args ?? new RepositoryEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryEnvironment(string name, Input<string> id, RepositoryEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("github:index/repositoryEnvironment:RepositoryEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryEnvironment Get(string name, Input<string> id, RepositoryEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryEnvironment(name, id, state, options);
        }
    }

    public sealed class RepositoryEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deployment branch policy configuration
        /// </summary>
        [Input("deploymentBranchPolicy")]
        public Input<Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs>? DeploymentBranchPolicy { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The repository of the environment.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        [Input("reviewers")]
        private InputList<Inputs.RepositoryEnvironmentReviewerArgs>? _reviewers;

        /// <summary>
        /// The environment reviewers configuration.
        /// </summary>
        public InputList<Inputs.RepositoryEnvironmentReviewerArgs> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<Inputs.RepositoryEnvironmentReviewerArgs>());
            set => _reviewers = value;
        }

        /// <summary>
        /// Amount of time to delay a job after the job is initially triggered.
        /// </summary>
        [Input("waitTimer")]
        public Input<int>? WaitTimer { get; set; }

        public RepositoryEnvironmentArgs()
        {
        }
        public static new RepositoryEnvironmentArgs Empty => new RepositoryEnvironmentArgs();
    }

    public sealed class RepositoryEnvironmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deployment branch policy configuration
        /// </summary>
        [Input("deploymentBranchPolicy")]
        public Input<Inputs.RepositoryEnvironmentDeploymentBranchPolicyGetArgs>? DeploymentBranchPolicy { get; set; }

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// The repository of the environment.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        [Input("reviewers")]
        private InputList<Inputs.RepositoryEnvironmentReviewerGetArgs>? _reviewers;

        /// <summary>
        /// The environment reviewers configuration.
        /// </summary>
        public InputList<Inputs.RepositoryEnvironmentReviewerGetArgs> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<Inputs.RepositoryEnvironmentReviewerGetArgs>());
            set => _reviewers = value;
        }

        /// <summary>
        /// Amount of time to delay a job after the job is initially triggered.
        /// </summary>
        [Input("waitTimer")]
        public Input<int>? WaitTimer { get; set; }

        public RepositoryEnvironmentState()
        {
        }
        public static new RepositoryEnvironmentState Empty => new RepositoryEnvironmentState();
    }
}
