// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// Provides GitHub issue labels resource.
    /// 
    /// This resource allows you to create and manage issue labels within your
    /// GitHub organization.
    /// 
    /// &gt; Note: github.IssueLabels cannot be used in conjunction with github.IssueLabel or they will fight over what your policy should be.
    /// 
    /// This resource is authoritative. For adding a label to a repo in a non-authoritative manner, use github.IssueLabel instead.
    /// 
    /// If you change the case of a label's name, its' color, or description, this resource will edit the existing label to match the new values. However, if you change the name of a label, this resource will create a new label with the new name and delete the old label. Beware that this will remove the label from any issues it was previously attached to.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new, red colored label
    ///     var testRepo = new Github.IssueLabels("testRepo", new()
    ///     {
    ///         Labels = new[]
    ///         {
    ///             new Github.Inputs.IssueLabelsLabelArgs
    ///             {
    ///                 Color = "FF0000",
    ///                 Name = "Urgent",
    ///             },
    ///             new Github.Inputs.IssueLabelsLabelArgs
    ///             {
    ///                 Color = "FF0000",
    ///                 Name = "Critical",
    ///             },
    ///         },
    ///         Repository = "test-repo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GitHub Issue Labels can be imported using the repository `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import github:index/issueLabels:IssueLabels test_repo test_repo
    /// ```
    /// </summary>
    [GithubResourceType("github:index/issueLabels:IssueLabels")]
    public partial class IssueLabels : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of labels
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.IssueLabelsLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// The GitHub repository
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;


        /// <summary>
        /// Create a IssueLabels resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IssueLabels(string name, IssueLabelsArgs args, CustomResourceOptions? options = null)
            : base("github:index/issueLabels:IssueLabels", name, args ?? new IssueLabelsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IssueLabels(string name, Input<string> id, IssueLabelsState? state = null, CustomResourceOptions? options = null)
            : base("github:index/issueLabels:IssueLabels", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IssueLabels resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IssueLabels Get(string name, Input<string> id, IssueLabelsState? state = null, CustomResourceOptions? options = null)
        {
            return new IssueLabels(name, id, state, options);
        }
    }

    public sealed class IssueLabelsArgs : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputList<Inputs.IssueLabelsLabelArgs>? _labels;

        /// <summary>
        /// List of labels
        /// </summary>
        public InputList<Inputs.IssueLabelsLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.IssueLabelsLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// The GitHub repository
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public IssueLabelsArgs()
        {
        }
        public static new IssueLabelsArgs Empty => new IssueLabelsArgs();
    }

    public sealed class IssueLabelsState : global::Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputList<Inputs.IssueLabelsLabelGetArgs>? _labels;

        /// <summary>
        /// List of labels
        /// </summary>
        public InputList<Inputs.IssueLabelsLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.IssueLabelsLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// The GitHub repository
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        public IssueLabelsState()
        {
        }
        public static new IssueLabelsState Empty => new IssueLabelsState();
    }
}
