// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Github
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("github");

        private static readonly __Value<Pulumi.Github.Config.Types.AppAuth?> _appAuth = new __Value<Pulumi.Github.Config.Types.AppAuth?>(() => __config.GetObject<Pulumi.Github.Config.Types.AppAuth>("appAuth"));
        /// <summary>
        /// The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`
        /// and `app_auth` are not set.
        /// </summary>
        public static Pulumi.Github.Config.Types.AppAuth? AppAuth
        {
            get => _appAuth.Get();
            set => _appAuth.Set(value);
        }

        private static readonly __Value<string?> _baseUrl = new __Value<string?>(() => __config.Get("baseUrl") ?? Utilities.GetEnv("GITHUB_BASE_URL") ?? "https://api.github.com/");
        /// <summary>
        /// The GitHub Base API URL
        /// </summary>
        public static string? BaseUrl
        {
            get => _baseUrl.Get();
            set => _baseUrl.Set(value);
        }

        private static readonly __Value<bool?> _insecure = new __Value<bool?>(() => __config.GetBoolean("insecure"));
        /// <summary>
        /// Enable `insecure` mode for testing purposes
        /// </summary>
        public static bool? Insecure
        {
            get => _insecure.Get();
            set => _insecure.Set(value);
        }

        private static readonly __Value<string?> _organization = new __Value<string?>(() => __config.Get("organization"));
        /// <summary>
        /// The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.
        /// </summary>
        public static string? Organization
        {
            get => _organization.Get();
            set => _organization.Set(value);
        }

        private static readonly __Value<string?> _owner = new __Value<string?>(() => __config.Get("owner"));
        /// <summary>
        /// The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.
        /// </summary>
        public static string? Owner
        {
            get => _owner.Get();
            set => _owner.Set(value);
        }

        private static readonly __Value<bool?> _parallelRequests = new __Value<bool?>(() => __config.GetBoolean("parallelRequests"));
        /// <summary>
        /// Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github
        /// Enterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we
        /// enforce the respect of github.com's best practices to avoid hitting abuse rate limitsDefaults to false if not set
        /// </summary>
        public static bool? ParallelRequests
        {
            get => _parallelRequests.Get();
            set => _parallelRequests.Set(value);
        }

        private static readonly __Value<int?> _readDelayMs = new __Value<int?>(() => __config.GetInt32("readDelayMs"));
        /// <summary>
        /// Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.
        /// </summary>
        public static int? ReadDelayMs
        {
            get => _readDelayMs.Get();
            set => _readDelayMs.Set(value);
        }

        private static readonly __Value<string?> _token = new __Value<string?>(() => __config.Get("token"));
        /// <summary>
        /// The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.
        /// </summary>
        public static string? Token
        {
            get => _token.Get();
            set => _token.Set(value);
        }

        private static readonly __Value<int?> _writeDelayMs = new __Value<int?>(() => __config.GetInt32("writeDelayMs"));
        /// <summary>
        /// Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.
        /// </summary>
        public static int? WriteDelayMs
        {
            get => _writeDelayMs.Get();
            set => _writeDelayMs.Set(value);
        }

        public static class Types
        {

             public class AppAuth
             {
            /// <summary>
            /// The GitHub App ID.
            /// </summary>
                public string Id { get; set; }
            /// <summary>
            /// The GitHub App installation instance ID.
            /// </summary>
                public string InstallationId { get; set; }
            /// <summary>
            /// The GitHub App PEM file contents.
            /// </summary>
                public string PemFile { get; set; }
            }
        }
    }
}
