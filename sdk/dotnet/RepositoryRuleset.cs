// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// Creates a GitHub repository ruleset.
    /// 
    /// This resource allows you to create and manage rulesets on the repository level. When applied, a new ruleset will be created. When destroyed, that ruleset will be removed.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleRepository = new Github.Repository("exampleRepository", new()
    ///     {
    ///         Description = "Example repository",
    ///     });
    /// 
    ///     var exampleRepositoryRuleset = new Github.RepositoryRuleset("exampleRepositoryRuleset", new()
    ///     {
    ///         Repository = exampleRepository.Name,
    ///         Target = "branch",
    ///         Enforcement = "active",
    ///         Conditions = new Github.Inputs.RepositoryRulesetConditionsArgs
    ///         {
    ///             RefName = new Github.Inputs.RepositoryRulesetConditionsRefNameArgs
    ///             {
    ///                 Includes = new[]
    ///                 {
    ///                     "~ALL",
    ///                 },
    ///                 Excludes = new[] {},
    ///             },
    ///         },
    ///         BypassActors = new[]
    ///         {
    ///             new Github.Inputs.RepositoryRulesetBypassActorArgs
    ///             {
    ///                 ActorId = 13473,
    ///                 ActorType = "Integration",
    ///                 BypassMode = "always",
    ///             },
    ///         },
    ///         Rules = new Github.Inputs.RepositoryRulesetRulesArgs
    ///         {
    ///             Creation = true,
    ///             Update = true,
    ///             Deletion = true,
    ///             RequiredLinearHistory = true,
    ///             RequiredSignatures = true,
    ///             RequiredDeployments = new Github.Inputs.RepositoryRulesetRulesRequiredDeploymentsArgs
    ///             {
    ///                 RequiredDeploymentEnvironments = new[]
    ///                 {
    ///                     "test",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GitHub Repository Rulesets can be imported using the GitHub repository name and ruleset ID e.g.
    /// 
    /// ```sh
    ///  $ pulumi import github:index/repositoryRuleset:RepositoryRuleset example example:12345`
    /// ```
    /// </summary>
    [GithubResourceType("github:index/repositoryRuleset:RepositoryRuleset")]
    public partial class RepositoryRuleset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        /// </summary>
        [Output("bypassActors")]
        public Output<ImmutableArray<Outputs.RepositoryRulesetBypassActor>> BypassActors { get; private set; } = null!;

        /// <summary>
        /// (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        /// </summary>
        [Output("conditions")]
        public Output<Outputs.RepositoryRulesetConditions?> Conditions { get; private set; } = null!;

        /// <summary>
        /// (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
        /// </summary>
        [Output("enforcement")]
        public Output<string> Enforcement { get; private set; } = null!;

        /// <summary>
        /// (String)
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// (String) The name of the ruleset.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (String) GraphQL global node id for use with v4 API.
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// (String) Name of the repository to apply rulset to.
        /// </summary>
        [Output("repository")]
        public Output<string?> Repository { get; private set; } = null!;

        /// <summary>
        /// (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        /// </summary>
        [Output("rules")]
        public Output<Outputs.RepositoryRulesetRules> Rules { get; private set; } = null!;

        /// <summary>
        /// (Number) GitHub ID for the ruleset.
        /// </summary>
        [Output("rulesetId")]
        public Output<int> RulesetId { get; private set; } = null!;

        /// <summary>
        /// (String) Possible values are `branch` and `tag`.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryRuleset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryRuleset(string name, RepositoryRulesetArgs args, CustomResourceOptions? options = null)
            : base("github:index/repositoryRuleset:RepositoryRuleset", name, args ?? new RepositoryRulesetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryRuleset(string name, Input<string> id, RepositoryRulesetState? state = null, CustomResourceOptions? options = null)
            : base("github:index/repositoryRuleset:RepositoryRuleset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryRuleset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryRuleset Get(string name, Input<string> id, RepositoryRulesetState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryRuleset(name, id, state, options);
        }
    }

    public sealed class RepositoryRulesetArgs : global::Pulumi.ResourceArgs
    {
        [Input("bypassActors")]
        private InputList<Inputs.RepositoryRulesetBypassActorArgs>? _bypassActors;

        /// <summary>
        /// (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        /// </summary>
        public InputList<Inputs.RepositoryRulesetBypassActorArgs> BypassActors
        {
            get => _bypassActors ?? (_bypassActors = new InputList<Inputs.RepositoryRulesetBypassActorArgs>());
            set => _bypassActors = value;
        }

        /// <summary>
        /// (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.RepositoryRulesetConditionsArgs>? Conditions { get; set; }

        /// <summary>
        /// (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
        /// </summary>
        [Input("enforcement", required: true)]
        public Input<string> Enforcement { get; set; } = null!;

        /// <summary>
        /// (String) The name of the ruleset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) Name of the repository to apply rulset to.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        /// </summary>
        [Input("rules", required: true)]
        public Input<Inputs.RepositoryRulesetRulesArgs> Rules { get; set; } = null!;

        /// <summary>
        /// (String) Possible values are `branch` and `tag`.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        public RepositoryRulesetArgs()
        {
        }
        public static new RepositoryRulesetArgs Empty => new RepositoryRulesetArgs();
    }

    public sealed class RepositoryRulesetState : global::Pulumi.ResourceArgs
    {
        [Input("bypassActors")]
        private InputList<Inputs.RepositoryRulesetBypassActorGetArgs>? _bypassActors;

        /// <summary>
        /// (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
        /// </summary>
        public InputList<Inputs.RepositoryRulesetBypassActorGetArgs> BypassActors
        {
            get => _bypassActors ?? (_bypassActors = new InputList<Inputs.RepositoryRulesetBypassActorGetArgs>());
            set => _bypassActors = value;
        }

        /// <summary>
        /// (Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.RepositoryRulesetConditionsGetArgs>? Conditions { get; set; }

        /// <summary>
        /// (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
        /// </summary>
        [Input("enforcement")]
        public Input<string>? Enforcement { get; set; }

        /// <summary>
        /// (String)
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// (String) The name of the ruleset.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) GraphQL global node id for use with v4 API.
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// (String) Name of the repository to apply rulset to.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
        /// </summary>
        [Input("rules")]
        public Input<Inputs.RepositoryRulesetRulesGetArgs>? Rules { get; set; }

        /// <summary>
        /// (Number) GitHub ID for the ruleset.
        /// </summary>
        [Input("rulesetId")]
        public Input<int>? RulesetId { get; set; }

        /// <summary>
        /// (String) Possible values are `branch` and `tag`.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public RepositoryRulesetState()
        {
        }
        public static new RepositoryRulesetState Empty => new RepositoryRulesetState();
    }
}
