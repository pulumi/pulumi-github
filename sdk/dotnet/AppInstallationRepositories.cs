// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// &gt; **Note**: This resource is not compatible with the GitHub App Installation authentication method.
    /// 
    /// This resource manages relationships between app installations and repositories
    /// in your GitHub organization.
    /// 
    /// Creating this resource installs a particular app on multiple repositories.
    /// 
    /// The app installation and the repositories must all belong to the same
    /// organization on GitHub. Note: you can review your organization's installations
    /// by the following the instructions at this
    /// [link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).
    /// 
    /// ## Import
    /// 
    /// GitHub App Installation Repositories can be imported using an ID made up of `installation_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import github:index/appInstallationRepositories:AppInstallationRepositories some_app_repos 1234567
    /// ```
    /// </summary>
    [GithubResourceType("github:index/appInstallationRepositories:AppInstallationRepositories")]
    public partial class AppInstallationRepositories : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The GitHub app installation id.
        /// </summary>
        [Output("installationId")]
        public Output<string> InstallationId { get; private set; } = null!;

        /// <summary>
        /// A list of repository names to install the app on.
        /// 
        /// &gt; **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.
        /// </summary>
        [Output("selectedRepositories")]
        public Output<ImmutableArray<string>> SelectedRepositories { get; private set; } = null!;


        /// <summary>
        /// Create a AppInstallationRepositories resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppInstallationRepositories(string name, AppInstallationRepositoriesArgs args, CustomResourceOptions? options = null)
            : base("github:index/appInstallationRepositories:AppInstallationRepositories", name, args ?? new AppInstallationRepositoriesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppInstallationRepositories(string name, Input<string> id, AppInstallationRepositoriesState? state = null, CustomResourceOptions? options = null)
            : base("github:index/appInstallationRepositories:AppInstallationRepositories", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppInstallationRepositories resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppInstallationRepositories Get(string name, Input<string> id, AppInstallationRepositoriesState? state = null, CustomResourceOptions? options = null)
        {
            return new AppInstallationRepositories(name, id, state, options);
        }
    }

    public sealed class AppInstallationRepositoriesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GitHub app installation id.
        /// </summary>
        [Input("installationId", required: true)]
        public Input<string> InstallationId { get; set; } = null!;

        [Input("selectedRepositories", required: true)]
        private InputList<string>? _selectedRepositories;

        /// <summary>
        /// A list of repository names to install the app on.
        /// 
        /// &gt; **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.
        /// </summary>
        public InputList<string> SelectedRepositories
        {
            get => _selectedRepositories ?? (_selectedRepositories = new InputList<string>());
            set => _selectedRepositories = value;
        }

        public AppInstallationRepositoriesArgs()
        {
        }
        public static new AppInstallationRepositoriesArgs Empty => new AppInstallationRepositoriesArgs();
    }

    public sealed class AppInstallationRepositoriesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The GitHub app installation id.
        /// </summary>
        [Input("installationId")]
        public Input<string>? InstallationId { get; set; }

        [Input("selectedRepositories")]
        private InputList<string>? _selectedRepositories;

        /// <summary>
        /// A list of repository names to install the app on.
        /// 
        /// &gt; **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.
        /// </summary>
        public InputList<string> SelectedRepositories
        {
            get => _selectedRepositories ?? (_selectedRepositories = new InputList<string>());
            set => _selectedRepositories = value;
        }

        public AppInstallationRepositoriesState()
        {
        }
        public static new AppInstallationRepositoriesState Empty => new AppInstallationRepositoriesState();
    }
}
