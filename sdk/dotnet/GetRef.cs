// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    public static class GetRef
    {
        /// <summary>
        /// Use this data source to retrieve information about a repository ref.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var development = Output.Create(Github.GetRef.InvokeAsync(new Github.GetRefArgs
        ///         {
        ///             Ref = "heads/development",
        ///             Repository = "example",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRefResult> InvokeAsync(GetRefArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRefResult>("github:index/getRef:getRef", args ?? new GetRefArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a repository ref.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var development = Output.Create(Github.GetRef.InvokeAsync(new Github.GetRefArgs
        ///         {
        ///             Ref = "heads/development",
        ///             Repository = "example",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRefResult> Invoke(GetRefInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRefResult>("github:index/getRef:getRef", args ?? new GetRefInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRefArgs : Pulumi.InvokeArgs
    {
        [Input("branch", required: true)]
        public string Branch { get; set; } = null!;

        /// <summary>
        /// The GitHub repository name.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        public GetRefArgs()
        {
        }
    }

    public sealed class GetRefInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// The GitHub repository name.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public GetRefInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRefResult
    {
        public readonly string Branch;
        /// <summary>
        /// An etag representing the ref.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ref;
        public readonly string Repository;
        /// <summary>
        /// A string storing the reference's `HEAD` commit's SHA1.
        /// </summary>
        public readonly string Sha;

        [OutputConstructor]
        private GetRefResult(
            string branch,

            string etag,

            string id,

            string @ref,

            string repository,

            string sha)
        {
            Branch = branch;
            Etag = etag;
            Id = id;
            Ref = @ref;
            Repository = repository;
            Sha = sha;
        }
    }
}
