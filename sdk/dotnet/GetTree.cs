// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    public static class GetTree
    {
        /// <summary>
        /// Use this data source to retrieve information about a single tree.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var thisRepository = Output.Create(Github.GetRepository.InvokeAsync(new Github.GetRepositoryArgs
        ///         {
        ///             Name = "example",
        ///         }));
        ///         var thisBranch = Output.Tuple(thisRepository, thisRepository).Apply(values =&gt;
        ///         {
        ///             var thisRepository = values.Item1;
        ///             var thisRepository1 = values.Item2;
        ///             return Output.Create(Github.GetBranch.InvokeAsync(new Github.GetBranchArgs
        ///             {
        ///                 Branch = thisRepository.DefaultBranch,
        ///                 Repository = thisRepository1.Name,
        ///             }));
        ///         });
        ///         var thisTree = Output.Tuple(thisRepository, thisBranch).Apply(values =&gt;
        ///         {
        ///             var thisRepository = values.Item1;
        ///             var thisBranch = values.Item2;
        ///             return Output.Create(Github.GetTree.InvokeAsync(new Github.GetTreeArgs
        ///             {
        ///                 Recursive = false,
        ///                 Repository = thisRepository.Name,
        ///                 TreeSha = thisBranch.Sha,
        ///             }));
        ///         });
        ///         this.Entries = thisTree.Apply(thisTree =&gt; thisTree.Entries);
        ///     }
        /// 
        ///     [Output("entries")]
        ///     public Output&lt;string&gt; Entries { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTreeResult> InvokeAsync(GetTreeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTreeResult>("github:index/getTree:getTree", args ?? new GetTreeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a single tree.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var thisRepository = Output.Create(Github.GetRepository.InvokeAsync(new Github.GetRepositoryArgs
        ///         {
        ///             Name = "example",
        ///         }));
        ///         var thisBranch = Output.Tuple(thisRepository, thisRepository).Apply(values =&gt;
        ///         {
        ///             var thisRepository = values.Item1;
        ///             var thisRepository1 = values.Item2;
        ///             return Output.Create(Github.GetBranch.InvokeAsync(new Github.GetBranchArgs
        ///             {
        ///                 Branch = thisRepository.DefaultBranch,
        ///                 Repository = thisRepository1.Name,
        ///             }));
        ///         });
        ///         var thisTree = Output.Tuple(thisRepository, thisBranch).Apply(values =&gt;
        ///         {
        ///             var thisRepository = values.Item1;
        ///             var thisBranch = values.Item2;
        ///             return Output.Create(Github.GetTree.InvokeAsync(new Github.GetTreeArgs
        ///             {
        ///                 Recursive = false,
        ///                 Repository = thisRepository.Name,
        ///                 TreeSha = thisBranch.Sha,
        ///             }));
        ///         });
        ///         this.Entries = thisTree.Apply(thisTree =&gt; thisTree.Entries);
        ///     }
        /// 
        ///     [Output("entries")]
        ///     public Output&lt;string&gt; Entries { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTreeResult> Invoke(GetTreeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTreeResult>("github:index/getTree:getTree", args ?? new GetTreeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTreeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Setting this parameter to `true` returns the objects or subtrees referenced by the tree specified in `tree_sha`.
        /// </summary>
        [Input("recursive")]
        public bool? Recursive { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        /// <summary>
        /// The SHA1 value for the tree.
        /// </summary>
        [Input("treeSha", required: true)]
        public string TreeSha { get; set; } = null!;

        public GetTreeArgs()
        {
        }
    }

    public sealed class GetTreeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Setting this parameter to `true` returns the objects or subtrees referenced by the tree specified in `tree_sha`.
        /// </summary>
        [Input("recursive")]
        public Input<bool>? Recursive { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// The SHA1 value for the tree.
        /// </summary>
        [Input("treeSha", required: true)]
        public Input<string> TreeSha { get; set; } = null!;

        public GetTreeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTreeResult
    {
        /// <summary>
        /// Objects (of `path`, `mode`, `type`, `size`, and `sha`) specifying a tree structure.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTreeEntryResult> Entries;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? Recursive;
        public readonly string Repository;
        public readonly string TreeSha;

        [OutputConstructor]
        private GetTreeResult(
            ImmutableArray<Outputs.GetTreeEntryResult> entries,

            string id,

            bool? recursive,

            string repository,

            string treeSha)
        {
            Entries = entries;
            Id = id;
            Recursive = recursive;
            Repository = repository;
            TreeSha = treeSha;
        }
    }
}
