// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// This resource allows you to create and manage custom properties for a GitHub organization.
    /// 
    /// Custom properties enable you to add metadata to repositories within your organization. You can use custom properties to add context about repositories, such as who owns them, when they expire, or compliance requirements.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var environment = new Github.OrganizationCustomProperties("environment", new()
    ///     {
    ///         PropertyName = "environment",
    ///         ValueType = "single_select",
    ///         Required = true,
    ///         Description = "The deployment environment for this repository",
    ///         DefaultValue = "development",
    ///         AllowedValues = new[]
    ///         {
    ///             "development",
    ///             "staging",
    ///             "production",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Text Property
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var owner = new Github.OrganizationCustomProperties("owner", new()
    ///     {
    ///         PropertyName = "owner",
    ///         ValueType = "string",
    ///         Required = true,
    ///         Description = "The team or individual responsible for this repository",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Boolean Property
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var archived = new Github.OrganizationCustomProperties("archived", new()
    ///     {
    ///         PropertyName = "archived",
    ///         ValueType = "true_false",
    ///         Required = false,
    ///         Description = "Whether this repository is archived",
    ///         DefaultValue = "false",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Organization custom properties can be imported using the property name:
    /// 
    /// ```sh
    /// $ pulumi import github:index/organizationCustomProperties:OrganizationCustomProperties environment environment
    /// ```
    /// </summary>
    [GithubResourceType("github:index/organizationCustomProperties:OrganizationCustomProperties")]
    public partial class OrganizationCustomProperties : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of allowed values for the custom property. Only applicable when `ValueType` is `SingleSelect` or `MultiSelect`.
        /// </summary>
        [Output("allowedValues")]
        public Output<ImmutableArray<string>> AllowedValues { get; private set; } = null!;

        /// <summary>
        /// The default value of the custom property.
        /// </summary>
        [Output("defaultValue")]
        public Output<string> DefaultValue { get; private set; } = null!;

        /// <summary>
        /// The description of the custom property.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the custom property.
        /// </summary>
        [Output("propertyName")]
        public Output<string> PropertyName { get; private set; } = null!;

        /// <summary>
        /// Whether the custom property is required. Defaults to `False`.
        /// </summary>
        [Output("required")]
        public Output<bool?> Required { get; private set; } = null!;

        /// <summary>
        /// The type of the custom property. Can be one of `String`, `SingleSelect`, `MultiSelect`, or `TrueFalse`. Defaults to `String`.
        /// </summary>
        [Output("valueType")]
        public Output<string?> ValueType { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationCustomProperties resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationCustomProperties(string name, OrganizationCustomPropertiesArgs args, CustomResourceOptions? options = null)
            : base("github:index/organizationCustomProperties:OrganizationCustomProperties", name, args ?? new OrganizationCustomPropertiesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationCustomProperties(string name, Input<string> id, OrganizationCustomPropertiesState? state = null, CustomResourceOptions? options = null)
            : base("github:index/organizationCustomProperties:OrganizationCustomProperties", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationCustomProperties resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationCustomProperties Get(string name, Input<string> id, OrganizationCustomPropertiesState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationCustomProperties(name, id, state, options);
        }
    }

    public sealed class OrganizationCustomPropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedValues")]
        private InputList<string>? _allowedValues;

        /// <summary>
        /// List of allowed values for the custom property. Only applicable when `ValueType` is `SingleSelect` or `MultiSelect`.
        /// </summary>
        public InputList<string> AllowedValues
        {
            get => _allowedValues ?? (_allowedValues = new InputList<string>());
            set => _allowedValues = value;
        }

        /// <summary>
        /// The default value of the custom property.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The description of the custom property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the custom property.
        /// </summary>
        [Input("propertyName", required: true)]
        public Input<string> PropertyName { get; set; } = null!;

        /// <summary>
        /// Whether the custom property is required. Defaults to `False`.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// The type of the custom property. Can be one of `String`, `SingleSelect`, `MultiSelect`, or `TrueFalse`. Defaults to `String`.
        /// </summary>
        [Input("valueType")]
        public Input<string>? ValueType { get; set; }

        public OrganizationCustomPropertiesArgs()
        {
        }
        public static new OrganizationCustomPropertiesArgs Empty => new OrganizationCustomPropertiesArgs();
    }

    public sealed class OrganizationCustomPropertiesState : global::Pulumi.ResourceArgs
    {
        [Input("allowedValues")]
        private InputList<string>? _allowedValues;

        /// <summary>
        /// List of allowed values for the custom property. Only applicable when `ValueType` is `SingleSelect` or `MultiSelect`.
        /// </summary>
        public InputList<string> AllowedValues
        {
            get => _allowedValues ?? (_allowedValues = new InputList<string>());
            set => _allowedValues = value;
        }

        /// <summary>
        /// The default value of the custom property.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The description of the custom property.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the custom property.
        /// </summary>
        [Input("propertyName")]
        public Input<string>? PropertyName { get; set; }

        /// <summary>
        /// Whether the custom property is required. Defaults to `False`.
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// The type of the custom property. Can be one of `String`, `SingleSelect`, `MultiSelect`, or `TrueFalse`. Defaults to `String`.
        /// </summary>
        [Input("valueType")]
        public Input<string>? ValueType { get; set; }

        public OrganizationCustomPropertiesState()
        {
        }
        public static new OrganizationCustomPropertiesState Empty => new OrganizationCustomPropertiesState();
    }
}
