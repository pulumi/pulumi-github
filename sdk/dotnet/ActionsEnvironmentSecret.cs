// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleSecretActionsEnvironmentSecret = new Github.ActionsEnvironmentSecret("exampleSecretActionsEnvironmentSecret", new()
    ///     {
    ///         Environment = "example_environment",
    ///         SecretName = "example_secret_name",
    ///         PlaintextValue = @var.Some_secret_string,
    ///     });
    /// 
    ///     var exampleSecretIndex_actionsEnvironmentSecretActionsEnvironmentSecret = new Github.ActionsEnvironmentSecret("exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret", new()
    ///     {
    ///         Environment = "example_environment",
    ///         SecretName = "example_secret_name",
    ///         EncryptedValue = @var.Some_encrypted_secret_string,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var repo = Github.GetRepository.Invoke(new()
    ///     {
    ///         FullName = "my-org/repo",
    ///     });
    /// 
    ///     var repoEnvironment = new Github.RepositoryEnvironment("repoEnvironment", new()
    ///     {
    ///         Repository = repo.Apply(getRepositoryResult =&gt; getRepositoryResult.Name),
    ///         Environment = "example_environment",
    ///     });
    /// 
    ///     var testSecret = new Github.ActionsEnvironmentSecret("testSecret", new()
    ///     {
    ///         Repository = repo.Apply(getRepositoryResult =&gt; getRepositoryResult.Name),
    ///         Environment = repoEnvironment.Environment,
    ///         SecretName = "test_secret_name",
    ///         PlaintextValue = "%s",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource does not support importing. If you'd like to help contribute it, please visit our [GitHub page](https://github.com/integrations/terraform-provider-github)!
    /// </summary>
    [GithubResourceType("github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret")]
    public partial class ActionsEnvironmentSecret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date of actions_environment_secret creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Encrypted value of the secret using the GitHub public key in Base64 format.
        /// </summary>
        [Output("encryptedValue")]
        public Output<string?> EncryptedValue { get; private set; } = null!;

        /// <summary>
        /// Name of the environment.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// Plaintext value of the secret to be encrypted.
        /// </summary>
        [Output("plaintextValue")]
        public Output<string?> PlaintextValue { get; private set; } = null!;

        /// <summary>
        /// Name of the repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Name of the secret.
        /// </summary>
        [Output("secretName")]
        public Output<string> SecretName { get; private set; } = null!;

        /// <summary>
        /// Date of actions_environment_secret update.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a ActionsEnvironmentSecret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ActionsEnvironmentSecret(string name, ActionsEnvironmentSecretArgs args, CustomResourceOptions? options = null)
            : base("github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret", name, args ?? new ActionsEnvironmentSecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ActionsEnvironmentSecret(string name, Input<string> id, ActionsEnvironmentSecretState? state = null, CustomResourceOptions? options = null)
            : base("github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "encryptedValue",
                    "plaintextValue",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ActionsEnvironmentSecret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ActionsEnvironmentSecret Get(string name, Input<string> id, ActionsEnvironmentSecretState? state = null, CustomResourceOptions? options = null)
        {
            return new ActionsEnvironmentSecret(name, id, state, options);
        }
    }

    public sealed class ActionsEnvironmentSecretArgs : global::Pulumi.ResourceArgs
    {
        [Input("encryptedValue")]
        private Input<string>? _encryptedValue;

        /// <summary>
        /// Encrypted value of the secret using the GitHub public key in Base64 format.
        /// </summary>
        public Input<string>? EncryptedValue
        {
            get => _encryptedValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptedValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the environment.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        [Input("plaintextValue")]
        private Input<string>? _plaintextValue;

        /// <summary>
        /// Plaintext value of the secret to be encrypted.
        /// </summary>
        public Input<string>? PlaintextValue
        {
            get => _plaintextValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintextValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// Name of the secret.
        /// </summary>
        [Input("secretName", required: true)]
        public Input<string> SecretName { get; set; } = null!;

        public ActionsEnvironmentSecretArgs()
        {
        }
        public static new ActionsEnvironmentSecretArgs Empty => new ActionsEnvironmentSecretArgs();
    }

    public sealed class ActionsEnvironmentSecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date of actions_environment_secret creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("encryptedValue")]
        private Input<string>? _encryptedValue;

        /// <summary>
        /// Encrypted value of the secret using the GitHub public key in Base64 format.
        /// </summary>
        public Input<string>? EncryptedValue
        {
            get => _encryptedValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptedValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("plaintextValue")]
        private Input<string>? _plaintextValue;

        /// <summary>
        /// Plaintext value of the secret to be encrypted.
        /// </summary>
        public Input<string>? PlaintextValue
        {
            get => _plaintextValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintextValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Name of the secret.
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        /// <summary>
        /// Date of actions_environment_secret update.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ActionsEnvironmentSecretState()
        {
        }
        public static new ActionsEnvironmentSecretState Empty => new ActionsEnvironmentSecretState();
    }
}
