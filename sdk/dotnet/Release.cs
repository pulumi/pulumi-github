// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// This resource allows you to create and manage a release in a specific
    /// GitHub repository.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var repo = new Github.Repository("repo", new()
    ///     {
    ///         Name = "repo",
    ///         Description = "GitHub repo managed by Terraform",
    ///         Private = false,
    ///     });
    /// 
    ///     var example = new Github.Release("example", new()
    ///     {
    ///         Repository = repo.Name,
    ///         TagName = "v1.0.0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### on Non-Default Branch
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Github.Repository("example", new()
    ///     {
    ///         Name = "repo",
    ///         AutoInit = true,
    ///     });
    /// 
    ///     var exampleBranch = new Github.Branch("example", new()
    ///     {
    ///         Repository = example.Name,
    ///         BranchName = "branch_name",
    ///         SourceBranch = example.DefaultBranch,
    ///     });
    /// 
    ///     var exampleRelease = new Github.Release("example", new()
    ///     {
    ///         Repository = example.Name,
    ///         TagName = "v1.0.0",
    ///         TargetCommitish = exampleBranch.BranchName,
    ///         Draft = false,
    ///         Prerelease = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the `name` of the repository, combined with the `id` of the release, and a `:` character for separating components, e.g.
    /// 
    /// ```sh
    /// $ pulumi import github:index/release:Release example repo:12345678
    /// ```
    /// </summary>
    [GithubResourceType("github:index/release:Release")]
    public partial class Release : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URL that can be provided to API calls displaying the attached assets to this release.
        /// </summary>
        [Output("assetsUrl")]
        public Output<string> AssetsUrl { get; private set; } = null!;

        /// <summary>
        /// Text describing the contents of the tag.
        /// </summary>
        [Output("body")]
        public Output<string?> Body { get; private set; } = null!;

        /// <summary>
        /// This is the date of the commit used for the release, and not the date when the release was drafted or published.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
        /// </summary>
        [Output("discussionCategoryName")]
        public Output<string?> DiscussionCategoryName { get; private set; } = null!;

        /// <summary>
        /// Set to `false` to create a published release.
        /// </summary>
        [Output("draft")]
        public Output<bool?> Draft { get; private set; } = null!;

        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
        /// </summary>
        [Output("generateReleaseNotes")]
        public Output<bool?> GenerateReleaseNotes { get; private set; } = null!;

        /// <summary>
        /// URL of the release in GitHub.
        /// </summary>
        [Output("htmlUrl")]
        public Output<string> HtmlUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the release.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// GraphQL global node id for use with v4 API
        /// </summary>
        [Output("nodeId")]
        public Output<string> NodeId { get; private set; } = null!;

        /// <summary>
        /// Set to `false` to identify the release as a full release.
        /// </summary>
        [Output("prerelease")]
        public Output<bool?> Prerelease { get; private set; } = null!;

        /// <summary>
        /// This is the date when the release was published. This will be empty if the release is a draft.
        /// </summary>
        [Output("publishedAt")]
        public Output<string> PublishedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the release.
        /// </summary>
        [Output("releaseId")]
        public Output<int> ReleaseId { get; private set; } = null!;

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Output("tagName")]
        public Output<string> TagName { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to API calls to fetch the release TAR archive.
        /// </summary>
        [Output("tarballUrl")]
        public Output<string> TarballUrl { get; private set; } = null!;

        /// <summary>
        /// The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
        /// </summary>
        [Output("targetCommitish")]
        public Output<string?> TargetCommitish { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to API calls to upload assets.
        /// </summary>
        [Output("uploadUrl")]
        public Output<string> UploadUrl { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to API calls that reference this release.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// URL that can be provided to API calls to fetch the release ZIP archive.
        /// </summary>
        [Output("zipballUrl")]
        public Output<string> ZipballUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Release resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Release(string name, ReleaseArgs args, CustomResourceOptions? options = null)
            : base("github:index/release:Release", name, args ?? new ReleaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Release(string name, Input<string> id, ReleaseState? state = null, CustomResourceOptions? options = null)
            : base("github:index/release:Release", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Release resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Release Get(string name, Input<string> id, ReleaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Release(name, id, state, options);
        }
    }

    public sealed class ReleaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Text describing the contents of the tag.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
        /// </summary>
        [Input("discussionCategoryName")]
        public Input<string>? DiscussionCategoryName { get; set; }

        /// <summary>
        /// Set to `false` to create a published release.
        /// </summary>
        [Input("draft")]
        public Input<bool>? Draft { get; set; }

        /// <summary>
        /// Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
        /// </summary>
        [Input("generateReleaseNotes")]
        public Input<bool>? GenerateReleaseNotes { get; set; }

        /// <summary>
        /// The name of the release.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set to `false` to identify the release as a full release.
        /// </summary>
        [Input("prerelease")]
        public Input<bool>? Prerelease { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("tagName", required: true)]
        public Input<string> TagName { get; set; } = null!;

        /// <summary>
        /// The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
        /// </summary>
        [Input("targetCommitish")]
        public Input<string>? TargetCommitish { get; set; }

        public ReleaseArgs()
        {
        }
        public static new ReleaseArgs Empty => new ReleaseArgs();
    }

    public sealed class ReleaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL that can be provided to API calls displaying the attached assets to this release.
        /// </summary>
        [Input("assetsUrl")]
        public Input<string>? AssetsUrl { get; set; }

        /// <summary>
        /// Text describing the contents of the tag.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// This is the date of the commit used for the release, and not the date when the release was drafted or published.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
        /// </summary>
        [Input("discussionCategoryName")]
        public Input<string>? DiscussionCategoryName { get; set; }

        /// <summary>
        /// Set to `false` to create a published release.
        /// </summary>
        [Input("draft")]
        public Input<bool>? Draft { get; set; }

        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
        /// </summary>
        [Input("generateReleaseNotes")]
        public Input<bool>? GenerateReleaseNotes { get; set; }

        /// <summary>
        /// URL of the release in GitHub.
        /// </summary>
        [Input("htmlUrl")]
        public Input<string>? HtmlUrl { get; set; }

        /// <summary>
        /// The name of the release.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// GraphQL global node id for use with v4 API
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// Set to `false` to identify the release as a full release.
        /// </summary>
        [Input("prerelease")]
        public Input<bool>? Prerelease { get; set; }

        /// <summary>
        /// This is the date when the release was published. This will be empty if the release is a draft.
        /// </summary>
        [Input("publishedAt")]
        public Input<string>? PublishedAt { get; set; }

        /// <summary>
        /// The ID of the release.
        /// </summary>
        [Input("releaseId")]
        public Input<int>? ReleaseId { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("tagName")]
        public Input<string>? TagName { get; set; }

        /// <summary>
        /// URL that can be provided to API calls to fetch the release TAR archive.
        /// </summary>
        [Input("tarballUrl")]
        public Input<string>? TarballUrl { get; set; }

        /// <summary>
        /// The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
        /// </summary>
        [Input("targetCommitish")]
        public Input<string>? TargetCommitish { get; set; }

        /// <summary>
        /// URL that can be provided to API calls to upload assets.
        /// </summary>
        [Input("uploadUrl")]
        public Input<string>? UploadUrl { get; set; }

        /// <summary>
        /// URL that can be provided to API calls that reference this release.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// URL that can be provided to API calls to fetch the release ZIP archive.
        /// </summary>
        [Input("zipballUrl")]
        public Input<string>? ZipballUrl { get; set; }

        public ReleaseState()
        {
        }
        public static new ReleaseState Empty => new ReleaseState();
    }
}
