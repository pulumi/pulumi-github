// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// This resource allows you to create and manage GitHub Actions runner groups within your GitHub enterprise.
    /// You must have admin access to an enterprise to use this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var enterprise = Github.GetEnterprise.Invoke(new()
    ///     {
    ///         Slug = "my-enterprise",
    ///     });
    /// 
    ///     var enterpriseOrganization = new Github.EnterpriseOrganization("enterprise_organization", new()
    ///     {
    ///         EnterpriseId = enterprise.Apply(getEnterpriseResult =&gt; getEnterpriseResult.Id),
    ///         Name = "my-organization",
    ///         BillingEmail = "octocat@octo.cat",
    ///         AdminLogins = new[]
    ///         {
    ///             "octocat",
    ///         },
    ///     });
    /// 
    ///     var example = new Github.EnterpriseActionsRunnerGroup("example", new()
    ///     {
    ///         Name = "my-awesome-runner-group",
    ///         EnterpriseSlug = enterprise.Apply(getEnterpriseResult =&gt; getEnterpriseResult.Slug),
    ///         AllowsPublicRepositories = true,
    ///         Visibility = "selected",
    ///         SelectedOrganizationIds = new[]
    ///         {
    ///             enterpriseOrganization.DatabaseId,
    ///         },
    ///         RestrictedToWorkflows = true,
    ///         SelectedWorkflows = new[]
    ///         {
    ///             "my-organization/my-repo/.github/workflows/cool-workflow.yaml@refs/tags/v1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the enterprise slug and the ID of the runner group:
    /// 
    /// ```sh
    /// $ pulumi import github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup test enterprise-slug/42
    /// ```
    /// </summary>
    [GithubResourceType("github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup")]
    public partial class EnterpriseActionsRunnerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether public repositories can be added to the runner group. Defaults to false.
        /// </summary>
        [Output("allowsPublicRepositories")]
        public Output<bool?> AllowsPublicRepositories { get; private set; } = null!;

        /// <summary>
        /// Whether this is the default runner group
        /// </summary>
        [Output("default")]
        public Output<bool> Default { get; private set; } = null!;

        /// <summary>
        /// The slug of the enterprise.
        /// </summary>
        [Output("enterpriseSlug")]
        public Output<string> EnterpriseSlug { get; private set; } = null!;

        /// <summary>
        /// An etag representing the runner group object
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Name of the runner group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
        /// </summary>
        [Output("restrictedToWorkflows")]
        public Output<bool?> RestrictedToWorkflows { get; private set; } = null!;

        /// <summary>
        /// The GitHub API URL for the runner group's runners
        /// </summary>
        [Output("runnersUrl")]
        public Output<string> RunnersUrl { get; private set; } = null!;

        /// <summary>
        /// IDs of the organizations which should be added to the runner group
        /// </summary>
        [Output("selectedOrganizationIds")]
        public Output<ImmutableArray<int>> SelectedOrganizationIds { get; private set; } = null!;

        /// <summary>
        /// The GitHub API URL for the runner group's selected organizations
        /// </summary>
        [Output("selectedOrganizationsUrl")]
        public Output<string> SelectedOrganizationsUrl { get; private set; } = null!;

        /// <summary>
        /// List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
        /// </summary>
        [Output("selectedWorkflows")]
        public Output<ImmutableArray<string>> SelectedWorkflows { get; private set; } = null!;

        /// <summary>
        /// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a EnterpriseActionsRunnerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnterpriseActionsRunnerGroup(string name, EnterpriseActionsRunnerGroupArgs args, CustomResourceOptions? options = null)
            : base("github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup", name, args ?? new EnterpriseActionsRunnerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnterpriseActionsRunnerGroup(string name, Input<string> id, EnterpriseActionsRunnerGroupState? state = null, CustomResourceOptions? options = null)
            : base("github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnterpriseActionsRunnerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnterpriseActionsRunnerGroup Get(string name, Input<string> id, EnterpriseActionsRunnerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new EnterpriseActionsRunnerGroup(name, id, state, options);
        }
    }

    public sealed class EnterpriseActionsRunnerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether public repositories can be added to the runner group. Defaults to false.
        /// </summary>
        [Input("allowsPublicRepositories")]
        public Input<bool>? AllowsPublicRepositories { get; set; }

        /// <summary>
        /// The slug of the enterprise.
        /// </summary>
        [Input("enterpriseSlug", required: true)]
        public Input<string> EnterpriseSlug { get; set; } = null!;

        /// <summary>
        /// Name of the runner group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
        /// </summary>
        [Input("restrictedToWorkflows")]
        public Input<bool>? RestrictedToWorkflows { get; set; }

        [Input("selectedOrganizationIds")]
        private InputList<int>? _selectedOrganizationIds;

        /// <summary>
        /// IDs of the organizations which should be added to the runner group
        /// </summary>
        public InputList<int> SelectedOrganizationIds
        {
            get => _selectedOrganizationIds ?? (_selectedOrganizationIds = new InputList<int>());
            set => _selectedOrganizationIds = value;
        }

        [Input("selectedWorkflows")]
        private InputList<string>? _selectedWorkflows;

        /// <summary>
        /// List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
        /// </summary>
        public InputList<string> SelectedWorkflows
        {
            get => _selectedWorkflows ?? (_selectedWorkflows = new InputList<string>());
            set => _selectedWorkflows = value;
        }

        /// <summary>
        /// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
        /// </summary>
        [Input("visibility", required: true)]
        public Input<string> Visibility { get; set; } = null!;

        public EnterpriseActionsRunnerGroupArgs()
        {
        }
        public static new EnterpriseActionsRunnerGroupArgs Empty => new EnterpriseActionsRunnerGroupArgs();
    }

    public sealed class EnterpriseActionsRunnerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether public repositories can be added to the runner group. Defaults to false.
        /// </summary>
        [Input("allowsPublicRepositories")]
        public Input<bool>? AllowsPublicRepositories { get; set; }

        /// <summary>
        /// Whether this is the default runner group
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The slug of the enterprise.
        /// </summary>
        [Input("enterpriseSlug")]
        public Input<string>? EnterpriseSlug { get; set; }

        /// <summary>
        /// An etag representing the runner group object
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Name of the runner group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
        /// </summary>
        [Input("restrictedToWorkflows")]
        public Input<bool>? RestrictedToWorkflows { get; set; }

        /// <summary>
        /// The GitHub API URL for the runner group's runners
        /// </summary>
        [Input("runnersUrl")]
        public Input<string>? RunnersUrl { get; set; }

        [Input("selectedOrganizationIds")]
        private InputList<int>? _selectedOrganizationIds;

        /// <summary>
        /// IDs of the organizations which should be added to the runner group
        /// </summary>
        public InputList<int> SelectedOrganizationIds
        {
            get => _selectedOrganizationIds ?? (_selectedOrganizationIds = new InputList<int>());
            set => _selectedOrganizationIds = value;
        }

        /// <summary>
        /// The GitHub API URL for the runner group's selected organizations
        /// </summary>
        [Input("selectedOrganizationsUrl")]
        public Input<string>? SelectedOrganizationsUrl { get; set; }

        [Input("selectedWorkflows")]
        private InputList<string>? _selectedWorkflows;

        /// <summary>
        /// List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
        /// </summary>
        public InputList<string> SelectedWorkflows
        {
            get => _selectedWorkflows ?? (_selectedWorkflows = new InputList<string>());
            set => _selectedWorkflows = value;
        }

        /// <summary>
        /// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public EnterpriseActionsRunnerGroupState()
        {
        }
        public static new EnterpriseActionsRunnerGroupState Empty => new EnterpriseActionsRunnerGroupState();
    }
}
