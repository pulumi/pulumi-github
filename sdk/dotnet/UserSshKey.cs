// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// Provides a GitHub user's SSH key resource.
    /// 
    /// This resource allows you to add/remove SSH keys from your user account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Github.UserSshKey("example", new()
    ///     {
    ///         Title = "example title",
    ///         Key = File.ReadAllText("~/.ssh/id_rsa.pub"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSH keys can be imported using their ID e.g.
    /// 
    /// ```sh
    ///  $ pulumi import github:index/userSshKey:UserSshKey example 1234567
    /// ```
    /// </summary>
    [GithubResourceType("github:index/userSshKey:UserSshKey")]
    public partial class UserSshKey : global::Pulumi.CustomResource
    {
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The public SSH key to add to your GitHub account.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// A descriptive name for the new key. e.g. `Personal MacBook Air`
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The URL of the SSH key
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a UserSshKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserSshKey(string name, UserSshKeyArgs args, CustomResourceOptions? options = null)
            : base("github:index/userSshKey:UserSshKey", name, args ?? new UserSshKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserSshKey(string name, Input<string> id, UserSshKeyState? state = null, CustomResourceOptions? options = null)
            : base("github:index/userSshKey:UserSshKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserSshKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserSshKey Get(string name, Input<string> id, UserSshKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new UserSshKey(name, id, state, options);
        }
    }

    public sealed class UserSshKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The public SSH key to add to your GitHub account.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// A descriptive name for the new key. e.g. `Personal MacBook Air`
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public UserSshKeyArgs()
        {
        }
        public static new UserSshKeyArgs Empty => new UserSshKeyArgs();
    }

    public sealed class UserSshKeyState : global::Pulumi.ResourceArgs
    {
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// The public SSH key to add to your GitHub account.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// A descriptive name for the new key. e.g. `Personal MacBook Air`
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The URL of the SSH key
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public UserSshKeyState()
        {
        }
        public static new UserSshKeyState Empty => new UserSshKeyState();
    }
}
