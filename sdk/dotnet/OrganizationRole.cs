// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// Manage a custom organization role.
    /// 
    /// &gt; **Note**: Custom organization roles are currently only available in GitHub Enterprise Cloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Github.OrganizationRole("example", new()
    ///     {
    ///         Name = "example",
    ///         BaseRole = "read",
    ///         Permissions = new[]
    ///         {
    ///             "read_organization_custom_org_role",
    ///             "read_organization_custom_repo_role",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A custom organization role can be imported using its ID.
    /// 
    /// ```sh
    /// $ pulumi import github:index/organizationRole:OrganizationRole example 1234
    /// ```
    /// </summary>
    [GithubResourceType("github:index/organizationRole:OrganizationRole")]
    public partial class OrganizationRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The system role from which this role inherits permissions.
        /// </summary>
        [Output("baseRole")]
        public Output<string> BaseRole { get; private set; } = null!;

        /// <summary>
        /// The description of the organization role.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the organization role.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The permissions included in this role.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The ID of the organization role.
        /// </summary>
        [Output("roleId")]
        public Output<int> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationRole(string name, OrganizationRoleArgs args, CustomResourceOptions? options = null)
            : base("github:index/organizationRole:OrganizationRole", name, args ?? new OrganizationRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationRole(string name, Input<string> id, OrganizationRoleState? state = null, CustomResourceOptions? options = null)
            : base("github:index/organizationRole:OrganizationRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationRole Get(string name, Input<string> id, OrganizationRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationRole(name, id, state, options);
        }
    }

    public sealed class OrganizationRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The system role from which this role inherits permissions.
        /// </summary>
        [Input("baseRole")]
        public Input<string>? BaseRole { get; set; }

        /// <summary>
        /// The description of the organization role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the organization role.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions included in this role.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public OrganizationRoleArgs()
        {
        }
        public static new OrganizationRoleArgs Empty => new OrganizationRoleArgs();
    }

    public sealed class OrganizationRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The system role from which this role inherits permissions.
        /// </summary>
        [Input("baseRole")]
        public Input<string>? BaseRole { get; set; }

        /// <summary>
        /// The description of the organization role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the organization role.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// The permissions included in this role.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The ID of the organization role.
        /// </summary>
        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        public OrganizationRoleState()
        {
        }
        public static new OrganizationRoleState Empty => new OrganizationRoleState();
    }
}
