// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    public static class GetRepositoryPullRequest
    {
        /// <summary>
        /// Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
        /// </summary>
        public static Task<GetRepositoryPullRequestResult> InvokeAsync(GetRepositoryPullRequestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryPullRequestResult>("github:index/getRepositoryPullRequest:getRepositoryPullRequest", args ?? new GetRepositoryPullRequestArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
        /// </summary>
        public static Output<GetRepositoryPullRequestResult> Invoke(GetRepositoryPullRequestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryPullRequestResult>("github:index/getRepositoryPullRequest:getRepositoryPullRequest", args ?? new GetRepositoryPullRequestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryPullRequestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the base repository to retrieve the Pull Request from.
        /// </summary>
        [Input("baseRepository", required: true)]
        public string BaseRepository { get; set; } = null!;

        /// <summary>
        /// The number of the Pull Request within the repository.
        /// </summary>
        [Input("number", required: true)]
        public int Number { get; set; }

        /// <summary>
        /// Owner of the repository. If not provided, the provider's default owner is used.
        /// </summary>
        [Input("owner")]
        public string? Owner { get; set; }

        public GetRepositoryPullRequestArgs()
        {
        }
        public static new GetRepositoryPullRequestArgs Empty => new GetRepositoryPullRequestArgs();
    }

    public sealed class GetRepositoryPullRequestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the base repository to retrieve the Pull Request from.
        /// </summary>
        [Input("baseRepository", required: true)]
        public Input<string> BaseRepository { get; set; } = null!;

        /// <summary>
        /// The number of the Pull Request within the repository.
        /// </summary>
        [Input("number", required: true)]
        public Input<int> Number { get; set; } = null!;

        /// <summary>
        /// Owner of the repository. If not provided, the provider's default owner is used.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        public GetRepositoryPullRequestInvokeArgs()
        {
        }
        public static new GetRepositoryPullRequestInvokeArgs Empty => new GetRepositoryPullRequestInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryPullRequestResult
    {
        /// <summary>
        /// Name of the ref (branch) of the Pull Request base.
        /// </summary>
        public readonly string BaseRef;
        public readonly string BaseRepository;
        /// <summary>
        /// Head commit SHA of the Pull Request base.
        /// </summary>
        public readonly string BaseSha;
        /// <summary>
        /// Body of the Pull Request.
        /// </summary>
        public readonly string Body;
        /// <summary>
        /// Indicates Whether this Pull Request is a draft.
        /// </summary>
        public readonly bool Draft;
        /// <summary>
        /// Owner of the Pull Request head repository.
        /// </summary>
        public readonly string HeadOwner;
        public readonly string HeadRef;
        /// <summary>
        /// Name of the Pull Request head repository.
        /// </summary>
        public readonly string HeadRepository;
        /// <summary>
        /// Head commit SHA of the Pull Request head.
        /// </summary>
        public readonly string HeadSha;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of label names set on the Pull Request.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Indicates whether the base repository maintainers can modify the Pull Request.
        /// </summary>
        public readonly bool MaintainerCanModify;
        public readonly int Number;
        /// <summary>
        /// Unix timestamp indicating the Pull Request creation time.
        /// </summary>
        public readonly int OpenedAt;
        /// <summary>
        /// GitHub login of the user who opened the Pull Request.
        /// </summary>
        public readonly string OpenedBy;
        public readonly string? Owner;
        /// <summary>
        /// the current Pull Request state - can be "open", "closed" or "merged".
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The title of the Pull Request.
        /// </summary>
        public readonly string Title;
        /// <summary>
        /// The timestamp of the last Pull Request update.
        /// </summary>
        public readonly int UpdatedAt;

        [OutputConstructor]
        private GetRepositoryPullRequestResult(
            string baseRef,

            string baseRepository,

            string baseSha,

            string body,

            bool draft,

            string headOwner,

            string headRef,

            string headRepository,

            string headSha,

            string id,

            ImmutableArray<string> labels,

            bool maintainerCanModify,

            int number,

            int openedAt,

            string openedBy,

            string? owner,

            string state,

            string title,

            int updatedAt)
        {
            BaseRef = baseRef;
            BaseRepository = baseRepository;
            BaseSha = baseSha;
            Body = body;
            Draft = draft;
            HeadOwner = headOwner;
            HeadRef = headRef;
            HeadRepository = headRepository;
            HeadSha = headSha;
            Id = id;
            Labels = labels;
            MaintainerCanModify = maintainerCanModify;
            Number = number;
            OpenedAt = openedAt;
            OpenedBy = openedBy;
            Owner = owner;
            State = state;
            Title = title;
            UpdatedAt = updatedAt;
        }
    }
}
