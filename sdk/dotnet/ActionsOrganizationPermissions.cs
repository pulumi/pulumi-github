// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// This resource allows you to create and manage GitHub Actions permissions within your GitHub enterprise organizations.
    /// You must have admin access to an organization to use this resource.
    /// 
    /// ## Import
    /// 
    /// This resource can be imported using the ID of the GitHub organization:
    /// 
    /// ```sh
    ///  $ pulumi import github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions test &lt;github_organization_name&gt;
    /// ```
    /// </summary>
    [GithubResourceType("github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions")]
    public partial class ActionsOrganizationPermissions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
        /// </summary>
        [Output("allowedActions")]
        public Output<string?> AllowedActions { get; private set; } = null!;

        /// <summary>
        /// Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.
        /// </summary>
        [Output("allowedActionsConfig")]
        public Output<Outputs.ActionsOrganizationPermissionsAllowedActionsConfig?> AllowedActionsConfig { get; private set; } = null!;

        /// <summary>
        /// The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
        /// </summary>
        [Output("enabledRepositories")]
        public Output<string> EnabledRepositories { get; private set; } = null!;

        /// <summary>
        /// Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.
        /// </summary>
        [Output("enabledRepositoriesConfig")]
        public Output<Outputs.ActionsOrganizationPermissionsEnabledRepositoriesConfig?> EnabledRepositoriesConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ActionsOrganizationPermissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ActionsOrganizationPermissions(string name, ActionsOrganizationPermissionsArgs args, CustomResourceOptions? options = null)
            : base("github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions", name, args ?? new ActionsOrganizationPermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ActionsOrganizationPermissions(string name, Input<string> id, ActionsOrganizationPermissionsState? state = null, CustomResourceOptions? options = null)
            : base("github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ActionsOrganizationPermissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ActionsOrganizationPermissions Get(string name, Input<string> id, ActionsOrganizationPermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new ActionsOrganizationPermissions(name, id, state, options);
        }
    }

    public sealed class ActionsOrganizationPermissionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
        /// </summary>
        [Input("allowedActions")]
        public Input<string>? AllowedActions { get; set; }

        /// <summary>
        /// Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.
        /// </summary>
        [Input("allowedActionsConfig")]
        public Input<Inputs.ActionsOrganizationPermissionsAllowedActionsConfigArgs>? AllowedActionsConfig { get; set; }

        /// <summary>
        /// The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
        /// </summary>
        [Input("enabledRepositories", required: true)]
        public Input<string> EnabledRepositories { get; set; } = null!;

        /// <summary>
        /// Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.
        /// </summary>
        [Input("enabledRepositoriesConfig")]
        public Input<Inputs.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs>? EnabledRepositoriesConfig { get; set; }

        public ActionsOrganizationPermissionsArgs()
        {
        }
        public static new ActionsOrganizationPermissionsArgs Empty => new ActionsOrganizationPermissionsArgs();
    }

    public sealed class ActionsOrganizationPermissionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
        /// </summary>
        [Input("allowedActions")]
        public Input<string>? AllowedActions { get; set; }

        /// <summary>
        /// Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.
        /// </summary>
        [Input("allowedActionsConfig")]
        public Input<Inputs.ActionsOrganizationPermissionsAllowedActionsConfigGetArgs>? AllowedActionsConfig { get; set; }

        /// <summary>
        /// The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
        /// </summary>
        [Input("enabledRepositories")]
        public Input<string>? EnabledRepositories { get; set; }

        /// <summary>
        /// Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.
        /// </summary>
        [Input("enabledRepositoriesConfig")]
        public Input<Inputs.ActionsOrganizationPermissionsEnabledRepositoriesConfigGetArgs>? EnabledRepositoriesConfig { get; set; }

        public ActionsOrganizationPermissionsState()
        {
        }
        public static new ActionsOrganizationPermissionsState Empty => new ActionsOrganizationPermissionsState();
    }
}
