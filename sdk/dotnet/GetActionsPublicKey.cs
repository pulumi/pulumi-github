// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Github
{
    public static class GetActionsPublicKey
    {
        /// <summary>
        /// Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
        /// Note that the provider `token` must have admin rights to a repository to retrieve it's action public key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Github.GetActionsPublicKey.InvokeAsync(new Github.GetActionsPublicKeyArgs
        ///         {
        ///             Repository = "example_repo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetActionsPublicKeyResult> InvokeAsync(GetActionsPublicKeyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetActionsPublicKeyResult>("github:index/getActionsPublicKey:getActionsPublicKey", args ?? new GetActionsPublicKeyArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
        /// Note that the provider `token` must have admin rights to a repository to retrieve it's action public key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Github.GetActionsPublicKey.InvokeAsync(new Github.GetActionsPublicKeyArgs
        ///         {
        ///             Repository = "example_repo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetActionsPublicKeyResult> Invoke(GetActionsPublicKeyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetActionsPublicKeyResult>("github:index/getActionsPublicKey:getActionsPublicKey", args ?? new GetActionsPublicKeyInvokeArgs(), options.WithVersion());
    }


    public sealed class GetActionsPublicKeyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the repository to get public key from.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        public GetActionsPublicKeyArgs()
        {
        }
    }

    public sealed class GetActionsPublicKeyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the repository to get public key from.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public GetActionsPublicKeyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetActionsPublicKeyResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Actual key retrieved.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// ID of the key that has been retrieved.
        /// </summary>
        public readonly string KeyId;
        public readonly string Repository;

        [OutputConstructor]
        private GetActionsPublicKeyResult(
            string id,

            string key,

            string keyId,

            string repository)
        {
            Id = id;
            Key = key;
            KeyId = keyId;
            Repository = repository;
        }
    }
}
