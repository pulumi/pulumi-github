// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    /// <summary>
    /// Manage an association between an organization role and a team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Github = Pulumi.Github;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Github.OrganizationRoleTeam("example", new()
    ///     {
    ///         RoleId = 1234,
    ///         TeamSlug = "example-team",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An organization role team association can be imported using the role ID and the team slug separated by a `:`.
    /// 
    /// ```sh
    /// $ pulumi import github:index/organizationRoleTeam:OrganizationRoleTeam example "1234:example-team"
    /// ```
    /// </summary>
    [GithubResourceType("github:index/organizationRoleTeam:OrganizationRoleTeam")]
    public partial class OrganizationRoleTeam : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the organization role.
        /// </summary>
        [Output("roleId")]
        public Output<int> RoleId { get; private set; } = null!;

        /// <summary>
        /// The slug of the team name.
        /// </summary>
        [Output("teamSlug")]
        public Output<string> TeamSlug { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationRoleTeam resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationRoleTeam(string name, OrganizationRoleTeamArgs args, CustomResourceOptions? options = null)
            : base("github:index/organizationRoleTeam:OrganizationRoleTeam", name, args ?? new OrganizationRoleTeamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationRoleTeam(string name, Input<string> id, OrganizationRoleTeamState? state = null, CustomResourceOptions? options = null)
            : base("github:index/organizationRoleTeam:OrganizationRoleTeam", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationRoleTeam resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationRoleTeam Get(string name, Input<string> id, OrganizationRoleTeamState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationRoleTeam(name, id, state, options);
        }
    }

    public sealed class OrganizationRoleTeamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the organization role.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<int> RoleId { get; set; } = null!;

        /// <summary>
        /// The slug of the team name.
        /// </summary>
        [Input("teamSlug", required: true)]
        public Input<string> TeamSlug { get; set; } = null!;

        public OrganizationRoleTeamArgs()
        {
        }
        public static new OrganizationRoleTeamArgs Empty => new OrganizationRoleTeamArgs();
    }

    public sealed class OrganizationRoleTeamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the organization role.
        /// </summary>
        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        /// <summary>
        /// The slug of the team name.
        /// </summary>
        [Input("teamSlug")]
        public Input<string>? TeamSlug { get; set; }

        public OrganizationRoleTeamState()
        {
        }
        public static new OrganizationRoleTeamState Empty => new OrganizationRoleTeamState();
    }
}
