// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    public static class GetOrganizationRepositoryRole
    {
        /// <summary>
        /// Lookup a custom organization repository role.
        /// 
        /// &gt; **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Github.GetOrganizationRepositoryRole.Invoke(new()
        ///     {
        ///         RoleId = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrganizationRepositoryRoleResult> InvokeAsync(GetOrganizationRepositoryRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationRepositoryRoleResult>("github:index/getOrganizationRepositoryRole:getOrganizationRepositoryRole", args ?? new GetOrganizationRepositoryRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Lookup a custom organization repository role.
        /// 
        /// &gt; **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Github.GetOrganizationRepositoryRole.Invoke(new()
        ///     {
        ///         RoleId = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrganizationRepositoryRoleResult> Invoke(GetOrganizationRepositoryRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationRepositoryRoleResult>("github:index/getOrganizationRepositoryRole:getOrganizationRepositoryRole", args ?? new GetOrganizationRepositoryRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Lookup a custom organization repository role.
        /// 
        /// &gt; **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Github = Pulumi.Github;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Github.GetOrganizationRepositoryRole.Invoke(new()
        ///     {
        ///         RoleId = 1234,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrganizationRepositoryRoleResult> Invoke(GetOrganizationRepositoryRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationRepositoryRoleResult>("github:index/getOrganizationRepositoryRole:getOrganizationRepositoryRole", args ?? new GetOrganizationRepositoryRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationRepositoryRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the organization repository role.
        /// </summary>
        [Input("roleId", required: true)]
        public int RoleId { get; set; }

        public GetOrganizationRepositoryRoleArgs()
        {
        }
        public static new GetOrganizationRepositoryRoleArgs Empty => new GetOrganizationRepositoryRoleArgs();
    }

    public sealed class GetOrganizationRepositoryRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the organization repository role.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<int> RoleId { get; set; } = null!;

        public GetOrganizationRepositoryRoleInvokeArgs()
        {
        }
        public static new GetOrganizationRepositoryRoleInvokeArgs Empty => new GetOrganizationRepositoryRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationRepositoryRoleResult
    {
        /// <summary>
        /// The system role from which this role inherits permissions.
        /// </summary>
        public readonly string BaseRole;
        /// <summary>
        /// The description of the organization repository role.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the organization repository role.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The permissions included in this role.
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// The ID of the organization repository role.
        /// </summary>
        public readonly int RoleId;

        [OutputConstructor]
        private GetOrganizationRepositoryRoleResult(
            string baseRole,

            string description,

            string id,

            string name,

            ImmutableArray<string> permissions,

            int roleId)
        {
            BaseRole = baseRole;
            Description = description;
            Id = id;
            Name = name;
            Permissions = permissions;
            RoleId = roleId;
        }
    }
}
