// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Github
{
    public static class GetRepositoryPullRequests
    {
        public static Task<GetRepositoryPullRequestsResult> InvokeAsync(GetRepositoryPullRequestsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryPullRequestsResult>("github:index/getRepositoryPullRequests:getRepositoryPullRequests", args ?? new GetRepositoryPullRequestsArgs(), options.WithDefaults());

        public static Output<GetRepositoryPullRequestsResult> Invoke(GetRepositoryPullRequestsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRepositoryPullRequestsResult>("github:index/getRepositoryPullRequests:getRepositoryPullRequests", args ?? new GetRepositoryPullRequestsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryPullRequestsArgs : global::Pulumi.InvokeArgs
    {
        [Input("baseRef")]
        public string? BaseRef { get; set; }

        [Input("baseRepository", required: true)]
        public string BaseRepository { get; set; } = null!;

        [Input("headRef")]
        public string? HeadRef { get; set; }

        [Input("owner")]
        public string? Owner { get; set; }

        [Input("sortBy")]
        public string? SortBy { get; set; }

        [Input("sortDirection")]
        public string? SortDirection { get; set; }

        [Input("state")]
        public string? State { get; set; }

        public GetRepositoryPullRequestsArgs()
        {
        }
        public static new GetRepositoryPullRequestsArgs Empty => new GetRepositoryPullRequestsArgs();
    }

    public sealed class GetRepositoryPullRequestsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("baseRef")]
        public Input<string>? BaseRef { get; set; }

        [Input("baseRepository", required: true)]
        public Input<string> BaseRepository { get; set; } = null!;

        [Input("headRef")]
        public Input<string>? HeadRef { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        [Input("sortDirection")]
        public Input<string>? SortDirection { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        public GetRepositoryPullRequestsInvokeArgs()
        {
        }
        public static new GetRepositoryPullRequestsInvokeArgs Empty => new GetRepositoryPullRequestsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryPullRequestsResult
    {
        public readonly string? BaseRef;
        public readonly string BaseRepository;
        public readonly string? HeadRef;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Owner;
        public readonly ImmutableArray<Outputs.GetRepositoryPullRequestsResultResult> Results;
        public readonly string? SortBy;
        public readonly string? SortDirection;
        public readonly string? State;

        [OutputConstructor]
        private GetRepositoryPullRequestsResult(
            string? baseRef,

            string baseRepository,

            string? headRef,

            string id,

            string? owner,

            ImmutableArray<Outputs.GetRepositoryPullRequestsResultResult> results,

            string? sortBy,

            string? sortDirection,

            string? state)
        {
            BaseRef = baseRef;
            BaseRepository = baseRepository;
            HeadRef = headRef;
            Id = id;
            Owner = owner;
            Results = results;
            SortBy = sortBy;
            SortDirection = sortDirection;
            State = state;
        }
    }
}
