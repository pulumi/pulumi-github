# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class BranchProtection(pulumi.CustomResource):
    branch: pulumi.Output[str]
    """
    The Git branch to protect.
    """
    enforce_admins: pulumi.Output[bool]
    """
    Boolean, setting this to `true` enforces status checks for repository administrators.
    """
    etag: pulumi.Output[str]
    repository: pulumi.Output[str]
    """
    The GitHub repository name.
    """
    required_pull_request_reviews: pulumi.Output[dict]
    """
    Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
    """
    required_status_checks: pulumi.Output[dict]
    """
    Enforce restrictions for required status checks. See Required Status Checks below for details.
    """
    restrictions: pulumi.Output[dict]
    """
    Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
    """
    def __init__(__self__, resource_name, opts=None, branch=None, enforce_admins=None, repository=None, required_pull_request_reviews=None, required_status_checks=None, restrictions=None, __name__=None, __opts__=None):
        """
        Protects a GitHub branch.
        
        This resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users and teams, can also be configured.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] branch: The Git branch to protect.
        :param pulumi.Input[bool] enforce_admins: Boolean, setting this to `true` enforces status checks for repository administrators.
        :param pulumi.Input[str] repository: The GitHub repository name.
        :param pulumi.Input[dict] required_pull_request_reviews: Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
        :param pulumi.Input[dict] required_status_checks: Enforce restrictions for required status checks. See Required Status Checks below for details.
        :param pulumi.Input[dict] restrictions: Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if branch is None:
            raise TypeError("Missing required property 'branch'")
        __props__['branch'] = branch

        __props__['enforce_admins'] = enforce_admins

        if repository is None:
            raise TypeError("Missing required property 'repository'")
        __props__['repository'] = repository

        __props__['required_pull_request_reviews'] = required_pull_request_reviews

        __props__['required_status_checks'] = required_status_checks

        __props__['restrictions'] = restrictions

        __props__['etag'] = None

        super(BranchProtection, __self__).__init__(
            'github:repos/branchProtection:BranchProtection',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

