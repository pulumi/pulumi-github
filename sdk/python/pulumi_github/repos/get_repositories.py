# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetRepositoriesResult:
    """
    A collection of values returned by getRepositories.
    """
    def __init__(__self__, full_names=None, names=None, query=None, id=None):
        if full_names and not isinstance(full_names, list):
            raise TypeError("Expected argument 'full_names' to be a list")
        __self__.full_names = full_names
        """
        A list of full names of found repositories (e.g. `hashicorp/terraform`)
        """
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        A list of found repository names (e.g. `terraform`)
        """
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        __self__.query = query
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_repositories(query=None,opts=None):
    """
    > **Note:** The data source will return a maximum of `1000` repositories
    	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
    
    Use this data source to retrieve a list of GitHub repositories using a search query.
    """
    __args__ = dict()

    __args__['query'] = query
    __ret__ = await pulumi.runtime.invoke('github:repos/getRepositories:getRepositories', __args__, opts=opts)

    return GetRepositoriesResult(
        full_names=__ret__.get('fullNames'),
        names=__ret__.get('names'),
        query=__ret__.get('query'),
        id=__ret__.get('id'))
