# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OrganizationSecurityManagerArgs', 'OrganizationSecurityManager']

@pulumi.input_type
class OrganizationSecurityManagerArgs:
    def __init__(__self__, *,
                 team_slug: pulumi.Input[str]):
        """
        The set of arguments for constructing a OrganizationSecurityManager resource.
        :param pulumi.Input[str] team_slug: The slug of the team to manage.
        """
        pulumi.set(__self__, "team_slug", team_slug)

    @property
    @pulumi.getter(name="teamSlug")
    def team_slug(self) -> pulumi.Input[str]:
        """
        The slug of the team to manage.
        """
        return pulumi.get(self, "team_slug")

    @team_slug.setter
    def team_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_slug", value)


@pulumi.input_type
class _OrganizationSecurityManagerState:
    def __init__(__self__, *,
                 team_slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrganizationSecurityManager resources.
        :param pulumi.Input[str] team_slug: The slug of the team to manage.
        """
        if team_slug is not None:
            pulumi.set(__self__, "team_slug", team_slug)

    @property
    @pulumi.getter(name="teamSlug")
    def team_slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the team to manage.
        """
        return pulumi.get(self, "team_slug")

    @team_slug.setter
    def team_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_slug", value)


class OrganizationSecurityManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 team_slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_github as github

        some_team_team = github.Team("someTeamTeam", description="Some cool team")
        some_team_organization_security_manager = github.OrganizationSecurityManager("someTeamOrganizationSecurityManager", team_slug=some_team_team.slug)
        ```

        ## Import

        GitHub Security Manager Teams can be imported using the GitHub team ID e.g.

        ```sh
         $ pulumi import github:index/organizationSecurityManager:OrganizationSecurityManager core 1234567
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] team_slug: The slug of the team to manage.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationSecurityManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_github as github

        some_team_team = github.Team("someTeamTeam", description="Some cool team")
        some_team_organization_security_manager = github.OrganizationSecurityManager("someTeamOrganizationSecurityManager", team_slug=some_team_team.slug)
        ```

        ## Import

        GitHub Security Manager Teams can be imported using the GitHub team ID e.g.

        ```sh
         $ pulumi import github:index/organizationSecurityManager:OrganizationSecurityManager core 1234567
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationSecurityManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationSecurityManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 team_slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationSecurityManagerArgs.__new__(OrganizationSecurityManagerArgs)

            if team_slug is None and not opts.urn:
                raise TypeError("Missing required property 'team_slug'")
            __props__.__dict__["team_slug"] = team_slug
        super(OrganizationSecurityManager, __self__).__init__(
            'github:index/organizationSecurityManager:OrganizationSecurityManager',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            team_slug: Optional[pulumi.Input[str]] = None) -> 'OrganizationSecurityManager':
        """
        Get an existing OrganizationSecurityManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] team_slug: The slug of the team to manage.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationSecurityManagerState.__new__(_OrganizationSecurityManagerState)

        __props__.__dict__["team_slug"] = team_slug
        return OrganizationSecurityManager(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="teamSlug")
    def team_slug(self) -> pulumi.Output[str]:
        """
        The slug of the team to manage.
        """
        return pulumi.get(self, "team_slug")

