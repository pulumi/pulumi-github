# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetOrganizationCustomPropertiesResult',
    'AwaitableGetOrganizationCustomPropertiesResult',
    'get_organization_custom_properties',
    'get_organization_custom_properties_output',
]

@pulumi.output_type
class GetOrganizationCustomPropertiesResult:
    """
    A collection of values returned by getOrganizationCustomProperties.
    """
    def __init__(__self__, allowed_values=None, default_value=None, description=None, id=None, property_name=None, required=None, value_type=None):
        if allowed_values and not isinstance(allowed_values, list):
            raise TypeError("Expected argument 'allowed_values' to be a list")
        pulumi.set(__self__, "allowed_values", allowed_values)
        if default_value and not isinstance(default_value, str):
            raise TypeError("Expected argument 'default_value' to be a str")
        pulumi.set(__self__, "default_value", default_value)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if property_name and not isinstance(property_name, str):
            raise TypeError("Expected argument 'property_name' to be a str")
        pulumi.set(__self__, "property_name", property_name)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if value_type and not isinstance(value_type, str):
            raise TypeError("Expected argument 'value_type' to be a str")
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence[_builtins.str]:
        """
        List of allowed values for the custom property. Only populated when `value_type` is `single_select` or `multi_select`.
        """
        return pulumi.get(self, "allowed_values")

    @_builtins.property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> _builtins.str:
        """
        The default value of the custom property.
        """
        return pulumi.get(self, "default_value")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the custom property.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> _builtins.str:
        """
        The name of the custom property.
        """
        return pulumi.get(self, "property_name")

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[_builtins.bool]:
        """
        Whether the custom property is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[_builtins.str]:
        """
        The type of the custom property. Can be one of `string`, `single_select`, `multi_select`, or `true_false`.
        """
        return pulumi.get(self, "value_type")


class AwaitableGetOrganizationCustomPropertiesResult(GetOrganizationCustomPropertiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationCustomPropertiesResult(
            allowed_values=self.allowed_values,
            default_value=self.default_value,
            description=self.description,
            id=self.id,
            property_name=self.property_name,
            required=self.required,
            value_type=self.value_type)


def get_organization_custom_properties(allowed_values: Optional[Sequence[_builtins.str]] = None,
                                       default_value: Optional[_builtins.str] = None,
                                       description: Optional[_builtins.str] = None,
                                       property_name: Optional[_builtins.str] = None,
                                       required: Optional[_builtins.bool] = None,
                                       value_type: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationCustomPropertiesResult:
    """
    Use this data source to retrieve information about a GitHub organization custom property.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_github as github

    environment = github.get_organization_custom_properties(property_name="environment")
    ```


    :param Sequence[_builtins.str] allowed_values: List of allowed values for the custom property. Only populated when `value_type` is `single_select` or `multi_select`.
    :param _builtins.str default_value: The default value of the custom property.
    :param _builtins.str description: The description of the custom property.
    :param _builtins.str property_name: The name of the custom property to retrieve.
    :param _builtins.bool required: Whether the custom property is required.
    :param _builtins.str value_type: The type of the custom property. Can be one of `string`, `single_select`, `multi_select`, or `true_false`.
    """
    __args__ = dict()
    __args__['allowedValues'] = allowed_values
    __args__['defaultValue'] = default_value
    __args__['description'] = description
    __args__['propertyName'] = property_name
    __args__['required'] = required
    __args__['valueType'] = value_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('github:index/getOrganizationCustomProperties:getOrganizationCustomProperties', __args__, opts=opts, typ=GetOrganizationCustomPropertiesResult).value

    return AwaitableGetOrganizationCustomPropertiesResult(
        allowed_values=pulumi.get(__ret__, 'allowed_values'),
        default_value=pulumi.get(__ret__, 'default_value'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        property_name=pulumi.get(__ret__, 'property_name'),
        required=pulumi.get(__ret__, 'required'),
        value_type=pulumi.get(__ret__, 'value_type'))
def get_organization_custom_properties_output(allowed_values: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              default_value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              property_name: Optional[pulumi.Input[_builtins.str]] = None,
                                              required: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              value_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationCustomPropertiesResult]:
    """
    Use this data source to retrieve information about a GitHub organization custom property.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_github as github

    environment = github.get_organization_custom_properties(property_name="environment")
    ```


    :param Sequence[_builtins.str] allowed_values: List of allowed values for the custom property. Only populated when `value_type` is `single_select` or `multi_select`.
    :param _builtins.str default_value: The default value of the custom property.
    :param _builtins.str description: The description of the custom property.
    :param _builtins.str property_name: The name of the custom property to retrieve.
    :param _builtins.bool required: Whether the custom property is required.
    :param _builtins.str value_type: The type of the custom property. Can be one of `string`, `single_select`, `multi_select`, or `true_false`.
    """
    __args__ = dict()
    __args__['allowedValues'] = allowed_values
    __args__['defaultValue'] = default_value
    __args__['description'] = description
    __args__['propertyName'] = property_name
    __args__['required'] = required
    __args__['valueType'] = value_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('github:index/getOrganizationCustomProperties:getOrganizationCustomProperties', __args__, opts=opts, typ=GetOrganizationCustomPropertiesResult)
    return __ret__.apply(lambda __response__: GetOrganizationCustomPropertiesResult(
        allowed_values=pulumi.get(__response__, 'allowed_values'),
        default_value=pulumi.get(__response__, 'default_value'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        property_name=pulumi.get(__response__, 'property_name'),
        required=pulumi.get(__response__, 'required'),
        value_type=pulumi.get(__response__, 'value_type')))
