# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetActionsEnvironmentVariablesResult',
    'AwaitableGetActionsEnvironmentVariablesResult',
    'get_actions_environment_variables',
    'get_actions_environment_variables_output',
]

@pulumi.output_type
class GetActionsEnvironmentVariablesResult:
    """
    A collection of values returned by getActionsEnvironmentVariables.
    """
    def __init__(__self__, environment=None, full_name=None, id=None, name=None, variables=None):
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if variables and not isinstance(variables, list):
            raise TypeError("Expected argument 'variables' to be a list")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the variable
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetActionsEnvironmentVariablesVariableResult']:
        """
        list of variables for the environment
        """
        return pulumi.get(self, "variables")


class AwaitableGetActionsEnvironmentVariablesResult(GetActionsEnvironmentVariablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetActionsEnvironmentVariablesResult(
            environment=self.environment,
            full_name=self.full_name,
            id=self.id,
            name=self.name,
            variables=self.variables)


def get_actions_environment_variables(environment: Optional[str] = None,
                                      full_name: Optional[str] = None,
                                      name: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetActionsEnvironmentVariablesResult:
    """
    Use this data source to retrieve the list of variables of the repository environment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_github as github

    example = github.get_actions_environment_variables(environment="exampleEnvironment",
        name="exampleRepo")
    ```


    :param str name: Name of the variable
    """
    __args__ = dict()
    __args__['environment'] = environment
    __args__['fullName'] = full_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('github:index/getActionsEnvironmentVariables:getActionsEnvironmentVariables', __args__, opts=opts, typ=GetActionsEnvironmentVariablesResult).value

    return AwaitableGetActionsEnvironmentVariablesResult(
        environment=pulumi.get(__ret__, 'environment'),
        full_name=pulumi.get(__ret__, 'full_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        variables=pulumi.get(__ret__, 'variables'))


@_utilities.lift_output_func(get_actions_environment_variables)
def get_actions_environment_variables_output(environment: Optional[pulumi.Input[str]] = None,
                                             full_name: Optional[pulumi.Input[Optional[str]]] = None,
                                             name: Optional[pulumi.Input[Optional[str]]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetActionsEnvironmentVariablesResult]:
    """
    Use this data source to retrieve the list of variables of the repository environment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_github as github

    example = github.get_actions_environment_variables(environment="exampleEnvironment",
        name="exampleRepo")
    ```


    :param str name: Name of the variable
    """
    ...
