# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GpgKey(pulumi.CustomResource):
    armored_public_key: pulumi.Output[str]
    """
    Your public GPG key, generated in ASCII-armored format.
    See [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.
    """
    etag: pulumi.Output[str]
    key_id: pulumi.Output[str]
    """
    The key ID of the GPG key, e.g. `3262EFF25BA0D270`
    """
    def __init__(__self__, resource_name, opts=None, armored_public_key=None, __name__=None, __opts__=None):
        """
        Provides a GitHub user's GPG key resource.
        
        This resource allows you to add/remove GPG keys from your user account.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] armored_public_key: Your public GPG key, generated in ASCII-armored format.
               See [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if armored_public_key is None:
            raise TypeError("Missing required property 'armored_public_key'")
        __props__['armored_public_key'] = armored_public_key

        __props__['etag'] = None
        __props__['key_id'] = None

        super(GpgKey, __self__).__init__(
            'github:users/gpgKey:GpgKey',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

