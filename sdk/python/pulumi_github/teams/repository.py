# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Repository(pulumi.CustomResource):
    etag: pulumi.Output[str]
    permission: pulumi.Output[str]
    """
    The permissions of team members regarding the repository.
    Must be one of `pull`, `push`, or `admin`. Defaults to `pull`.
    """
    repository: pulumi.Output[str]
    """
    The repository to add to the team.
    """
    team_id: pulumi.Output[str]
    """
    The GitHub team id
    """
    def __init__(__self__, resource_name, opts=None, permission=None, repository=None, team_id=None, __name__=None, __opts__=None):
        """
        This resource manages relationships between teams and repositories
        in your GitHub organization.
        
        Creating this resource grants a particular team permissions on a
        particular repository.
        
        The repository and the team must both belong to the same organization
        on GitHub. This resource does not actually *create* any repositories;
        to do that, see `github_repository`.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission: The permissions of team members regarding the repository.
               Must be one of `pull`, `push`, or `admin`. Defaults to `pull`.
        :param pulumi.Input[str] repository: The repository to add to the team.
        :param pulumi.Input[str] team_id: The GitHub team id
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['permission'] = permission

        if repository is None:
            raise TypeError("Missing required property 'repository'")
        __props__['repository'] = repository

        if team_id is None:
            raise TypeError("Missing required property 'team_id'")
        __props__['team_id'] = team_id

        __props__['etag'] = None

        super(Repository, __self__).__init__(
            'github:teams/repository:Repository',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

