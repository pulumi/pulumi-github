# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, description=None, members=None, name=None, permission=None, privacy=None, slug=None, id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        the team's description.
        """
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        __self__.members = members
        """
        List of team members
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        the team's full name.
        """
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        __self__.permission = permission
        """
        the team's permission level.
        """
        if privacy and not isinstance(privacy, str):
            raise TypeError("Expected argument 'privacy' to be a str")
        __self__.privacy = privacy
        """
        the team's privacy type.
        """
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        __self__.slug = slug
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_team(slug=None,opts=None):
    """
    Use this data source to retrieve information about a GitHub team.
    """
    __args__ = dict()

    __args__['slug'] = slug
    __ret__ = await pulumi.runtime.invoke('github:teams/getTeam:getTeam', __args__, opts=opts)

    return GetTeamResult(
        description=__ret__.get('description'),
        members=__ret__.get('members'),
        name=__ret__.get('name'),
        permission=__ret__.get('permission'),
        privacy=__ret__.get('privacy'),
        slug=__ret__.get('slug'),
        id=__ret__.get('id'))
