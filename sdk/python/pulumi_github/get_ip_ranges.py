# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetIpRangesResult:
    """
    A collection of values returned by getIpRanges.
    """
    def __init__(__self__, gits=None, hooks=None, importers=None, pages=None, id=None):
        if gits and not isinstance(gits, list):
            raise TypeError("Expected argument 'gits' to be a list")
        __self__.gits = gits
        """
        An Array of IP addresses in CIDR format specifying the Git servers.
        """
        if hooks and not isinstance(hooks, list):
            raise TypeError("Expected argument 'hooks' to be a list")
        __self__.hooks = hooks
        """
        An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.
        """
        if importers and not isinstance(importers, list):
            raise TypeError("Expected argument 'importers' to be a list")
        __self__.importers = importers
        """
        An Array of IP addresses in CIDR format specifying the A records for GitHub Importer.
        """
        if pages and not isinstance(pages, list):
            raise TypeError("Expected argument 'pages' to be a list")
        __self__.pages = pages
        """
        An Array of IP addresses in CIDR format specifying the A records for GitHub Pages.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_ip_ranges(opts=None):
    """
    Use this data source to retrieve information about a GitHub's IP addresses.
    """
    __args__ = dict()

    __ret__ = await pulumi.runtime.invoke('github:index/getIpRanges:getIpRanges', __args__, opts=opts)

    return GetIpRangesResult(
        gits=__ret__.get('gits'),
        hooks=__ret__.get('hooks'),
        importers=__ret__.get('importers'),
        pages=__ret__.get('pages'),
        id=__ret__.get('id'))
