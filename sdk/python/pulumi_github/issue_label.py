# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class IssueLabel(pulumi.CustomResource):
    color: pulumi.Output[str]
    """
    A 6 character hex code, **without the leading #**, identifying the color of the label.
    """
    description: pulumi.Output[str]
    """
    A short description of the label.
    """
    etag: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    The name of the label.
    """
    repository: pulumi.Output[str]
    """
    The GitHub repository
    """
    url: pulumi.Output[str]
    """
    The URL to the issue label
    """
    def __init__(__self__, resource_name, opts=None, color=None, description=None, name=None, repository=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a IssueLabel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: A 6 character hex code, **without the leading #**, identifying the color of the label.
        :param pulumi.Input[str] description: A short description of the label.
        :param pulumi.Input[str] name: The name of the label.
        :param pulumi.Input[str] repository: The GitHub repository
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if color is None:
                raise TypeError("Missing required property 'color'")
            __props__['color'] = color
            __props__['description'] = description
            __props__['name'] = name
            if repository is None:
                raise TypeError("Missing required property 'repository'")
            __props__['repository'] = repository
            __props__['etag'] = None
            __props__['url'] = None
        super(IssueLabel, __self__).__init__(
            'github:index/issueLabel:IssueLabel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, color=None, description=None, etag=None, name=None, repository=None, url=None):
        """
        Get an existing IssueLabel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: A 6 character hex code, **without the leading #**, identifying the color of the label.
        :param pulumi.Input[str] description: A short description of the label.
        :param pulumi.Input[str] name: The name of the label.
        :param pulumi.Input[str] repository: The GitHub repository
        :param pulumi.Input[str] url: The URL to the issue label
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["color"] = color
        __props__["description"] = description
        __props__["etag"] = etag
        __props__["name"] = name
        __props__["repository"] = repository
        __props__["url"] = url
        return IssueLabel(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
