// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage settings for a GitHub Organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const test = new github.OrganizationSettings("test", {
 *     billingEmail: "test@example.com",
 *     company: "Test Company",
 *     blog: "https://example.com",
 *     email: "test@example.com",
 *     twitterUsername: "Test",
 *     location: "Test Location",
 *     name: "Test Name",
 *     description: "Test Description",
 *     hasOrganizationProjects: true,
 *     hasRepositoryProjects: true,
 *     defaultRepositoryPermission: "read",
 *     membersCanCreateRepositories: true,
 *     membersCanCreatePublicRepositories: true,
 *     membersCanCreatePrivateRepositories: true,
 *     membersCanCreateInternalRepositories: true,
 *     membersCanCreatePages: true,
 *     membersCanCreatePublicPages: true,
 *     membersCanCreatePrivatePages: true,
 *     membersCanForkPrivateRepositories: true,
 *     webCommitSignoffRequired: true,
 *     advancedSecurityEnabledForNewRepositories: false,
 *     dependabotAlertsEnabledForNewRepositories: false,
 *     dependabotSecurityUpdatesEnabledForNewRepositories: false,
 *     dependencyGraphEnabledForNewRepositories: false,
 *     secretScanningEnabledForNewRepositories: false,
 *     secretScanningPushProtectionEnabledForNewRepositories: false,
 * });
 * ```
 *
 * ## Import
 *
 * Organization settings can be imported using the `id` of the organization.
 * The `id` of the organization can be found using the [get an organization](https://docs.github.com/en/rest/orgs/orgs#get-an-organization) API.
 *
 * ```sh
 * $ pulumi import github:index/organizationSettings:OrganizationSettings test 123456789
 * ```
 */
export class OrganizationSettings extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationSettingsState, opts?: pulumi.CustomResourceOptions): OrganizationSettings {
        return new OrganizationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/organizationSettings:OrganizationSettings';

    /**
     * Returns true if the given object is an instance of OrganizationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationSettings.__pulumiType;
    }

    /**
     * Whether or not advanced security is enabled for new repositories. Defaults to `false`.
     */
    declare public readonly advancedSecurityEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * The billing email address for the organization.
     */
    declare public readonly billingEmail: pulumi.Output<string>;
    /**
     * The blog URL for the organization.
     */
    declare public readonly blog: pulumi.Output<string | undefined>;
    /**
     * The company name for the organization.
     */
    declare public readonly company: pulumi.Output<string | undefined>;
    /**
     * The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.
     */
    declare public readonly defaultRepositoryPermission: pulumi.Output<string | undefined>;
    /**
     * Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.
     */
    declare public readonly dependabotAlertsEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.
     */
    declare public readonly dependabotSecurityUpdatesEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not dependency graph is enabled for new repositories. Defaults to `false`.
     */
    declare public readonly dependencyGraphEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * The description for the organization.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The email address for the organization.
     */
    declare public readonly email: pulumi.Output<string | undefined>;
    /**
     * Whether or not organization projects are enabled for the organization.
     */
    declare public readonly hasOrganizationProjects: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not repository projects are enabled for the organization.
     */
    declare public readonly hasRepositoryProjects: pulumi.Output<boolean | undefined>;
    /**
     * The location for the organization.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * Whether or not organization members can create new internal repositories. For Enterprise Organizations only.
     */
    declare public readonly membersCanCreateInternalRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new pages. Defaults to `true`.
     */
    declare public readonly membersCanCreatePages: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new private pages. Defaults to `true`.
     */
    declare public readonly membersCanCreatePrivatePages: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new private repositories. Defaults to `true`.
     */
    declare public readonly membersCanCreatePrivateRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new public pages. Defaults to `true`.
     */
    declare public readonly membersCanCreatePublicPages: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new public repositories. Defaults to `true`.
     */
    declare public readonly membersCanCreatePublicRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can create new repositories. Defaults to `true`.
     */
    declare public readonly membersCanCreateRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not organization members can fork private repositories. Defaults to `false`.
     */
    declare public readonly membersCanForkPrivateRepositories: pulumi.Output<boolean | undefined>;
    /**
     * The name for the organization.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether or not secret scanning is enabled for new repositories. Defaults to `false`.
     */
    declare public readonly secretScanningEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.
     */
    declare public readonly secretScanningPushProtectionEnabledForNewRepositories: pulumi.Output<boolean | undefined>;
    /**
     * The Twitter username for the organization.
     */
    declare public readonly twitterUsername: pulumi.Output<string | undefined>;
    /**
     * Whether or not commit signatures are required for commits to the organization. Defaults to `false`.
     */
    declare public readonly webCommitSignoffRequired: pulumi.Output<boolean | undefined>;

    /**
     * Create a OrganizationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationSettingsArgs | OrganizationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationSettingsState | undefined;
            resourceInputs["advancedSecurityEnabledForNewRepositories"] = state?.advancedSecurityEnabledForNewRepositories;
            resourceInputs["billingEmail"] = state?.billingEmail;
            resourceInputs["blog"] = state?.blog;
            resourceInputs["company"] = state?.company;
            resourceInputs["defaultRepositoryPermission"] = state?.defaultRepositoryPermission;
            resourceInputs["dependabotAlertsEnabledForNewRepositories"] = state?.dependabotAlertsEnabledForNewRepositories;
            resourceInputs["dependabotSecurityUpdatesEnabledForNewRepositories"] = state?.dependabotSecurityUpdatesEnabledForNewRepositories;
            resourceInputs["dependencyGraphEnabledForNewRepositories"] = state?.dependencyGraphEnabledForNewRepositories;
            resourceInputs["description"] = state?.description;
            resourceInputs["email"] = state?.email;
            resourceInputs["hasOrganizationProjects"] = state?.hasOrganizationProjects;
            resourceInputs["hasRepositoryProjects"] = state?.hasRepositoryProjects;
            resourceInputs["location"] = state?.location;
            resourceInputs["membersCanCreateInternalRepositories"] = state?.membersCanCreateInternalRepositories;
            resourceInputs["membersCanCreatePages"] = state?.membersCanCreatePages;
            resourceInputs["membersCanCreatePrivatePages"] = state?.membersCanCreatePrivatePages;
            resourceInputs["membersCanCreatePrivateRepositories"] = state?.membersCanCreatePrivateRepositories;
            resourceInputs["membersCanCreatePublicPages"] = state?.membersCanCreatePublicPages;
            resourceInputs["membersCanCreatePublicRepositories"] = state?.membersCanCreatePublicRepositories;
            resourceInputs["membersCanCreateRepositories"] = state?.membersCanCreateRepositories;
            resourceInputs["membersCanForkPrivateRepositories"] = state?.membersCanForkPrivateRepositories;
            resourceInputs["name"] = state?.name;
            resourceInputs["secretScanningEnabledForNewRepositories"] = state?.secretScanningEnabledForNewRepositories;
            resourceInputs["secretScanningPushProtectionEnabledForNewRepositories"] = state?.secretScanningPushProtectionEnabledForNewRepositories;
            resourceInputs["twitterUsername"] = state?.twitterUsername;
            resourceInputs["webCommitSignoffRequired"] = state?.webCommitSignoffRequired;
        } else {
            const args = argsOrState as OrganizationSettingsArgs | undefined;
            if (args?.billingEmail === undefined && !opts.urn) {
                throw new Error("Missing required property 'billingEmail'");
            }
            resourceInputs["advancedSecurityEnabledForNewRepositories"] = args?.advancedSecurityEnabledForNewRepositories;
            resourceInputs["billingEmail"] = args?.billingEmail;
            resourceInputs["blog"] = args?.blog;
            resourceInputs["company"] = args?.company;
            resourceInputs["defaultRepositoryPermission"] = args?.defaultRepositoryPermission;
            resourceInputs["dependabotAlertsEnabledForNewRepositories"] = args?.dependabotAlertsEnabledForNewRepositories;
            resourceInputs["dependabotSecurityUpdatesEnabledForNewRepositories"] = args?.dependabotSecurityUpdatesEnabledForNewRepositories;
            resourceInputs["dependencyGraphEnabledForNewRepositories"] = args?.dependencyGraphEnabledForNewRepositories;
            resourceInputs["description"] = args?.description;
            resourceInputs["email"] = args?.email;
            resourceInputs["hasOrganizationProjects"] = args?.hasOrganizationProjects;
            resourceInputs["hasRepositoryProjects"] = args?.hasRepositoryProjects;
            resourceInputs["location"] = args?.location;
            resourceInputs["membersCanCreateInternalRepositories"] = args?.membersCanCreateInternalRepositories;
            resourceInputs["membersCanCreatePages"] = args?.membersCanCreatePages;
            resourceInputs["membersCanCreatePrivatePages"] = args?.membersCanCreatePrivatePages;
            resourceInputs["membersCanCreatePrivateRepositories"] = args?.membersCanCreatePrivateRepositories;
            resourceInputs["membersCanCreatePublicPages"] = args?.membersCanCreatePublicPages;
            resourceInputs["membersCanCreatePublicRepositories"] = args?.membersCanCreatePublicRepositories;
            resourceInputs["membersCanCreateRepositories"] = args?.membersCanCreateRepositories;
            resourceInputs["membersCanForkPrivateRepositories"] = args?.membersCanForkPrivateRepositories;
            resourceInputs["name"] = args?.name;
            resourceInputs["secretScanningEnabledForNewRepositories"] = args?.secretScanningEnabledForNewRepositories;
            resourceInputs["secretScanningPushProtectionEnabledForNewRepositories"] = args?.secretScanningPushProtectionEnabledForNewRepositories;
            resourceInputs["twitterUsername"] = args?.twitterUsername;
            resourceInputs["webCommitSignoffRequired"] = args?.webCommitSignoffRequired;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationSettings resources.
 */
export interface OrganizationSettingsState {
    /**
     * Whether or not advanced security is enabled for new repositories. Defaults to `false`.
     */
    advancedSecurityEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The billing email address for the organization.
     */
    billingEmail?: pulumi.Input<string>;
    /**
     * The blog URL for the organization.
     */
    blog?: pulumi.Input<string>;
    /**
     * The company name for the organization.
     */
    company?: pulumi.Input<string>;
    /**
     * The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.
     */
    defaultRepositoryPermission?: pulumi.Input<string>;
    /**
     * Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.
     */
    dependabotAlertsEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.
     */
    dependabotSecurityUpdatesEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not dependency graph is enabled for new repositories. Defaults to `false`.
     */
    dependencyGraphEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The description for the organization.
     */
    description?: pulumi.Input<string>;
    /**
     * The email address for the organization.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether or not organization projects are enabled for the organization.
     */
    hasOrganizationProjects?: pulumi.Input<boolean>;
    /**
     * Whether or not repository projects are enabled for the organization.
     */
    hasRepositoryProjects?: pulumi.Input<boolean>;
    /**
     * The location for the organization.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether or not organization members can create new internal repositories. For Enterprise Organizations only.
     */
    membersCanCreateInternalRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new pages. Defaults to `true`.
     */
    membersCanCreatePages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new private pages. Defaults to `true`.
     */
    membersCanCreatePrivatePages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new private repositories. Defaults to `true`.
     */
    membersCanCreatePrivateRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new public pages. Defaults to `true`.
     */
    membersCanCreatePublicPages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new public repositories. Defaults to `true`.
     */
    membersCanCreatePublicRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new repositories. Defaults to `true`.
     */
    membersCanCreateRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can fork private repositories. Defaults to `false`.
     */
    membersCanForkPrivateRepositories?: pulumi.Input<boolean>;
    /**
     * The name for the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not secret scanning is enabled for new repositories. Defaults to `false`.
     */
    secretScanningEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.
     */
    secretScanningPushProtectionEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The Twitter username for the organization.
     */
    twitterUsername?: pulumi.Input<string>;
    /**
     * Whether or not commit signatures are required for commits to the organization. Defaults to `false`.
     */
    webCommitSignoffRequired?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OrganizationSettings resource.
 */
export interface OrganizationSettingsArgs {
    /**
     * Whether or not advanced security is enabled for new repositories. Defaults to `false`.
     */
    advancedSecurityEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The billing email address for the organization.
     */
    billingEmail: pulumi.Input<string>;
    /**
     * The blog URL for the organization.
     */
    blog?: pulumi.Input<string>;
    /**
     * The company name for the organization.
     */
    company?: pulumi.Input<string>;
    /**
     * The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.
     */
    defaultRepositoryPermission?: pulumi.Input<string>;
    /**
     * Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.
     */
    dependabotAlertsEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.
     */
    dependabotSecurityUpdatesEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not dependency graph is enabled for new repositories. Defaults to `false`.
     */
    dependencyGraphEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The description for the organization.
     */
    description?: pulumi.Input<string>;
    /**
     * The email address for the organization.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether or not organization projects are enabled for the organization.
     */
    hasOrganizationProjects?: pulumi.Input<boolean>;
    /**
     * Whether or not repository projects are enabled for the organization.
     */
    hasRepositoryProjects?: pulumi.Input<boolean>;
    /**
     * The location for the organization.
     */
    location?: pulumi.Input<string>;
    /**
     * Whether or not organization members can create new internal repositories. For Enterprise Organizations only.
     */
    membersCanCreateInternalRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new pages. Defaults to `true`.
     */
    membersCanCreatePages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new private pages. Defaults to `true`.
     */
    membersCanCreatePrivatePages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new private repositories. Defaults to `true`.
     */
    membersCanCreatePrivateRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new public pages. Defaults to `true`.
     */
    membersCanCreatePublicPages?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new public repositories. Defaults to `true`.
     */
    membersCanCreatePublicRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can create new repositories. Defaults to `true`.
     */
    membersCanCreateRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not organization members can fork private repositories. Defaults to `false`.
     */
    membersCanForkPrivateRepositories?: pulumi.Input<boolean>;
    /**
     * The name for the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not secret scanning is enabled for new repositories. Defaults to `false`.
     */
    secretScanningEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.
     */
    secretScanningPushProtectionEnabledForNewRepositories?: pulumi.Input<boolean>;
    /**
     * The Twitter username for the organization.
     */
    twitterUsername?: pulumi.Input<string>;
    /**
     * Whether or not commit signatures are required for commits to the organization. Defaults to `false`.
     */
    webCommitSignoffRequired?: pulumi.Input<boolean>;
}
