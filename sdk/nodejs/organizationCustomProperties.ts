// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage custom properties for a GitHub organization.
 *
 * Custom properties enable you to add metadata to repositories within your organization. You can use custom properties to add context about repositories, such as who owns them, when they expire, or compliance requirements.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const environment = new github.OrganizationCustomProperties("environment", {
 *     propertyName: "environment",
 *     valueType: "single_select",
 *     required: true,
 *     description: "The deployment environment for this repository",
 *     defaultValue: "development",
 *     allowedValues: [
 *         "development",
 *         "staging",
 *         "production",
 *     ],
 * });
 * ```
 *
 * ### Text Property
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const owner = new github.OrganizationCustomProperties("owner", {
 *     propertyName: "owner",
 *     valueType: "string",
 *     required: true,
 *     description: "The team or individual responsible for this repository",
 * });
 * ```
 *
 * ### Boolean Property
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const archived = new github.OrganizationCustomProperties("archived", {
 *     propertyName: "archived",
 *     valueType: "true_false",
 *     required: false,
 *     description: "Whether this repository is archived",
 *     defaultValue: "false",
 * });
 * ```
 *
 * ## Import
 *
 * Organization custom properties can be imported using the property name:
 *
 * ```sh
 * $ pulumi import github:index/organizationCustomProperties:OrganizationCustomProperties environment environment
 * ```
 */
export class OrganizationCustomProperties extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationCustomProperties resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationCustomPropertiesState, opts?: pulumi.CustomResourceOptions): OrganizationCustomProperties {
        return new OrganizationCustomProperties(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/organizationCustomProperties:OrganizationCustomProperties';

    /**
     * Returns true if the given object is an instance of OrganizationCustomProperties.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationCustomProperties {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationCustomProperties.__pulumiType;
    }

    /**
     * List of allowed values for the custom property. Only applicable when `valueType` is `singleSelect` or `multiSelect`.
     */
    declare public readonly allowedValues: pulumi.Output<string[]>;
    /**
     * The default value of the custom property.
     */
    declare public readonly defaultValue: pulumi.Output<string>;
    /**
     * The description of the custom property.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The name of the custom property.
     */
    declare public readonly propertyName: pulumi.Output<string>;
    /**
     * Whether the custom property is required. Defaults to `false`.
     */
    declare public readonly required: pulumi.Output<boolean | undefined>;
    /**
     * The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`. Defaults to `string`.
     */
    declare public readonly valueType: pulumi.Output<string | undefined>;

    /**
     * Create a OrganizationCustomProperties resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationCustomPropertiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationCustomPropertiesArgs | OrganizationCustomPropertiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationCustomPropertiesState | undefined;
            resourceInputs["allowedValues"] = state?.allowedValues;
            resourceInputs["defaultValue"] = state?.defaultValue;
            resourceInputs["description"] = state?.description;
            resourceInputs["propertyName"] = state?.propertyName;
            resourceInputs["required"] = state?.required;
            resourceInputs["valueType"] = state?.valueType;
        } else {
            const args = argsOrState as OrganizationCustomPropertiesArgs | undefined;
            if (args?.propertyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'propertyName'");
            }
            resourceInputs["allowedValues"] = args?.allowedValues;
            resourceInputs["defaultValue"] = args?.defaultValue;
            resourceInputs["description"] = args?.description;
            resourceInputs["propertyName"] = args?.propertyName;
            resourceInputs["required"] = args?.required;
            resourceInputs["valueType"] = args?.valueType;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationCustomProperties.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationCustomProperties resources.
 */
export interface OrganizationCustomPropertiesState {
    /**
     * List of allowed values for the custom property. Only applicable when `valueType` is `singleSelect` or `multiSelect`.
     */
    allowedValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The default value of the custom property.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The description of the custom property.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the custom property.
     */
    propertyName?: pulumi.Input<string>;
    /**
     * Whether the custom property is required. Defaults to `false`.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`. Defaults to `string`.
     */
    valueType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationCustomProperties resource.
 */
export interface OrganizationCustomPropertiesArgs {
    /**
     * List of allowed values for the custom property. Only applicable when `valueType` is `singleSelect` or `multiSelect`.
     */
    allowedValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The default value of the custom property.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The description of the custom property.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the custom property.
     */
    propertyName: pulumi.Input<string>;
    /**
     * Whether the custom property is required. Defaults to `false`.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`. Defaults to `string`.
     */
    valueType?: pulumi.Input<string>;
}
