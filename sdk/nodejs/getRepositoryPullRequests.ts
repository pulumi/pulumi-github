// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getRepositoryPullRequests({
 *     baseRef: "main",
 *     baseRepository: "example-repository",
 *     sortBy: "updated",
 *     sortDirection: "desc",
 *     state: "open",
 * });
 * ```
 */
export function getRepositoryPullRequests(args: GetRepositoryPullRequestsArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryPullRequestsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getRepositoryPullRequests:getRepositoryPullRequests", {
        "baseRef": args.baseRef,
        "baseRepository": args.baseRepository,
        "headRef": args.headRef,
        "owner": args.owner,
        "sortBy": args.sortBy,
        "sortDirection": args.sortDirection,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepositoryPullRequests.
 */
export interface GetRepositoryPullRequestsArgs {
    /**
     * If set, filters Pull Requests by base branch name.
     */
    baseRef?: string;
    /**
     * Name of the base repository to retrieve the Pull Requests from.
     */
    baseRepository: string;
    /**
     * If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
     */
    headRef?: string;
    /**
     * Owner of the repository. If not provided, the provider's default owner is used.
     */
    owner?: string;
    /**
     * If set, indicates what to sort results by. Can be either "created", "updated", "popularity" (comment count) or "long-running" (age, filtering by pulls updated in the last month). Default: "created".
     */
    sortBy?: string;
    /**
     * If set, controls the direction of the sort. Can be either "asc" or "desc". Default: "asc".
     */
    sortDirection?: string;
    /**
     * If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
     */
    state?: string;
}

/**
 * A collection of values returned by getRepositoryPullRequests.
 */
export interface GetRepositoryPullRequestsResult {
    /**
     * Name of the ref (branch) of the Pull Request base.
     */
    readonly baseRef?: string;
    readonly baseRepository: string;
    /**
     * Value of the Pull Request `HEAD` reference.
     */
    readonly headRef?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly owner?: string;
    /**
     * Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:
     */
    readonly results: outputs.GetRepositoryPullRequestsResult[];
    readonly sortBy?: string;
    readonly sortDirection?: string;
    /**
     * the current Pull Request state - can be "open", "closed" or "merged".
     */
    readonly state?: string;
}
/**
 * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getRepositoryPullRequests({
 *     baseRef: "main",
 *     baseRepository: "example-repository",
 *     sortBy: "updated",
 *     sortDirection: "desc",
 *     state: "open",
 * });
 * ```
 */
export function getRepositoryPullRequestsOutput(args: GetRepositoryPullRequestsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryPullRequestsResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryPullRequests(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryPullRequests.
 */
export interface GetRepositoryPullRequestsOutputArgs {
    /**
     * If set, filters Pull Requests by base branch name.
     */
    baseRef?: pulumi.Input<string>;
    /**
     * Name of the base repository to retrieve the Pull Requests from.
     */
    baseRepository: pulumi.Input<string>;
    /**
     * If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
     */
    headRef?: pulumi.Input<string>;
    /**
     * Owner of the repository. If not provided, the provider's default owner is used.
     */
    owner?: pulumi.Input<string>;
    /**
     * If set, indicates what to sort results by. Can be either "created", "updated", "popularity" (comment count) or "long-running" (age, filtering by pulls updated in the last month). Default: "created".
     */
    sortBy?: pulumi.Input<string>;
    /**
     * If set, controls the direction of the sort. Can be either "asc" or "desc". Default: "asc".
     */
    sortDirection?: pulumi.Input<string>;
    /**
     * If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
     */
    state?: pulumi.Input<string>;
}
