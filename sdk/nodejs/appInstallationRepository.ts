// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **Note**: This resource is not compatible with the GitHub App Installation authentication method.
 *
 * This resource manages relationships between app installations and repositories
 * in your GitHub organization.
 *
 * Creating this resource installs a particular app on a particular repository.
 *
 * The app installation and the repository must both belong to the same
 * organization on GitHub. Note: you can review your organization's installations
 * by the following the instructions at this
 * [link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Create a repository.
 * const someRepo = new github.Repository("someRepo", {});
 * const someAppRepo = new github.AppInstallationRepository("someAppRepo", {
 *     installationId: "1234567",
 *     repository: someRepo.name,
 * });
 * ```
 *
 * ## Import
 *
 * GitHub App Installation Repository can be imported using an ID made up of `installation_id:repository`, e.g.
 *
 * ```sh
 *  $ pulumi import github:index/appInstallationRepository:AppInstallationRepository terraform_repo 1234567:terraform
 * ```
 */
export class AppInstallationRepository extends pulumi.CustomResource {
    /**
     * Get an existing AppInstallationRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppInstallationRepositoryState, opts?: pulumi.CustomResourceOptions): AppInstallationRepository {
        return new AppInstallationRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/appInstallationRepository:AppInstallationRepository';

    /**
     * Returns true if the given object is an instance of AppInstallationRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppInstallationRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppInstallationRepository.__pulumiType;
    }

    /**
     * The GitHub app installation id.
     */
    public readonly installationId!: pulumi.Output<string>;
    public /*out*/ readonly repoId!: pulumi.Output<number>;
    /**
     * The repository to install the app on.
     */
    public readonly repository!: pulumi.Output<string>;

    /**
     * Create a AppInstallationRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppInstallationRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppInstallationRepositoryArgs | AppInstallationRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppInstallationRepositoryState | undefined;
            resourceInputs["installationId"] = state ? state.installationId : undefined;
            resourceInputs["repoId"] = state ? state.repoId : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        } else {
            const args = argsOrState as AppInstallationRepositoryArgs | undefined;
            if ((!args || args.installationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'installationId'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["installationId"] = args ? args.installationId : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["repoId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppInstallationRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppInstallationRepository resources.
 */
export interface AppInstallationRepositoryState {
    /**
     * The GitHub app installation id.
     */
    installationId?: pulumi.Input<string>;
    repoId?: pulumi.Input<number>;
    /**
     * The repository to install the app on.
     */
    repository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppInstallationRepository resource.
 */
export interface AppInstallationRepositoryArgs {
    /**
     * The GitHub app installation id.
     */
    installationId: pulumi.Input<string>;
    /**
     * The repository to install the app on.
     */
    repository: pulumi.Input<string>;
}
