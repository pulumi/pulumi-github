// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create and manage a specific custom property for a GitHub repository.
 *
 * ## Example Usage
 *
 * > Note that this assumes there already is a custom property defined on the org level called `my-cool-property` of type `string`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.Repository("example", {
 *     name: "example",
 *     description: "My awesome codebase",
 * });
 * const string = new github.RepositoryCustomProperty("string", {
 *     repository: example.name,
 *     propertyName: "my-cool-property",
 *     propertyType: "string",
 *     propertyValues: ["test"],
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Repository Custom Property can be imported using an ID made up of a comibnation of the names of the organization, repository, custom property separated by a `:` character, e.g.
 *
 * ```sh
 * $ pulumi import github:index/repositoryCustomProperty:RepositoryCustomProperty example <organization-name>:<repo-name>:<custom-property-name>
 * ```
 */
export class RepositoryCustomProperty extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryCustomProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryCustomPropertyState, opts?: pulumi.CustomResourceOptions): RepositoryCustomProperty {
        return new RepositoryCustomProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/repositoryCustomProperty:RepositoryCustomProperty';

    /**
     * Returns true if the given object is an instance of RepositoryCustomProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryCustomProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryCustomProperty.__pulumiType;
    }

    /**
     * Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
     */
    public readonly propertyName!: pulumi.Output<string>;
    /**
     * Type of the custom property. Can be one of `singleSelect`, `multiSelect`, `string`, or `trueFalse`
     */
    public readonly propertyType!: pulumi.Output<string>;
    /**
     * Value of the custom property in the form of an array. Properties of type `singleSelect`, `string`, and `trueFalse` are represented as a string array of length 1
     */
    public readonly propertyValues!: pulumi.Output<string[]>;
    /**
     * The repository of the environment.
     */
    public readonly repository!: pulumi.Output<string>;

    /**
     * Create a RepositoryCustomProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryCustomPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryCustomPropertyArgs | RepositoryCustomPropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryCustomPropertyState | undefined;
            resourceInputs["propertyName"] = state ? state.propertyName : undefined;
            resourceInputs["propertyType"] = state ? state.propertyType : undefined;
            resourceInputs["propertyValues"] = state ? state.propertyValues : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        } else {
            const args = argsOrState as RepositoryCustomPropertyArgs | undefined;
            if ((!args || args.propertyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyName'");
            }
            if ((!args || args.propertyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyType'");
            }
            if ((!args || args.propertyValues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'propertyValues'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["propertyName"] = args ? args.propertyName : undefined;
            resourceInputs["propertyType"] = args ? args.propertyType : undefined;
            resourceInputs["propertyValues"] = args ? args.propertyValues : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryCustomProperty.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryCustomProperty resources.
 */
export interface RepositoryCustomPropertyState {
    /**
     * Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
     */
    propertyName?: pulumi.Input<string>;
    /**
     * Type of the custom property. Can be one of `singleSelect`, `multiSelect`, `string`, or `trueFalse`
     */
    propertyType?: pulumi.Input<string>;
    /**
     * Value of the custom property in the form of an array. Properties of type `singleSelect`, `string`, and `trueFalse` are represented as a string array of length 1
     */
    propertyValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The repository of the environment.
     */
    repository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryCustomProperty resource.
 */
export interface RepositoryCustomPropertyArgs {
    /**
     * Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
     */
    propertyName: pulumi.Input<string>;
    /**
     * Type of the custom property. Can be one of `singleSelect`, `multiSelect`, `string`, or `trueFalse`
     */
    propertyType: pulumi.Input<string>;
    /**
     * Value of the custom property in the form of an array. Properties of type `singleSelect`, `string`, and `trueFalse` are represented as a string array of length 1
     */
    propertyValues: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The repository of the environment.
     */
    repository: pulumi.Input<string>;
}
