// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {MembershipRole} from ".";

/**
 * Provides a GitHub team membership resource.
 * 
 * This resource allows you to add/remove users from teams in your organization. When applied,
 * the user will be added to the team. If the user hasn't accepted their invitation to the
 * organization, they won't be part of the team until they do. When
 * destroyed, the user will be removed from the team.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 * 
 * // Add a user to the organization
 * const membershipForSomeUser = new github.orgs.Membership("membership_for_some_user", {
 *     role: "member",
 *     username: "SomeUser",
 * });
 * const someTeam = new github.teams.Team("some_team", {
 *     description: "Some cool team",
 * });
 * const someTeamMembership = new github.teams.Membership("some_team_membership", {
 *     role: "member",
 *     teamId: someTeam.id,
 *     username: "SomeUser",
 * });
 * ```
 */
export class Membership extends pulumi.CustomResource {
    /**
     * Get an existing Membership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipState, opts?: pulumi.CustomResourceOptions): Membership {
        return new Membership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:teams/membership:Membership';

    /**
     * Returns true if the given object is an instance of Membership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Membership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Membership.__pulumiType;
    }

    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     */
    public readonly role!: pulumi.Output<MembershipRole | undefined>;
    /**
     * The GitHub team id
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * The user to add to the team.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Membership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipArgs | MembershipState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MembershipState | undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["teamId"] = state ? state.teamId : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as MembershipArgs | undefined;
            if (!args || args.teamId === undefined) {
                throw new Error("Missing required property 'teamId'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["role"] = args ? args.role : undefined;
            inputs["teamId"] = args ? args.teamId : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["etag"] = undefined /*out*/;
        }
        super(Membership.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Membership resources.
 */
export interface MembershipState {
    readonly etag?: pulumi.Input<string>;
    /**
     * The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     */
    readonly role?: pulumi.Input<MembershipRole>;
    /**
     * The GitHub team id
     */
    readonly teamId?: pulumi.Input<string>;
    /**
     * The user to add to the team.
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Membership resource.
 */
export interface MembershipArgs {
    /**
     * The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     */
    readonly role?: pulumi.Input<MembershipRole>;
    /**
     * The GitHub team id
     */
    readonly teamId: pulumi.Input<string>;
    /**
     * The user to add to the team.
     */
    readonly username: pulumi.Input<string>;
}
