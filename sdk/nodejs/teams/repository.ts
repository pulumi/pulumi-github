// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {Permission} from "../index";

/**
 * This resource manages relationships between teams and repositories
 * in your GitHub organization.
 * 
 * Creating this resource grants a particular team permissions on a
 * particular repository.
 * 
 * The repository and the team must both belong to the same organization
 * on GitHub. This resource does not actually *create* any repositories;
 * to do that, see `github_repository`.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 * 
 * const someRepo = new github.repos.Repository("some_repo", {});
 * // Add a repository to the team
 * const someTeam = new github.teams.Team("some_team", {
 *     description: "Some cool team",
 * });
 * const someTeamRepo = new github.teams.Repository("some_team_repo", {
 *     permission: "pull",
 *     repository: someRepo.name,
 *     teamId: someTeam.id,
 * });
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:teams/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The permissions of team members regarding the repository.
     * Must be one of `pull`, `push`, or `admin`. Defaults to `pull`.
     */
    public readonly permission!: pulumi.Output<Permission | undefined>;
    /**
     * The repository to add to the team.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The GitHub team id
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["permission"] = state ? state.permission : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (!args || args.repository === undefined) {
                throw new Error("Missing required property 'repository'");
            }
            if (!args || args.teamId === undefined) {
                throw new Error("Missing required property 'teamId'");
            }
            inputs["permission"] = args ? args.permission : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["teamId"] = args ? args.teamId : undefined;
            inputs["etag"] = undefined /*out*/;
        }
        super(Repository.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    readonly etag?: pulumi.Input<string>;
    /**
     * The permissions of team members regarding the repository.
     * Must be one of `pull`, `push`, or `admin`. Defaults to `pull`.
     */
    readonly permission?: pulumi.Input<Permission>;
    /**
     * The repository to add to the team.
     */
    readonly repository?: pulumi.Input<string>;
    /**
     * The GitHub team id
     */
    readonly teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * The permissions of team members regarding the repository.
     * Must be one of `pull`, `push`, or `admin`. Defaults to `pull`.
     */
    readonly permission?: pulumi.Input<Permission>;
    /**
     * The repository to add to the team.
     */
    readonly repository: pulumi.Input<string>;
    /**
     * The GitHub team id
     */
    readonly teamId: pulumi.Input<string>;
}
