// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class BranchProtection extends pulumi.CustomResource {
    /**
     * Get an existing BranchProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchProtectionState, opts?: pulumi.CustomResourceOptions): BranchProtection {
        return new BranchProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/branchProtection:BranchProtection';

    /**
     * Returns true if the given object is an instance of BranchProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BranchProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BranchProtection.__pulumiType;
    }

    public readonly allowsDeletions!: pulumi.Output<boolean | undefined>;
    public readonly allowsForcePushes!: pulumi.Output<boolean | undefined>;
    public readonly blocksCreations!: pulumi.Output<boolean | undefined>;
    public readonly enforceAdmins!: pulumi.Output<boolean | undefined>;
    public readonly pattern!: pulumi.Output<string>;
    public readonly pushRestrictions!: pulumi.Output<string[] | undefined>;
    /**
     * Node ID or name of repository
     */
    public readonly repositoryId!: pulumi.Output<string>;
    public readonly requireConversationResolution!: pulumi.Output<boolean | undefined>;
    public readonly requireSignedCommits!: pulumi.Output<boolean | undefined>;
    public readonly requiredLinearHistory!: pulumi.Output<boolean | undefined>;
    public readonly requiredPullRequestReviews!: pulumi.Output<outputs.BranchProtectionRequiredPullRequestReview[] | undefined>;
    public readonly requiredStatusChecks!: pulumi.Output<outputs.BranchProtectionRequiredStatusCheck[] | undefined>;

    /**
     * Create a BranchProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchProtectionArgs | BranchProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchProtectionState | undefined;
            resourceInputs["allowsDeletions"] = state ? state.allowsDeletions : undefined;
            resourceInputs["allowsForcePushes"] = state ? state.allowsForcePushes : undefined;
            resourceInputs["blocksCreations"] = state ? state.blocksCreations : undefined;
            resourceInputs["enforceAdmins"] = state ? state.enforceAdmins : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["pushRestrictions"] = state ? state.pushRestrictions : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["requireConversationResolution"] = state ? state.requireConversationResolution : undefined;
            resourceInputs["requireSignedCommits"] = state ? state.requireSignedCommits : undefined;
            resourceInputs["requiredLinearHistory"] = state ? state.requiredLinearHistory : undefined;
            resourceInputs["requiredPullRequestReviews"] = state ? state.requiredPullRequestReviews : undefined;
            resourceInputs["requiredStatusChecks"] = state ? state.requiredStatusChecks : undefined;
        } else {
            const args = argsOrState as BranchProtectionArgs | undefined;
            if ((!args || args.pattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            if ((!args || args.repositoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            resourceInputs["allowsDeletions"] = args ? args.allowsDeletions : undefined;
            resourceInputs["allowsForcePushes"] = args ? args.allowsForcePushes : undefined;
            resourceInputs["blocksCreations"] = args ? args.blocksCreations : undefined;
            resourceInputs["enforceAdmins"] = args ? args.enforceAdmins : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["pushRestrictions"] = args ? args.pushRestrictions : undefined;
            resourceInputs["repositoryId"] = args ? args.repositoryId : undefined;
            resourceInputs["requireConversationResolution"] = args ? args.requireConversationResolution : undefined;
            resourceInputs["requireSignedCommits"] = args ? args.requireSignedCommits : undefined;
            resourceInputs["requiredLinearHistory"] = args ? args.requiredLinearHistory : undefined;
            resourceInputs["requiredPullRequestReviews"] = args ? args.requiredPullRequestReviews : undefined;
            resourceInputs["requiredStatusChecks"] = args ? args.requiredStatusChecks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BranchProtection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BranchProtection resources.
 */
export interface BranchProtectionState {
    allowsDeletions?: pulumi.Input<boolean>;
    allowsForcePushes?: pulumi.Input<boolean>;
    blocksCreations?: pulumi.Input<boolean>;
    enforceAdmins?: pulumi.Input<boolean>;
    pattern?: pulumi.Input<string>;
    pushRestrictions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node ID or name of repository
     */
    repositoryId?: pulumi.Input<string>;
    requireConversationResolution?: pulumi.Input<boolean>;
    requireSignedCommits?: pulumi.Input<boolean>;
    requiredLinearHistory?: pulumi.Input<boolean>;
    requiredPullRequestReviews?: pulumi.Input<pulumi.Input<inputs.BranchProtectionRequiredPullRequestReview>[]>;
    requiredStatusChecks?: pulumi.Input<pulumi.Input<inputs.BranchProtectionRequiredStatusCheck>[]>;
}

/**
 * The set of arguments for constructing a BranchProtection resource.
 */
export interface BranchProtectionArgs {
    allowsDeletions?: pulumi.Input<boolean>;
    allowsForcePushes?: pulumi.Input<boolean>;
    blocksCreations?: pulumi.Input<boolean>;
    enforceAdmins?: pulumi.Input<boolean>;
    pattern: pulumi.Input<string>;
    pushRestrictions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node ID or name of repository
     */
    repositoryId: pulumi.Input<string>;
    requireConversationResolution?: pulumi.Input<boolean>;
    requireSignedCommits?: pulumi.Input<boolean>;
    requiredLinearHistory?: pulumi.Input<boolean>;
    requiredPullRequestReviews?: pulumi.Input<pulumi.Input<inputs.BranchProtectionRequiredPullRequestReview>[]>;
    requiredStatusChecks?: pulumi.Input<pulumi.Input<inputs.BranchProtectionRequiredStatusCheck>[]>;
}
