// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about a repository ref.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const development = pulumi.output(github.getRef({
 *     ref: "heads/development",
 *     repository: "example",
 * }));
 * ```
 */
export function getRef(args: GetRefArgs, opts?: pulumi.InvokeOptions): Promise<GetRefResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("github:index/getRef:getRef", {
        "branch": args.branch,
        "repository": args.repository,
    }, opts);
}

/**
 * A collection of arguments for invoking getRef.
 */
export interface GetRefArgs {
    branch: string;
    /**
     * The GitHub repository name.
     */
    repository: string;
}

/**
 * A collection of values returned by getRef.
 */
export interface GetRefResult {
    readonly branch: string;
    /**
     * An etag representing the ref.
     */
    readonly etag: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ref: string;
    readonly repository: string;
    /**
     * A string storing the reference's `HEAD` commit's SHA1.
     */
    readonly sha: string;
}

export function getRefOutput(args: GetRefOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRefResult> {
    return pulumi.output(args).apply(a => getRef(a, opts))
}

/**
 * A collection of arguments for invoking getRef.
 */
export interface GetRefOutputArgs {
    branch: pulumi.Input<string>;
    /**
     * The GitHub repository name.
     */
    repository: pulumi.Input<string>;
}
