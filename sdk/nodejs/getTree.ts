// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about a single tree.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const this = github.getRepository({
 *     name: "example",
 * });
 * const thisGetBranch = Promise.all([_this, _this]).then(([_this, _this1]) => github.getBranch({
 *     branch: _this.defaultBranch,
 *     repository: _this1.name,
 * }));
 * const thisGetTree = Promise.all([_this, thisGetBranch]).then(([_this, thisGetBranch]) => github.getTree({
 *     recursive: false,
 *     repository: _this.name,
 *     treeSha: thisGetBranch.sha,
 * }));
 * export const entries = thisGetTree.then(thisGetTree => thisGetTree.entries);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getTree(args: GetTreeArgs, opts?: pulumi.InvokeOptions): Promise<GetTreeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getTree:getTree", {
        "recursive": args.recursive,
        "repository": args.repository,
        "treeSha": args.treeSha,
    }, opts);
}

/**
 * A collection of arguments for invoking getTree.
 */
export interface GetTreeArgs {
    /**
     * Setting this parameter to `true` returns the objects or subtrees referenced by the tree specified in `treeSha`.
     */
    recursive?: boolean;
    /**
     * The name of the repository.
     */
    repository: string;
    /**
     * The SHA1 value for the tree.
     */
    treeSha: string;
}

/**
 * A collection of values returned by getTree.
 */
export interface GetTreeResult {
    /**
     * Objects (of `path`, `mode`, `type`, `size`, and `sha`) specifying a tree structure.
     */
    readonly entries: outputs.GetTreeEntry[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly recursive?: boolean;
    readonly repository: string;
    readonly treeSha: string;
}
/**
 * Use this data source to retrieve information about a single tree.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const this = github.getRepository({
 *     name: "example",
 * });
 * const thisGetBranch = Promise.all([_this, _this]).then(([_this, _this1]) => github.getBranch({
 *     branch: _this.defaultBranch,
 *     repository: _this1.name,
 * }));
 * const thisGetTree = Promise.all([_this, thisGetBranch]).then(([_this, thisGetBranch]) => github.getTree({
 *     recursive: false,
 *     repository: _this.name,
 *     treeSha: thisGetBranch.sha,
 * }));
 * export const entries = thisGetTree.then(thisGetTree => thisGetTree.entries);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getTreeOutput(args: GetTreeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTreeResult> {
    return pulumi.output(args).apply((a: any) => getTree(a, opts))
}

/**
 * A collection of arguments for invoking getTree.
 */
export interface GetTreeOutputArgs {
    /**
     * Setting this parameter to `true` returns the objects or subtrees referenced by the tree specified in `treeSha`.
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * The name of the repository.
     */
    repository: pulumi.Input<string>;
    /**
     * The SHA1 value for the tree.
     */
    treeSha: pulumi.Input<string>;
}
