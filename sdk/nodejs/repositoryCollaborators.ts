// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a GitHub repository collaborators resource.
 *
 * > Note: github.RepositoryCollaborators cannot be used in conjunction with github.RepositoryCollaborator and
 * github.TeamRepository or they will fight over what your policy should be.
 *
 * This resource allows you to manage all collaborators for repositories in your
 * organization or personal account. For organization repositories, collaborators can
 * have explicit (and differing levels of) read, write, or administrator access to
 * specific repositories, without giving the user full organization membership.
 * For personal repositories, collaborators can only be granted write
 * (implicitly includes read) permission.
 *
 * When applied, an invitation will be sent to the user to become a collaborators
 * on a repository. When destroyed, either the invitation will be cancelled or the
 * collaborators will be removed from the repository.
 *
 * This resource is authoritative. For adding a collaborator to a repo in a non-authoritative manner, use
 * github.RepositoryCollaborator instead.
 *
 * Further documentation on GitHub collaborators:
 *
 * - [Adding outside collaborators to your personal repositories](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories)
 * - [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)
 * - [Converting an organization member to an outside collaborators](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Add collaborators to a repository
 * const someTeam = new github.Team("some_team", {
 *     name: "SomeTeam",
 *     description: "Some cool team",
 * });
 * const someRepo = new github.Repository("some_repo", {name: "some-repo"});
 * const someRepoCollaborators = new github.RepositoryCollaborators("some_repo_collaborators", {
 *     repository: someRepo.name,
 *     users: [{
 *         permission: "admin",
 *         username: "SomeUser",
 *     }],
 *     teams: [{
 *         permission: "pull",
 *         teamId: someTeam.slug,
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * GitHub Repository Collaborators can be imported using the name `name`, e.g.
 *
 * ```sh
 * $ pulumi import github:index/repositoryCollaborators:RepositoryCollaborators collaborators terraform
 * ```
 */
export class RepositoryCollaborators extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryCollaborators resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryCollaboratorsState, opts?: pulumi.CustomResourceOptions): RepositoryCollaborators {
        return new RepositoryCollaborators(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/repositoryCollaborators:RepositoryCollaborators';

    /**
     * Returns true if the given object is an instance of RepositoryCollaborators.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryCollaborators {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryCollaborators.__pulumiType;
    }

    /**
     * Map of usernames to invitation ID for any users added as part of creation of this resource to 
     * be used in `github.UserInvitationAccepter`.
     */
    public /*out*/ readonly invitationIds!: pulumi.Output<{[key: string]: string}>;
    /**
     * The GitHub repository
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * List of teams
     */
    public readonly teams!: pulumi.Output<outputs.RepositoryCollaboratorsTeam[] | undefined>;
    /**
     * List of users
     */
    public readonly users!: pulumi.Output<outputs.RepositoryCollaboratorsUser[] | undefined>;

    /**
     * Create a RepositoryCollaborators resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryCollaboratorsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryCollaboratorsArgs | RepositoryCollaboratorsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryCollaboratorsState | undefined;
            resourceInputs["invitationIds"] = state ? state.invitationIds : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as RepositoryCollaboratorsArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["invitationIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryCollaborators.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RepositoryCollaborators resources.
 */
export interface RepositoryCollaboratorsState {
    /**
     * Map of usernames to invitation ID for any users added as part of creation of this resource to 
     * be used in `github.UserInvitationAccepter`.
     */
    invitationIds?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The GitHub repository
     */
    repository?: pulumi.Input<string>;
    /**
     * List of teams
     */
    teams?: pulumi.Input<pulumi.Input<inputs.RepositoryCollaboratorsTeam>[]>;
    /**
     * List of users
     */
    users?: pulumi.Input<pulumi.Input<inputs.RepositoryCollaboratorsUser>[]>;
}

/**
 * The set of arguments for constructing a RepositoryCollaborators resource.
 */
export interface RepositoryCollaboratorsArgs {
    /**
     * The GitHub repository
     */
    repository: pulumi.Input<string>;
    /**
     * List of teams
     */
    teams?: pulumi.Input<pulumi.Input<inputs.RepositoryCollaboratorsTeam>[]>;
    /**
     * List of users
     */
    users?: pulumi.Input<pulumi.Input<inputs.RepositoryCollaboratorsUser>[]>;
}
