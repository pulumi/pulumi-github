// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage an association between an organization role and a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.OrganizationRoleUser("example", {
 *     roleId: 1234,
 *     login: "example-user",
 * });
 * ```
 *
 * ## Import
 *
 * An organization role user association can be imported using the role ID and the user login separated by a `:`.
 *
 * ```sh
 * $ pulumi import github:index/organizationRoleUser:OrganizationRoleUser example "1234:example-user"
 * ```
 */
export class OrganizationRoleUser extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationRoleUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationRoleUserState, opts?: pulumi.CustomResourceOptions): OrganizationRoleUser {
        return new OrganizationRoleUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/organizationRoleUser:OrganizationRoleUser';

    /**
     * Returns true if the given object is an instance of OrganizationRoleUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationRoleUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationRoleUser.__pulumiType;
    }

    /**
     * The login for the GitHub user account.
     */
    declare public readonly login: pulumi.Output<string>;
    /**
     * The ID of the organization role.
     */
    declare public readonly roleId: pulumi.Output<number>;

    /**
     * Create a OrganizationRoleUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationRoleUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationRoleUserArgs | OrganizationRoleUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationRoleUserState | undefined;
            resourceInputs["login"] = state?.login;
            resourceInputs["roleId"] = state?.roleId;
        } else {
            const args = argsOrState as OrganizationRoleUserArgs | undefined;
            if (args?.login === undefined && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if (args?.roleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["login"] = args?.login;
            resourceInputs["roleId"] = args?.roleId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationRoleUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationRoleUser resources.
 */
export interface OrganizationRoleUserState {
    /**
     * The login for the GitHub user account.
     */
    login?: pulumi.Input<string>;
    /**
     * The ID of the organization role.
     */
    roleId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OrganizationRoleUser resource.
 */
export interface OrganizationRoleUserArgs {
    /**
     * The login for the GitHub user account.
     */
    login: pulumi.Input<string>;
    /**
     * The ID of the organization role.
     */
    roleId: pulumi.Input<number>;
}
