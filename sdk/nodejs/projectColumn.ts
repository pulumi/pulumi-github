// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * !> **Warning:** This resource no longer works as the [Projects (classic) REST API](https://docs.github.com/en/rest/projects/projects?apiVersion=2022-11-28) has been [removed](https://github.blog/changelog/2024-05-23-sunset-notice-projects-classic/) and as such has been deprecated. It will be removed in a future release.
 *
 * This resource allows you to create and manage columns for GitHub projects.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const project = new github.OrganizationProject("project", {
 *     name: "A Organization Project",
 *     body: "This is an organization project.",
 * });
 * const column = new github.ProjectColumn("column", {
 *     projectId: project.id,
 *     name: "a column",
 * });
 * ```
 */
export class ProjectColumn extends pulumi.CustomResource {
    /**
     * Get an existing ProjectColumn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectColumnState, opts?: pulumi.CustomResourceOptions): ProjectColumn {
        return new ProjectColumn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/projectColumn:ProjectColumn';

    /**
     * Returns true if the given object is an instance of ProjectColumn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectColumn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectColumn.__pulumiType;
    }

    /**
     * The ID of the column.
     */
    declare public /*out*/ readonly columnId: pulumi.Output<number>;
    declare public /*out*/ readonly etag: pulumi.Output<string>;
    /**
     * The name of the column.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of an existing project that the column will be created in.
     */
    declare public readonly projectId: pulumi.Output<string>;

    /**
     * Create a ProjectColumn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectColumnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectColumnArgs | ProjectColumnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectColumnState | undefined;
            resourceInputs["columnId"] = state?.columnId;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
        } else {
            const args = argsOrState as ProjectColumnArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["columnId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectColumn.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectColumn resources.
 */
export interface ProjectColumnState {
    /**
     * The ID of the column.
     */
    columnId?: pulumi.Input<number>;
    etag?: pulumi.Input<string>;
    /**
     * The name of the column.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of an existing project that the column will be created in.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectColumn resource.
 */
export interface ProjectColumnArgs {
    /**
     * The name of the column.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of an existing project that the column will be created in.
     */
    projectId: pulumi.Input<string>;
}
