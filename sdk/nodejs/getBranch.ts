// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about a repository branch.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const development = pulumi.output(github.getBranch({
 *     branch: "development",
 *     repository: "example",
 * }, { async: true }));
 * ```
 */
export function getBranch(args: GetBranchArgs, opts?: pulumi.InvokeOptions): Promise<GetBranchResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("github:index/getBranch:getBranch", {
        "branch": args.branch,
        "repository": args.repository,
    }, opts);
}

/**
 * A collection of arguments for invoking getBranch.
 */
export interface GetBranchArgs {
    /**
     * The repository branch to create.
     */
    readonly branch: string;
    /**
     * The GitHub repository name.
     */
    readonly repository: string;
}

/**
 * A collection of values returned by getBranch.
 */
export interface GetBranchResult {
    readonly branch: string;
    /**
     * An etag representing the Branch object.
     */
    readonly etag: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A string representing a branch reference, in the form of `refs/heads/<branch>`.
     */
    readonly ref: string;
    readonly repository: string;
    /**
     * A string storing the reference's `HEAD` commit's SHA1.
     */
    readonly sha: string;
}
