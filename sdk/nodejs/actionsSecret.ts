// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * This resource can be imported using an ID made up of the `repository` and `secret_name`:
 *
 * ```sh
 * $ pulumi import github:index/actionsSecret:ActionsSecret example_secret repository/secret_name
 * ```
 * NOTE: the implementation is limited in that it won't fetch the value of the
 * `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround.
 */
export class ActionsSecret extends pulumi.CustomResource {
    /**
     * Get an existing ActionsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionsSecretState, opts?: pulumi.CustomResourceOptions): ActionsSecret {
        return new ActionsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/actionsSecret:ActionsSecret';

    /**
     * Returns true if the given object is an instance of ActionsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActionsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionsSecret.__pulumiType;
    }

    /**
     * Date of actionsSecret creation.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly destroyOnDrift: pulumi.Output<boolean | undefined>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    declare public readonly encryptedValue: pulumi.Output<string | undefined>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    declare public readonly plaintextValue: pulumi.Output<string | undefined>;
    /**
     * Name of the repository
     */
    declare public readonly repository: pulumi.Output<string>;
    /**
     * Name of the secret
     */
    declare public readonly secretName: pulumi.Output<string>;
    /**
     * Date of actionsSecret update.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a ActionsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionsSecretArgs | ActionsSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionsSecretState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["destroyOnDrift"] = state?.destroyOnDrift;
            resourceInputs["encryptedValue"] = state?.encryptedValue;
            resourceInputs["plaintextValue"] = state?.plaintextValue;
            resourceInputs["repository"] = state?.repository;
            resourceInputs["secretName"] = state?.secretName;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ActionsSecretArgs | undefined;
            if (args?.repository === undefined && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if (args?.secretName === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            resourceInputs["destroyOnDrift"] = args?.destroyOnDrift;
            resourceInputs["encryptedValue"] = args?.encryptedValue ? pulumi.secret(args.encryptedValue) : undefined;
            resourceInputs["plaintextValue"] = args?.plaintextValue ? pulumi.secret(args.plaintextValue) : undefined;
            resourceInputs["repository"] = args?.repository;
            resourceInputs["secretName"] = args?.secretName;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["encryptedValue", "plaintextValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ActionsSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActionsSecret resources.
 */
export interface ActionsSecretState {
    /**
     * Date of actionsSecret creation.
     */
    createdAt?: pulumi.Input<string>;
    destroyOnDrift?: pulumi.Input<boolean>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    repository?: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    secretName?: pulumi.Input<string>;
    /**
     * Date of actionsSecret update.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActionsSecret resource.
 */
export interface ActionsSecretArgs {
    destroyOnDrift?: pulumi.Input<boolean>;
    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     */
    encryptedValue?: pulumi.Input<string>;
    /**
     * Plaintext value of the secret to be encrypted
     */
    plaintextValue?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    repository: pulumi.Input<string>;
    /**
     * Name of the secret
     */
    secretName: pulumi.Input<string>;
}
