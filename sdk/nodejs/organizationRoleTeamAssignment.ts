// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource manages relationships between teams and organization roles
 * in your GitHub organization. This works on predefined roles, and custom roles, where the latter is an Enterprise feature.
 *
 * Creating this resource assigns the role to a team.
 *
 * The organization role and team must both belong to the same organization
 * on GitHub.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const test_team = new github.Team("test-team", {name: "test-team"});
 * const test_team_role_assignment = new github.OrganizationRoleTeamAssignment("test-team-role-assignment", {
 *     teamSlug: test_team.slug,
 *     roleId: "8132",
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Team Organization Role Assignment can be imported using an ID made up of `team_slug:role_id`
 *
 * ```sh
 * $ pulumi import github:index/organizationRoleTeamAssignment:OrganizationRoleTeamAssignment role_assignment test-team:8132
 * ```
 */
export class OrganizationRoleTeamAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationRoleTeamAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationRoleTeamAssignmentState, opts?: pulumi.CustomResourceOptions): OrganizationRoleTeamAssignment {
        return new OrganizationRoleTeamAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/organizationRoleTeamAssignment:OrganizationRoleTeamAssignment';

    /**
     * Returns true if the given object is an instance of OrganizationRoleTeamAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationRoleTeamAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationRoleTeamAssignment.__pulumiType;
    }

    /**
     * The GitHub organization role id
     */
    declare public readonly roleId: pulumi.Output<string>;
    /**
     * The GitHub team slug
     */
    declare public readonly teamSlug: pulumi.Output<string>;

    /**
     * Create a OrganizationRoleTeamAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationRoleTeamAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationRoleTeamAssignmentArgs | OrganizationRoleTeamAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationRoleTeamAssignmentState | undefined;
            resourceInputs["roleId"] = state?.roleId;
            resourceInputs["teamSlug"] = state?.teamSlug;
        } else {
            const args = argsOrState as OrganizationRoleTeamAssignmentArgs | undefined;
            if (args?.roleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            if (args?.teamSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'teamSlug'");
            }
            resourceInputs["roleId"] = args?.roleId;
            resourceInputs["teamSlug"] = args?.teamSlug;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationRoleTeamAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationRoleTeamAssignment resources.
 */
export interface OrganizationRoleTeamAssignmentState {
    /**
     * The GitHub organization role id
     */
    roleId?: pulumi.Input<string>;
    /**
     * The GitHub team slug
     */
    teamSlug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationRoleTeamAssignment resource.
 */
export interface OrganizationRoleTeamAssignmentArgs {
    /**
     * The GitHub organization role id
     */
    roleId: pulumi.Input<string>;
    /**
     * The GitHub team slug
     */
    teamSlug: pulumi.Input<string>;
}
