// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionsEnvironmentSecretArgs, ActionsEnvironmentSecretState } from "./actionsEnvironmentSecret";
export type ActionsEnvironmentSecret = import("./actionsEnvironmentSecret").ActionsEnvironmentSecret;
export const ActionsEnvironmentSecret: typeof import("./actionsEnvironmentSecret").ActionsEnvironmentSecret = null as any;
utilities.lazyLoad(exports, ["ActionsEnvironmentSecret"], () => require("./actionsEnvironmentSecret"));

export { ActionsEnvironmentVariableArgs, ActionsEnvironmentVariableState } from "./actionsEnvironmentVariable";
export type ActionsEnvironmentVariable = import("./actionsEnvironmentVariable").ActionsEnvironmentVariable;
export const ActionsEnvironmentVariable: typeof import("./actionsEnvironmentVariable").ActionsEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["ActionsEnvironmentVariable"], () => require("./actionsEnvironmentVariable"));

export { ActionsOrganizationOidcSubjectClaimCustomizationTemplateArgs, ActionsOrganizationOidcSubjectClaimCustomizationTemplateState } from "./actionsOrganizationOidcSubjectClaimCustomizationTemplate";
export type ActionsOrganizationOidcSubjectClaimCustomizationTemplate = import("./actionsOrganizationOidcSubjectClaimCustomizationTemplate").ActionsOrganizationOidcSubjectClaimCustomizationTemplate;
export const ActionsOrganizationOidcSubjectClaimCustomizationTemplate: typeof import("./actionsOrganizationOidcSubjectClaimCustomizationTemplate").ActionsOrganizationOidcSubjectClaimCustomizationTemplate = null as any;
utilities.lazyLoad(exports, ["ActionsOrganizationOidcSubjectClaimCustomizationTemplate"], () => require("./actionsOrganizationOidcSubjectClaimCustomizationTemplate"));

export { ActionsOrganizationPermissionsArgs, ActionsOrganizationPermissionsState } from "./actionsOrganizationPermissions";
export type ActionsOrganizationPermissions = import("./actionsOrganizationPermissions").ActionsOrganizationPermissions;
export const ActionsOrganizationPermissions: typeof import("./actionsOrganizationPermissions").ActionsOrganizationPermissions = null as any;
utilities.lazyLoad(exports, ["ActionsOrganizationPermissions"], () => require("./actionsOrganizationPermissions"));

export { ActionsOrganizationSecretArgs, ActionsOrganizationSecretState } from "./actionsOrganizationSecret";
export type ActionsOrganizationSecret = import("./actionsOrganizationSecret").ActionsOrganizationSecret;
export const ActionsOrganizationSecret: typeof import("./actionsOrganizationSecret").ActionsOrganizationSecret = null as any;
utilities.lazyLoad(exports, ["ActionsOrganizationSecret"], () => require("./actionsOrganizationSecret"));

export { ActionsOrganizationSecretRepositoriesArgs, ActionsOrganizationSecretRepositoriesState } from "./actionsOrganizationSecretRepositories";
export type ActionsOrganizationSecretRepositories = import("./actionsOrganizationSecretRepositories").ActionsOrganizationSecretRepositories;
export const ActionsOrganizationSecretRepositories: typeof import("./actionsOrganizationSecretRepositories").ActionsOrganizationSecretRepositories = null as any;
utilities.lazyLoad(exports, ["ActionsOrganizationSecretRepositories"], () => require("./actionsOrganizationSecretRepositories"));

export { ActionsOrganizationVariableArgs, ActionsOrganizationVariableState } from "./actionsOrganizationVariable";
export type ActionsOrganizationVariable = import("./actionsOrganizationVariable").ActionsOrganizationVariable;
export const ActionsOrganizationVariable: typeof import("./actionsOrganizationVariable").ActionsOrganizationVariable = null as any;
utilities.lazyLoad(exports, ["ActionsOrganizationVariable"], () => require("./actionsOrganizationVariable"));

export { ActionsRepositoryAccessLevelArgs, ActionsRepositoryAccessLevelState } from "./actionsRepositoryAccessLevel";
export type ActionsRepositoryAccessLevel = import("./actionsRepositoryAccessLevel").ActionsRepositoryAccessLevel;
export const ActionsRepositoryAccessLevel: typeof import("./actionsRepositoryAccessLevel").ActionsRepositoryAccessLevel = null as any;
utilities.lazyLoad(exports, ["ActionsRepositoryAccessLevel"], () => require("./actionsRepositoryAccessLevel"));

export { ActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs, ActionsRepositoryOidcSubjectClaimCustomizationTemplateState } from "./actionsRepositoryOidcSubjectClaimCustomizationTemplate";
export type ActionsRepositoryOidcSubjectClaimCustomizationTemplate = import("./actionsRepositoryOidcSubjectClaimCustomizationTemplate").ActionsRepositoryOidcSubjectClaimCustomizationTemplate;
export const ActionsRepositoryOidcSubjectClaimCustomizationTemplate: typeof import("./actionsRepositoryOidcSubjectClaimCustomizationTemplate").ActionsRepositoryOidcSubjectClaimCustomizationTemplate = null as any;
utilities.lazyLoad(exports, ["ActionsRepositoryOidcSubjectClaimCustomizationTemplate"], () => require("./actionsRepositoryOidcSubjectClaimCustomizationTemplate"));

export { ActionsRepositoryPermissionsArgs, ActionsRepositoryPermissionsState } from "./actionsRepositoryPermissions";
export type ActionsRepositoryPermissions = import("./actionsRepositoryPermissions").ActionsRepositoryPermissions;
export const ActionsRepositoryPermissions: typeof import("./actionsRepositoryPermissions").ActionsRepositoryPermissions = null as any;
utilities.lazyLoad(exports, ["ActionsRepositoryPermissions"], () => require("./actionsRepositoryPermissions"));

export { ActionsRunnerGroupArgs, ActionsRunnerGroupState } from "./actionsRunnerGroup";
export type ActionsRunnerGroup = import("./actionsRunnerGroup").ActionsRunnerGroup;
export const ActionsRunnerGroup: typeof import("./actionsRunnerGroup").ActionsRunnerGroup = null as any;
utilities.lazyLoad(exports, ["ActionsRunnerGroup"], () => require("./actionsRunnerGroup"));

export { ActionsSecretArgs, ActionsSecretState } from "./actionsSecret";
export type ActionsSecret = import("./actionsSecret").ActionsSecret;
export const ActionsSecret: typeof import("./actionsSecret").ActionsSecret = null as any;
utilities.lazyLoad(exports, ["ActionsSecret"], () => require("./actionsSecret"));

export { ActionsVariableArgs, ActionsVariableState } from "./actionsVariable";
export type ActionsVariable = import("./actionsVariable").ActionsVariable;
export const ActionsVariable: typeof import("./actionsVariable").ActionsVariable = null as any;
utilities.lazyLoad(exports, ["ActionsVariable"], () => require("./actionsVariable"));

export { AppInstallationRepositoriesArgs, AppInstallationRepositoriesState } from "./appInstallationRepositories";
export type AppInstallationRepositories = import("./appInstallationRepositories").AppInstallationRepositories;
export const AppInstallationRepositories: typeof import("./appInstallationRepositories").AppInstallationRepositories = null as any;
utilities.lazyLoad(exports, ["AppInstallationRepositories"], () => require("./appInstallationRepositories"));

export { AppInstallationRepositoryArgs, AppInstallationRepositoryState } from "./appInstallationRepository";
export type AppInstallationRepository = import("./appInstallationRepository").AppInstallationRepository;
export const AppInstallationRepository: typeof import("./appInstallationRepository").AppInstallationRepository = null as any;
utilities.lazyLoad(exports, ["AppInstallationRepository"], () => require("./appInstallationRepository"));

export { BranchArgs, BranchState } from "./branch";
export type Branch = import("./branch").Branch;
export const Branch: typeof import("./branch").Branch = null as any;
utilities.lazyLoad(exports, ["Branch"], () => require("./branch"));

export { BranchDefaultArgs, BranchDefaultState } from "./branchDefault";
export type BranchDefault = import("./branchDefault").BranchDefault;
export const BranchDefault: typeof import("./branchDefault").BranchDefault = null as any;
utilities.lazyLoad(exports, ["BranchDefault"], () => require("./branchDefault"));

export { BranchProtectionArgs, BranchProtectionState } from "./branchProtection";
export type BranchProtection = import("./branchProtection").BranchProtection;
export const BranchProtection: typeof import("./branchProtection").BranchProtection = null as any;
utilities.lazyLoad(exports, ["BranchProtection"], () => require("./branchProtection"));

export { BranchProtectionV3Args, BranchProtectionV3State } from "./branchProtectionV3";
export type BranchProtectionV3 = import("./branchProtectionV3").BranchProtectionV3;
export const BranchProtectionV3: typeof import("./branchProtectionV3").BranchProtectionV3 = null as any;
utilities.lazyLoad(exports, ["BranchProtectionV3"], () => require("./branchProtectionV3"));

export { CodespacesOrganizationSecretArgs, CodespacesOrganizationSecretState } from "./codespacesOrganizationSecret";
export type CodespacesOrganizationSecret = import("./codespacesOrganizationSecret").CodespacesOrganizationSecret;
export const CodespacesOrganizationSecret: typeof import("./codespacesOrganizationSecret").CodespacesOrganizationSecret = null as any;
utilities.lazyLoad(exports, ["CodespacesOrganizationSecret"], () => require("./codespacesOrganizationSecret"));

export { CodespacesOrganizationSecretRepositoriesArgs, CodespacesOrganizationSecretRepositoriesState } from "./codespacesOrganizationSecretRepositories";
export type CodespacesOrganizationSecretRepositories = import("./codespacesOrganizationSecretRepositories").CodespacesOrganizationSecretRepositories;
export const CodespacesOrganizationSecretRepositories: typeof import("./codespacesOrganizationSecretRepositories").CodespacesOrganizationSecretRepositories = null as any;
utilities.lazyLoad(exports, ["CodespacesOrganizationSecretRepositories"], () => require("./codespacesOrganizationSecretRepositories"));

export { CodespacesSecretArgs, CodespacesSecretState } from "./codespacesSecret";
export type CodespacesSecret = import("./codespacesSecret").CodespacesSecret;
export const CodespacesSecret: typeof import("./codespacesSecret").CodespacesSecret = null as any;
utilities.lazyLoad(exports, ["CodespacesSecret"], () => require("./codespacesSecret"));

export { CodespacesUserSecretArgs, CodespacesUserSecretState } from "./codespacesUserSecret";
export type CodespacesUserSecret = import("./codespacesUserSecret").CodespacesUserSecret;
export const CodespacesUserSecret: typeof import("./codespacesUserSecret").CodespacesUserSecret = null as any;
utilities.lazyLoad(exports, ["CodespacesUserSecret"], () => require("./codespacesUserSecret"));

export { DependabotOrganizationSecretArgs, DependabotOrganizationSecretState } from "./dependabotOrganizationSecret";
export type DependabotOrganizationSecret = import("./dependabotOrganizationSecret").DependabotOrganizationSecret;
export const DependabotOrganizationSecret: typeof import("./dependabotOrganizationSecret").DependabotOrganizationSecret = null as any;
utilities.lazyLoad(exports, ["DependabotOrganizationSecret"], () => require("./dependabotOrganizationSecret"));

export { DependabotOrganizationSecretRepositoriesArgs, DependabotOrganizationSecretRepositoriesState } from "./dependabotOrganizationSecretRepositories";
export type DependabotOrganizationSecretRepositories = import("./dependabotOrganizationSecretRepositories").DependabotOrganizationSecretRepositories;
export const DependabotOrganizationSecretRepositories: typeof import("./dependabotOrganizationSecretRepositories").DependabotOrganizationSecretRepositories = null as any;
utilities.lazyLoad(exports, ["DependabotOrganizationSecretRepositories"], () => require("./dependabotOrganizationSecretRepositories"));

export { DependabotSecretArgs, DependabotSecretState } from "./dependabotSecret";
export type DependabotSecret = import("./dependabotSecret").DependabotSecret;
export const DependabotSecret: typeof import("./dependabotSecret").DependabotSecret = null as any;
utilities.lazyLoad(exports, ["DependabotSecret"], () => require("./dependabotSecret"));

export { EmuGroupMappingArgs, EmuGroupMappingState } from "./emuGroupMapping";
export type EmuGroupMapping = import("./emuGroupMapping").EmuGroupMapping;
export const EmuGroupMapping: typeof import("./emuGroupMapping").EmuGroupMapping = null as any;
utilities.lazyLoad(exports, ["EmuGroupMapping"], () => require("./emuGroupMapping"));

export { EnterpriseOrganizationArgs, EnterpriseOrganizationState } from "./enterpriseOrganization";
export type EnterpriseOrganization = import("./enterpriseOrganization").EnterpriseOrganization;
export const EnterpriseOrganization: typeof import("./enterpriseOrganization").EnterpriseOrganization = null as any;
utilities.lazyLoad(exports, ["EnterpriseOrganization"], () => require("./enterpriseOrganization"));

export { GetActionsEnvironmentSecretsArgs, GetActionsEnvironmentSecretsResult, GetActionsEnvironmentSecretsOutputArgs } from "./getActionsEnvironmentSecrets";
export const getActionsEnvironmentSecrets: typeof import("./getActionsEnvironmentSecrets").getActionsEnvironmentSecrets = null as any;
export const getActionsEnvironmentSecretsOutput: typeof import("./getActionsEnvironmentSecrets").getActionsEnvironmentSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getActionsEnvironmentSecrets","getActionsEnvironmentSecretsOutput"], () => require("./getActionsEnvironmentSecrets"));

export { GetActionsEnvironmentVariablesArgs, GetActionsEnvironmentVariablesResult, GetActionsEnvironmentVariablesOutputArgs } from "./getActionsEnvironmentVariables";
export const getActionsEnvironmentVariables: typeof import("./getActionsEnvironmentVariables").getActionsEnvironmentVariables = null as any;
export const getActionsEnvironmentVariablesOutput: typeof import("./getActionsEnvironmentVariables").getActionsEnvironmentVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getActionsEnvironmentVariables","getActionsEnvironmentVariablesOutput"], () => require("./getActionsEnvironmentVariables"));

export { GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult } from "./getActionsOrganizationOidcSubjectClaimCustomizationTemplate";
export const getActionsOrganizationOidcSubjectClaimCustomizationTemplate: typeof import("./getActionsOrganizationOidcSubjectClaimCustomizationTemplate").getActionsOrganizationOidcSubjectClaimCustomizationTemplate = null as any;
export const getActionsOrganizationOidcSubjectClaimCustomizationTemplateOutput: typeof import("./getActionsOrganizationOidcSubjectClaimCustomizationTemplate").getActionsOrganizationOidcSubjectClaimCustomizationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getActionsOrganizationOidcSubjectClaimCustomizationTemplate","getActionsOrganizationOidcSubjectClaimCustomizationTemplateOutput"], () => require("./getActionsOrganizationOidcSubjectClaimCustomizationTemplate"));

export { GetActionsOrganizationPublicKeyResult } from "./getActionsOrganizationPublicKey";
export const getActionsOrganizationPublicKey: typeof import("./getActionsOrganizationPublicKey").getActionsOrganizationPublicKey = null as any;
export const getActionsOrganizationPublicKeyOutput: typeof import("./getActionsOrganizationPublicKey").getActionsOrganizationPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getActionsOrganizationPublicKey","getActionsOrganizationPublicKeyOutput"], () => require("./getActionsOrganizationPublicKey"));

export { GetActionsOrganizationRegistrationTokenResult } from "./getActionsOrganizationRegistrationToken";
export const getActionsOrganizationRegistrationToken: typeof import("./getActionsOrganizationRegistrationToken").getActionsOrganizationRegistrationToken = null as any;
export const getActionsOrganizationRegistrationTokenOutput: typeof import("./getActionsOrganizationRegistrationToken").getActionsOrganizationRegistrationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getActionsOrganizationRegistrationToken","getActionsOrganizationRegistrationTokenOutput"], () => require("./getActionsOrganizationRegistrationToken"));

export { GetActionsOrganizationSecretsResult } from "./getActionsOrganizationSecrets";
export const getActionsOrganizationSecrets: typeof import("./getActionsOrganizationSecrets").getActionsOrganizationSecrets = null as any;
export const getActionsOrganizationSecretsOutput: typeof import("./getActionsOrganizationSecrets").getActionsOrganizationSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getActionsOrganizationSecrets","getActionsOrganizationSecretsOutput"], () => require("./getActionsOrganizationSecrets"));

export { GetActionsOrganizationVariablesResult } from "./getActionsOrganizationVariables";
export const getActionsOrganizationVariables: typeof import("./getActionsOrganizationVariables").getActionsOrganizationVariables = null as any;
export const getActionsOrganizationVariablesOutput: typeof import("./getActionsOrganizationVariables").getActionsOrganizationVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getActionsOrganizationVariables","getActionsOrganizationVariablesOutput"], () => require("./getActionsOrganizationVariables"));

export { GetActionsPublicKeyArgs, GetActionsPublicKeyResult, GetActionsPublicKeyOutputArgs } from "./getActionsPublicKey";
export const getActionsPublicKey: typeof import("./getActionsPublicKey").getActionsPublicKey = null as any;
export const getActionsPublicKeyOutput: typeof import("./getActionsPublicKey").getActionsPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getActionsPublicKey","getActionsPublicKeyOutput"], () => require("./getActionsPublicKey"));

export { GetActionsRegistrationTokenArgs, GetActionsRegistrationTokenResult, GetActionsRegistrationTokenOutputArgs } from "./getActionsRegistrationToken";
export const getActionsRegistrationToken: typeof import("./getActionsRegistrationToken").getActionsRegistrationToken = null as any;
export const getActionsRegistrationTokenOutput: typeof import("./getActionsRegistrationToken").getActionsRegistrationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getActionsRegistrationToken","getActionsRegistrationTokenOutput"], () => require("./getActionsRegistrationToken"));

export { GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs, GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult, GetActionsRepositoryOidcSubjectClaimCustomizationTemplateOutputArgs } from "./getActionsRepositoryOidcSubjectClaimCustomizationTemplate";
export const getActionsRepositoryOidcSubjectClaimCustomizationTemplate: typeof import("./getActionsRepositoryOidcSubjectClaimCustomizationTemplate").getActionsRepositoryOidcSubjectClaimCustomizationTemplate = null as any;
export const getActionsRepositoryOidcSubjectClaimCustomizationTemplateOutput: typeof import("./getActionsRepositoryOidcSubjectClaimCustomizationTemplate").getActionsRepositoryOidcSubjectClaimCustomizationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getActionsRepositoryOidcSubjectClaimCustomizationTemplate","getActionsRepositoryOidcSubjectClaimCustomizationTemplateOutput"], () => require("./getActionsRepositoryOidcSubjectClaimCustomizationTemplate"));

export { GetActionsSecretsArgs, GetActionsSecretsResult, GetActionsSecretsOutputArgs } from "./getActionsSecrets";
export const getActionsSecrets: typeof import("./getActionsSecrets").getActionsSecrets = null as any;
export const getActionsSecretsOutput: typeof import("./getActionsSecrets").getActionsSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getActionsSecrets","getActionsSecretsOutput"], () => require("./getActionsSecrets"));

export { GetActionsVariablesArgs, GetActionsVariablesResult, GetActionsVariablesOutputArgs } from "./getActionsVariables";
export const getActionsVariables: typeof import("./getActionsVariables").getActionsVariables = null as any;
export const getActionsVariablesOutput: typeof import("./getActionsVariables").getActionsVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getActionsVariables","getActionsVariablesOutput"], () => require("./getActionsVariables"));

export { GetAppTokenArgs, GetAppTokenResult, GetAppTokenOutputArgs } from "./getAppToken";
export const getAppToken: typeof import("./getAppToken").getAppToken = null as any;
export const getAppTokenOutput: typeof import("./getAppToken").getAppTokenOutput = null as any;
utilities.lazyLoad(exports, ["getAppToken","getAppTokenOutput"], () => require("./getAppToken"));

export { GetBranchArgs, GetBranchResult, GetBranchOutputArgs } from "./getBranch";
export const getBranch: typeof import("./getBranch").getBranch = null as any;
export const getBranchOutput: typeof import("./getBranch").getBranchOutput = null as any;
utilities.lazyLoad(exports, ["getBranch","getBranchOutput"], () => require("./getBranch"));

export { GetBranchProtectionRulesArgs, GetBranchProtectionRulesResult, GetBranchProtectionRulesOutputArgs } from "./getBranchProtectionRules";
export const getBranchProtectionRules: typeof import("./getBranchProtectionRules").getBranchProtectionRules = null as any;
export const getBranchProtectionRulesOutput: typeof import("./getBranchProtectionRules").getBranchProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBranchProtectionRules","getBranchProtectionRulesOutput"], () => require("./getBranchProtectionRules"));

export { GetCodespacesOrganizationPublicKeyResult } from "./getCodespacesOrganizationPublicKey";
export const getCodespacesOrganizationPublicKey: typeof import("./getCodespacesOrganizationPublicKey").getCodespacesOrganizationPublicKey = null as any;
export const getCodespacesOrganizationPublicKeyOutput: typeof import("./getCodespacesOrganizationPublicKey").getCodespacesOrganizationPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesOrganizationPublicKey","getCodespacesOrganizationPublicKeyOutput"], () => require("./getCodespacesOrganizationPublicKey"));

export { GetCodespacesOrganizationSecretsResult } from "./getCodespacesOrganizationSecrets";
export const getCodespacesOrganizationSecrets: typeof import("./getCodespacesOrganizationSecrets").getCodespacesOrganizationSecrets = null as any;
export const getCodespacesOrganizationSecretsOutput: typeof import("./getCodespacesOrganizationSecrets").getCodespacesOrganizationSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesOrganizationSecrets","getCodespacesOrganizationSecretsOutput"], () => require("./getCodespacesOrganizationSecrets"));

export { GetCodespacesPublicKeyArgs, GetCodespacesPublicKeyResult, GetCodespacesPublicKeyOutputArgs } from "./getCodespacesPublicKey";
export const getCodespacesPublicKey: typeof import("./getCodespacesPublicKey").getCodespacesPublicKey = null as any;
export const getCodespacesPublicKeyOutput: typeof import("./getCodespacesPublicKey").getCodespacesPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesPublicKey","getCodespacesPublicKeyOutput"], () => require("./getCodespacesPublicKey"));

export { GetCodespacesSecretsArgs, GetCodespacesSecretsResult, GetCodespacesSecretsOutputArgs } from "./getCodespacesSecrets";
export const getCodespacesSecrets: typeof import("./getCodespacesSecrets").getCodespacesSecrets = null as any;
export const getCodespacesSecretsOutput: typeof import("./getCodespacesSecrets").getCodespacesSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesSecrets","getCodespacesSecretsOutput"], () => require("./getCodespacesSecrets"));

export { GetCodespacesUserPublicKeyResult } from "./getCodespacesUserPublicKey";
export const getCodespacesUserPublicKey: typeof import("./getCodespacesUserPublicKey").getCodespacesUserPublicKey = null as any;
export const getCodespacesUserPublicKeyOutput: typeof import("./getCodespacesUserPublicKey").getCodespacesUserPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesUserPublicKey","getCodespacesUserPublicKeyOutput"], () => require("./getCodespacesUserPublicKey"));

export { GetCodespacesUserSecretsResult } from "./getCodespacesUserSecrets";
export const getCodespacesUserSecrets: typeof import("./getCodespacesUserSecrets").getCodespacesUserSecrets = null as any;
export const getCodespacesUserSecretsOutput: typeof import("./getCodespacesUserSecrets").getCodespacesUserSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getCodespacesUserSecrets","getCodespacesUserSecretsOutput"], () => require("./getCodespacesUserSecrets"));

export { GetCollaboratorsArgs, GetCollaboratorsResult, GetCollaboratorsOutputArgs } from "./getCollaborators";
export const getCollaborators: typeof import("./getCollaborators").getCollaborators = null as any;
export const getCollaboratorsOutput: typeof import("./getCollaborators").getCollaboratorsOutput = null as any;
utilities.lazyLoad(exports, ["getCollaborators","getCollaboratorsOutput"], () => require("./getCollaborators"));

export { GetDependabotOrganizationPublicKeyResult } from "./getDependabotOrganizationPublicKey";
export const getDependabotOrganizationPublicKey: typeof import("./getDependabotOrganizationPublicKey").getDependabotOrganizationPublicKey = null as any;
export const getDependabotOrganizationPublicKeyOutput: typeof import("./getDependabotOrganizationPublicKey").getDependabotOrganizationPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDependabotOrganizationPublicKey","getDependabotOrganizationPublicKeyOutput"], () => require("./getDependabotOrganizationPublicKey"));

export { GetDependabotOrganizationSecretsResult } from "./getDependabotOrganizationSecrets";
export const getDependabotOrganizationSecrets: typeof import("./getDependabotOrganizationSecrets").getDependabotOrganizationSecrets = null as any;
export const getDependabotOrganizationSecretsOutput: typeof import("./getDependabotOrganizationSecrets").getDependabotOrganizationSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getDependabotOrganizationSecrets","getDependabotOrganizationSecretsOutput"], () => require("./getDependabotOrganizationSecrets"));

export { GetDependabotPublicKeyArgs, GetDependabotPublicKeyResult, GetDependabotPublicKeyOutputArgs } from "./getDependabotPublicKey";
export const getDependabotPublicKey: typeof import("./getDependabotPublicKey").getDependabotPublicKey = null as any;
export const getDependabotPublicKeyOutput: typeof import("./getDependabotPublicKey").getDependabotPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDependabotPublicKey","getDependabotPublicKeyOutput"], () => require("./getDependabotPublicKey"));

export { GetDependabotSecretsArgs, GetDependabotSecretsResult, GetDependabotSecretsOutputArgs } from "./getDependabotSecrets";
export const getDependabotSecrets: typeof import("./getDependabotSecrets").getDependabotSecrets = null as any;
export const getDependabotSecretsOutput: typeof import("./getDependabotSecrets").getDependabotSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getDependabotSecrets","getDependabotSecretsOutput"], () => require("./getDependabotSecrets"));

export { GetEnterpriseArgs, GetEnterpriseResult, GetEnterpriseOutputArgs } from "./getEnterprise";
export const getEnterprise: typeof import("./getEnterprise").getEnterprise = null as any;
export const getEnterpriseOutput: typeof import("./getEnterprise").getEnterpriseOutput = null as any;
utilities.lazyLoad(exports, ["getEnterprise","getEnterpriseOutput"], () => require("./getEnterprise"));

export { GetExternalGroupsResult } from "./getExternalGroups";
export const getExternalGroups: typeof import("./getExternalGroups").getExternalGroups = null as any;
export const getExternalGroupsOutput: typeof import("./getExternalGroups").getExternalGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getExternalGroups","getExternalGroupsOutput"], () => require("./getExternalGroups"));

export { GetGithubAppArgs, GetGithubAppResult, GetGithubAppOutputArgs } from "./getGithubApp";
export const getGithubApp: typeof import("./getGithubApp").getGithubApp = null as any;
export const getGithubAppOutput: typeof import("./getGithubApp").getGithubAppOutput = null as any;
utilities.lazyLoad(exports, ["getGithubApp","getGithubAppOutput"], () => require("./getGithubApp"));

export { GetIpRangesResult } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { GetIssueLabelsArgs, GetIssueLabelsResult, GetIssueLabelsOutputArgs } from "./getIssueLabels";
export const getIssueLabels: typeof import("./getIssueLabels").getIssueLabels = null as any;
export const getIssueLabelsOutput: typeof import("./getIssueLabels").getIssueLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getIssueLabels","getIssueLabelsOutput"], () => require("./getIssueLabels"));

export { GetMembershipArgs, GetMembershipResult, GetMembershipOutputArgs } from "./getMembership";
export const getMembership: typeof import("./getMembership").getMembership = null as any;
export const getMembershipOutput: typeof import("./getMembership").getMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getMembership","getMembershipOutput"], () => require("./getMembership"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationCustomRoleArgs, GetOrganizationCustomRoleResult, GetOrganizationCustomRoleOutputArgs } from "./getOrganizationCustomRole";
export const getOrganizationCustomRole: typeof import("./getOrganizationCustomRole").getOrganizationCustomRole = null as any;
export const getOrganizationCustomRoleOutput: typeof import("./getOrganizationCustomRole").getOrganizationCustomRoleOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationCustomRole","getOrganizationCustomRoleOutput"], () => require("./getOrganizationCustomRole"));

export { GetOrganizationExternalIdentitiesResult } from "./getOrganizationExternalIdentities";
export const getOrganizationExternalIdentities: typeof import("./getOrganizationExternalIdentities").getOrganizationExternalIdentities = null as any;
export const getOrganizationExternalIdentitiesOutput: typeof import("./getOrganizationExternalIdentities").getOrganizationExternalIdentitiesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationExternalIdentities","getOrganizationExternalIdentitiesOutput"], () => require("./getOrganizationExternalIdentities"));

export { GetOrganizationIpAllowListResult } from "./getOrganizationIpAllowList";
export const getOrganizationIpAllowList: typeof import("./getOrganizationIpAllowList").getOrganizationIpAllowList = null as any;
export const getOrganizationIpAllowListOutput: typeof import("./getOrganizationIpAllowList").getOrganizationIpAllowListOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationIpAllowList","getOrganizationIpAllowListOutput"], () => require("./getOrganizationIpAllowList"));

export { GetOrganizationTeamSyncGroupsResult } from "./getOrganizationTeamSyncGroups";
export const getOrganizationTeamSyncGroups: typeof import("./getOrganizationTeamSyncGroups").getOrganizationTeamSyncGroups = null as any;
export const getOrganizationTeamSyncGroupsOutput: typeof import("./getOrganizationTeamSyncGroups").getOrganizationTeamSyncGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationTeamSyncGroups","getOrganizationTeamSyncGroupsOutput"], () => require("./getOrganizationTeamSyncGroups"));

export { GetOrganizationTeamsArgs, GetOrganizationTeamsResult, GetOrganizationTeamsOutputArgs } from "./getOrganizationTeams";
export const getOrganizationTeams: typeof import("./getOrganizationTeams").getOrganizationTeams = null as any;
export const getOrganizationTeamsOutput: typeof import("./getOrganizationTeams").getOrganizationTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationTeams","getOrganizationTeamsOutput"], () => require("./getOrganizationTeams"));

export { GetOrganizationWebhooksResult } from "./getOrganizationWebhooks";
export const getOrganizationWebhooks: typeof import("./getOrganizationWebhooks").getOrganizationWebhooks = null as any;
export const getOrganizationWebhooksOutput: typeof import("./getOrganizationWebhooks").getOrganizationWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationWebhooks","getOrganizationWebhooksOutput"], () => require("./getOrganizationWebhooks"));

export { GetRefArgs, GetRefResult, GetRefOutputArgs } from "./getRef";
export const getRef: typeof import("./getRef").getRef = null as any;
export const getRefOutput: typeof import("./getRef").getRefOutput = null as any;
utilities.lazyLoad(exports, ["getRef","getRefOutput"], () => require("./getRef"));

export { GetReleaseArgs, GetReleaseResult, GetReleaseOutputArgs } from "./getRelease";
export const getRelease: typeof import("./getRelease").getRelease = null as any;
export const getReleaseOutput: typeof import("./getRelease").getReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getRelease","getReleaseOutput"], () => require("./getRelease"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetRepositoryAutolinkReferencesArgs, GetRepositoryAutolinkReferencesResult, GetRepositoryAutolinkReferencesOutputArgs } from "./getRepositoryAutolinkReferences";
export const getRepositoryAutolinkReferences: typeof import("./getRepositoryAutolinkReferences").getRepositoryAutolinkReferences = null as any;
export const getRepositoryAutolinkReferencesOutput: typeof import("./getRepositoryAutolinkReferences").getRepositoryAutolinkReferencesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryAutolinkReferences","getRepositoryAutolinkReferencesOutput"], () => require("./getRepositoryAutolinkReferences"));

export { GetRepositoryBranchesArgs, GetRepositoryBranchesResult, GetRepositoryBranchesOutputArgs } from "./getRepositoryBranches";
export const getRepositoryBranches: typeof import("./getRepositoryBranches").getRepositoryBranches = null as any;
export const getRepositoryBranchesOutput: typeof import("./getRepositoryBranches").getRepositoryBranchesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryBranches","getRepositoryBranchesOutput"], () => require("./getRepositoryBranches"));

export { GetRepositoryDeployKeysArgs, GetRepositoryDeployKeysResult, GetRepositoryDeployKeysOutputArgs } from "./getRepositoryDeployKeys";
export const getRepositoryDeployKeys: typeof import("./getRepositoryDeployKeys").getRepositoryDeployKeys = null as any;
export const getRepositoryDeployKeysOutput: typeof import("./getRepositoryDeployKeys").getRepositoryDeployKeysOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDeployKeys","getRepositoryDeployKeysOutput"], () => require("./getRepositoryDeployKeys"));

export { GetRepositoryDeploymentBranchPoliciesArgs, GetRepositoryDeploymentBranchPoliciesResult, GetRepositoryDeploymentBranchPoliciesOutputArgs } from "./getRepositoryDeploymentBranchPolicies";
export const getRepositoryDeploymentBranchPolicies: typeof import("./getRepositoryDeploymentBranchPolicies").getRepositoryDeploymentBranchPolicies = null as any;
export const getRepositoryDeploymentBranchPoliciesOutput: typeof import("./getRepositoryDeploymentBranchPolicies").getRepositoryDeploymentBranchPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDeploymentBranchPolicies","getRepositoryDeploymentBranchPoliciesOutput"], () => require("./getRepositoryDeploymentBranchPolicies"));

export { GetRepositoryEnvironmentsArgs, GetRepositoryEnvironmentsResult, GetRepositoryEnvironmentsOutputArgs } from "./getRepositoryEnvironments";
export const getRepositoryEnvironments: typeof import("./getRepositoryEnvironments").getRepositoryEnvironments = null as any;
export const getRepositoryEnvironmentsOutput: typeof import("./getRepositoryEnvironments").getRepositoryEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryEnvironments","getRepositoryEnvironmentsOutput"], () => require("./getRepositoryEnvironments"));

export { GetRepositoryFileArgs, GetRepositoryFileResult, GetRepositoryFileOutputArgs } from "./getRepositoryFile";
export const getRepositoryFile: typeof import("./getRepositoryFile").getRepositoryFile = null as any;
export const getRepositoryFileOutput: typeof import("./getRepositoryFile").getRepositoryFileOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryFile","getRepositoryFileOutput"], () => require("./getRepositoryFile"));

export { GetRepositoryMilestoneArgs, GetRepositoryMilestoneResult, GetRepositoryMilestoneOutputArgs } from "./getRepositoryMilestone";
export const getRepositoryMilestone: typeof import("./getRepositoryMilestone").getRepositoryMilestone = null as any;
export const getRepositoryMilestoneOutput: typeof import("./getRepositoryMilestone").getRepositoryMilestoneOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMilestone","getRepositoryMilestoneOutput"], () => require("./getRepositoryMilestone"));

export { GetRepositoryPullRequestArgs, GetRepositoryPullRequestResult, GetRepositoryPullRequestOutputArgs } from "./getRepositoryPullRequest";
export const getRepositoryPullRequest: typeof import("./getRepositoryPullRequest").getRepositoryPullRequest = null as any;
export const getRepositoryPullRequestOutput: typeof import("./getRepositoryPullRequest").getRepositoryPullRequestOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPullRequest","getRepositoryPullRequestOutput"], () => require("./getRepositoryPullRequest"));

export { GetRepositoryPullRequestsArgs, GetRepositoryPullRequestsResult, GetRepositoryPullRequestsOutputArgs } from "./getRepositoryPullRequests";
export const getRepositoryPullRequests: typeof import("./getRepositoryPullRequests").getRepositoryPullRequests = null as any;
export const getRepositoryPullRequestsOutput: typeof import("./getRepositoryPullRequests").getRepositoryPullRequestsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPullRequests","getRepositoryPullRequestsOutput"], () => require("./getRepositoryPullRequests"));

export { GetRepositoryTeamsArgs, GetRepositoryTeamsResult, GetRepositoryTeamsOutputArgs } from "./getRepositoryTeams";
export const getRepositoryTeams: typeof import("./getRepositoryTeams").getRepositoryTeams = null as any;
export const getRepositoryTeamsOutput: typeof import("./getRepositoryTeams").getRepositoryTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryTeams","getRepositoryTeamsOutput"], () => require("./getRepositoryTeams"));

export { GetRepositoryWebhooksArgs, GetRepositoryWebhooksResult, GetRepositoryWebhooksOutputArgs } from "./getRepositoryWebhooks";
export const getRepositoryWebhooks: typeof import("./getRepositoryWebhooks").getRepositoryWebhooks = null as any;
export const getRepositoryWebhooksOutput: typeof import("./getRepositoryWebhooks").getRepositoryWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryWebhooks","getRepositoryWebhooksOutput"], () => require("./getRepositoryWebhooks"));

export { GetRestApiArgs, GetRestApiResult, GetRestApiOutputArgs } from "./getRestApi";
export const getRestApi: typeof import("./getRestApi").getRestApi = null as any;
export const getRestApiOutput: typeof import("./getRestApi").getRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getRestApi","getRestApiOutput"], () => require("./getRestApi"));

export { GetSshKeysResult } from "./getSshKeys";
export const getSshKeys: typeof import("./getSshKeys").getSshKeys = null as any;
export const getSshKeysOutput: typeof import("./getSshKeys").getSshKeysOutput = null as any;
utilities.lazyLoad(exports, ["getSshKeys","getSshKeysOutput"], () => require("./getSshKeys"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTreeArgs, GetTreeResult, GetTreeOutputArgs } from "./getTree";
export const getTree: typeof import("./getTree").getTree = null as any;
export const getTreeOutput: typeof import("./getTree").getTreeOutput = null as any;
utilities.lazyLoad(exports, ["getTree","getTreeOutput"], () => require("./getTree"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserExternalIdentityArgs, GetUserExternalIdentityResult, GetUserExternalIdentityOutputArgs } from "./getUserExternalIdentity";
export const getUserExternalIdentity: typeof import("./getUserExternalIdentity").getUserExternalIdentity = null as any;
export const getUserExternalIdentityOutput: typeof import("./getUserExternalIdentity").getUserExternalIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getUserExternalIdentity","getUserExternalIdentityOutput"], () => require("./getUserExternalIdentity"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { IssueArgs, IssueState } from "./issue";
export type Issue = import("./issue").Issue;
export const Issue: typeof import("./issue").Issue = null as any;
utilities.lazyLoad(exports, ["Issue"], () => require("./issue"));

export { IssueLabelArgs, IssueLabelState } from "./issueLabel";
export type IssueLabel = import("./issueLabel").IssueLabel;
export const IssueLabel: typeof import("./issueLabel").IssueLabel = null as any;
utilities.lazyLoad(exports, ["IssueLabel"], () => require("./issueLabel"));

export { MembershipArgs, MembershipState } from "./membership";
export type Membership = import("./membership").Membership;
export const Membership: typeof import("./membership").Membership = null as any;
utilities.lazyLoad(exports, ["Membership"], () => require("./membership"));

export { OrganizationBlockArgs, OrganizationBlockState } from "./organizationBlock";
export type OrganizationBlock = import("./organizationBlock").OrganizationBlock;
export const OrganizationBlock: typeof import("./organizationBlock").OrganizationBlock = null as any;
utilities.lazyLoad(exports, ["OrganizationBlock"], () => require("./organizationBlock"));

export { OrganizationCustomRoleArgs, OrganizationCustomRoleState } from "./organizationCustomRole";
export type OrganizationCustomRole = import("./organizationCustomRole").OrganizationCustomRole;
export const OrganizationCustomRole: typeof import("./organizationCustomRole").OrganizationCustomRole = null as any;
utilities.lazyLoad(exports, ["OrganizationCustomRole"], () => require("./organizationCustomRole"));

export { OrganizationProjectArgs, OrganizationProjectState } from "./organizationProject";
export type OrganizationProject = import("./organizationProject").OrganizationProject;
export const OrganizationProject: typeof import("./organizationProject").OrganizationProject = null as any;
utilities.lazyLoad(exports, ["OrganizationProject"], () => require("./organizationProject"));

export { OrganizationRulesetArgs, OrganizationRulesetState } from "./organizationRuleset";
export type OrganizationRuleset = import("./organizationRuleset").OrganizationRuleset;
export const OrganizationRuleset: typeof import("./organizationRuleset").OrganizationRuleset = null as any;
utilities.lazyLoad(exports, ["OrganizationRuleset"], () => require("./organizationRuleset"));

export { OrganizationSecurityManagerArgs, OrganizationSecurityManagerState } from "./organizationSecurityManager";
export type OrganizationSecurityManager = import("./organizationSecurityManager").OrganizationSecurityManager;
export const OrganizationSecurityManager: typeof import("./organizationSecurityManager").OrganizationSecurityManager = null as any;
utilities.lazyLoad(exports, ["OrganizationSecurityManager"], () => require("./organizationSecurityManager"));

export { OrganizationSettingsArgs, OrganizationSettingsState } from "./organizationSettings";
export type OrganizationSettings = import("./organizationSettings").OrganizationSettings;
export const OrganizationSettings: typeof import("./organizationSettings").OrganizationSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationSettings"], () => require("./organizationSettings"));

export { OrganizationWebhookArgs, OrganizationWebhookState } from "./organizationWebhook";
export type OrganizationWebhook = import("./organizationWebhook").OrganizationWebhook;
export const OrganizationWebhook: typeof import("./organizationWebhook").OrganizationWebhook = null as any;
utilities.lazyLoad(exports, ["OrganizationWebhook"], () => require("./organizationWebhook"));

export { ProjectCardArgs, ProjectCardState } from "./projectCard";
export type ProjectCard = import("./projectCard").ProjectCard;
export const ProjectCard: typeof import("./projectCard").ProjectCard = null as any;
utilities.lazyLoad(exports, ["ProjectCard"], () => require("./projectCard"));

export { ProjectColumnArgs, ProjectColumnState } from "./projectColumn";
export type ProjectColumn = import("./projectColumn").ProjectColumn;
export const ProjectColumn: typeof import("./projectColumn").ProjectColumn = null as any;
utilities.lazyLoad(exports, ["ProjectColumn"], () => require("./projectColumn"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReleaseArgs, ReleaseState } from "./release";
export type Release = import("./release").Release;
export const Release: typeof import("./release").Release = null as any;
utilities.lazyLoad(exports, ["Release"], () => require("./release"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryAutolinkReferenceArgs, RepositoryAutolinkReferenceState } from "./repositoryAutolinkReference";
export type RepositoryAutolinkReference = import("./repositoryAutolinkReference").RepositoryAutolinkReference;
export const RepositoryAutolinkReference: typeof import("./repositoryAutolinkReference").RepositoryAutolinkReference = null as any;
utilities.lazyLoad(exports, ["RepositoryAutolinkReference"], () => require("./repositoryAutolinkReference"));

export { RepositoryCollaboratorArgs, RepositoryCollaboratorState } from "./repositoryCollaborator";
export type RepositoryCollaborator = import("./repositoryCollaborator").RepositoryCollaborator;
export const RepositoryCollaborator: typeof import("./repositoryCollaborator").RepositoryCollaborator = null as any;
utilities.lazyLoad(exports, ["RepositoryCollaborator"], () => require("./repositoryCollaborator"));

export { RepositoryCollaboratorsArgs, RepositoryCollaboratorsState } from "./repositoryCollaborators";
export type RepositoryCollaborators = import("./repositoryCollaborators").RepositoryCollaborators;
export const RepositoryCollaborators: typeof import("./repositoryCollaborators").RepositoryCollaborators = null as any;
utilities.lazyLoad(exports, ["RepositoryCollaborators"], () => require("./repositoryCollaborators"));

export { RepositoryDependabotSecurityUpdatesArgs, RepositoryDependabotSecurityUpdatesState } from "./repositoryDependabotSecurityUpdates";
export type RepositoryDependabotSecurityUpdates = import("./repositoryDependabotSecurityUpdates").RepositoryDependabotSecurityUpdates;
export const RepositoryDependabotSecurityUpdates: typeof import("./repositoryDependabotSecurityUpdates").RepositoryDependabotSecurityUpdates = null as any;
utilities.lazyLoad(exports, ["RepositoryDependabotSecurityUpdates"], () => require("./repositoryDependabotSecurityUpdates"));

export { RepositoryDeployKeyArgs, RepositoryDeployKeyState } from "./repositoryDeployKey";
export type RepositoryDeployKey = import("./repositoryDeployKey").RepositoryDeployKey;
export const RepositoryDeployKey: typeof import("./repositoryDeployKey").RepositoryDeployKey = null as any;
utilities.lazyLoad(exports, ["RepositoryDeployKey"], () => require("./repositoryDeployKey"));

export { RepositoryDeploymentBranchPolicyArgs, RepositoryDeploymentBranchPolicyState } from "./repositoryDeploymentBranchPolicy";
export type RepositoryDeploymentBranchPolicy = import("./repositoryDeploymentBranchPolicy").RepositoryDeploymentBranchPolicy;
export const RepositoryDeploymentBranchPolicy: typeof import("./repositoryDeploymentBranchPolicy").RepositoryDeploymentBranchPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryDeploymentBranchPolicy"], () => require("./repositoryDeploymentBranchPolicy"));

export { RepositoryEnvironmentArgs, RepositoryEnvironmentState } from "./repositoryEnvironment";
export type RepositoryEnvironment = import("./repositoryEnvironment").RepositoryEnvironment;
export const RepositoryEnvironment: typeof import("./repositoryEnvironment").RepositoryEnvironment = null as any;
utilities.lazyLoad(exports, ["RepositoryEnvironment"], () => require("./repositoryEnvironment"));

export { RepositoryEnvironmentDeploymentPolicyArgs, RepositoryEnvironmentDeploymentPolicyState } from "./repositoryEnvironmentDeploymentPolicy";
export type RepositoryEnvironmentDeploymentPolicy = import("./repositoryEnvironmentDeploymentPolicy").RepositoryEnvironmentDeploymentPolicy;
export const RepositoryEnvironmentDeploymentPolicy: typeof import("./repositoryEnvironmentDeploymentPolicy").RepositoryEnvironmentDeploymentPolicy = null as any;
utilities.lazyLoad(exports, ["RepositoryEnvironmentDeploymentPolicy"], () => require("./repositoryEnvironmentDeploymentPolicy"));

export { RepositoryFileArgs, RepositoryFileState } from "./repositoryFile";
export type RepositoryFile = import("./repositoryFile").RepositoryFile;
export const RepositoryFile: typeof import("./repositoryFile").RepositoryFile = null as any;
utilities.lazyLoad(exports, ["RepositoryFile"], () => require("./repositoryFile"));

export { RepositoryMilestoneArgs, RepositoryMilestoneState } from "./repositoryMilestone";
export type RepositoryMilestone = import("./repositoryMilestone").RepositoryMilestone;
export const RepositoryMilestone: typeof import("./repositoryMilestone").RepositoryMilestone = null as any;
utilities.lazyLoad(exports, ["RepositoryMilestone"], () => require("./repositoryMilestone"));

export { RepositoryProjectArgs, RepositoryProjectState } from "./repositoryProject";
export type RepositoryProject = import("./repositoryProject").RepositoryProject;
export const RepositoryProject: typeof import("./repositoryProject").RepositoryProject = null as any;
utilities.lazyLoad(exports, ["RepositoryProject"], () => require("./repositoryProject"));

export { RepositoryPullRequestArgs, RepositoryPullRequestState } from "./repositoryPullRequest";
export type RepositoryPullRequest = import("./repositoryPullRequest").RepositoryPullRequest;
export const RepositoryPullRequest: typeof import("./repositoryPullRequest").RepositoryPullRequest = null as any;
utilities.lazyLoad(exports, ["RepositoryPullRequest"], () => require("./repositoryPullRequest"));

export { RepositoryRulesetArgs, RepositoryRulesetState } from "./repositoryRuleset";
export type RepositoryRuleset = import("./repositoryRuleset").RepositoryRuleset;
export const RepositoryRuleset: typeof import("./repositoryRuleset").RepositoryRuleset = null as any;
utilities.lazyLoad(exports, ["RepositoryRuleset"], () => require("./repositoryRuleset"));

export { RepositoryTagProtectionArgs, RepositoryTagProtectionState } from "./repositoryTagProtection";
export type RepositoryTagProtection = import("./repositoryTagProtection").RepositoryTagProtection;
export const RepositoryTagProtection: typeof import("./repositoryTagProtection").RepositoryTagProtection = null as any;
utilities.lazyLoad(exports, ["RepositoryTagProtection"], () => require("./repositoryTagProtection"));

export { RepositoryTopicsArgs, RepositoryTopicsState } from "./repositoryTopics";
export type RepositoryTopics = import("./repositoryTopics").RepositoryTopics;
export const RepositoryTopics: typeof import("./repositoryTopics").RepositoryTopics = null as any;
utilities.lazyLoad(exports, ["RepositoryTopics"], () => require("./repositoryTopics"));

export { RepositoryWebhookArgs, RepositoryWebhookState } from "./repositoryWebhook";
export type RepositoryWebhook = import("./repositoryWebhook").RepositoryWebhook;
export const RepositoryWebhook: typeof import("./repositoryWebhook").RepositoryWebhook = null as any;
utilities.lazyLoad(exports, ["RepositoryWebhook"], () => require("./repositoryWebhook"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembersArgs, TeamMembersState } from "./teamMembers";
export type TeamMembers = import("./teamMembers").TeamMembers;
export const TeamMembers: typeof import("./teamMembers").TeamMembers = null as any;
utilities.lazyLoad(exports, ["TeamMembers"], () => require("./teamMembers"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));

export { TeamRepositoryArgs, TeamRepositoryState } from "./teamRepository";
export type TeamRepository = import("./teamRepository").TeamRepository;
export const TeamRepository: typeof import("./teamRepository").TeamRepository = null as any;
utilities.lazyLoad(exports, ["TeamRepository"], () => require("./teamRepository"));

export { TeamSettingsArgs, TeamSettingsState } from "./teamSettings";
export type TeamSettings = import("./teamSettings").TeamSettings;
export const TeamSettings: typeof import("./teamSettings").TeamSettings = null as any;
utilities.lazyLoad(exports, ["TeamSettings"], () => require("./teamSettings"));

export { TeamSyncGroupMappingArgs, TeamSyncGroupMappingState } from "./teamSyncGroupMapping";
export type TeamSyncGroupMapping = import("./teamSyncGroupMapping").TeamSyncGroupMapping;
export const TeamSyncGroupMapping: typeof import("./teamSyncGroupMapping").TeamSyncGroupMapping = null as any;
utilities.lazyLoad(exports, ["TeamSyncGroupMapping"], () => require("./teamSyncGroupMapping"));

export { UserGpgKeyArgs, UserGpgKeyState } from "./userGpgKey";
export type UserGpgKey = import("./userGpgKey").UserGpgKey;
export const UserGpgKey: typeof import("./userGpgKey").UserGpgKey = null as any;
utilities.lazyLoad(exports, ["UserGpgKey"], () => require("./userGpgKey"));

export { UserInvitationAccepterArgs, UserInvitationAccepterState } from "./userInvitationAccepter";
export type UserInvitationAccepter = import("./userInvitationAccepter").UserInvitationAccepter;
export const UserInvitationAccepter: typeof import("./userInvitationAccepter").UserInvitationAccepter = null as any;
utilities.lazyLoad(exports, ["UserInvitationAccepter"], () => require("./userInvitationAccepter"));

export { UserSshKeyArgs, UserSshKeyState } from "./userSshKey";
export type UserSshKey = import("./userSshKey").UserSshKey;
export const UserSshKey: typeof import("./userSshKey").UserSshKey = null as any;
utilities.lazyLoad(exports, ["UserSshKey"], () => require("./userSshKey"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret":
                return new ActionsEnvironmentSecret(name, <any>undefined, { urn })
            case "github:index/actionsEnvironmentVariable:ActionsEnvironmentVariable":
                return new ActionsEnvironmentVariable(name, <any>undefined, { urn })
            case "github:index/actionsOrganizationOidcSubjectClaimCustomizationTemplate:ActionsOrganizationOidcSubjectClaimCustomizationTemplate":
                return new ActionsOrganizationOidcSubjectClaimCustomizationTemplate(name, <any>undefined, { urn })
            case "github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions":
                return new ActionsOrganizationPermissions(name, <any>undefined, { urn })
            case "github:index/actionsOrganizationSecret:ActionsOrganizationSecret":
                return new ActionsOrganizationSecret(name, <any>undefined, { urn })
            case "github:index/actionsOrganizationSecretRepositories:ActionsOrganizationSecretRepositories":
                return new ActionsOrganizationSecretRepositories(name, <any>undefined, { urn })
            case "github:index/actionsOrganizationVariable:ActionsOrganizationVariable":
                return new ActionsOrganizationVariable(name, <any>undefined, { urn })
            case "github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel":
                return new ActionsRepositoryAccessLevel(name, <any>undefined, { urn })
            case "github:index/actionsRepositoryOidcSubjectClaimCustomizationTemplate:ActionsRepositoryOidcSubjectClaimCustomizationTemplate":
                return new ActionsRepositoryOidcSubjectClaimCustomizationTemplate(name, <any>undefined, { urn })
            case "github:index/actionsRepositoryPermissions:ActionsRepositoryPermissions":
                return new ActionsRepositoryPermissions(name, <any>undefined, { urn })
            case "github:index/actionsRunnerGroup:ActionsRunnerGroup":
                return new ActionsRunnerGroup(name, <any>undefined, { urn })
            case "github:index/actionsSecret:ActionsSecret":
                return new ActionsSecret(name, <any>undefined, { urn })
            case "github:index/actionsVariable:ActionsVariable":
                return new ActionsVariable(name, <any>undefined, { urn })
            case "github:index/appInstallationRepositories:AppInstallationRepositories":
                return new AppInstallationRepositories(name, <any>undefined, { urn })
            case "github:index/appInstallationRepository:AppInstallationRepository":
                return new AppInstallationRepository(name, <any>undefined, { urn })
            case "github:index/branch:Branch":
                return new Branch(name, <any>undefined, { urn })
            case "github:index/branchDefault:BranchDefault":
                return new BranchDefault(name, <any>undefined, { urn })
            case "github:index/branchProtection:BranchProtection":
                return new BranchProtection(name, <any>undefined, { urn })
            case "github:index/branchProtectionV3:BranchProtectionV3":
                return new BranchProtectionV3(name, <any>undefined, { urn })
            case "github:index/codespacesOrganizationSecret:CodespacesOrganizationSecret":
                return new CodespacesOrganizationSecret(name, <any>undefined, { urn })
            case "github:index/codespacesOrganizationSecretRepositories:CodespacesOrganizationSecretRepositories":
                return new CodespacesOrganizationSecretRepositories(name, <any>undefined, { urn })
            case "github:index/codespacesSecret:CodespacesSecret":
                return new CodespacesSecret(name, <any>undefined, { urn })
            case "github:index/codespacesUserSecret:CodespacesUserSecret":
                return new CodespacesUserSecret(name, <any>undefined, { urn })
            case "github:index/dependabotOrganizationSecret:DependabotOrganizationSecret":
                return new DependabotOrganizationSecret(name, <any>undefined, { urn })
            case "github:index/dependabotOrganizationSecretRepositories:DependabotOrganizationSecretRepositories":
                return new DependabotOrganizationSecretRepositories(name, <any>undefined, { urn })
            case "github:index/dependabotSecret:DependabotSecret":
                return new DependabotSecret(name, <any>undefined, { urn })
            case "github:index/emuGroupMapping:EmuGroupMapping":
                return new EmuGroupMapping(name, <any>undefined, { urn })
            case "github:index/enterpriseOrganization:EnterpriseOrganization":
                return new EnterpriseOrganization(name, <any>undefined, { urn })
            case "github:index/issue:Issue":
                return new Issue(name, <any>undefined, { urn })
            case "github:index/issueLabel:IssueLabel":
                return new IssueLabel(name, <any>undefined, { urn })
            case "github:index/membership:Membership":
                return new Membership(name, <any>undefined, { urn })
            case "github:index/organizationBlock:OrganizationBlock":
                return new OrganizationBlock(name, <any>undefined, { urn })
            case "github:index/organizationCustomRole:OrganizationCustomRole":
                return new OrganizationCustomRole(name, <any>undefined, { urn })
            case "github:index/organizationProject:OrganizationProject":
                return new OrganizationProject(name, <any>undefined, { urn })
            case "github:index/organizationRuleset:OrganizationRuleset":
                return new OrganizationRuleset(name, <any>undefined, { urn })
            case "github:index/organizationSecurityManager:OrganizationSecurityManager":
                return new OrganizationSecurityManager(name, <any>undefined, { urn })
            case "github:index/organizationSettings:OrganizationSettings":
                return new OrganizationSettings(name, <any>undefined, { urn })
            case "github:index/organizationWebhook:OrganizationWebhook":
                return new OrganizationWebhook(name, <any>undefined, { urn })
            case "github:index/projectCard:ProjectCard":
                return new ProjectCard(name, <any>undefined, { urn })
            case "github:index/projectColumn:ProjectColumn":
                return new ProjectColumn(name, <any>undefined, { urn })
            case "github:index/release:Release":
                return new Release(name, <any>undefined, { urn })
            case "github:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "github:index/repositoryAutolinkReference:RepositoryAutolinkReference":
                return new RepositoryAutolinkReference(name, <any>undefined, { urn })
            case "github:index/repositoryCollaborator:RepositoryCollaborator":
                return new RepositoryCollaborator(name, <any>undefined, { urn })
            case "github:index/repositoryCollaborators:RepositoryCollaborators":
                return new RepositoryCollaborators(name, <any>undefined, { urn })
            case "github:index/repositoryDependabotSecurityUpdates:RepositoryDependabotSecurityUpdates":
                return new RepositoryDependabotSecurityUpdates(name, <any>undefined, { urn })
            case "github:index/repositoryDeployKey:RepositoryDeployKey":
                return new RepositoryDeployKey(name, <any>undefined, { urn })
            case "github:index/repositoryDeploymentBranchPolicy:RepositoryDeploymentBranchPolicy":
                return new RepositoryDeploymentBranchPolicy(name, <any>undefined, { urn })
            case "github:index/repositoryEnvironment:RepositoryEnvironment":
                return new RepositoryEnvironment(name, <any>undefined, { urn })
            case "github:index/repositoryEnvironmentDeploymentPolicy:RepositoryEnvironmentDeploymentPolicy":
                return new RepositoryEnvironmentDeploymentPolicy(name, <any>undefined, { urn })
            case "github:index/repositoryFile:RepositoryFile":
                return new RepositoryFile(name, <any>undefined, { urn })
            case "github:index/repositoryMilestone:RepositoryMilestone":
                return new RepositoryMilestone(name, <any>undefined, { urn })
            case "github:index/repositoryProject:RepositoryProject":
                return new RepositoryProject(name, <any>undefined, { urn })
            case "github:index/repositoryPullRequest:RepositoryPullRequest":
                return new RepositoryPullRequest(name, <any>undefined, { urn })
            case "github:index/repositoryRuleset:RepositoryRuleset":
                return new RepositoryRuleset(name, <any>undefined, { urn })
            case "github:index/repositoryTagProtection:RepositoryTagProtection":
                return new RepositoryTagProtection(name, <any>undefined, { urn })
            case "github:index/repositoryTopics:RepositoryTopics":
                return new RepositoryTopics(name, <any>undefined, { urn })
            case "github:index/repositoryWebhook:RepositoryWebhook":
                return new RepositoryWebhook(name, <any>undefined, { urn })
            case "github:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "github:index/teamMembers:TeamMembers":
                return new TeamMembers(name, <any>undefined, { urn })
            case "github:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            case "github:index/teamRepository:TeamRepository":
                return new TeamRepository(name, <any>undefined, { urn })
            case "github:index/teamSettings:TeamSettings":
                return new TeamSettings(name, <any>undefined, { urn })
            case "github:index/teamSyncGroupMapping:TeamSyncGroupMapping":
                return new TeamSyncGroupMapping(name, <any>undefined, { urn })
            case "github:index/userGpgKey:UserGpgKey":
                return new UserGpgKey(name, <any>undefined, { urn })
            case "github:index/userInvitationAccepter:UserInvitationAccepter":
                return new UserInvitationAccepter(name, <any>undefined, { urn })
            case "github:index/userSshKey:UserSshKey":
                return new UserSshKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("github", "index/actionsEnvironmentSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsOrganizationOidcSubjectClaimCustomizationTemplate", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsOrganizationPermissions", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsOrganizationSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsOrganizationSecretRepositories", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsOrganizationVariable", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsRepositoryAccessLevel", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsRepositoryOidcSubjectClaimCustomizationTemplate", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsRepositoryPermissions", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsRunnerGroup", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/actionsVariable", _module)
pulumi.runtime.registerResourceModule("github", "index/appInstallationRepositories", _module)
pulumi.runtime.registerResourceModule("github", "index/appInstallationRepository", _module)
pulumi.runtime.registerResourceModule("github", "index/branch", _module)
pulumi.runtime.registerResourceModule("github", "index/branchDefault", _module)
pulumi.runtime.registerResourceModule("github", "index/branchProtection", _module)
pulumi.runtime.registerResourceModule("github", "index/branchProtectionV3", _module)
pulumi.runtime.registerResourceModule("github", "index/codespacesOrganizationSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/codespacesOrganizationSecretRepositories", _module)
pulumi.runtime.registerResourceModule("github", "index/codespacesSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/codespacesUserSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/dependabotOrganizationSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/dependabotOrganizationSecretRepositories", _module)
pulumi.runtime.registerResourceModule("github", "index/dependabotSecret", _module)
pulumi.runtime.registerResourceModule("github", "index/emuGroupMapping", _module)
pulumi.runtime.registerResourceModule("github", "index/enterpriseOrganization", _module)
pulumi.runtime.registerResourceModule("github", "index/issue", _module)
pulumi.runtime.registerResourceModule("github", "index/issueLabel", _module)
pulumi.runtime.registerResourceModule("github", "index/membership", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationBlock", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationCustomRole", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationProject", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationRuleset", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationSecurityManager", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationSettings", _module)
pulumi.runtime.registerResourceModule("github", "index/organizationWebhook", _module)
pulumi.runtime.registerResourceModule("github", "index/projectCard", _module)
pulumi.runtime.registerResourceModule("github", "index/projectColumn", _module)
pulumi.runtime.registerResourceModule("github", "index/release", _module)
pulumi.runtime.registerResourceModule("github", "index/repository", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryAutolinkReference", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryCollaborator", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryCollaborators", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryDependabotSecurityUpdates", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryDeployKey", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryDeploymentBranchPolicy", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryEnvironment", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryEnvironmentDeploymentPolicy", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryFile", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryMilestone", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryProject", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryPullRequest", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryRuleset", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryTagProtection", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryTopics", _module)
pulumi.runtime.registerResourceModule("github", "index/repositoryWebhook", _module)
pulumi.runtime.registerResourceModule("github", "index/team", _module)
pulumi.runtime.registerResourceModule("github", "index/teamMembers", _module)
pulumi.runtime.registerResourceModule("github", "index/teamMembership", _module)
pulumi.runtime.registerResourceModule("github", "index/teamRepository", _module)
pulumi.runtime.registerResourceModule("github", "index/teamSettings", _module)
pulumi.runtime.registerResourceModule("github", "index/teamSyncGroupMapping", _module)
pulumi.runtime.registerResourceModule("github", "index/userGpgKey", _module)
pulumi.runtime.registerResourceModule("github", "index/userInvitationAccepter", _module)
pulumi.runtime.registerResourceModule("github", "index/userSshKey", _module)
pulumi.runtime.registerResourcePackage("github", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:github") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
