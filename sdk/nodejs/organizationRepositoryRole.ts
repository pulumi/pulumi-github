// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manage a custom organization repository role.
 *
 * > **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.OrganizationRepositoryRole("example", {
 *     name: "example",
 *     baseRole: "read",
 *     permissions: [
 *         "add_assignee",
 *         "add_label",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A custom organization repository role can be imported using its ID.
 *
 * ```sh
 * $ pulumi import github:index/organizationRepositoryRole:OrganizationRepositoryRole example 1234
 * ```
 */
export class OrganizationRepositoryRole extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationRepositoryRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationRepositoryRoleState, opts?: pulumi.CustomResourceOptions): OrganizationRepositoryRole {
        return new OrganizationRepositoryRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/organizationRepositoryRole:OrganizationRepositoryRole';

    /**
     * Returns true if the given object is an instance of OrganizationRepositoryRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationRepositoryRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationRepositoryRole.__pulumiType;
    }

    /**
     * The system role from which this role inherits permissions.
     */
    declare public readonly baseRole: pulumi.Output<string>;
    /**
     * The description of the organization repository role.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the organization repository role.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The permissions included in this role.
     */
    declare public readonly permissions: pulumi.Output<string[]>;
    /**
     * The ID of the organization repository role.
     */
    declare public /*out*/ readonly roleId: pulumi.Output<number>;

    /**
     * Create a OrganizationRepositoryRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationRepositoryRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationRepositoryRoleArgs | OrganizationRepositoryRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationRepositoryRoleState | undefined;
            resourceInputs["baseRole"] = state?.baseRole;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["roleId"] = state?.roleId;
        } else {
            const args = argsOrState as OrganizationRepositoryRoleArgs | undefined;
            if (args?.baseRole === undefined && !opts.urn) {
                throw new Error("Missing required property 'baseRole'");
            }
            if (args?.permissions === undefined && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["baseRole"] = args?.baseRole;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["roleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationRepositoryRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationRepositoryRole resources.
 */
export interface OrganizationRepositoryRoleState {
    /**
     * The system role from which this role inherits permissions.
     */
    baseRole?: pulumi.Input<string>;
    /**
     * The description of the organization repository role.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the organization repository role.
     */
    name?: pulumi.Input<string>;
    /**
     * The permissions included in this role.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the organization repository role.
     */
    roleId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OrganizationRepositoryRole resource.
 */
export interface OrganizationRepositoryRoleArgs {
    /**
     * The system role from which this role inherits permissions.
     */
    baseRole: pulumi.Input<string>;
    /**
     * The description of the organization repository role.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the organization repository role.
     */
    name?: pulumi.Input<string>;
    /**
     * The permissions included in this role.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
