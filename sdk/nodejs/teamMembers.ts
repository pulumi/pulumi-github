// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * // Add a user to the organization
 * const membershipForSomeUser = new github.Membership("membershipForSomeUser", {
 *     username: "SomeUser",
 *     role: "member",
 * });
 * const membershipForAnotherUser = new github.Membership("membershipForAnotherUser", {
 *     username: "AnotherUser",
 *     role: "member",
 * });
 * const someTeam = new github.Team("someTeam", {description: "Some cool team"});
 * const someTeamMembers = new github.TeamMembers("someTeamMembers", {
 *     teamId: someTeam.id,
 *     members: [
 *         {
 *             username: "SomeUser",
 *             role: "maintainer",
 *         },
 *         {
 *             username: "AnotherUser",
 *             role: "member",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ~> **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will result in terraform doing conversions between the team slug and team id.  This will cause team members associations to the team to be destroyed and recreated on import.
 *
 * GitHub Team Membership can be imported using the team ID team id or team slug, e.g.
 *
 * ```sh
 * $ pulumi import github:index/teamMembers:TeamMembers some_team 1234567
 * ```
 *
 * ```sh
 * $ pulumi import github:index/teamMembers:TeamMembers some_team Administrators
 * ```
 */
export class TeamMembers extends pulumi.CustomResource {
    /**
     * Get an existing TeamMembers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamMembersState, opts?: pulumi.CustomResourceOptions): TeamMembers {
        return new TeamMembers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/teamMembers:TeamMembers';

    /**
     * Returns true if the given object is an instance of TeamMembers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamMembers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamMembers.__pulumiType;
    }

    /**
     * List of team members. See Members below for details.
     */
    public readonly members!: pulumi.Output<outputs.TeamMembersMember[]>;
    /**
     * The team id or the team slug
     *
     * > **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a TeamMembers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamMembersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamMembersArgs | TeamMembersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamMembersState | undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as TeamMembersArgs | undefined;
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamMembers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamMembers resources.
 */
export interface TeamMembersState {
    /**
     * List of team members. See Members below for details.
     */
    members?: pulumi.Input<pulumi.Input<inputs.TeamMembersMember>[]>;
    /**
     * The team id or the team slug
     *
     * > **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamMembers resource.
 */
export interface TeamMembersArgs {
    /**
     * List of team members. See Members below for details.
     */
    members: pulumi.Input<pulumi.Input<inputs.TeamMembersMember>[]>;
    /**
     * The team id or the team slug
     *
     * > **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
     */
    teamId: pulumi.Input<string>;
}
