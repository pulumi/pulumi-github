// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The provider type for the github package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'github';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The GitHub Base API URL
     */
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    /**
     * The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.
     *
     * @deprecated Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.
     */
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["appAuth"] = pulumi.output(args ? args.appAuth : undefined).apply(JSON.stringify);
            resourceInputs["baseUrl"] = (args ? args.baseUrl : undefined) ?? (utilities.getEnv("GITHUB_BASE_URL") || "https://api.github.com/");
            resourceInputs["insecure"] = pulumi.output(args ? args.insecure : undefined).apply(JSON.stringify);
            resourceInputs["maxRetries"] = pulumi.output(args ? args.maxRetries : undefined).apply(JSON.stringify);
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["parallelRequests"] = pulumi.output(args ? args.parallelRequests : undefined).apply(JSON.stringify);
            resourceInputs["readDelayMs"] = pulumi.output(args ? args.readDelayMs : undefined).apply(JSON.stringify);
            resourceInputs["retryDelayMs"] = pulumi.output(args ? args.retryDelayMs : undefined).apply(JSON.stringify);
            resourceInputs["retryableErrors"] = pulumi.output(args ? args.retryableErrors : undefined).apply(JSON.stringify);
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["writeDelayMs"] = pulumi.output(args ? args.writeDelayMs : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`
     * and `app_auth` are not set.
     */
    appAuth?: pulumi.Input<inputs.ProviderAppAuth>;
    /**
     * The GitHub Base API URL
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Enable `insecure` mode for testing purposes
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Number of times to retry a request after receiving an error status codeDefaults to 3
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.
     *
     * @deprecated Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)
     */
    organization?: pulumi.Input<string>;
    /**
     * The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.
     */
    owner?: pulumi.Input<string>;
    /**
     * Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github
     * Enterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we
     * enforce the respect of github.com's best practices to avoid hitting abuse rate limitsDefaults to false if not set
     */
    parallelRequests?: pulumi.Input<boolean>;
    /**
     * Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.
     */
    readDelayMs?: pulumi.Input<number>;
    /**
     * Amount of time in milliseconds to sleep in between requests to GitHub API after an error response. Defaults to 1000ms or
     * 1s if not set, the max_retries must be set to greater than zero.
     */
    retryDelayMs?: pulumi.Input<number>;
    /**
     * Allow the provider to retry after receiving an error status code, the max_retries should be set for this to workDefaults
     * to [500, 502, 503, 504]
     */
    retryableErrors?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.
     */
    token?: pulumi.Input<string>;
    /**
     * Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.
     */
    writeDelayMs?: pulumi.Input<number>;
}
