// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to set the access level of a non-public repositories actions and reusable workflows for use in other repositories.
 * You must have admin access to a repository to use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = new github.Repository("example", {visibility: "private"});
 * const test = new github.ActionsRepositoryAccessLevel("test", {
 *     accessLevel: "user",
 *     repository: example.name,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using the name of the GitHub repository:
 *
 * ```sh
 *  $ pulumi import github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel test my-repository
 * ```
 */
export class ActionsRepositoryAccessLevel extends pulumi.CustomResource {
    /**
     * Get an existing ActionsRepositoryAccessLevel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionsRepositoryAccessLevelState, opts?: pulumi.CustomResourceOptions): ActionsRepositoryAccessLevel {
        return new ActionsRepositoryAccessLevel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel';

    /**
     * Returns true if the given object is an instance of ActionsRepositoryAccessLevel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActionsRepositoryAccessLevel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionsRepositoryAccessLevel.__pulumiType;
    }

    /**
     * Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
     */
    public readonly accessLevel!: pulumi.Output<string>;
    /**
     * The GitHub repository
     */
    public readonly repository!: pulumi.Output<string>;

    /**
     * Create a ActionsRepositoryAccessLevel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionsRepositoryAccessLevelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionsRepositoryAccessLevelArgs | ActionsRepositoryAccessLevelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionsRepositoryAccessLevelState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        } else {
            const args = argsOrState as ActionsRepositoryAccessLevelArgs | undefined;
            if ((!args || args.accessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLevel'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActionsRepositoryAccessLevel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActionsRepositoryAccessLevel resources.
 */
export interface ActionsRepositoryAccessLevelState {
    /**
     * Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The GitHub repository
     */
    repository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActionsRepositoryAccessLevel resource.
 */
export interface ActionsRepositoryAccessLevelArgs {
    /**
     * Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
     */
    accessLevel: pulumi.Input<string>;
    /**
     * The GitHub repository
     */
    repository: pulumi.Input<string>;
}
