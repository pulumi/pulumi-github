// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    public readonly allowAutoMerge!: pulumi.Output<boolean | undefined>;
    public readonly allowMergeCommit!: pulumi.Output<boolean | undefined>;
    public readonly allowRebaseMerge!: pulumi.Output<boolean | undefined>;
    public readonly allowSquashMerge!: pulumi.Output<boolean | undefined>;
    public readonly archiveOnDestroy!: pulumi.Output<boolean | undefined>;
    public readonly archived!: pulumi.Output<boolean | undefined>;
    public readonly autoInit!: pulumi.Output<boolean | undefined>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     *
     * @deprecated Use the github_branch_default resource instead
     */
    public readonly defaultBranch!: pulumi.Output<string>;
    public readonly deleteBranchOnMerge!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public /*out*/ readonly fullName!: pulumi.Output<string>;
    public /*out*/ readonly gitCloneUrl!: pulumi.Output<string>;
    public readonly gitignoreTemplate!: pulumi.Output<string | undefined>;
    public readonly hasDownloads!: pulumi.Output<boolean | undefined>;
    public readonly hasIssues!: pulumi.Output<boolean | undefined>;
    public readonly hasProjects!: pulumi.Output<boolean | undefined>;
    public readonly hasWiki!: pulumi.Output<boolean | undefined>;
    public readonly homepageUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    public /*out*/ readonly httpCloneUrl!: pulumi.Output<string>;
    public readonly ignoreVulnerabilityAlertsDuringRead!: pulumi.Output<boolean | undefined>;
    public readonly isTemplate!: pulumi.Output<boolean | undefined>;
    public readonly licenseTemplate!: pulumi.Output<string | undefined>;
    public readonly mergeCommitMessage!: pulumi.Output<string | undefined>;
    public readonly mergeCommitTitle!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    public readonly pages!: pulumi.Output<outputs.RepositoryPages | undefined>;
    /**
     * @deprecated use visibility instead
     */
    public readonly private!: pulumi.Output<boolean>;
    public /*out*/ readonly repoId!: pulumi.Output<number>;
    public readonly squashMergeCommitMessage!: pulumi.Output<string | undefined>;
    public readonly squashMergeCommitTitle!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sshCloneUrl!: pulumi.Output<string>;
    public /*out*/ readonly svnUrl!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<outputs.RepositoryTemplate | undefined>;
    public readonly topics!: pulumi.Output<string[] | undefined>;
    public readonly visibility!: pulumi.Output<string>;
    public readonly vulnerabilityAlerts!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["allowAutoMerge"] = state ? state.allowAutoMerge : undefined;
            resourceInputs["allowMergeCommit"] = state ? state.allowMergeCommit : undefined;
            resourceInputs["allowRebaseMerge"] = state ? state.allowRebaseMerge : undefined;
            resourceInputs["allowSquashMerge"] = state ? state.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["archived"] = state ? state.archived : undefined;
            resourceInputs["autoInit"] = state ? state.autoInit : undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["deleteBranchOnMerge"] = state ? state.deleteBranchOnMerge : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["gitCloneUrl"] = state ? state.gitCloneUrl : undefined;
            resourceInputs["gitignoreTemplate"] = state ? state.gitignoreTemplate : undefined;
            resourceInputs["hasDownloads"] = state ? state.hasDownloads : undefined;
            resourceInputs["hasIssues"] = state ? state.hasIssues : undefined;
            resourceInputs["hasProjects"] = state ? state.hasProjects : undefined;
            resourceInputs["hasWiki"] = state ? state.hasWiki : undefined;
            resourceInputs["homepageUrl"] = state ? state.homepageUrl : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["httpCloneUrl"] = state ? state.httpCloneUrl : undefined;
            resourceInputs["ignoreVulnerabilityAlertsDuringRead"] = state ? state.ignoreVulnerabilityAlertsDuringRead : undefined;
            resourceInputs["isTemplate"] = state ? state.isTemplate : undefined;
            resourceInputs["licenseTemplate"] = state ? state.licenseTemplate : undefined;
            resourceInputs["mergeCommitMessage"] = state ? state.mergeCommitMessage : undefined;
            resourceInputs["mergeCommitTitle"] = state ? state.mergeCommitTitle : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["pages"] = state ? state.pages : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["repoId"] = state ? state.repoId : undefined;
            resourceInputs["squashMergeCommitMessage"] = state ? state.squashMergeCommitMessage : undefined;
            resourceInputs["squashMergeCommitTitle"] = state ? state.squashMergeCommitTitle : undefined;
            resourceInputs["sshCloneUrl"] = state ? state.sshCloneUrl : undefined;
            resourceInputs["svnUrl"] = state ? state.svnUrl : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["vulnerabilityAlerts"] = state ? state.vulnerabilityAlerts : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            resourceInputs["allowAutoMerge"] = args ? args.allowAutoMerge : undefined;
            resourceInputs["allowMergeCommit"] = args ? args.allowMergeCommit : undefined;
            resourceInputs["allowRebaseMerge"] = args ? args.allowRebaseMerge : undefined;
            resourceInputs["allowSquashMerge"] = args ? args.allowSquashMerge : undefined;
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["archived"] = args ? args.archived : undefined;
            resourceInputs["autoInit"] = args ? args.autoInit : undefined;
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["deleteBranchOnMerge"] = args ? args.deleteBranchOnMerge : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gitignoreTemplate"] = args ? args.gitignoreTemplate : undefined;
            resourceInputs["hasDownloads"] = args ? args.hasDownloads : undefined;
            resourceInputs["hasIssues"] = args ? args.hasIssues : undefined;
            resourceInputs["hasProjects"] = args ? args.hasProjects : undefined;
            resourceInputs["hasWiki"] = args ? args.hasWiki : undefined;
            resourceInputs["homepageUrl"] = args ? args.homepageUrl : undefined;
            resourceInputs["ignoreVulnerabilityAlertsDuringRead"] = args ? args.ignoreVulnerabilityAlertsDuringRead : undefined;
            resourceInputs["isTemplate"] = args ? args.isTemplate : undefined;
            resourceInputs["licenseTemplate"] = args ? args.licenseTemplate : undefined;
            resourceInputs["mergeCommitMessage"] = args ? args.mergeCommitMessage : undefined;
            resourceInputs["mergeCommitTitle"] = args ? args.mergeCommitTitle : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pages"] = args ? args.pages : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["squashMergeCommitMessage"] = args ? args.squashMergeCommitMessage : undefined;
            resourceInputs["squashMergeCommitTitle"] = args ? args.squashMergeCommitTitle : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["vulnerabilityAlerts"] = args ? args.vulnerabilityAlerts : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["fullName"] = undefined /*out*/;
            resourceInputs["gitCloneUrl"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["httpCloneUrl"] = undefined /*out*/;
            resourceInputs["nodeId"] = undefined /*out*/;
            resourceInputs["repoId"] = undefined /*out*/;
            resourceInputs["sshCloneUrl"] = undefined /*out*/;
            resourceInputs["svnUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    allowAutoMerge?: pulumi.Input<boolean>;
    allowMergeCommit?: pulumi.Input<boolean>;
    allowRebaseMerge?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    autoInit?: pulumi.Input<boolean>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     *
     * @deprecated Use the github_branch_default resource instead
     */
    defaultBranch?: pulumi.Input<string>;
    deleteBranchOnMerge?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    gitCloneUrl?: pulumi.Input<string>;
    gitignoreTemplate?: pulumi.Input<string>;
    hasDownloads?: pulumi.Input<boolean>;
    hasIssues?: pulumi.Input<boolean>;
    hasProjects?: pulumi.Input<boolean>;
    hasWiki?: pulumi.Input<boolean>;
    homepageUrl?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    httpCloneUrl?: pulumi.Input<string>;
    ignoreVulnerabilityAlertsDuringRead?: pulumi.Input<boolean>;
    isTemplate?: pulumi.Input<boolean>;
    licenseTemplate?: pulumi.Input<string>;
    mergeCommitMessage?: pulumi.Input<string>;
    mergeCommitTitle?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    pages?: pulumi.Input<inputs.RepositoryPages>;
    /**
     * @deprecated use visibility instead
     */
    private?: pulumi.Input<boolean>;
    repoId?: pulumi.Input<number>;
    squashMergeCommitMessage?: pulumi.Input<string>;
    squashMergeCommitTitle?: pulumi.Input<string>;
    sshCloneUrl?: pulumi.Input<string>;
    svnUrl?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.RepositoryTemplate>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    visibility?: pulumi.Input<string>;
    vulnerabilityAlerts?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    allowAutoMerge?: pulumi.Input<boolean>;
    allowMergeCommit?: pulumi.Input<boolean>;
    allowRebaseMerge?: pulumi.Input<boolean>;
    allowSquashMerge?: pulumi.Input<boolean>;
    archiveOnDestroy?: pulumi.Input<boolean>;
    archived?: pulumi.Input<boolean>;
    autoInit?: pulumi.Input<boolean>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     *
     * @deprecated Use the github_branch_default resource instead
     */
    defaultBranch?: pulumi.Input<string>;
    deleteBranchOnMerge?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    gitignoreTemplate?: pulumi.Input<string>;
    hasDownloads?: pulumi.Input<boolean>;
    hasIssues?: pulumi.Input<boolean>;
    hasProjects?: pulumi.Input<boolean>;
    hasWiki?: pulumi.Input<boolean>;
    homepageUrl?: pulumi.Input<string>;
    ignoreVulnerabilityAlertsDuringRead?: pulumi.Input<boolean>;
    isTemplate?: pulumi.Input<boolean>;
    licenseTemplate?: pulumi.Input<string>;
    mergeCommitMessage?: pulumi.Input<string>;
    mergeCommitTitle?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pages?: pulumi.Input<inputs.RepositoryPages>;
    /**
     * @deprecated use visibility instead
     */
    private?: pulumi.Input<boolean>;
    squashMergeCommitMessage?: pulumi.Input<string>;
    squashMergeCommitTitle?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.RepositoryTemplate>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    visibility?: pulumi.Input<string>;
    vulnerabilityAlerts?: pulumi.Input<boolean>;
}
