// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a GitHub issue label resource.
 * 
 * This resource allows you to create and manage issue labels within your
 * GitHub organization.
 * 
 * Issue labels are keyed off of their "name", so pre-existing issue labels result
 * in a 422 HTTP error if they exist outside of Terraform. Normally this would not
 * be an issue, except new repositories are created with a "default" set of labels,
 * and those labels easily conflict with custom ones.
 * 
 * This resource will first check if the label exists, and then issue an update,
 * otherwise it will create.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 * 
 * // Create a new, red colored label
 * const testRepo = new github.repos.Label("test_repo", {
 *     color: "FF0000",
 *     repository: "test-repo",
 * });
 * ```
 */
export class Label extends pulumi.CustomResource {
    /**
     * Get an existing Label resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LabelState, opts?: pulumi.CustomResourceOptions): Label {
        return new Label(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:repos/label:Label';

    /**
     * Returns true if the given object is an instance of Label.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Label {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Label.__pulumiType;
    }

    /**
     * A 6 character hex code, **without the leading #**, identifying the color of the label.
     */
    public readonly color!: pulumi.Output<string>;
    /**
     * A short description of the label.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The name of the label.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The GitHub repository
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The URL to the issue label
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Label resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LabelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LabelArgs | LabelState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LabelState | undefined;
            inputs["color"] = state ? state.color : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["repository"] = state ? state.repository : undefined;
            inputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as LabelArgs | undefined;
            if (!args || args.color === undefined) {
                throw new Error("Missing required property 'color'");
            }
            if (!args || args.repository === undefined) {
                throw new Error("Missing required property 'repository'");
            }
            inputs["color"] = args ? args.color : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["etag"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        super(Label.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Label resources.
 */
export interface LabelState {
    /**
     * A 6 character hex code, **without the leading #**, identifying the color of the label.
     */
    readonly color?: pulumi.Input<string>;
    /**
     * A short description of the label.
     */
    readonly description?: pulumi.Input<string>;
    readonly etag?: pulumi.Input<string>;
    /**
     * The name of the label.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The GitHub repository
     */
    readonly repository?: pulumi.Input<string>;
    /**
     * The URL to the issue label
     */
    readonly url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Label resource.
 */
export interface LabelArgs {
    /**
     * A 6 character hex code, **without the leading #**, identifying the color of the label.
     */
    readonly color: pulumi.Input<string>;
    /**
     * A short description of the label.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the label.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The GitHub repository
     */
    readonly repository: pulumi.Input<string>;
}
