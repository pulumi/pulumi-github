// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource help you to allow/unallow a repository to use an existing GitHub Actions secrets within your GitHub organization.
 * You must have write access to an organization secret to use this resource.
 *
 * This resource is only applicable when `visibility` of the existing organization secret has been set to `selected`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const repo = github.getRepository({
 *     fullName: "my-org/repo",
 * });
 * const orgSecretRepos = new github.ActionsOrganizationSecretRepository("org_secret_repos", {
 *     secretName: "EXAMPLE_SECRET_NAME",
 *     repositoryId: repoGithubRepository.repoId,
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported using an ID made up of the secret name:
 *
 * ```sh
 * $ pulumi import github:index/actionsOrganizationSecretRepository:ActionsOrganizationSecretRepository test_secret_repos test_secret_name:repo_id
 * ```
 */
export class ActionsOrganizationSecretRepository extends pulumi.CustomResource {
    /**
     * Get an existing ActionsOrganizationSecretRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionsOrganizationSecretRepositoryState, opts?: pulumi.CustomResourceOptions): ActionsOrganizationSecretRepository {
        return new ActionsOrganizationSecretRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/actionsOrganizationSecretRepository:ActionsOrganizationSecretRepository';

    /**
     * Returns true if the given object is an instance of ActionsOrganizationSecretRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActionsOrganizationSecretRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActionsOrganizationSecretRepository.__pulumiType;
    }

    /**
     * Repository id that can access the organization secret.
     */
    declare public readonly repositoryId: pulumi.Output<number>;
    /**
     * Name of the existing secret
     */
    declare public readonly secretName: pulumi.Output<string>;

    /**
     * Create a ActionsOrganizationSecretRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionsOrganizationSecretRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionsOrganizationSecretRepositoryArgs | ActionsOrganizationSecretRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionsOrganizationSecretRepositoryState | undefined;
            resourceInputs["repositoryId"] = state?.repositoryId;
            resourceInputs["secretName"] = state?.secretName;
        } else {
            const args = argsOrState as ActionsOrganizationSecretRepositoryArgs | undefined;
            if (args?.repositoryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'repositoryId'");
            }
            if (args?.secretName === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            resourceInputs["repositoryId"] = args?.repositoryId;
            resourceInputs["secretName"] = args?.secretName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ActionsOrganizationSecretRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActionsOrganizationSecretRepository resources.
 */
export interface ActionsOrganizationSecretRepositoryState {
    /**
     * Repository id that can access the organization secret.
     */
    repositoryId?: pulumi.Input<number>;
    /**
     * Name of the existing secret
     */
    secretName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActionsOrganizationSecretRepository resource.
 */
export interface ActionsOrganizationSecretRepositoryArgs {
    /**
     * Repository id that can access the organization secret.
     */
    repositoryId: pulumi.Input<number>;
    /**
     * Name of the existing secret
     */
    secretName: pulumi.Input<string>;
}
