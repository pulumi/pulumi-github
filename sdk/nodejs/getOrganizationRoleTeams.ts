// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Lookup all teams assigned to a custom organization role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getOrganizationRoleTeams({
 *     roleId: 1234,
 * });
 * ```
 *
 * ## Nested Schema for `teams`
 *
 * ### Read-Only
 *
 * - `teamId` (Number) The ID of the team.
 * - `slug` (String) The Slug of the team name.
 * - `name` (String) The name of the team.
 * - `permission` (String) The permission that the team will have for its repositories.
 */
export function getOrganizationRoleTeams(args: GetOrganizationRoleTeamsArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationRoleTeamsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getOrganizationRoleTeams:getOrganizationRoleTeams", {
        "roleId": args.roleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationRoleTeams.
 */
export interface GetOrganizationRoleTeamsArgs {
    /**
     * The ID of the organization role.
     */
    roleId: number;
}

/**
 * A collection of values returned by getOrganizationRoleTeams.
 */
export interface GetOrganizationRoleTeamsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the organization role.
     */
    readonly roleId: number;
    /**
     * (Set of Object, see schema) Teams assigned to the organization role.
     */
    readonly teams: outputs.GetOrganizationRoleTeamsTeam[];
}
/**
 * Lookup all teams assigned to a custom organization role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as github from "@pulumi/github";
 *
 * const example = github.getOrganizationRoleTeams({
 *     roleId: 1234,
 * });
 * ```
 *
 * ## Nested Schema for `teams`
 *
 * ### Read-Only
 *
 * - `teamId` (Number) The ID of the team.
 * - `slug` (String) The Slug of the team name.
 * - `name` (String) The name of the team.
 * - `permission` (String) The permission that the team will have for its repositories.
 */
export function getOrganizationRoleTeamsOutput(args: GetOrganizationRoleTeamsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrganizationRoleTeamsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("github:index/getOrganizationRoleTeams:getOrganizationRoleTeams", {
        "roleId": args.roleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganizationRoleTeams.
 */
export interface GetOrganizationRoleTeamsOutputArgs {
    /**
     * The ID of the organization role.
     */
    roleId: pulumi.Input<number>;
}
