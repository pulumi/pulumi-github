// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource manages relationships between teams and repositories
// in your GitHub organization.
//
// Creating this resource grants a particular team permissions on a
// particular repository.
//
// The repository and the team must both belong to the same organization
// on GitHub. This resource does not actually *create* any repositories;
// to do that, see `Repository`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/go/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		someTeam, err := github.NewTeam(ctx, "someTeam", &github.TeamArgs{
// 			Description: pulumi.String("Some cool team"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		someRepo, err := github.NewRepository(ctx, "someRepo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = github.NewTeamRepository(ctx, "someTeamRepo", &github.TeamRepositoryArgs{
// 			Permission: pulumi.String("pull"),
// 			Repository: someRepo.Name,
// 			TeamId:     someTeam.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type TeamRepository struct {
	pulumi.CustomResourceState

	Etag pulumi.StringOutput `pulumi:"etag"`
	// The permissions of team members regarding the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.
	Permission pulumi.StringPtrOutput `pulumi:"permission"`
	// The repository to add to the team.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// The GitHub team id
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTeamRepository registers a new resource with the given unique name, arguments, and options.
func NewTeamRepository(ctx *pulumi.Context,
	name string, args *TeamRepositoryArgs, opts ...pulumi.ResourceOption) (*TeamRepository, error) {
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	if args == nil || args.TeamId == nil {
		return nil, errors.New("missing required argument 'TeamId'")
	}
	if args == nil {
		args = &TeamRepositoryArgs{}
	}
	var resource TeamRepository
	err := ctx.RegisterResource("github:index/teamRepository:TeamRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamRepository gets an existing TeamRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamRepositoryState, opts ...pulumi.ResourceOption) (*TeamRepository, error) {
	var resource TeamRepository
	err := ctx.ReadResource("github:index/teamRepository:TeamRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamRepository resources.
type teamRepositoryState struct {
	Etag *string `pulumi:"etag"`
	// The permissions of team members regarding the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.
	Permission *string `pulumi:"permission"`
	// The repository to add to the team.
	Repository *string `pulumi:"repository"`
	// The GitHub team id
	TeamId *string `pulumi:"teamId"`
}

type TeamRepositoryState struct {
	Etag pulumi.StringPtrInput
	// The permissions of team members regarding the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.
	Permission pulumi.StringPtrInput
	// The repository to add to the team.
	Repository pulumi.StringPtrInput
	// The GitHub team id
	TeamId pulumi.StringPtrInput
}

func (TeamRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRepositoryState)(nil)).Elem()
}

type teamRepositoryArgs struct {
	// The permissions of team members regarding the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.
	Permission *string `pulumi:"permission"`
	// The repository to add to the team.
	Repository string `pulumi:"repository"`
	// The GitHub team id
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamRepository resource.
type TeamRepositoryArgs struct {
	// The permissions of team members regarding the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.
	Permission pulumi.StringPtrInput
	// The repository to add to the team.
	Repository pulumi.StringInput
	// The GitHub team id
	TeamId pulumi.StringInput
}

func (TeamRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRepositoryArgs)(nil)).Elem()
}
