// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TeamRepository struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput    `pulumi:"etag"`
	Permission pulumi.StringPtrOutput `pulumi:"permission"`
	Repository pulumi.StringOutput    `pulumi:"repository"`
	// ID or slug of team
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTeamRepository registers a new resource with the given unique name, arguments, and options.
func NewTeamRepository(ctx *pulumi.Context,
	name string, args *TeamRepositoryArgs, opts ...pulumi.ResourceOption) (*TeamRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	var resource TeamRepository
	err := ctx.RegisterResource("github:index/teamRepository:TeamRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamRepository gets an existing TeamRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamRepositoryState, opts ...pulumi.ResourceOption) (*TeamRepository, error) {
	var resource TeamRepository
	err := ctx.ReadResource("github:index/teamRepository:TeamRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamRepository resources.
type teamRepositoryState struct {
	Etag       *string `pulumi:"etag"`
	Permission *string `pulumi:"permission"`
	Repository *string `pulumi:"repository"`
	// ID or slug of team
	TeamId *string `pulumi:"teamId"`
}

type TeamRepositoryState struct {
	Etag       pulumi.StringPtrInput
	Permission pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	// ID or slug of team
	TeamId pulumi.StringPtrInput
}

func (TeamRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRepositoryState)(nil)).Elem()
}

type teamRepositoryArgs struct {
	Permission *string `pulumi:"permission"`
	Repository string  `pulumi:"repository"`
	// ID or slug of team
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamRepository resource.
type TeamRepositoryArgs struct {
	Permission pulumi.StringPtrInput
	Repository pulumi.StringInput
	// ID or slug of team
	TeamId pulumi.StringInput
}

func (TeamRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRepositoryArgs)(nil)).Elem()
}

type TeamRepositoryInput interface {
	pulumi.Input

	ToTeamRepositoryOutput() TeamRepositoryOutput
	ToTeamRepositoryOutputWithContext(ctx context.Context) TeamRepositoryOutput
}

func (*TeamRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRepository)(nil)).Elem()
}

func (i *TeamRepository) ToTeamRepositoryOutput() TeamRepositoryOutput {
	return i.ToTeamRepositoryOutputWithContext(context.Background())
}

func (i *TeamRepository) ToTeamRepositoryOutputWithContext(ctx context.Context) TeamRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRepositoryOutput)
}

// TeamRepositoryArrayInput is an input type that accepts TeamRepositoryArray and TeamRepositoryArrayOutput values.
// You can construct a concrete instance of `TeamRepositoryArrayInput` via:
//
//	TeamRepositoryArray{ TeamRepositoryArgs{...} }
type TeamRepositoryArrayInput interface {
	pulumi.Input

	ToTeamRepositoryArrayOutput() TeamRepositoryArrayOutput
	ToTeamRepositoryArrayOutputWithContext(context.Context) TeamRepositoryArrayOutput
}

type TeamRepositoryArray []TeamRepositoryInput

func (TeamRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRepository)(nil)).Elem()
}

func (i TeamRepositoryArray) ToTeamRepositoryArrayOutput() TeamRepositoryArrayOutput {
	return i.ToTeamRepositoryArrayOutputWithContext(context.Background())
}

func (i TeamRepositoryArray) ToTeamRepositoryArrayOutputWithContext(ctx context.Context) TeamRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRepositoryArrayOutput)
}

// TeamRepositoryMapInput is an input type that accepts TeamRepositoryMap and TeamRepositoryMapOutput values.
// You can construct a concrete instance of `TeamRepositoryMapInput` via:
//
//	TeamRepositoryMap{ "key": TeamRepositoryArgs{...} }
type TeamRepositoryMapInput interface {
	pulumi.Input

	ToTeamRepositoryMapOutput() TeamRepositoryMapOutput
	ToTeamRepositoryMapOutputWithContext(context.Context) TeamRepositoryMapOutput
}

type TeamRepositoryMap map[string]TeamRepositoryInput

func (TeamRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRepository)(nil)).Elem()
}

func (i TeamRepositoryMap) ToTeamRepositoryMapOutput() TeamRepositoryMapOutput {
	return i.ToTeamRepositoryMapOutputWithContext(context.Background())
}

func (i TeamRepositoryMap) ToTeamRepositoryMapOutputWithContext(ctx context.Context) TeamRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRepositoryMapOutput)
}

type TeamRepositoryOutput struct{ *pulumi.OutputState }

func (TeamRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRepository)(nil)).Elem()
}

func (o TeamRepositoryOutput) ToTeamRepositoryOutput() TeamRepositoryOutput {
	return o
}

func (o TeamRepositoryOutput) ToTeamRepositoryOutputWithContext(ctx context.Context) TeamRepositoryOutput {
	return o
}

func (o TeamRepositoryOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRepository) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o TeamRepositoryOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamRepository) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

func (o TeamRepositoryOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRepository) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// ID or slug of team
func (o TeamRepositoryOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRepository) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type TeamRepositoryArrayOutput struct{ *pulumi.OutputState }

func (TeamRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRepository)(nil)).Elem()
}

func (o TeamRepositoryArrayOutput) ToTeamRepositoryArrayOutput() TeamRepositoryArrayOutput {
	return o
}

func (o TeamRepositoryArrayOutput) ToTeamRepositoryArrayOutputWithContext(ctx context.Context) TeamRepositoryArrayOutput {
	return o
}

func (o TeamRepositoryArrayOutput) Index(i pulumi.IntInput) TeamRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamRepository {
		return vs[0].([]*TeamRepository)[vs[1].(int)]
	}).(TeamRepositoryOutput)
}

type TeamRepositoryMapOutput struct{ *pulumi.OutputState }

func (TeamRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRepository)(nil)).Elem()
}

func (o TeamRepositoryMapOutput) ToTeamRepositoryMapOutput() TeamRepositoryMapOutput {
	return o
}

func (o TeamRepositoryMapOutput) ToTeamRepositoryMapOutputWithContext(ctx context.Context) TeamRepositoryMapOutput {
	return o
}

func (o TeamRepositoryMapOutput) MapIndex(k pulumi.StringInput) TeamRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamRepository {
		return vs[0].(map[string]*TeamRepository)[vs[1].(string)]
	}).(TeamRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRepositoryInput)(nil)).Elem(), &TeamRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRepositoryArrayInput)(nil)).Elem(), TeamRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRepositoryMapInput)(nil)).Elem(), TeamRepositoryMap{})
	pulumi.RegisterOutputType(TeamRepositoryOutput{})
	pulumi.RegisterOutputType(TeamRepositoryArrayOutput{})
	pulumi.RegisterOutputType(TeamRepositoryMapOutput{})
}
