// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GitHub team resource.
//
// This resource allows you to add/remove teams from your organization. When applied,
// a new team will be created. When destroyed, that team will be removed.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Add a team to the organization
//			_, err := github.NewTeam(ctx, "some_team", &github.TeamArgs{
//				Name:        pulumi.String("some-team"),
//				Description: pulumi.String("Some cool team"),
//				Privacy:     pulumi.String("closed"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// GitHub Teams can be imported using the GitHub team ID or name e.g.
//
// ```sh
// $ pulumi import github:index/team:Team core 1234567
// ```
//
// ```sh
// $ pulumi import github:index/team:Team core Administrators
// ```
type Team struct {
	pulumi.CustomResourceState

	// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
	CreateDefaultMaintainer pulumi.BoolPtrOutput `pulumi:"createDefaultMaintainer"`
	// A description of the team.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Etag        pulumi.StringOutput    `pulumi:"etag"`
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn       pulumi.StringPtrOutput `pulumi:"ldapDn"`
	MembersCount pulumi.IntOutput       `pulumi:"membersCount"`
	// The name of the team.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Node ID of the created team.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamId pulumi.StringPtrOutput `pulumi:"parentTeamId"`
	// The id of the parent team read in Github.
	ParentTeamReadId pulumi.StringOutput `pulumi:"parentTeamReadId"`
	// The id of the parent team read in Github.
	ParentTeamReadSlug pulumi.StringOutput `pulumi:"parentTeamReadSlug"`
	// The level of privacy for the team. Must be one of `secret` or `closed`.
	// Defaults to `secret`.
	Privacy pulumi.StringPtrOutput `pulumi:"privacy"`
	// The slug of the created team, which may or may not differ from `name`,
	// depending on whether `name` contains "URL-unsafe" characters.
	// Useful when referencing the team in [`BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		args = &TeamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Team
	err := ctx.RegisterResource("github:index/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("github:index/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
	CreateDefaultMaintainer *bool `pulumi:"createDefaultMaintainer"`
	// A description of the team.
	Description *string `pulumi:"description"`
	Etag        *string `pulumi:"etag"`
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn       *string `pulumi:"ldapDn"`
	MembersCount *int    `pulumi:"membersCount"`
	// The name of the team.
	Name *string `pulumi:"name"`
	// The Node ID of the created team.
	NodeId *string `pulumi:"nodeId"`
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamId *string `pulumi:"parentTeamId"`
	// The id of the parent team read in Github.
	ParentTeamReadId *string `pulumi:"parentTeamReadId"`
	// The id of the parent team read in Github.
	ParentTeamReadSlug *string `pulumi:"parentTeamReadSlug"`
	// The level of privacy for the team. Must be one of `secret` or `closed`.
	// Defaults to `secret`.
	Privacy *string `pulumi:"privacy"`
	// The slug of the created team, which may or may not differ from `name`,
	// depending on whether `name` contains "URL-unsafe" characters.
	// Useful when referencing the team in [`BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).
	Slug *string `pulumi:"slug"`
}

type TeamState struct {
	// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
	CreateDefaultMaintainer pulumi.BoolPtrInput
	// A description of the team.
	Description pulumi.StringPtrInput
	Etag        pulumi.StringPtrInput
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn       pulumi.StringPtrInput
	MembersCount pulumi.IntPtrInput
	// The name of the team.
	Name pulumi.StringPtrInput
	// The Node ID of the created team.
	NodeId pulumi.StringPtrInput
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamId pulumi.StringPtrInput
	// The id of the parent team read in Github.
	ParentTeamReadId pulumi.StringPtrInput
	// The id of the parent team read in Github.
	ParentTeamReadSlug pulumi.StringPtrInput
	// The level of privacy for the team. Must be one of `secret` or `closed`.
	// Defaults to `secret`.
	Privacy pulumi.StringPtrInput
	// The slug of the created team, which may or may not differ from `name`,
	// depending on whether `name` contains "URL-unsafe" characters.
	// Useful when referencing the team in [`BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).
	Slug pulumi.StringPtrInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
	CreateDefaultMaintainer *bool `pulumi:"createDefaultMaintainer"`
	// A description of the team.
	Description *string `pulumi:"description"`
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn *string `pulumi:"ldapDn"`
	// The name of the team.
	Name *string `pulumi:"name"`
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamId *string `pulumi:"parentTeamId"`
	// The id of the parent team read in Github.
	ParentTeamReadId *string `pulumi:"parentTeamReadId"`
	// The id of the parent team read in Github.
	ParentTeamReadSlug *string `pulumi:"parentTeamReadSlug"`
	// The level of privacy for the team. Must be one of `secret` or `closed`.
	// Defaults to `secret`.
	Privacy *string `pulumi:"privacy"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
	CreateDefaultMaintainer pulumi.BoolPtrInput
	// A description of the team.
	Description pulumi.StringPtrInput
	// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
	LdapDn pulumi.StringPtrInput
	// The name of the team.
	Name pulumi.StringPtrInput
	// The ID or slug of the parent team, if this is a nested team.
	ParentTeamId pulumi.StringPtrInput
	// The id of the parent team read in Github.
	ParentTeamReadId pulumi.StringPtrInput
	// The id of the parent team read in Github.
	ParentTeamReadSlug pulumi.StringPtrInput
	// The level of privacy for the team. Must be one of `secret` or `closed`.
	// Defaults to `secret`.
	Privacy pulumi.StringPtrInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//	TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//	TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

// Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.
func (o TeamOutput) CreateDefaultMaintainer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.BoolPtrOutput { return v.CreateDefaultMaintainer }).(pulumi.BoolPtrOutput)
}

// A description of the team.
func (o TeamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TeamOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.
func (o TeamOutput) LdapDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.LdapDn }).(pulumi.StringPtrOutput)
}

func (o TeamOutput) MembersCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Team) pulumi.IntOutput { return v.MembersCount }).(pulumi.IntOutput)
}

// The name of the team.
func (o TeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Node ID of the created team.
func (o TeamOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// The ID or slug of the parent team, if this is a nested team.
func (o TeamOutput) ParentTeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.ParentTeamId }).(pulumi.StringPtrOutput)
}

// The id of the parent team read in Github.
func (o TeamOutput) ParentTeamReadId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.ParentTeamReadId }).(pulumi.StringOutput)
}

// The id of the parent team read in Github.
func (o TeamOutput) ParentTeamReadSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.ParentTeamReadSlug }).(pulumi.StringOutput)
}

// The level of privacy for the team. Must be one of `secret` or `closed`.
// Defaults to `secret`.
func (o TeamOutput) Privacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.Privacy }).(pulumi.StringPtrOutput)
}

// The slug of the created team, which may or may not differ from `name`,
// depending on whether `name` contains "URL-unsafe" characters.
// Useful when referencing the team in [`BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).
func (o TeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Team {
		return vs[0].([]*Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Team {
		return vs[0].(map[string]*Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamInput)(nil)).Elem(), &Team{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamArrayInput)(nil)).Elem(), TeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMapInput)(nil)).Elem(), TeamMap{})
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
