// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryMilestone struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// in yyyy-mm-dd format
	DueDate    pulumi.StringPtrOutput `pulumi:"dueDate"`
	Number     pulumi.IntOutput       `pulumi:"number"`
	Owner      pulumi.StringOutput    `pulumi:"owner"`
	Repository pulumi.StringOutput    `pulumi:"repository"`
	State      pulumi.StringPtrOutput `pulumi:"state"`
	Title      pulumi.StringOutput    `pulumi:"title"`
}

// NewRepositoryMilestone registers a new resource with the given unique name, arguments, and options.
func NewRepositoryMilestone(ctx *pulumi.Context,
	name string, args *RepositoryMilestoneArgs, opts ...pulumi.ResourceOption) (*RepositoryMilestone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource RepositoryMilestone
	err := ctx.RegisterResource("github:index/repositoryMilestone:RepositoryMilestone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryMilestone gets an existing RepositoryMilestone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryMilestone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryMilestoneState, opts ...pulumi.ResourceOption) (*RepositoryMilestone, error) {
	var resource RepositoryMilestone
	err := ctx.ReadResource("github:index/repositoryMilestone:RepositoryMilestone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryMilestone resources.
type repositoryMilestoneState struct {
	Description *string `pulumi:"description"`
	// in yyyy-mm-dd format
	DueDate    *string `pulumi:"dueDate"`
	Number     *int    `pulumi:"number"`
	Owner      *string `pulumi:"owner"`
	Repository *string `pulumi:"repository"`
	State      *string `pulumi:"state"`
	Title      *string `pulumi:"title"`
}

type RepositoryMilestoneState struct {
	Description pulumi.StringPtrInput
	// in yyyy-mm-dd format
	DueDate    pulumi.StringPtrInput
	Number     pulumi.IntPtrInput
	Owner      pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	State      pulumi.StringPtrInput
	Title      pulumi.StringPtrInput
}

func (RepositoryMilestoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryMilestoneState)(nil)).Elem()
}

type repositoryMilestoneArgs struct {
	Description *string `pulumi:"description"`
	// in yyyy-mm-dd format
	DueDate    *string `pulumi:"dueDate"`
	Owner      string  `pulumi:"owner"`
	Repository string  `pulumi:"repository"`
	State      *string `pulumi:"state"`
	Title      string  `pulumi:"title"`
}

// The set of arguments for constructing a RepositoryMilestone resource.
type RepositoryMilestoneArgs struct {
	Description pulumi.StringPtrInput
	// in yyyy-mm-dd format
	DueDate    pulumi.StringPtrInput
	Owner      pulumi.StringInput
	Repository pulumi.StringInput
	State      pulumi.StringPtrInput
	Title      pulumi.StringInput
}

func (RepositoryMilestoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryMilestoneArgs)(nil)).Elem()
}

type RepositoryMilestoneInput interface {
	pulumi.Input

	ToRepositoryMilestoneOutput() RepositoryMilestoneOutput
	ToRepositoryMilestoneOutputWithContext(ctx context.Context) RepositoryMilestoneOutput
}

func (*RepositoryMilestone) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMilestone)(nil)).Elem()
}

func (i *RepositoryMilestone) ToRepositoryMilestoneOutput() RepositoryMilestoneOutput {
	return i.ToRepositoryMilestoneOutputWithContext(context.Background())
}

func (i *RepositoryMilestone) ToRepositoryMilestoneOutputWithContext(ctx context.Context) RepositoryMilestoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMilestoneOutput)
}

// RepositoryMilestoneArrayInput is an input type that accepts RepositoryMilestoneArray and RepositoryMilestoneArrayOutput values.
// You can construct a concrete instance of `RepositoryMilestoneArrayInput` via:
//
//	RepositoryMilestoneArray{ RepositoryMilestoneArgs{...} }
type RepositoryMilestoneArrayInput interface {
	pulumi.Input

	ToRepositoryMilestoneArrayOutput() RepositoryMilestoneArrayOutput
	ToRepositoryMilestoneArrayOutputWithContext(context.Context) RepositoryMilestoneArrayOutput
}

type RepositoryMilestoneArray []RepositoryMilestoneInput

func (RepositoryMilestoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryMilestone)(nil)).Elem()
}

func (i RepositoryMilestoneArray) ToRepositoryMilestoneArrayOutput() RepositoryMilestoneArrayOutput {
	return i.ToRepositoryMilestoneArrayOutputWithContext(context.Background())
}

func (i RepositoryMilestoneArray) ToRepositoryMilestoneArrayOutputWithContext(ctx context.Context) RepositoryMilestoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMilestoneArrayOutput)
}

// RepositoryMilestoneMapInput is an input type that accepts RepositoryMilestoneMap and RepositoryMilestoneMapOutput values.
// You can construct a concrete instance of `RepositoryMilestoneMapInput` via:
//
//	RepositoryMilestoneMap{ "key": RepositoryMilestoneArgs{...} }
type RepositoryMilestoneMapInput interface {
	pulumi.Input

	ToRepositoryMilestoneMapOutput() RepositoryMilestoneMapOutput
	ToRepositoryMilestoneMapOutputWithContext(context.Context) RepositoryMilestoneMapOutput
}

type RepositoryMilestoneMap map[string]RepositoryMilestoneInput

func (RepositoryMilestoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryMilestone)(nil)).Elem()
}

func (i RepositoryMilestoneMap) ToRepositoryMilestoneMapOutput() RepositoryMilestoneMapOutput {
	return i.ToRepositoryMilestoneMapOutputWithContext(context.Background())
}

func (i RepositoryMilestoneMap) ToRepositoryMilestoneMapOutputWithContext(ctx context.Context) RepositoryMilestoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMilestoneMapOutput)
}

type RepositoryMilestoneOutput struct{ *pulumi.OutputState }

func (RepositoryMilestoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMilestone)(nil)).Elem()
}

func (o RepositoryMilestoneOutput) ToRepositoryMilestoneOutput() RepositoryMilestoneOutput {
	return o
}

func (o RepositoryMilestoneOutput) ToRepositoryMilestoneOutputWithContext(ctx context.Context) RepositoryMilestoneOutput {
	return o
}

func (o RepositoryMilestoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// in yyyy-mm-dd format
func (o RepositoryMilestoneOutput) DueDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringPtrOutput { return v.DueDate }).(pulumi.StringPtrOutput)
}

func (o RepositoryMilestoneOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

func (o RepositoryMilestoneOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o RepositoryMilestoneOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryMilestoneOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

func (o RepositoryMilestoneOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryMilestone) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type RepositoryMilestoneArrayOutput struct{ *pulumi.OutputState }

func (RepositoryMilestoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryMilestone)(nil)).Elem()
}

func (o RepositoryMilestoneArrayOutput) ToRepositoryMilestoneArrayOutput() RepositoryMilestoneArrayOutput {
	return o
}

func (o RepositoryMilestoneArrayOutput) ToRepositoryMilestoneArrayOutputWithContext(ctx context.Context) RepositoryMilestoneArrayOutput {
	return o
}

func (o RepositoryMilestoneArrayOutput) Index(i pulumi.IntInput) RepositoryMilestoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryMilestone {
		return vs[0].([]*RepositoryMilestone)[vs[1].(int)]
	}).(RepositoryMilestoneOutput)
}

type RepositoryMilestoneMapOutput struct{ *pulumi.OutputState }

func (RepositoryMilestoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryMilestone)(nil)).Elem()
}

func (o RepositoryMilestoneMapOutput) ToRepositoryMilestoneMapOutput() RepositoryMilestoneMapOutput {
	return o
}

func (o RepositoryMilestoneMapOutput) ToRepositoryMilestoneMapOutputWithContext(ctx context.Context) RepositoryMilestoneMapOutput {
	return o
}

func (o RepositoryMilestoneMapOutput) MapIndex(k pulumi.StringInput) RepositoryMilestoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryMilestone {
		return vs[0].(map[string]*RepositoryMilestone)[vs[1].(string)]
	}).(RepositoryMilestoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMilestoneInput)(nil)).Elem(), &RepositoryMilestone{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMilestoneArrayInput)(nil)).Elem(), RepositoryMilestoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMilestoneMapInput)(nil)).Elem(), RepositoryMilestoneMap{})
	pulumi.RegisterOutputType(RepositoryMilestoneOutput{})
	pulumi.RegisterOutputType(RepositoryMilestoneArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMilestoneMapOutput{})
}
