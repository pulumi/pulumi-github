// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-github/sdk/v5/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ActionsOrganizationPermissionsAllowedActionsConfig struct {
	// Whether GitHub-owned actions are allowed in the organization.
	GithubOwnedAllowed bool `pulumi:"githubOwnedAllowed"`
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
	PatternsAlloweds []string `pulumi:"patternsAlloweds"`
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed *bool `pulumi:"verifiedAllowed"`
}

// ActionsOrganizationPermissionsAllowedActionsConfigInput is an input type that accepts ActionsOrganizationPermissionsAllowedActionsConfigArgs and ActionsOrganizationPermissionsAllowedActionsConfigOutput values.
// You can construct a concrete instance of `ActionsOrganizationPermissionsAllowedActionsConfigInput` via:
//
//	ActionsOrganizationPermissionsAllowedActionsConfigArgs{...}
type ActionsOrganizationPermissionsAllowedActionsConfigInput interface {
	pulumi.Input

	ToActionsOrganizationPermissionsAllowedActionsConfigOutput() ActionsOrganizationPermissionsAllowedActionsConfigOutput
	ToActionsOrganizationPermissionsAllowedActionsConfigOutputWithContext(context.Context) ActionsOrganizationPermissionsAllowedActionsConfigOutput
}

type ActionsOrganizationPermissionsAllowedActionsConfigArgs struct {
	// Whether GitHub-owned actions are allowed in the organization.
	GithubOwnedAllowed pulumi.BoolInput `pulumi:"githubOwnedAllowed"`
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
	PatternsAlloweds pulumi.StringArrayInput `pulumi:"patternsAlloweds"`
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed pulumi.BoolPtrInput `pulumi:"verifiedAllowed"`
}

func (ActionsOrganizationPermissionsAllowedActionsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsOrganizationPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (i ActionsOrganizationPermissionsAllowedActionsConfigArgs) ToActionsOrganizationPermissionsAllowedActionsConfigOutput() ActionsOrganizationPermissionsAllowedActionsConfigOutput {
	return i.ToActionsOrganizationPermissionsAllowedActionsConfigOutputWithContext(context.Background())
}

func (i ActionsOrganizationPermissionsAllowedActionsConfigArgs) ToActionsOrganizationPermissionsAllowedActionsConfigOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsAllowedActionsConfigOutput)
}

func (i ActionsOrganizationPermissionsAllowedActionsConfigArgs) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutput() ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return i.ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (i ActionsOrganizationPermissionsAllowedActionsConfigArgs) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsAllowedActionsConfigOutput).ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(ctx)
}

// ActionsOrganizationPermissionsAllowedActionsConfigPtrInput is an input type that accepts ActionsOrganizationPermissionsAllowedActionsConfigArgs, ActionsOrganizationPermissionsAllowedActionsConfigPtr and ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput values.
// You can construct a concrete instance of `ActionsOrganizationPermissionsAllowedActionsConfigPtrInput` via:
//
//	        ActionsOrganizationPermissionsAllowedActionsConfigArgs{...}
//
//	or:
//
//	        nil
type ActionsOrganizationPermissionsAllowedActionsConfigPtrInput interface {
	pulumi.Input

	ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutput() ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput
	ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(context.Context) ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput
}

type actionsOrganizationPermissionsAllowedActionsConfigPtrType ActionsOrganizationPermissionsAllowedActionsConfigArgs

func ActionsOrganizationPermissionsAllowedActionsConfigPtr(v *ActionsOrganizationPermissionsAllowedActionsConfigArgs) ActionsOrganizationPermissionsAllowedActionsConfigPtrInput {
	return (*actionsOrganizationPermissionsAllowedActionsConfigPtrType)(v)
}

func (*actionsOrganizationPermissionsAllowedActionsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsOrganizationPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (i *actionsOrganizationPermissionsAllowedActionsConfigPtrType) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutput() ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return i.ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (i *actionsOrganizationPermissionsAllowedActionsConfigPtrType) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput)
}

type ActionsOrganizationPermissionsAllowedActionsConfigOutput struct{ *pulumi.OutputState }

func (ActionsOrganizationPermissionsAllowedActionsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsOrganizationPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) ToActionsOrganizationPermissionsAllowedActionsConfigOutput() ActionsOrganizationPermissionsAllowedActionsConfigOutput {
	return o
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) ToActionsOrganizationPermissionsAllowedActionsConfigOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigOutput {
	return o
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutput() ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return o.ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionsOrganizationPermissionsAllowedActionsConfig) *ActionsOrganizationPermissionsAllowedActionsConfig {
		return &v
	}).(ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput)
}

// Whether GitHub-owned actions are allowed in the organization.
func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) GithubOwnedAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v ActionsOrganizationPermissionsAllowedActionsConfig) bool { return v.GithubOwnedAllowed }).(pulumi.BoolOutput)
}

// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) PatternsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionsOrganizationPermissionsAllowedActionsConfig) []string { return v.PatternsAlloweds }).(pulumi.StringArrayOutput)
}

// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
func (o ActionsOrganizationPermissionsAllowedActionsConfigOutput) VerifiedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionsOrganizationPermissionsAllowedActionsConfig) *bool { return v.VerifiedAllowed }).(pulumi.BoolPtrOutput)
}

type ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput struct{ *pulumi.OutputState }

func (ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsOrganizationPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutput() ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return o
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) ToActionsOrganizationPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput {
	return o
}

func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) Elem() ActionsOrganizationPermissionsAllowedActionsConfigOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsAllowedActionsConfig) ActionsOrganizationPermissionsAllowedActionsConfig {
		if v != nil {
			return *v
		}
		var ret ActionsOrganizationPermissionsAllowedActionsConfig
		return ret
	}).(ActionsOrganizationPermissionsAllowedActionsConfigOutput)
}

// Whether GitHub-owned actions are allowed in the organization.
func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) GithubOwnedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsAllowedActionsConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.GithubOwnedAllowed
	}).(pulumi.BoolPtrOutput)
}

// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) PatternsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsAllowedActionsConfig) []string {
		if v == nil {
			return nil
		}
		return v.PatternsAlloweds
	}).(pulumi.StringArrayOutput)
}

// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
func (o ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput) VerifiedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsAllowedActionsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VerifiedAllowed
	}).(pulumi.BoolPtrOutput)
}

type ActionsOrganizationPermissionsEnabledRepositoriesConfig struct {
	// List of repository IDs to enable for GitHub Actions.
	RepositoryIds []int `pulumi:"repositoryIds"`
}

// ActionsOrganizationPermissionsEnabledRepositoriesConfigInput is an input type that accepts ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs and ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput values.
// You can construct a concrete instance of `ActionsOrganizationPermissionsEnabledRepositoriesConfigInput` via:
//
//	ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{...}
type ActionsOrganizationPermissionsEnabledRepositoriesConfigInput interface {
	pulumi.Input

	ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput
	ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutputWithContext(context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput
}

type ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs struct {
	// List of repository IDs to enable for GitHub Actions.
	RepositoryIds pulumi.IntArrayInput `pulumi:"repositoryIds"`
}

func (ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsOrganizationPermissionsEnabledRepositoriesConfig)(nil)).Elem()
}

func (i ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput {
	return i.ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutputWithContext(context.Background())
}

func (i ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput)
}

func (i ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return i.ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(context.Background())
}

func (i ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput).ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(ctx)
}

// ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrInput is an input type that accepts ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs, ActionsOrganizationPermissionsEnabledRepositoriesConfigPtr and ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput values.
// You can construct a concrete instance of `ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrInput` via:
//
//	        ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{...}
//
//	or:
//
//	        nil
type ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrInput interface {
	pulumi.Input

	ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput
	ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput
}

type actionsOrganizationPermissionsEnabledRepositoriesConfigPtrType ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs

func ActionsOrganizationPermissionsEnabledRepositoriesConfigPtr(v *ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrInput {
	return (*actionsOrganizationPermissionsEnabledRepositoriesConfigPtrType)(v)
}

func (*actionsOrganizationPermissionsEnabledRepositoriesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsOrganizationPermissionsEnabledRepositoriesConfig)(nil)).Elem()
}

func (i *actionsOrganizationPermissionsEnabledRepositoriesConfigPtrType) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return i.ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(context.Background())
}

func (i *actionsOrganizationPermissionsEnabledRepositoriesConfigPtrType) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput)
}

type ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput struct{ *pulumi.OutputState }

func (ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsOrganizationPermissionsEnabledRepositoriesConfig)(nil)).Elem()
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput {
	return o
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput {
	return o
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return o.ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(context.Background())
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionsOrganizationPermissionsEnabledRepositoriesConfig) *ActionsOrganizationPermissionsEnabledRepositoriesConfig {
		return &v
	}).(ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput)
}

// List of repository IDs to enable for GitHub Actions.
func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput) RepositoryIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ActionsOrganizationPermissionsEnabledRepositoriesConfig) []int { return v.RepositoryIds }).(pulumi.IntArrayOutput)
}

type ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput struct{ *pulumi.OutputState }

func (ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsOrganizationPermissionsEnabledRepositoriesConfig)(nil)).Elem()
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput() ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return o
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput) ToActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutputWithContext(ctx context.Context) ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput {
	return o
}

func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput) Elem() ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsEnabledRepositoriesConfig) ActionsOrganizationPermissionsEnabledRepositoriesConfig {
		if v != nil {
			return *v
		}
		var ret ActionsOrganizationPermissionsEnabledRepositoriesConfig
		return ret
	}).(ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput)
}

// List of repository IDs to enable for GitHub Actions.
func (o ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput) RepositoryIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ActionsOrganizationPermissionsEnabledRepositoriesConfig) []int {
		if v == nil {
			return nil
		}
		return v.RepositoryIds
	}).(pulumi.IntArrayOutput)
}

type ActionsRepositoryPermissionsAllowedActionsConfig struct {
	// Whether GitHub-owned actions are allowed in the repository.
	GithubOwnedAllowed bool `pulumi:"githubOwnedAllowed"`
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
	PatternsAlloweds []string `pulumi:"patternsAlloweds"`
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed *bool `pulumi:"verifiedAllowed"`
}

// ActionsRepositoryPermissionsAllowedActionsConfigInput is an input type that accepts ActionsRepositoryPermissionsAllowedActionsConfigArgs and ActionsRepositoryPermissionsAllowedActionsConfigOutput values.
// You can construct a concrete instance of `ActionsRepositoryPermissionsAllowedActionsConfigInput` via:
//
//	ActionsRepositoryPermissionsAllowedActionsConfigArgs{...}
type ActionsRepositoryPermissionsAllowedActionsConfigInput interface {
	pulumi.Input

	ToActionsRepositoryPermissionsAllowedActionsConfigOutput() ActionsRepositoryPermissionsAllowedActionsConfigOutput
	ToActionsRepositoryPermissionsAllowedActionsConfigOutputWithContext(context.Context) ActionsRepositoryPermissionsAllowedActionsConfigOutput
}

type ActionsRepositoryPermissionsAllowedActionsConfigArgs struct {
	// Whether GitHub-owned actions are allowed in the repository.
	GithubOwnedAllowed pulumi.BoolInput `pulumi:"githubOwnedAllowed"`
	// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
	PatternsAlloweds pulumi.StringArrayInput `pulumi:"patternsAlloweds"`
	// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
	VerifiedAllowed pulumi.BoolPtrInput `pulumi:"verifiedAllowed"`
}

func (ActionsRepositoryPermissionsAllowedActionsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsRepositoryPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (i ActionsRepositoryPermissionsAllowedActionsConfigArgs) ToActionsRepositoryPermissionsAllowedActionsConfigOutput() ActionsRepositoryPermissionsAllowedActionsConfigOutput {
	return i.ToActionsRepositoryPermissionsAllowedActionsConfigOutputWithContext(context.Background())
}

func (i ActionsRepositoryPermissionsAllowedActionsConfigArgs) ToActionsRepositoryPermissionsAllowedActionsConfigOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsAllowedActionsConfigOutput)
}

func (i ActionsRepositoryPermissionsAllowedActionsConfigArgs) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutput() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return i.ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (i ActionsRepositoryPermissionsAllowedActionsConfigArgs) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsAllowedActionsConfigOutput).ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(ctx)
}

// ActionsRepositoryPermissionsAllowedActionsConfigPtrInput is an input type that accepts ActionsRepositoryPermissionsAllowedActionsConfigArgs, ActionsRepositoryPermissionsAllowedActionsConfigPtr and ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput values.
// You can construct a concrete instance of `ActionsRepositoryPermissionsAllowedActionsConfigPtrInput` via:
//
//	        ActionsRepositoryPermissionsAllowedActionsConfigArgs{...}
//
//	or:
//
//	        nil
type ActionsRepositoryPermissionsAllowedActionsConfigPtrInput interface {
	pulumi.Input

	ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutput() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput
	ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(context.Context) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput
}

type actionsRepositoryPermissionsAllowedActionsConfigPtrType ActionsRepositoryPermissionsAllowedActionsConfigArgs

func ActionsRepositoryPermissionsAllowedActionsConfigPtr(v *ActionsRepositoryPermissionsAllowedActionsConfigArgs) ActionsRepositoryPermissionsAllowedActionsConfigPtrInput {
	return (*actionsRepositoryPermissionsAllowedActionsConfigPtrType)(v)
}

func (*actionsRepositoryPermissionsAllowedActionsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (i *actionsRepositoryPermissionsAllowedActionsConfigPtrType) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutput() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return i.ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (i *actionsRepositoryPermissionsAllowedActionsConfigPtrType) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput)
}

type ActionsRepositoryPermissionsAllowedActionsConfigOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryPermissionsAllowedActionsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsRepositoryPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) ToActionsRepositoryPermissionsAllowedActionsConfigOutput() ActionsRepositoryPermissionsAllowedActionsConfigOutput {
	return o
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) ToActionsRepositoryPermissionsAllowedActionsConfigOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigOutput {
	return o
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutput() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return o.ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(context.Background())
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionsRepositoryPermissionsAllowedActionsConfig) *ActionsRepositoryPermissionsAllowedActionsConfig {
		return &v
	}).(ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput)
}

// Whether GitHub-owned actions are allowed in the repository.
func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) GithubOwnedAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v ActionsRepositoryPermissionsAllowedActionsConfig) bool { return v.GithubOwnedAllowed }).(pulumi.BoolOutput)
}

// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) PatternsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionsRepositoryPermissionsAllowedActionsConfig) []string { return v.PatternsAlloweds }).(pulumi.StringArrayOutput)
}

// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
func (o ActionsRepositoryPermissionsAllowedActionsConfigOutput) VerifiedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionsRepositoryPermissionsAllowedActionsConfig) *bool { return v.VerifiedAllowed }).(pulumi.BoolPtrOutput)
}

type ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryPermissionsAllowedActionsConfig)(nil)).Elem()
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutput() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return o
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) ToActionsRepositoryPermissionsAllowedActionsConfigPtrOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return o
}

func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) Elem() ActionsRepositoryPermissionsAllowedActionsConfigOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissionsAllowedActionsConfig) ActionsRepositoryPermissionsAllowedActionsConfig {
		if v != nil {
			return *v
		}
		var ret ActionsRepositoryPermissionsAllowedActionsConfig
		return ret
	}).(ActionsRepositoryPermissionsAllowedActionsConfigOutput)
}

// Whether GitHub-owned actions are allowed in the repository.
func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) GithubOwnedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissionsAllowedActionsConfig) *bool {
		if v == nil {
			return nil
		}
		return &v.GithubOwnedAllowed
	}).(pulumi.BoolPtrOutput)
}

// Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*."
func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) PatternsAlloweds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissionsAllowedActionsConfig) []string {
		if v == nil {
			return nil
		}
		return v.PatternsAlloweds
	}).(pulumi.StringArrayOutput)
}

// Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.
func (o ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput) VerifiedAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissionsAllowedActionsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VerifiedAllowed
	}).(pulumi.BoolPtrOutput)
}

type BranchProtectionRequiredPullRequestReview struct {
	// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
	DismissStaleReviews *bool `pulumi:"dismissStaleReviews"`
	// The list of actor Names/IDs with dismissal access. If not empty, `restrictDismissals` is ignored. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
	DismissalRestrictions []string `pulumi:"dismissalRestrictions"`
	// The list of actor Names/IDs that are allowed to bypass pull request requirements. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
	PullRequestBypassers []string `pulumi:"pullRequestBypassers"`
	// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
	RequireCodeOwnerReviews *bool `pulumi:"requireCodeOwnerReviews"`
	// Require that The most recent push must be approved by someone other than the last pusher.  Defaults to `false`
	RequireLastPushApproval *bool `pulumi:"requireLastPushApproval"`
	// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	// (https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	RequiredApprovingReviewCount *int `pulumi:"requiredApprovingReviewCount"`
	// Restrict pull request review dismissals.
	RestrictDismissals *bool `pulumi:"restrictDismissals"`
}

// BranchProtectionRequiredPullRequestReviewInput is an input type that accepts BranchProtectionRequiredPullRequestReviewArgs and BranchProtectionRequiredPullRequestReviewOutput values.
// You can construct a concrete instance of `BranchProtectionRequiredPullRequestReviewInput` via:
//
//	BranchProtectionRequiredPullRequestReviewArgs{...}
type BranchProtectionRequiredPullRequestReviewInput interface {
	pulumi.Input

	ToBranchProtectionRequiredPullRequestReviewOutput() BranchProtectionRequiredPullRequestReviewOutput
	ToBranchProtectionRequiredPullRequestReviewOutputWithContext(context.Context) BranchProtectionRequiredPullRequestReviewOutput
}

type BranchProtectionRequiredPullRequestReviewArgs struct {
	// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
	DismissStaleReviews pulumi.BoolPtrInput `pulumi:"dismissStaleReviews"`
	// The list of actor Names/IDs with dismissal access. If not empty, `restrictDismissals` is ignored. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
	DismissalRestrictions pulumi.StringArrayInput `pulumi:"dismissalRestrictions"`
	// The list of actor Names/IDs that are allowed to bypass pull request requirements. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
	PullRequestBypassers pulumi.StringArrayInput `pulumi:"pullRequestBypassers"`
	// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
	RequireCodeOwnerReviews pulumi.BoolPtrInput `pulumi:"requireCodeOwnerReviews"`
	// Require that The most recent push must be approved by someone other than the last pusher.  Defaults to `false`
	RequireLastPushApproval pulumi.BoolPtrInput `pulumi:"requireLastPushApproval"`
	// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	// (https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	RequiredApprovingReviewCount pulumi.IntPtrInput `pulumi:"requiredApprovingReviewCount"`
	// Restrict pull request review dismissals.
	RestrictDismissals pulumi.BoolPtrInput `pulumi:"restrictDismissals"`
}

func (BranchProtectionRequiredPullRequestReviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionRequiredPullRequestReview)(nil)).Elem()
}

func (i BranchProtectionRequiredPullRequestReviewArgs) ToBranchProtectionRequiredPullRequestReviewOutput() BranchProtectionRequiredPullRequestReviewOutput {
	return i.ToBranchProtectionRequiredPullRequestReviewOutputWithContext(context.Background())
}

func (i BranchProtectionRequiredPullRequestReviewArgs) ToBranchProtectionRequiredPullRequestReviewOutputWithContext(ctx context.Context) BranchProtectionRequiredPullRequestReviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionRequiredPullRequestReviewOutput)
}

// BranchProtectionRequiredPullRequestReviewArrayInput is an input type that accepts BranchProtectionRequiredPullRequestReviewArray and BranchProtectionRequiredPullRequestReviewArrayOutput values.
// You can construct a concrete instance of `BranchProtectionRequiredPullRequestReviewArrayInput` via:
//
//	BranchProtectionRequiredPullRequestReviewArray{ BranchProtectionRequiredPullRequestReviewArgs{...} }
type BranchProtectionRequiredPullRequestReviewArrayInput interface {
	pulumi.Input

	ToBranchProtectionRequiredPullRequestReviewArrayOutput() BranchProtectionRequiredPullRequestReviewArrayOutput
	ToBranchProtectionRequiredPullRequestReviewArrayOutputWithContext(context.Context) BranchProtectionRequiredPullRequestReviewArrayOutput
}

type BranchProtectionRequiredPullRequestReviewArray []BranchProtectionRequiredPullRequestReviewInput

func (BranchProtectionRequiredPullRequestReviewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionRequiredPullRequestReview)(nil)).Elem()
}

func (i BranchProtectionRequiredPullRequestReviewArray) ToBranchProtectionRequiredPullRequestReviewArrayOutput() BranchProtectionRequiredPullRequestReviewArrayOutput {
	return i.ToBranchProtectionRequiredPullRequestReviewArrayOutputWithContext(context.Background())
}

func (i BranchProtectionRequiredPullRequestReviewArray) ToBranchProtectionRequiredPullRequestReviewArrayOutputWithContext(ctx context.Context) BranchProtectionRequiredPullRequestReviewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionRequiredPullRequestReviewArrayOutput)
}

type BranchProtectionRequiredPullRequestReviewOutput struct{ *pulumi.OutputState }

func (BranchProtectionRequiredPullRequestReviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionRequiredPullRequestReview)(nil)).Elem()
}

func (o BranchProtectionRequiredPullRequestReviewOutput) ToBranchProtectionRequiredPullRequestReviewOutput() BranchProtectionRequiredPullRequestReviewOutput {
	return o
}

func (o BranchProtectionRequiredPullRequestReviewOutput) ToBranchProtectionRequiredPullRequestReviewOutputWithContext(ctx context.Context) BranchProtectionRequiredPullRequestReviewOutput {
	return o
}

// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
func (o BranchProtectionRequiredPullRequestReviewOutput) DismissStaleReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) *bool { return v.DismissStaleReviews }).(pulumi.BoolPtrOutput)
}

// The list of actor Names/IDs with dismissal access. If not empty, `restrictDismissals` is ignored. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
func (o BranchProtectionRequiredPullRequestReviewOutput) DismissalRestrictions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) []string { return v.DismissalRestrictions }).(pulumi.StringArrayOutput)
}

// The list of actor Names/IDs that are allowed to bypass pull request requirements. Actor names must either begin with a "/" for users or the organization name followed by a "/" for teams.
func (o BranchProtectionRequiredPullRequestReviewOutput) PullRequestBypassers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) []string { return v.PullRequestBypassers }).(pulumi.StringArrayOutput)
}

// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
func (o BranchProtectionRequiredPullRequestReviewOutput) RequireCodeOwnerReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) *bool { return v.RequireCodeOwnerReviews }).(pulumi.BoolPtrOutput)
}

// Require that The most recent push must be approved by someone other than the last pusher.  Defaults to `false`
func (o BranchProtectionRequiredPullRequestReviewOutput) RequireLastPushApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) *bool { return v.RequireLastPushApproval }).(pulumi.BoolPtrOutput)
}

// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
// (https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
func (o BranchProtectionRequiredPullRequestReviewOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) *int { return v.RequiredApprovingReviewCount }).(pulumi.IntPtrOutput)
}

// Restrict pull request review dismissals.
func (o BranchProtectionRequiredPullRequestReviewOutput) RestrictDismissals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredPullRequestReview) *bool { return v.RestrictDismissals }).(pulumi.BoolPtrOutput)
}

type BranchProtectionRequiredPullRequestReviewArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionRequiredPullRequestReviewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionRequiredPullRequestReview)(nil)).Elem()
}

func (o BranchProtectionRequiredPullRequestReviewArrayOutput) ToBranchProtectionRequiredPullRequestReviewArrayOutput() BranchProtectionRequiredPullRequestReviewArrayOutput {
	return o
}

func (o BranchProtectionRequiredPullRequestReviewArrayOutput) ToBranchProtectionRequiredPullRequestReviewArrayOutputWithContext(ctx context.Context) BranchProtectionRequiredPullRequestReviewArrayOutput {
	return o
}

func (o BranchProtectionRequiredPullRequestReviewArrayOutput) Index(i pulumi.IntInput) BranchProtectionRequiredPullRequestReviewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionRequiredPullRequestReview {
		return vs[0].([]BranchProtectionRequiredPullRequestReview)[vs[1].(int)]
	}).(BranchProtectionRequiredPullRequestReviewOutput)
}

type BranchProtectionRequiredStatusCheck struct {
	// The list of status checks to require in order to merge into this branch. No status checks are required by default.
	Contexts []string `pulumi:"contexts"`
	// Require branches to be up to date before merging. Defaults to `false`.
	Strict *bool `pulumi:"strict"`
}

// BranchProtectionRequiredStatusCheckInput is an input type that accepts BranchProtectionRequiredStatusCheckArgs and BranchProtectionRequiredStatusCheckOutput values.
// You can construct a concrete instance of `BranchProtectionRequiredStatusCheckInput` via:
//
//	BranchProtectionRequiredStatusCheckArgs{...}
type BranchProtectionRequiredStatusCheckInput interface {
	pulumi.Input

	ToBranchProtectionRequiredStatusCheckOutput() BranchProtectionRequiredStatusCheckOutput
	ToBranchProtectionRequiredStatusCheckOutputWithContext(context.Context) BranchProtectionRequiredStatusCheckOutput
}

type BranchProtectionRequiredStatusCheckArgs struct {
	// The list of status checks to require in order to merge into this branch. No status checks are required by default.
	Contexts pulumi.StringArrayInput `pulumi:"contexts"`
	// Require branches to be up to date before merging. Defaults to `false`.
	Strict pulumi.BoolPtrInput `pulumi:"strict"`
}

func (BranchProtectionRequiredStatusCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionRequiredStatusCheck)(nil)).Elem()
}

func (i BranchProtectionRequiredStatusCheckArgs) ToBranchProtectionRequiredStatusCheckOutput() BranchProtectionRequiredStatusCheckOutput {
	return i.ToBranchProtectionRequiredStatusCheckOutputWithContext(context.Background())
}

func (i BranchProtectionRequiredStatusCheckArgs) ToBranchProtectionRequiredStatusCheckOutputWithContext(ctx context.Context) BranchProtectionRequiredStatusCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionRequiredStatusCheckOutput)
}

// BranchProtectionRequiredStatusCheckArrayInput is an input type that accepts BranchProtectionRequiredStatusCheckArray and BranchProtectionRequiredStatusCheckArrayOutput values.
// You can construct a concrete instance of `BranchProtectionRequiredStatusCheckArrayInput` via:
//
//	BranchProtectionRequiredStatusCheckArray{ BranchProtectionRequiredStatusCheckArgs{...} }
type BranchProtectionRequiredStatusCheckArrayInput interface {
	pulumi.Input

	ToBranchProtectionRequiredStatusCheckArrayOutput() BranchProtectionRequiredStatusCheckArrayOutput
	ToBranchProtectionRequiredStatusCheckArrayOutputWithContext(context.Context) BranchProtectionRequiredStatusCheckArrayOutput
}

type BranchProtectionRequiredStatusCheckArray []BranchProtectionRequiredStatusCheckInput

func (BranchProtectionRequiredStatusCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionRequiredStatusCheck)(nil)).Elem()
}

func (i BranchProtectionRequiredStatusCheckArray) ToBranchProtectionRequiredStatusCheckArrayOutput() BranchProtectionRequiredStatusCheckArrayOutput {
	return i.ToBranchProtectionRequiredStatusCheckArrayOutputWithContext(context.Background())
}

func (i BranchProtectionRequiredStatusCheckArray) ToBranchProtectionRequiredStatusCheckArrayOutputWithContext(ctx context.Context) BranchProtectionRequiredStatusCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionRequiredStatusCheckArrayOutput)
}

type BranchProtectionRequiredStatusCheckOutput struct{ *pulumi.OutputState }

func (BranchProtectionRequiredStatusCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionRequiredStatusCheck)(nil)).Elem()
}

func (o BranchProtectionRequiredStatusCheckOutput) ToBranchProtectionRequiredStatusCheckOutput() BranchProtectionRequiredStatusCheckOutput {
	return o
}

func (o BranchProtectionRequiredStatusCheckOutput) ToBranchProtectionRequiredStatusCheckOutputWithContext(ctx context.Context) BranchProtectionRequiredStatusCheckOutput {
	return o
}

// The list of status checks to require in order to merge into this branch. No status checks are required by default.
func (o BranchProtectionRequiredStatusCheckOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionRequiredStatusCheck) []string { return v.Contexts }).(pulumi.StringArrayOutput)
}

// Require branches to be up to date before merging. Defaults to `false`.
func (o BranchProtectionRequiredStatusCheckOutput) Strict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionRequiredStatusCheck) *bool { return v.Strict }).(pulumi.BoolPtrOutput)
}

type BranchProtectionRequiredStatusCheckArrayOutput struct{ *pulumi.OutputState }

func (BranchProtectionRequiredStatusCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchProtectionRequiredStatusCheck)(nil)).Elem()
}

func (o BranchProtectionRequiredStatusCheckArrayOutput) ToBranchProtectionRequiredStatusCheckArrayOutput() BranchProtectionRequiredStatusCheckArrayOutput {
	return o
}

func (o BranchProtectionRequiredStatusCheckArrayOutput) ToBranchProtectionRequiredStatusCheckArrayOutputWithContext(ctx context.Context) BranchProtectionRequiredStatusCheckArrayOutput {
	return o
}

func (o BranchProtectionRequiredStatusCheckArrayOutput) Index(i pulumi.IntInput) BranchProtectionRequiredStatusCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchProtectionRequiredStatusCheck {
		return vs[0].([]BranchProtectionRequiredStatusCheck)[vs[1].(int)]
	}).(BranchProtectionRequiredStatusCheckOutput)
}

type BranchProtectionV3RequiredPullRequestReviews struct {
	// Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
	BypassPullRequestAllowances *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances `pulumi:"bypassPullRequestAllowances"`
	// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
	DismissStaleReviews *bool `pulumi:"dismissStaleReviews"`
	// The list of app slugs with dismissal access.
	DismissalApps []string `pulumi:"dismissalApps"`
	// The list of team slugs with dismissal access.
	// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
	DismissalTeams []string `pulumi:"dismissalTeams"`
	// The list of user logins with dismissal access
	DismissalUsers []string `pulumi:"dismissalUsers"`
	// Deprecated: Use enforce_admins instead
	IncludeAdmins *bool `pulumi:"includeAdmins"`
	// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
	RequireCodeOwnerReviews *bool `pulumi:"requireCodeOwnerReviews"`
	// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	RequiredApprovingReviewCount *int `pulumi:"requiredApprovingReviewCount"`
}

// BranchProtectionV3RequiredPullRequestReviewsInput is an input type that accepts BranchProtectionV3RequiredPullRequestReviewsArgs and BranchProtectionV3RequiredPullRequestReviewsOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredPullRequestReviewsInput` via:
//
//	BranchProtectionV3RequiredPullRequestReviewsArgs{...}
type BranchProtectionV3RequiredPullRequestReviewsInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredPullRequestReviewsOutput() BranchProtectionV3RequiredPullRequestReviewsOutput
	ToBranchProtectionV3RequiredPullRequestReviewsOutputWithContext(context.Context) BranchProtectionV3RequiredPullRequestReviewsOutput
}

type BranchProtectionV3RequiredPullRequestReviewsArgs struct {
	// Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
	BypassPullRequestAllowances BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput `pulumi:"bypassPullRequestAllowances"`
	// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
	DismissStaleReviews pulumi.BoolPtrInput `pulumi:"dismissStaleReviews"`
	// The list of app slugs with dismissal access.
	DismissalApps pulumi.StringArrayInput `pulumi:"dismissalApps"`
	// The list of team slugs with dismissal access.
	// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
	DismissalTeams pulumi.StringArrayInput `pulumi:"dismissalTeams"`
	// The list of user logins with dismissal access
	DismissalUsers pulumi.StringArrayInput `pulumi:"dismissalUsers"`
	// Deprecated: Use enforce_admins instead
	IncludeAdmins pulumi.BoolPtrInput `pulumi:"includeAdmins"`
	// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
	RequireCodeOwnerReviews pulumi.BoolPtrInput `pulumi:"requireCodeOwnerReviews"`
	// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
	RequiredApprovingReviewCount pulumi.IntPtrInput `pulumi:"requiredApprovingReviewCount"`
}

func (BranchProtectionV3RequiredPullRequestReviewsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviews)(nil)).Elem()
}

func (i BranchProtectionV3RequiredPullRequestReviewsArgs) ToBranchProtectionV3RequiredPullRequestReviewsOutput() BranchProtectionV3RequiredPullRequestReviewsOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredPullRequestReviewsArgs) ToBranchProtectionV3RequiredPullRequestReviewsOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsOutput)
}

func (i BranchProtectionV3RequiredPullRequestReviewsArgs) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutput() BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredPullRequestReviewsArgs) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsOutput).ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(ctx)
}

// BranchProtectionV3RequiredPullRequestReviewsPtrInput is an input type that accepts BranchProtectionV3RequiredPullRequestReviewsArgs, BranchProtectionV3RequiredPullRequestReviewsPtr and BranchProtectionV3RequiredPullRequestReviewsPtrOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredPullRequestReviewsPtrInput` via:
//
//	        BranchProtectionV3RequiredPullRequestReviewsArgs{...}
//
//	or:
//
//	        nil
type BranchProtectionV3RequiredPullRequestReviewsPtrInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredPullRequestReviewsPtrOutput() BranchProtectionV3RequiredPullRequestReviewsPtrOutput
	ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(context.Context) BranchProtectionV3RequiredPullRequestReviewsPtrOutput
}

type branchProtectionV3RequiredPullRequestReviewsPtrType BranchProtectionV3RequiredPullRequestReviewsArgs

func BranchProtectionV3RequiredPullRequestReviewsPtr(v *BranchProtectionV3RequiredPullRequestReviewsArgs) BranchProtectionV3RequiredPullRequestReviewsPtrInput {
	return (*branchProtectionV3RequiredPullRequestReviewsPtrType)(v)
}

func (*branchProtectionV3RequiredPullRequestReviewsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredPullRequestReviews)(nil)).Elem()
}

func (i *branchProtectionV3RequiredPullRequestReviewsPtrType) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutput() BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(context.Background())
}

func (i *branchProtectionV3RequiredPullRequestReviewsPtrType) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsPtrOutput)
}

type BranchProtectionV3RequiredPullRequestReviewsOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredPullRequestReviewsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviews)(nil)).Elem()
}

func (o BranchProtectionV3RequiredPullRequestReviewsOutput) ToBranchProtectionV3RequiredPullRequestReviewsOutput() BranchProtectionV3RequiredPullRequestReviewsOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsOutput) ToBranchProtectionV3RequiredPullRequestReviewsOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsOutput) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutput() BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return o.ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(context.Background())
}

func (o BranchProtectionV3RequiredPullRequestReviewsOutput) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchProtectionV3RequiredPullRequestReviews) *BranchProtectionV3RequiredPullRequestReviews {
		return &v
	}).(BranchProtectionV3RequiredPullRequestReviewsPtrOutput)
}

// Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) BypassPullRequestAllowances() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances {
		return v.BypassPullRequestAllowances
	}).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput)
}

// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) DismissStaleReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) *bool { return v.DismissStaleReviews }).(pulumi.BoolPtrOutput)
}

// The list of app slugs with dismissal access.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) DismissalApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) []string { return v.DismissalApps }).(pulumi.StringArrayOutput)
}

// The list of team slugs with dismissal access.
// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) DismissalTeams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) []string { return v.DismissalTeams }).(pulumi.StringArrayOutput)
}

// The list of user logins with dismissal access
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) DismissalUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) []string { return v.DismissalUsers }).(pulumi.StringArrayOutput)
}

// Deprecated: Use enforce_admins instead
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) IncludeAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) *bool { return v.IncludeAdmins }).(pulumi.BoolPtrOutput)
}

// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) RequireCodeOwnerReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) *bool { return v.RequireCodeOwnerReviews }).(pulumi.BoolPtrOutput)
}

// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
func (o BranchProtectionV3RequiredPullRequestReviewsOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviews) *int { return v.RequiredApprovingReviewCount }).(pulumi.IntPtrOutput)
}

type BranchProtectionV3RequiredPullRequestReviewsPtrOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredPullRequestReviewsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredPullRequestReviews)(nil)).Elem()
}

func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutput() BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) ToBranchProtectionV3RequiredPullRequestReviewsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) Elem() BranchProtectionV3RequiredPullRequestReviewsOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) BranchProtectionV3RequiredPullRequestReviews {
		if v != nil {
			return *v
		}
		var ret BranchProtectionV3RequiredPullRequestReviews
		return ret
	}).(BranchProtectionV3RequiredPullRequestReviewsOutput)
}

// Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) BypassPullRequestAllowances() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances {
		if v == nil {
			return nil
		}
		return v.BypassPullRequestAllowances
	}).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput)
}

// Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) DismissStaleReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) *bool {
		if v == nil {
			return nil
		}
		return v.DismissStaleReviews
	}).(pulumi.BoolPtrOutput)
}

// The list of app slugs with dismissal access.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) DismissalApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) []string {
		if v == nil {
			return nil
		}
		return v.DismissalApps
	}).(pulumi.StringArrayOutput)
}

// The list of team slugs with dismissal access.
// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) DismissalTeams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) []string {
		if v == nil {
			return nil
		}
		return v.DismissalTeams
	}).(pulumi.StringArrayOutput)
}

// The list of user logins with dismissal access
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) DismissalUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) []string {
		if v == nil {
			return nil
		}
		return v.DismissalUsers
	}).(pulumi.StringArrayOutput)
}

// Deprecated: Use enforce_admins instead
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) IncludeAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeAdmins
	}).(pulumi.BoolPtrOutput)
}

// Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) RequireCodeOwnerReviews() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) *bool {
		if v == nil {
			return nil
		}
		return v.RequireCodeOwnerReviews
	}).(pulumi.BoolPtrOutput)
}

// Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.
func (o BranchProtectionV3RequiredPullRequestReviewsPtrOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviews) *int {
		if v == nil {
			return nil
		}
		return v.RequiredApprovingReviewCount
	}).(pulumi.IntPtrOutput)
}

type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances struct {
	// The list of app slugs allowed to bypass pull request requirements.
	Apps []string `pulumi:"apps"`
	// The list of team slugs allowed to bypass pull request requirements.
	Teams []string `pulumi:"teams"`
	// The list of user logins allowed to bypass pull request requirements.
	Users []string `pulumi:"users"`
}

// BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesInput is an input type that accepts BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs and BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesInput` via:
//
//	BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs{...}
type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput
	ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputWithContext(context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput
}

type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs struct {
	// The list of app slugs allowed to bypass pull request requirements.
	Apps pulumi.StringArrayInput `pulumi:"apps"`
	// The list of team slugs allowed to bypass pull request requirements.
	Teams pulumi.StringArrayInput `pulumi:"teams"`
	// The list of user logins allowed to bypass pull request requirements.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances)(nil)).Elem()
}

func (i BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput)
}

func (i BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput).ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(ctx)
}

// BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput is an input type that accepts BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs, BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtr and BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput` via:
//
//	        BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs{...}
//
//	or:
//
//	        nil
type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput
	ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput
}

type branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrType BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs

func BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtr(v *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput {
	return (*branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrType)(v)
}

func (*branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances)(nil)).Elem()
}

func (i *branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrType) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return i.ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(context.Background())
}

func (i *branchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrType) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput)
}

type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances)(nil)).Elem()
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o.ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(context.Background())
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances {
		return &v
	}).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput)
}

// The list of app slugs allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		return v.Apps
	}).(pulumi.StringArrayOutput)
}

// The list of team slugs allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		return v.Teams
	}).(pulumi.StringArrayOutput)
}

// The list of user logins allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances)(nil)).Elem()
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) ToBranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) Elem() BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances {
		if v != nil {
			return *v
		}
		var ret BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances
		return ret
	}).(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput)
}

// The list of app slugs allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(pulumi.StringArrayOutput)
}

// The list of team slugs allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		if v == nil {
			return nil
		}
		return v.Teams
	}).(pulumi.StringArrayOutput)
}

// The list of user logins allowed to bypass pull request requirements.
func (o BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type BranchProtectionV3RequiredStatusChecks struct {
	// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and appId like so "context:app_id".
	Checks []string `pulumi:"checks"`
	// [**DEPRECATED**] (Optional) The list of status checks to require in order to merge into this branch. No status checks are required by default.
	//
	// Deprecated: GitHub is deprecating the use of `contexts`. Use a `checks` array instead.
	Contexts []string `pulumi:"contexts"`
	// Deprecated: Use enforce_admins instead
	IncludeAdmins *bool `pulumi:"includeAdmins"`
	// Require branches to be up to date before merging. Defaults to `false`.
	Strict *bool `pulumi:"strict"`
}

// BranchProtectionV3RequiredStatusChecksInput is an input type that accepts BranchProtectionV3RequiredStatusChecksArgs and BranchProtectionV3RequiredStatusChecksOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredStatusChecksInput` via:
//
//	BranchProtectionV3RequiredStatusChecksArgs{...}
type BranchProtectionV3RequiredStatusChecksInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredStatusChecksOutput() BranchProtectionV3RequiredStatusChecksOutput
	ToBranchProtectionV3RequiredStatusChecksOutputWithContext(context.Context) BranchProtectionV3RequiredStatusChecksOutput
}

type BranchProtectionV3RequiredStatusChecksArgs struct {
	// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and appId like so "context:app_id".
	Checks pulumi.StringArrayInput `pulumi:"checks"`
	// [**DEPRECATED**] (Optional) The list of status checks to require in order to merge into this branch. No status checks are required by default.
	//
	// Deprecated: GitHub is deprecating the use of `contexts`. Use a `checks` array instead.
	Contexts pulumi.StringArrayInput `pulumi:"contexts"`
	// Deprecated: Use enforce_admins instead
	IncludeAdmins pulumi.BoolPtrInput `pulumi:"includeAdmins"`
	// Require branches to be up to date before merging. Defaults to `false`.
	Strict pulumi.BoolPtrInput `pulumi:"strict"`
}

func (BranchProtectionV3RequiredStatusChecksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredStatusChecks)(nil)).Elem()
}

func (i BranchProtectionV3RequiredStatusChecksArgs) ToBranchProtectionV3RequiredStatusChecksOutput() BranchProtectionV3RequiredStatusChecksOutput {
	return i.ToBranchProtectionV3RequiredStatusChecksOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredStatusChecksArgs) ToBranchProtectionV3RequiredStatusChecksOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredStatusChecksOutput)
}

func (i BranchProtectionV3RequiredStatusChecksArgs) ToBranchProtectionV3RequiredStatusChecksPtrOutput() BranchProtectionV3RequiredStatusChecksPtrOutput {
	return i.ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i BranchProtectionV3RequiredStatusChecksArgs) ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredStatusChecksOutput).ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(ctx)
}

// BranchProtectionV3RequiredStatusChecksPtrInput is an input type that accepts BranchProtectionV3RequiredStatusChecksArgs, BranchProtectionV3RequiredStatusChecksPtr and BranchProtectionV3RequiredStatusChecksPtrOutput values.
// You can construct a concrete instance of `BranchProtectionV3RequiredStatusChecksPtrInput` via:
//
//	        BranchProtectionV3RequiredStatusChecksArgs{...}
//
//	or:
//
//	        nil
type BranchProtectionV3RequiredStatusChecksPtrInput interface {
	pulumi.Input

	ToBranchProtectionV3RequiredStatusChecksPtrOutput() BranchProtectionV3RequiredStatusChecksPtrOutput
	ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(context.Context) BranchProtectionV3RequiredStatusChecksPtrOutput
}

type branchProtectionV3RequiredStatusChecksPtrType BranchProtectionV3RequiredStatusChecksArgs

func BranchProtectionV3RequiredStatusChecksPtr(v *BranchProtectionV3RequiredStatusChecksArgs) BranchProtectionV3RequiredStatusChecksPtrInput {
	return (*branchProtectionV3RequiredStatusChecksPtrType)(v)
}

func (*branchProtectionV3RequiredStatusChecksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredStatusChecks)(nil)).Elem()
}

func (i *branchProtectionV3RequiredStatusChecksPtrType) ToBranchProtectionV3RequiredStatusChecksPtrOutput() BranchProtectionV3RequiredStatusChecksPtrOutput {
	return i.ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i *branchProtectionV3RequiredStatusChecksPtrType) ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RequiredStatusChecksPtrOutput)
}

type BranchProtectionV3RequiredStatusChecksOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredStatusChecksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3RequiredStatusChecks)(nil)).Elem()
}

func (o BranchProtectionV3RequiredStatusChecksOutput) ToBranchProtectionV3RequiredStatusChecksOutput() BranchProtectionV3RequiredStatusChecksOutput {
	return o
}

func (o BranchProtectionV3RequiredStatusChecksOutput) ToBranchProtectionV3RequiredStatusChecksOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksOutput {
	return o
}

func (o BranchProtectionV3RequiredStatusChecksOutput) ToBranchProtectionV3RequiredStatusChecksPtrOutput() BranchProtectionV3RequiredStatusChecksPtrOutput {
	return o.ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (o BranchProtectionV3RequiredStatusChecksOutput) ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchProtectionV3RequiredStatusChecks) *BranchProtectionV3RequiredStatusChecks {
		return &v
	}).(BranchProtectionV3RequiredStatusChecksPtrOutput)
}

// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and appId like so "context:app_id".
func (o BranchProtectionV3RequiredStatusChecksOutput) Checks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredStatusChecks) []string { return v.Checks }).(pulumi.StringArrayOutput)
}

// [**DEPRECATED**] (Optional) The list of status checks to require in order to merge into this branch. No status checks are required by default.
//
// Deprecated: GitHub is deprecating the use of `contexts`. Use a `checks` array instead.
func (o BranchProtectionV3RequiredStatusChecksOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredStatusChecks) []string { return v.Contexts }).(pulumi.StringArrayOutput)
}

// Deprecated: Use enforce_admins instead
func (o BranchProtectionV3RequiredStatusChecksOutput) IncludeAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredStatusChecks) *bool { return v.IncludeAdmins }).(pulumi.BoolPtrOutput)
}

// Require branches to be up to date before merging. Defaults to `false`.
func (o BranchProtectionV3RequiredStatusChecksOutput) Strict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchProtectionV3RequiredStatusChecks) *bool { return v.Strict }).(pulumi.BoolPtrOutput)
}

type BranchProtectionV3RequiredStatusChecksPtrOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RequiredStatusChecksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3RequiredStatusChecks)(nil)).Elem()
}

func (o BranchProtectionV3RequiredStatusChecksPtrOutput) ToBranchProtectionV3RequiredStatusChecksPtrOutput() BranchProtectionV3RequiredStatusChecksPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredStatusChecksPtrOutput) ToBranchProtectionV3RequiredStatusChecksPtrOutputWithContext(ctx context.Context) BranchProtectionV3RequiredStatusChecksPtrOutput {
	return o
}

func (o BranchProtectionV3RequiredStatusChecksPtrOutput) Elem() BranchProtectionV3RequiredStatusChecksOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredStatusChecks) BranchProtectionV3RequiredStatusChecks {
		if v != nil {
			return *v
		}
		var ret BranchProtectionV3RequiredStatusChecks
		return ret
	}).(BranchProtectionV3RequiredStatusChecksOutput)
}

// The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and appId like so "context:app_id".
func (o BranchProtectionV3RequiredStatusChecksPtrOutput) Checks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredStatusChecks) []string {
		if v == nil {
			return nil
		}
		return v.Checks
	}).(pulumi.StringArrayOutput)
}

// [**DEPRECATED**] (Optional) The list of status checks to require in order to merge into this branch. No status checks are required by default.
//
// Deprecated: GitHub is deprecating the use of `contexts`. Use a `checks` array instead.
func (o BranchProtectionV3RequiredStatusChecksPtrOutput) Contexts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredStatusChecks) []string {
		if v == nil {
			return nil
		}
		return v.Contexts
	}).(pulumi.StringArrayOutput)
}

// Deprecated: Use enforce_admins instead
func (o BranchProtectionV3RequiredStatusChecksPtrOutput) IncludeAdmins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredStatusChecks) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeAdmins
	}).(pulumi.BoolPtrOutput)
}

// Require branches to be up to date before merging. Defaults to `false`.
func (o BranchProtectionV3RequiredStatusChecksPtrOutput) Strict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchProtectionV3RequiredStatusChecks) *bool {
		if v == nil {
			return nil
		}
		return v.Strict
	}).(pulumi.BoolPtrOutput)
}

type BranchProtectionV3Restrictions struct {
	// The list of app slugs with push access.
	//
	// `restrictions` is only available for organization-owned repositories.
	Apps []string `pulumi:"apps"`
	// The list of team slugs with push access.
	// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
	Teams []string `pulumi:"teams"`
	// The list of user logins with push access.
	Users []string `pulumi:"users"`
}

// BranchProtectionV3RestrictionsInput is an input type that accepts BranchProtectionV3RestrictionsArgs and BranchProtectionV3RestrictionsOutput values.
// You can construct a concrete instance of `BranchProtectionV3RestrictionsInput` via:
//
//	BranchProtectionV3RestrictionsArgs{...}
type BranchProtectionV3RestrictionsInput interface {
	pulumi.Input

	ToBranchProtectionV3RestrictionsOutput() BranchProtectionV3RestrictionsOutput
	ToBranchProtectionV3RestrictionsOutputWithContext(context.Context) BranchProtectionV3RestrictionsOutput
}

type BranchProtectionV3RestrictionsArgs struct {
	// The list of app slugs with push access.
	//
	// `restrictions` is only available for organization-owned repositories.
	Apps pulumi.StringArrayInput `pulumi:"apps"`
	// The list of team slugs with push access.
	// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
	Teams pulumi.StringArrayInput `pulumi:"teams"`
	// The list of user logins with push access.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (BranchProtectionV3RestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3Restrictions)(nil)).Elem()
}

func (i BranchProtectionV3RestrictionsArgs) ToBranchProtectionV3RestrictionsOutput() BranchProtectionV3RestrictionsOutput {
	return i.ToBranchProtectionV3RestrictionsOutputWithContext(context.Background())
}

func (i BranchProtectionV3RestrictionsArgs) ToBranchProtectionV3RestrictionsOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RestrictionsOutput)
}

func (i BranchProtectionV3RestrictionsArgs) ToBranchProtectionV3RestrictionsPtrOutput() BranchProtectionV3RestrictionsPtrOutput {
	return i.ToBranchProtectionV3RestrictionsPtrOutputWithContext(context.Background())
}

func (i BranchProtectionV3RestrictionsArgs) ToBranchProtectionV3RestrictionsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RestrictionsOutput).ToBranchProtectionV3RestrictionsPtrOutputWithContext(ctx)
}

// BranchProtectionV3RestrictionsPtrInput is an input type that accepts BranchProtectionV3RestrictionsArgs, BranchProtectionV3RestrictionsPtr and BranchProtectionV3RestrictionsPtrOutput values.
// You can construct a concrete instance of `BranchProtectionV3RestrictionsPtrInput` via:
//
//	        BranchProtectionV3RestrictionsArgs{...}
//
//	or:
//
//	        nil
type BranchProtectionV3RestrictionsPtrInput interface {
	pulumi.Input

	ToBranchProtectionV3RestrictionsPtrOutput() BranchProtectionV3RestrictionsPtrOutput
	ToBranchProtectionV3RestrictionsPtrOutputWithContext(context.Context) BranchProtectionV3RestrictionsPtrOutput
}

type branchProtectionV3RestrictionsPtrType BranchProtectionV3RestrictionsArgs

func BranchProtectionV3RestrictionsPtr(v *BranchProtectionV3RestrictionsArgs) BranchProtectionV3RestrictionsPtrInput {
	return (*branchProtectionV3RestrictionsPtrType)(v)
}

func (*branchProtectionV3RestrictionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3Restrictions)(nil)).Elem()
}

func (i *branchProtectionV3RestrictionsPtrType) ToBranchProtectionV3RestrictionsPtrOutput() BranchProtectionV3RestrictionsPtrOutput {
	return i.ToBranchProtectionV3RestrictionsPtrOutputWithContext(context.Background())
}

func (i *branchProtectionV3RestrictionsPtrType) ToBranchProtectionV3RestrictionsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchProtectionV3RestrictionsPtrOutput)
}

type BranchProtectionV3RestrictionsOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchProtectionV3Restrictions)(nil)).Elem()
}

func (o BranchProtectionV3RestrictionsOutput) ToBranchProtectionV3RestrictionsOutput() BranchProtectionV3RestrictionsOutput {
	return o
}

func (o BranchProtectionV3RestrictionsOutput) ToBranchProtectionV3RestrictionsOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsOutput {
	return o
}

func (o BranchProtectionV3RestrictionsOutput) ToBranchProtectionV3RestrictionsPtrOutput() BranchProtectionV3RestrictionsPtrOutput {
	return o.ToBranchProtectionV3RestrictionsPtrOutputWithContext(context.Background())
}

func (o BranchProtectionV3RestrictionsOutput) ToBranchProtectionV3RestrictionsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchProtectionV3Restrictions) *BranchProtectionV3Restrictions {
		return &v
	}).(BranchProtectionV3RestrictionsPtrOutput)
}

// The list of app slugs with push access.
//
// `restrictions` is only available for organization-owned repositories.
func (o BranchProtectionV3RestrictionsOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3Restrictions) []string { return v.Apps }).(pulumi.StringArrayOutput)
}

// The list of team slugs with push access.
// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
func (o BranchProtectionV3RestrictionsOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3Restrictions) []string { return v.Teams }).(pulumi.StringArrayOutput)
}

// The list of user logins with push access.
func (o BranchProtectionV3RestrictionsOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BranchProtectionV3Restrictions) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type BranchProtectionV3RestrictionsPtrOutput struct{ *pulumi.OutputState }

func (BranchProtectionV3RestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchProtectionV3Restrictions)(nil)).Elem()
}

func (o BranchProtectionV3RestrictionsPtrOutput) ToBranchProtectionV3RestrictionsPtrOutput() BranchProtectionV3RestrictionsPtrOutput {
	return o
}

func (o BranchProtectionV3RestrictionsPtrOutput) ToBranchProtectionV3RestrictionsPtrOutputWithContext(ctx context.Context) BranchProtectionV3RestrictionsPtrOutput {
	return o
}

func (o BranchProtectionV3RestrictionsPtrOutput) Elem() BranchProtectionV3RestrictionsOutput {
	return o.ApplyT(func(v *BranchProtectionV3Restrictions) BranchProtectionV3Restrictions {
		if v != nil {
			return *v
		}
		var ret BranchProtectionV3Restrictions
		return ret
	}).(BranchProtectionV3RestrictionsOutput)
}

// The list of app slugs with push access.
//
// `restrictions` is only available for organization-owned repositories.
func (o BranchProtectionV3RestrictionsPtrOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3Restrictions) []string {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(pulumi.StringArrayOutput)
}

// The list of team slugs with push access.
// Always use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.
func (o BranchProtectionV3RestrictionsPtrOutput) Teams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3Restrictions) []string {
		if v == nil {
			return nil
		}
		return v.Teams
	}).(pulumi.StringArrayOutput)
}

// The list of user logins with push access.
func (o BranchProtectionV3RestrictionsPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchProtectionV3Restrictions) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

type IssueLabelsLabel struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color string `pulumi:"color"`
	// A short description of the label.
	Description *string `pulumi:"description"`
	// The name of the label.
	Name string `pulumi:"name"`
	// The URL to the issue label
	Url *string `pulumi:"url"`
}

// IssueLabelsLabelInput is an input type that accepts IssueLabelsLabelArgs and IssueLabelsLabelOutput values.
// You can construct a concrete instance of `IssueLabelsLabelInput` via:
//
//	IssueLabelsLabelArgs{...}
type IssueLabelsLabelInput interface {
	pulumi.Input

	ToIssueLabelsLabelOutput() IssueLabelsLabelOutput
	ToIssueLabelsLabelOutputWithContext(context.Context) IssueLabelsLabelOutput
}

type IssueLabelsLabelArgs struct {
	// A 6 character hex code, **without the leading #**, identifying the color of the label.
	Color pulumi.StringInput `pulumi:"color"`
	// A short description of the label.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the label.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL to the issue label
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (IssueLabelsLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueLabelsLabel)(nil)).Elem()
}

func (i IssueLabelsLabelArgs) ToIssueLabelsLabelOutput() IssueLabelsLabelOutput {
	return i.ToIssueLabelsLabelOutputWithContext(context.Background())
}

func (i IssueLabelsLabelArgs) ToIssueLabelsLabelOutputWithContext(ctx context.Context) IssueLabelsLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelsLabelOutput)
}

// IssueLabelsLabelArrayInput is an input type that accepts IssueLabelsLabelArray and IssueLabelsLabelArrayOutput values.
// You can construct a concrete instance of `IssueLabelsLabelArrayInput` via:
//
//	IssueLabelsLabelArray{ IssueLabelsLabelArgs{...} }
type IssueLabelsLabelArrayInput interface {
	pulumi.Input

	ToIssueLabelsLabelArrayOutput() IssueLabelsLabelArrayOutput
	ToIssueLabelsLabelArrayOutputWithContext(context.Context) IssueLabelsLabelArrayOutput
}

type IssueLabelsLabelArray []IssueLabelsLabelInput

func (IssueLabelsLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IssueLabelsLabel)(nil)).Elem()
}

func (i IssueLabelsLabelArray) ToIssueLabelsLabelArrayOutput() IssueLabelsLabelArrayOutput {
	return i.ToIssueLabelsLabelArrayOutputWithContext(context.Background())
}

func (i IssueLabelsLabelArray) ToIssueLabelsLabelArrayOutputWithContext(ctx context.Context) IssueLabelsLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelsLabelArrayOutput)
}

type IssueLabelsLabelOutput struct{ *pulumi.OutputState }

func (IssueLabelsLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueLabelsLabel)(nil)).Elem()
}

func (o IssueLabelsLabelOutput) ToIssueLabelsLabelOutput() IssueLabelsLabelOutput {
	return o
}

func (o IssueLabelsLabelOutput) ToIssueLabelsLabelOutputWithContext(ctx context.Context) IssueLabelsLabelOutput {
	return o
}

// A 6 character hex code, **without the leading #**, identifying the color of the label.
func (o IssueLabelsLabelOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v IssueLabelsLabel) string { return v.Color }).(pulumi.StringOutput)
}

// A short description of the label.
func (o IssueLabelsLabelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IssueLabelsLabel) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the label.
func (o IssueLabelsLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IssueLabelsLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The URL to the issue label
func (o IssueLabelsLabelOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IssueLabelsLabel) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type IssueLabelsLabelArrayOutput struct{ *pulumi.OutputState }

func (IssueLabelsLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IssueLabelsLabel)(nil)).Elem()
}

func (o IssueLabelsLabelArrayOutput) ToIssueLabelsLabelArrayOutput() IssueLabelsLabelArrayOutput {
	return o
}

func (o IssueLabelsLabelArrayOutput) ToIssueLabelsLabelArrayOutputWithContext(ctx context.Context) IssueLabelsLabelArrayOutput {
	return o
}

func (o IssueLabelsLabelArrayOutput) Index(i pulumi.IntInput) IssueLabelsLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IssueLabelsLabel {
		return vs[0].([]IssueLabelsLabel)[vs[1].(int)]
	}).(IssueLabelsLabelOutput)
}

type OrganizationRulesetBypassActor struct {
	// (Number) The ID of the actor that can bypass a ruleset.
	ActorId int `pulumi:"actorId"`
	// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
	ActorType string `pulumi:"actorType"`
	// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
	//
	// ~>Note: at the time of writing this, the following actor types correspond to the following actor IDs:
	BypassMode string `pulumi:"bypassMode"`
}

// OrganizationRulesetBypassActorInput is an input type that accepts OrganizationRulesetBypassActorArgs and OrganizationRulesetBypassActorOutput values.
// You can construct a concrete instance of `OrganizationRulesetBypassActorInput` via:
//
//	OrganizationRulesetBypassActorArgs{...}
type OrganizationRulesetBypassActorInput interface {
	pulumi.Input

	ToOrganizationRulesetBypassActorOutput() OrganizationRulesetBypassActorOutput
	ToOrganizationRulesetBypassActorOutputWithContext(context.Context) OrganizationRulesetBypassActorOutput
}

type OrganizationRulesetBypassActorArgs struct {
	// (Number) The ID of the actor that can bypass a ruleset.
	ActorId pulumi.IntInput `pulumi:"actorId"`
	// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
	ActorType pulumi.StringInput `pulumi:"actorType"`
	// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
	//
	// ~>Note: at the time of writing this, the following actor types correspond to the following actor IDs:
	BypassMode pulumi.StringInput `pulumi:"bypassMode"`
}

func (OrganizationRulesetBypassActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetBypassActor)(nil)).Elem()
}

func (i OrganizationRulesetBypassActorArgs) ToOrganizationRulesetBypassActorOutput() OrganizationRulesetBypassActorOutput {
	return i.ToOrganizationRulesetBypassActorOutputWithContext(context.Background())
}

func (i OrganizationRulesetBypassActorArgs) ToOrganizationRulesetBypassActorOutputWithContext(ctx context.Context) OrganizationRulesetBypassActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetBypassActorOutput)
}

// OrganizationRulesetBypassActorArrayInput is an input type that accepts OrganizationRulesetBypassActorArray and OrganizationRulesetBypassActorArrayOutput values.
// You can construct a concrete instance of `OrganizationRulesetBypassActorArrayInput` via:
//
//	OrganizationRulesetBypassActorArray{ OrganizationRulesetBypassActorArgs{...} }
type OrganizationRulesetBypassActorArrayInput interface {
	pulumi.Input

	ToOrganizationRulesetBypassActorArrayOutput() OrganizationRulesetBypassActorArrayOutput
	ToOrganizationRulesetBypassActorArrayOutputWithContext(context.Context) OrganizationRulesetBypassActorArrayOutput
}

type OrganizationRulesetBypassActorArray []OrganizationRulesetBypassActorInput

func (OrganizationRulesetBypassActorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRulesetBypassActor)(nil)).Elem()
}

func (i OrganizationRulesetBypassActorArray) ToOrganizationRulesetBypassActorArrayOutput() OrganizationRulesetBypassActorArrayOutput {
	return i.ToOrganizationRulesetBypassActorArrayOutputWithContext(context.Background())
}

func (i OrganizationRulesetBypassActorArray) ToOrganizationRulesetBypassActorArrayOutputWithContext(ctx context.Context) OrganizationRulesetBypassActorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetBypassActorArrayOutput)
}

type OrganizationRulesetBypassActorOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetBypassActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetBypassActor)(nil)).Elem()
}

func (o OrganizationRulesetBypassActorOutput) ToOrganizationRulesetBypassActorOutput() OrganizationRulesetBypassActorOutput {
	return o
}

func (o OrganizationRulesetBypassActorOutput) ToOrganizationRulesetBypassActorOutputWithContext(ctx context.Context) OrganizationRulesetBypassActorOutput {
	return o
}

// (Number) The ID of the actor that can bypass a ruleset.
func (o OrganizationRulesetBypassActorOutput) ActorId() pulumi.IntOutput {
	return o.ApplyT(func(v OrganizationRulesetBypassActor) int { return v.ActorId }).(pulumi.IntOutput)
}

// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
func (o OrganizationRulesetBypassActorOutput) ActorType() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetBypassActor) string { return v.ActorType }).(pulumi.StringOutput)
}

// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
//
// ~>Note: at the time of writing this, the following actor types correspond to the following actor IDs:
func (o OrganizationRulesetBypassActorOutput) BypassMode() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetBypassActor) string { return v.BypassMode }).(pulumi.StringOutput)
}

type OrganizationRulesetBypassActorArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetBypassActorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRulesetBypassActor)(nil)).Elem()
}

func (o OrganizationRulesetBypassActorArrayOutput) ToOrganizationRulesetBypassActorArrayOutput() OrganizationRulesetBypassActorArrayOutput {
	return o
}

func (o OrganizationRulesetBypassActorArrayOutput) ToOrganizationRulesetBypassActorArrayOutputWithContext(ctx context.Context) OrganizationRulesetBypassActorArrayOutput {
	return o
}

func (o OrganizationRulesetBypassActorArrayOutput) Index(i pulumi.IntInput) OrganizationRulesetBypassActorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationRulesetBypassActor {
		return vs[0].([]OrganizationRulesetBypassActor)[vs[1].(int)]
	}).(OrganizationRulesetBypassActorOutput)
}

type OrganizationRulesetConditions struct {
	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	RefName OrganizationRulesetConditionsRefName `pulumi:"refName"`
	// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repositoryName`.
	RepositoryId *int `pulumi:"repositoryId"`
	// Conflicts with `repositoryId`. (see below for nested schema)
	//
	// One of `repositoryId` and `repositoryName` must be set for the rule to target any repositories.
	RepositoryName *OrganizationRulesetConditionsRepositoryName `pulumi:"repositoryName"`
}

// OrganizationRulesetConditionsInput is an input type that accepts OrganizationRulesetConditionsArgs and OrganizationRulesetConditionsOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsInput` via:
//
//	OrganizationRulesetConditionsArgs{...}
type OrganizationRulesetConditionsInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsOutput() OrganizationRulesetConditionsOutput
	ToOrganizationRulesetConditionsOutputWithContext(context.Context) OrganizationRulesetConditionsOutput
}

type OrganizationRulesetConditionsArgs struct {
	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	RefName OrganizationRulesetConditionsRefNameInput `pulumi:"refName"`
	// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repositoryName`.
	RepositoryId pulumi.IntPtrInput `pulumi:"repositoryId"`
	// Conflicts with `repositoryId`. (see below for nested schema)
	//
	// One of `repositoryId` and `repositoryName` must be set for the rule to target any repositories.
	RepositoryName OrganizationRulesetConditionsRepositoryNamePtrInput `pulumi:"repositoryName"`
}

func (OrganizationRulesetConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditions)(nil)).Elem()
}

func (i OrganizationRulesetConditionsArgs) ToOrganizationRulesetConditionsOutput() OrganizationRulesetConditionsOutput {
	return i.ToOrganizationRulesetConditionsOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsArgs) ToOrganizationRulesetConditionsOutputWithContext(ctx context.Context) OrganizationRulesetConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsOutput)
}

func (i OrganizationRulesetConditionsArgs) ToOrganizationRulesetConditionsPtrOutput() OrganizationRulesetConditionsPtrOutput {
	return i.ToOrganizationRulesetConditionsPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsArgs) ToOrganizationRulesetConditionsPtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsOutput).ToOrganizationRulesetConditionsPtrOutputWithContext(ctx)
}

// OrganizationRulesetConditionsPtrInput is an input type that accepts OrganizationRulesetConditionsArgs, OrganizationRulesetConditionsPtr and OrganizationRulesetConditionsPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsPtrInput` via:
//
//	        OrganizationRulesetConditionsArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetConditionsPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsPtrOutput() OrganizationRulesetConditionsPtrOutput
	ToOrganizationRulesetConditionsPtrOutputWithContext(context.Context) OrganizationRulesetConditionsPtrOutput
}

type organizationRulesetConditionsPtrType OrganizationRulesetConditionsArgs

func OrganizationRulesetConditionsPtr(v *OrganizationRulesetConditionsArgs) OrganizationRulesetConditionsPtrInput {
	return (*organizationRulesetConditionsPtrType)(v)
}

func (*organizationRulesetConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditions)(nil)).Elem()
}

func (i *organizationRulesetConditionsPtrType) ToOrganizationRulesetConditionsPtrOutput() OrganizationRulesetConditionsPtrOutput {
	return i.ToOrganizationRulesetConditionsPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetConditionsPtrType) ToOrganizationRulesetConditionsPtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsPtrOutput)
}

type OrganizationRulesetConditionsOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditions)(nil)).Elem()
}

func (o OrganizationRulesetConditionsOutput) ToOrganizationRulesetConditionsOutput() OrganizationRulesetConditionsOutput {
	return o
}

func (o OrganizationRulesetConditionsOutput) ToOrganizationRulesetConditionsOutputWithContext(ctx context.Context) OrganizationRulesetConditionsOutput {
	return o
}

func (o OrganizationRulesetConditionsOutput) ToOrganizationRulesetConditionsPtrOutput() OrganizationRulesetConditionsPtrOutput {
	return o.ToOrganizationRulesetConditionsPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetConditionsOutput) ToOrganizationRulesetConditionsPtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetConditions) *OrganizationRulesetConditions {
		return &v
	}).(OrganizationRulesetConditionsPtrOutput)
}

// (Block List, Min: 1, Max: 1) (see below for nested schema)
func (o OrganizationRulesetConditionsOutput) RefName() OrganizationRulesetConditionsRefNameOutput {
	return o.ApplyT(func(v OrganizationRulesetConditions) OrganizationRulesetConditionsRefName { return v.RefName }).(OrganizationRulesetConditionsRefNameOutput)
}

// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repositoryName`.
func (o OrganizationRulesetConditionsOutput) RepositoryId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetConditions) *int { return v.RepositoryId }).(pulumi.IntPtrOutput)
}

// Conflicts with `repositoryId`. (see below for nested schema)
//
// One of `repositoryId` and `repositoryName` must be set for the rule to target any repositories.
func (o OrganizationRulesetConditionsOutput) RepositoryName() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o.ApplyT(func(v OrganizationRulesetConditions) *OrganizationRulesetConditionsRepositoryName {
		return v.RepositoryName
	}).(OrganizationRulesetConditionsRepositoryNamePtrOutput)
}

type OrganizationRulesetConditionsPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditions)(nil)).Elem()
}

func (o OrganizationRulesetConditionsPtrOutput) ToOrganizationRulesetConditionsPtrOutput() OrganizationRulesetConditionsPtrOutput {
	return o
}

func (o OrganizationRulesetConditionsPtrOutput) ToOrganizationRulesetConditionsPtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsPtrOutput {
	return o
}

func (o OrganizationRulesetConditionsPtrOutput) Elem() OrganizationRulesetConditionsOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditions) OrganizationRulesetConditions {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetConditions
		return ret
	}).(OrganizationRulesetConditionsOutput)
}

// (Block List, Min: 1, Max: 1) (see below for nested schema)
func (o OrganizationRulesetConditionsPtrOutput) RefName() OrganizationRulesetConditionsRefNamePtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditions) *OrganizationRulesetConditionsRefName {
		if v == nil {
			return nil
		}
		return &v.RefName
	}).(OrganizationRulesetConditionsRefNamePtrOutput)
}

// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repositoryName`.
func (o OrganizationRulesetConditionsPtrOutput) RepositoryId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditions) *int {
		if v == nil {
			return nil
		}
		return v.RepositoryId
	}).(pulumi.IntPtrOutput)
}

// Conflicts with `repositoryId`. (see below for nested schema)
//
// One of `repositoryId` and `repositoryName` must be set for the rule to target any repositories.
func (o OrganizationRulesetConditionsPtrOutput) RepositoryName() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditions) *OrganizationRulesetConditionsRepositoryName {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(OrganizationRulesetConditionsRepositoryNamePtrOutput)
}

type OrganizationRulesetConditionsRefName struct {
	// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes []string `pulumi:"excludes"`
	// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Includes []string `pulumi:"includes"`
}

// OrganizationRulesetConditionsRefNameInput is an input type that accepts OrganizationRulesetConditionsRefNameArgs and OrganizationRulesetConditionsRefNameOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsRefNameInput` via:
//
//	OrganizationRulesetConditionsRefNameArgs{...}
type OrganizationRulesetConditionsRefNameInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsRefNameOutput() OrganizationRulesetConditionsRefNameOutput
	ToOrganizationRulesetConditionsRefNameOutputWithContext(context.Context) OrganizationRulesetConditionsRefNameOutput
}

type OrganizationRulesetConditionsRefNameArgs struct {
	// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (OrganizationRulesetConditionsRefNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditionsRefName)(nil)).Elem()
}

func (i OrganizationRulesetConditionsRefNameArgs) ToOrganizationRulesetConditionsRefNameOutput() OrganizationRulesetConditionsRefNameOutput {
	return i.ToOrganizationRulesetConditionsRefNameOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsRefNameArgs) ToOrganizationRulesetConditionsRefNameOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRefNameOutput)
}

func (i OrganizationRulesetConditionsRefNameArgs) ToOrganizationRulesetConditionsRefNamePtrOutput() OrganizationRulesetConditionsRefNamePtrOutput {
	return i.ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsRefNameArgs) ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRefNameOutput).ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(ctx)
}

// OrganizationRulesetConditionsRefNamePtrInput is an input type that accepts OrganizationRulesetConditionsRefNameArgs, OrganizationRulesetConditionsRefNamePtr and OrganizationRulesetConditionsRefNamePtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsRefNamePtrInput` via:
//
//	        OrganizationRulesetConditionsRefNameArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetConditionsRefNamePtrInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsRefNamePtrOutput() OrganizationRulesetConditionsRefNamePtrOutput
	ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(context.Context) OrganizationRulesetConditionsRefNamePtrOutput
}

type organizationRulesetConditionsRefNamePtrType OrganizationRulesetConditionsRefNameArgs

func OrganizationRulesetConditionsRefNamePtr(v *OrganizationRulesetConditionsRefNameArgs) OrganizationRulesetConditionsRefNamePtrInput {
	return (*organizationRulesetConditionsRefNamePtrType)(v)
}

func (*organizationRulesetConditionsRefNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditionsRefName)(nil)).Elem()
}

func (i *organizationRulesetConditionsRefNamePtrType) ToOrganizationRulesetConditionsRefNamePtrOutput() OrganizationRulesetConditionsRefNamePtrOutput {
	return i.ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (i *organizationRulesetConditionsRefNamePtrType) ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRefNamePtrOutput)
}

type OrganizationRulesetConditionsRefNameOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsRefNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditionsRefName)(nil)).Elem()
}

func (o OrganizationRulesetConditionsRefNameOutput) ToOrganizationRulesetConditionsRefNameOutput() OrganizationRulesetConditionsRefNameOutput {
	return o
}

func (o OrganizationRulesetConditionsRefNameOutput) ToOrganizationRulesetConditionsRefNameOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNameOutput {
	return o
}

func (o OrganizationRulesetConditionsRefNameOutput) ToOrganizationRulesetConditionsRefNamePtrOutput() OrganizationRulesetConditionsRefNamePtrOutput {
	return o.ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetConditionsRefNameOutput) ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetConditionsRefName) *OrganizationRulesetConditionsRefName {
		return &v
	}).(OrganizationRulesetConditionsRefNamePtrOutput)
}

// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o OrganizationRulesetConditionsRefNameOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrganizationRulesetConditionsRefName) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
func (o OrganizationRulesetConditionsRefNameOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrganizationRulesetConditionsRefName) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type OrganizationRulesetConditionsRefNamePtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsRefNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditionsRefName)(nil)).Elem()
}

func (o OrganizationRulesetConditionsRefNamePtrOutput) ToOrganizationRulesetConditionsRefNamePtrOutput() OrganizationRulesetConditionsRefNamePtrOutput {
	return o
}

func (o OrganizationRulesetConditionsRefNamePtrOutput) ToOrganizationRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRefNamePtrOutput {
	return o
}

func (o OrganizationRulesetConditionsRefNamePtrOutput) Elem() OrganizationRulesetConditionsRefNameOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRefName) OrganizationRulesetConditionsRefName {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetConditionsRefName
		return ret
	}).(OrganizationRulesetConditionsRefNameOutput)
}

// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o OrganizationRulesetConditionsRefNamePtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRefName) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
func (o OrganizationRulesetConditionsRefNamePtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRefName) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

type OrganizationRulesetConditionsRepositoryName struct {
	// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes []string `pulumi:"excludes"`
	// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Includes  []string `pulumi:"includes"`
	Protected *bool    `pulumi:"protected"`
}

// OrganizationRulesetConditionsRepositoryNameInput is an input type that accepts OrganizationRulesetConditionsRepositoryNameArgs and OrganizationRulesetConditionsRepositoryNameOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsRepositoryNameInput` via:
//
//	OrganizationRulesetConditionsRepositoryNameArgs{...}
type OrganizationRulesetConditionsRepositoryNameInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsRepositoryNameOutput() OrganizationRulesetConditionsRepositoryNameOutput
	ToOrganizationRulesetConditionsRepositoryNameOutputWithContext(context.Context) OrganizationRulesetConditionsRepositoryNameOutput
}

type OrganizationRulesetConditionsRepositoryNameArgs struct {
	// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
	Includes  pulumi.StringArrayInput `pulumi:"includes"`
	Protected pulumi.BoolPtrInput     `pulumi:"protected"`
}

func (OrganizationRulesetConditionsRepositoryNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditionsRepositoryName)(nil)).Elem()
}

func (i OrganizationRulesetConditionsRepositoryNameArgs) ToOrganizationRulesetConditionsRepositoryNameOutput() OrganizationRulesetConditionsRepositoryNameOutput {
	return i.ToOrganizationRulesetConditionsRepositoryNameOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsRepositoryNameArgs) ToOrganizationRulesetConditionsRepositoryNameOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRepositoryNameOutput)
}

func (i OrganizationRulesetConditionsRepositoryNameArgs) ToOrganizationRulesetConditionsRepositoryNamePtrOutput() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return i.ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetConditionsRepositoryNameArgs) ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRepositoryNameOutput).ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(ctx)
}

// OrganizationRulesetConditionsRepositoryNamePtrInput is an input type that accepts OrganizationRulesetConditionsRepositoryNameArgs, OrganizationRulesetConditionsRepositoryNamePtr and OrganizationRulesetConditionsRepositoryNamePtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetConditionsRepositoryNamePtrInput` via:
//
//	        OrganizationRulesetConditionsRepositoryNameArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetConditionsRepositoryNamePtrInput interface {
	pulumi.Input

	ToOrganizationRulesetConditionsRepositoryNamePtrOutput() OrganizationRulesetConditionsRepositoryNamePtrOutput
	ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(context.Context) OrganizationRulesetConditionsRepositoryNamePtrOutput
}

type organizationRulesetConditionsRepositoryNamePtrType OrganizationRulesetConditionsRepositoryNameArgs

func OrganizationRulesetConditionsRepositoryNamePtr(v *OrganizationRulesetConditionsRepositoryNameArgs) OrganizationRulesetConditionsRepositoryNamePtrInput {
	return (*organizationRulesetConditionsRepositoryNamePtrType)(v)
}

func (*organizationRulesetConditionsRepositoryNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditionsRepositoryName)(nil)).Elem()
}

func (i *organizationRulesetConditionsRepositoryNamePtrType) ToOrganizationRulesetConditionsRepositoryNamePtrOutput() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return i.ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(context.Background())
}

func (i *organizationRulesetConditionsRepositoryNamePtrType) ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetConditionsRepositoryNamePtrOutput)
}

type OrganizationRulesetConditionsRepositoryNameOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsRepositoryNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetConditionsRepositoryName)(nil)).Elem()
}

func (o OrganizationRulesetConditionsRepositoryNameOutput) ToOrganizationRulesetConditionsRepositoryNameOutput() OrganizationRulesetConditionsRepositoryNameOutput {
	return o
}

func (o OrganizationRulesetConditionsRepositoryNameOutput) ToOrganizationRulesetConditionsRepositoryNameOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNameOutput {
	return o
}

func (o OrganizationRulesetConditionsRepositoryNameOutput) ToOrganizationRulesetConditionsRepositoryNamePtrOutput() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o.ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetConditionsRepositoryNameOutput) ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetConditionsRepositoryName) *OrganizationRulesetConditionsRepositoryName {
		return &v
	}).(OrganizationRulesetConditionsRepositoryNamePtrOutput)
}

// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o OrganizationRulesetConditionsRepositoryNameOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrganizationRulesetConditionsRepositoryName) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
func (o OrganizationRulesetConditionsRepositoryNameOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OrganizationRulesetConditionsRepositoryName) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

func (o OrganizationRulesetConditionsRepositoryNameOutput) Protected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetConditionsRepositoryName) *bool { return v.Protected }).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetConditionsRepositoryNamePtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetConditionsRepositoryNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetConditionsRepositoryName)(nil)).Elem()
}

func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) ToOrganizationRulesetConditionsRepositoryNamePtrOutput() OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o
}

func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) ToOrganizationRulesetConditionsRepositoryNamePtrOutputWithContext(ctx context.Context) OrganizationRulesetConditionsRepositoryNamePtrOutput {
	return o
}

func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) Elem() OrganizationRulesetConditionsRepositoryNameOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRepositoryName) OrganizationRulesetConditionsRepositoryName {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetConditionsRepositoryName
		return ret
	}).(OrganizationRulesetConditionsRepositoryNameOutput)
}

// (List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRepositoryName) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRepositoryName) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

func (o OrganizationRulesetConditionsRepositoryNamePtrOutput) Protected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetConditionsRepositoryName) *bool {
		if v == nil {
			return nil
		}
		return v.Protected
	}).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRules struct {
	// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applies to rulesets with target `branch`. (see below for nested schema)
	BranchNamePattern *OrganizationRulesetRulesBranchNamePattern `pulumi:"branchNamePattern"`
	// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitAuthorEmailPattern *OrganizationRulesetRulesCommitAuthorEmailPattern `pulumi:"commitAuthorEmailPattern"`
	// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitMessagePattern *OrganizationRulesetRulesCommitMessagePattern `pulumi:"commitMessagePattern"`
	// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitterEmailPattern *OrganizationRulesetRulesCommitterEmailPattern `pulumi:"committerEmailPattern"`
	// (Boolean) Only allow users with bypass permission to create matching refs.
	Creation *bool `pulumi:"creation"`
	// (Boolean) Only allow users with bypass permissions to delete matching refs.
	Deletion *bool `pulumi:"deletion"`
	// (Boolean) Prevent users with push access from force pushing to branches.
	NonFastForward *bool `pulumi:"nonFastForward"`
	// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
	PullRequest *OrganizationRulesetRulesPullRequest `pulumi:"pullRequest"`
	// (Boolean) Prevent merge commits from being pushed to matching branches.
	RequiredLinearHistory *bool `pulumi:"requiredLinearHistory"`
	// (Boolean) Commits pushed to matching branches must have verified signatures.
	RequiredSignatures *bool `pulumi:"requiredSignatures"`
	// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
	RequiredStatusChecks *OrganizationRulesetRulesRequiredStatusChecks `pulumi:"requiredStatusChecks"`
	// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applies to rulesets with target `tag`. (see below for nested schema)
	TagNamePattern *OrganizationRulesetRulesTagNamePattern `pulumi:"tagNamePattern"`
	// (Boolean) Only allow users with bypass permission to update matching refs.
	Update *bool `pulumi:"update"`
}

// OrganizationRulesetRulesInput is an input type that accepts OrganizationRulesetRulesArgs and OrganizationRulesetRulesOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesInput` via:
//
//	OrganizationRulesetRulesArgs{...}
type OrganizationRulesetRulesInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesOutput() OrganizationRulesetRulesOutput
	ToOrganizationRulesetRulesOutputWithContext(context.Context) OrganizationRulesetRulesOutput
}

type OrganizationRulesetRulesArgs struct {
	// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applies to rulesets with target `branch`. (see below for nested schema)
	BranchNamePattern OrganizationRulesetRulesBranchNamePatternPtrInput `pulumi:"branchNamePattern"`
	// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitAuthorEmailPattern OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput `pulumi:"commitAuthorEmailPattern"`
	// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitMessagePattern OrganizationRulesetRulesCommitMessagePatternPtrInput `pulumi:"commitMessagePattern"`
	// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitterEmailPattern OrganizationRulesetRulesCommitterEmailPatternPtrInput `pulumi:"committerEmailPattern"`
	// (Boolean) Only allow users with bypass permission to create matching refs.
	Creation pulumi.BoolPtrInput `pulumi:"creation"`
	// (Boolean) Only allow users with bypass permissions to delete matching refs.
	Deletion pulumi.BoolPtrInput `pulumi:"deletion"`
	// (Boolean) Prevent users with push access from force pushing to branches.
	NonFastForward pulumi.BoolPtrInput `pulumi:"nonFastForward"`
	// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
	PullRequest OrganizationRulesetRulesPullRequestPtrInput `pulumi:"pullRequest"`
	// (Boolean) Prevent merge commits from being pushed to matching branches.
	RequiredLinearHistory pulumi.BoolPtrInput `pulumi:"requiredLinearHistory"`
	// (Boolean) Commits pushed to matching branches must have verified signatures.
	RequiredSignatures pulumi.BoolPtrInput `pulumi:"requiredSignatures"`
	// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
	RequiredStatusChecks OrganizationRulesetRulesRequiredStatusChecksPtrInput `pulumi:"requiredStatusChecks"`
	// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applies to rulesets with target `tag`. (see below for nested schema)
	TagNamePattern OrganizationRulesetRulesTagNamePatternPtrInput `pulumi:"tagNamePattern"`
	// (Boolean) Only allow users with bypass permission to update matching refs.
	Update pulumi.BoolPtrInput `pulumi:"update"`
}

func (OrganizationRulesetRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRules)(nil)).Elem()
}

func (i OrganizationRulesetRulesArgs) ToOrganizationRulesetRulesOutput() OrganizationRulesetRulesOutput {
	return i.ToOrganizationRulesetRulesOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesArgs) ToOrganizationRulesetRulesOutputWithContext(ctx context.Context) OrganizationRulesetRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesOutput)
}

func (i OrganizationRulesetRulesArgs) ToOrganizationRulesetRulesPtrOutput() OrganizationRulesetRulesPtrOutput {
	return i.ToOrganizationRulesetRulesPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesArgs) ToOrganizationRulesetRulesPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesOutput).ToOrganizationRulesetRulesPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesPtrInput is an input type that accepts OrganizationRulesetRulesArgs, OrganizationRulesetRulesPtr and OrganizationRulesetRulesPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesPtrInput` via:
//
//	        OrganizationRulesetRulesArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesPtrOutput() OrganizationRulesetRulesPtrOutput
	ToOrganizationRulesetRulesPtrOutputWithContext(context.Context) OrganizationRulesetRulesPtrOutput
}

type organizationRulesetRulesPtrType OrganizationRulesetRulesArgs

func OrganizationRulesetRulesPtr(v *OrganizationRulesetRulesArgs) OrganizationRulesetRulesPtrInput {
	return (*organizationRulesetRulesPtrType)(v)
}

func (*organizationRulesetRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRules)(nil)).Elem()
}

func (i *organizationRulesetRulesPtrType) ToOrganizationRulesetRulesPtrOutput() OrganizationRulesetRulesPtrOutput {
	return i.ToOrganizationRulesetRulesPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesPtrType) ToOrganizationRulesetRulesPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesPtrOutput)
}

type OrganizationRulesetRulesOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRules)(nil)).Elem()
}

func (o OrganizationRulesetRulesOutput) ToOrganizationRulesetRulesOutput() OrganizationRulesetRulesOutput {
	return o
}

func (o OrganizationRulesetRulesOutput) ToOrganizationRulesetRulesOutputWithContext(ctx context.Context) OrganizationRulesetRulesOutput {
	return o
}

func (o OrganizationRulesetRulesOutput) ToOrganizationRulesetRulesPtrOutput() OrganizationRulesetRulesPtrOutput {
	return o.ToOrganizationRulesetRulesPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesOutput) ToOrganizationRulesetRulesPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRules) *OrganizationRulesetRules {
		return &v
	}).(OrganizationRulesetRulesPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applies to rulesets with target `branch`. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) BranchNamePattern() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesBranchNamePattern {
		return v.BranchNamePattern
	}).(OrganizationRulesetRulesBranchNamePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) CommitAuthorEmailPattern() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesCommitAuthorEmailPattern {
		return v.CommitAuthorEmailPattern
	}).(OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) CommitMessagePattern() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesCommitMessagePattern {
		return v.CommitMessagePattern
	}).(OrganizationRulesetRulesCommitMessagePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) CommitterEmailPattern() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesCommitterEmailPattern {
		return v.CommitterEmailPattern
	}).(OrganizationRulesetRulesCommitterEmailPatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to create matching refs.
func (o OrganizationRulesetRulesOutput) Creation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.Creation }).(pulumi.BoolPtrOutput)
}

// (Boolean) Only allow users with bypass permissions to delete matching refs.
func (o OrganizationRulesetRulesOutput) Deletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.Deletion }).(pulumi.BoolPtrOutput)
}

// (Boolean) Prevent users with push access from force pushing to branches.
func (o OrganizationRulesetRulesOutput) NonFastForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.NonFastForward }).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) PullRequest() OrganizationRulesetRulesPullRequestPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesPullRequest { return v.PullRequest }).(OrganizationRulesetRulesPullRequestPtrOutput)
}

// (Boolean) Prevent merge commits from being pushed to matching branches.
func (o OrganizationRulesetRulesOutput) RequiredLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.RequiredLinearHistory }).(pulumi.BoolPtrOutput)
}

// (Boolean) Commits pushed to matching branches must have verified signatures.
func (o OrganizationRulesetRulesOutput) RequiredSignatures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.RequiredSignatures }).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) RequiredStatusChecks() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesRequiredStatusChecks {
		return v.RequiredStatusChecks
	}).(OrganizationRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applies to rulesets with target `tag`. (see below for nested schema)
func (o OrganizationRulesetRulesOutput) TagNamePattern() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *OrganizationRulesetRulesTagNamePattern { return v.TagNamePattern }).(OrganizationRulesetRulesTagNamePatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to update matching refs.
func (o OrganizationRulesetRulesOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRules) *bool { return v.Update }).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRules)(nil)).Elem()
}

func (o OrganizationRulesetRulesPtrOutput) ToOrganizationRulesetRulesPtrOutput() OrganizationRulesetRulesPtrOutput {
	return o
}

func (o OrganizationRulesetRulesPtrOutput) ToOrganizationRulesetRulesPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPtrOutput {
	return o
}

func (o OrganizationRulesetRulesPtrOutput) Elem() OrganizationRulesetRulesOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) OrganizationRulesetRules {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRules
		return ret
	}).(OrganizationRulesetRulesOutput)
}

// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applies to rulesets with target `branch`. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) BranchNamePattern() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesBranchNamePattern {
		if v == nil {
			return nil
		}
		return v.BranchNamePattern
	}).(OrganizationRulesetRulesBranchNamePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) CommitAuthorEmailPattern() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesCommitAuthorEmailPattern {
		if v == nil {
			return nil
		}
		return v.CommitAuthorEmailPattern
	}).(OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) CommitMessagePattern() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesCommitMessagePattern {
		if v == nil {
			return nil
		}
		return v.CommitMessagePattern
	}).(OrganizationRulesetRulesCommitMessagePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) CommitterEmailPattern() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesCommitterEmailPattern {
		if v == nil {
			return nil
		}
		return v.CommitterEmailPattern
	}).(OrganizationRulesetRulesCommitterEmailPatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to create matching refs.
func (o OrganizationRulesetRulesPtrOutput) Creation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Creation
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Only allow users with bypass permissions to delete matching refs.
func (o OrganizationRulesetRulesPtrOutput) Deletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Deletion
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Prevent users with push access from force pushing to branches.
func (o OrganizationRulesetRulesPtrOutput) NonFastForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.NonFastForward
	}).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) PullRequest() OrganizationRulesetRulesPullRequestPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesPullRequest {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(OrganizationRulesetRulesPullRequestPtrOutput)
}

// (Boolean) Prevent merge commits from being pushed to matching branches.
func (o OrganizationRulesetRulesPtrOutput) RequiredLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredLinearHistory
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Commits pushed to matching branches must have verified signatures.
func (o OrganizationRulesetRulesPtrOutput) RequiredSignatures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredSignatures
	}).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) RequiredStatusChecks() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesRequiredStatusChecks {
		if v == nil {
			return nil
		}
		return v.RequiredStatusChecks
	}).(OrganizationRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applies to rulesets with target `tag`. (see below for nested schema)
func (o OrganizationRulesetRulesPtrOutput) TagNamePattern() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *OrganizationRulesetRulesTagNamePattern {
		if v == nil {
			return nil
		}
		return v.TagNamePattern
	}).(OrganizationRulesetRulesTagNamePatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to update matching refs.
func (o OrganizationRulesetRulesPtrOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesBranchNamePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// OrganizationRulesetRulesBranchNamePatternInput is an input type that accepts OrganizationRulesetRulesBranchNamePatternArgs and OrganizationRulesetRulesBranchNamePatternOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesBranchNamePatternInput` via:
//
//	OrganizationRulesetRulesBranchNamePatternArgs{...}
type OrganizationRulesetRulesBranchNamePatternInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesBranchNamePatternOutput() OrganizationRulesetRulesBranchNamePatternOutput
	ToOrganizationRulesetRulesBranchNamePatternOutputWithContext(context.Context) OrganizationRulesetRulesBranchNamePatternOutput
}

type OrganizationRulesetRulesBranchNamePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (OrganizationRulesetRulesBranchNamePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (i OrganizationRulesetRulesBranchNamePatternArgs) ToOrganizationRulesetRulesBranchNamePatternOutput() OrganizationRulesetRulesBranchNamePatternOutput {
	return i.ToOrganizationRulesetRulesBranchNamePatternOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesBranchNamePatternArgs) ToOrganizationRulesetRulesBranchNamePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesBranchNamePatternOutput)
}

func (i OrganizationRulesetRulesBranchNamePatternArgs) ToOrganizationRulesetRulesBranchNamePatternPtrOutput() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return i.ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesBranchNamePatternArgs) ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesBranchNamePatternOutput).ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesBranchNamePatternPtrInput is an input type that accepts OrganizationRulesetRulesBranchNamePatternArgs, OrganizationRulesetRulesBranchNamePatternPtr and OrganizationRulesetRulesBranchNamePatternPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesBranchNamePatternPtrInput` via:
//
//	        OrganizationRulesetRulesBranchNamePatternArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesBranchNamePatternPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesBranchNamePatternPtrOutput() OrganizationRulesetRulesBranchNamePatternPtrOutput
	ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(context.Context) OrganizationRulesetRulesBranchNamePatternPtrOutput
}

type organizationRulesetRulesBranchNamePatternPtrType OrganizationRulesetRulesBranchNamePatternArgs

func OrganizationRulesetRulesBranchNamePatternPtr(v *OrganizationRulesetRulesBranchNamePatternArgs) OrganizationRulesetRulesBranchNamePatternPtrInput {
	return (*organizationRulesetRulesBranchNamePatternPtrType)(v)
}

func (*organizationRulesetRulesBranchNamePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (i *organizationRulesetRulesBranchNamePatternPtrType) ToOrganizationRulesetRulesBranchNamePatternPtrOutput() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return i.ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesBranchNamePatternPtrType) ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesBranchNamePatternPtrOutput)
}

type OrganizationRulesetRulesBranchNamePatternOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesBranchNamePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesBranchNamePatternOutput) ToOrganizationRulesetRulesBranchNamePatternOutput() OrganizationRulesetRulesBranchNamePatternOutput {
	return o
}

func (o OrganizationRulesetRulesBranchNamePatternOutput) ToOrganizationRulesetRulesBranchNamePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternOutput {
	return o
}

func (o OrganizationRulesetRulesBranchNamePatternOutput) ToOrganizationRulesetRulesBranchNamePatternPtrOutput() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o.ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesBranchNamePatternOutput) ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesBranchNamePattern) *OrganizationRulesetRulesBranchNamePattern {
		return &v
	}).(OrganizationRulesetRulesBranchNamePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesBranchNamePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesBranchNamePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesBranchNamePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesBranchNamePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesBranchNamePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesBranchNamePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesBranchNamePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesBranchNamePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type OrganizationRulesetRulesBranchNamePatternPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesBranchNamePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) ToOrganizationRulesetRulesBranchNamePatternPtrOutput() OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) ToOrganizationRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesBranchNamePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) Elem() OrganizationRulesetRulesBranchNamePatternOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesBranchNamePattern) OrganizationRulesetRulesBranchNamePattern {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesBranchNamePattern
		return ret
	}).(OrganizationRulesetRulesBranchNamePatternOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesBranchNamePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesBranchNamePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type OrganizationRulesetRulesCommitAuthorEmailPattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// OrganizationRulesetRulesCommitAuthorEmailPatternInput is an input type that accepts OrganizationRulesetRulesCommitAuthorEmailPatternArgs and OrganizationRulesetRulesCommitAuthorEmailPatternOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitAuthorEmailPatternInput` via:
//
//	OrganizationRulesetRulesCommitAuthorEmailPatternArgs{...}
type OrganizationRulesetRulesCommitAuthorEmailPatternInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitAuthorEmailPatternOutput() OrganizationRulesetRulesCommitAuthorEmailPatternOutput
	ToOrganizationRulesetRulesCommitAuthorEmailPatternOutputWithContext(context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternOutput
}

type OrganizationRulesetRulesCommitAuthorEmailPatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (OrganizationRulesetRulesCommitAuthorEmailPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (i OrganizationRulesetRulesCommitAuthorEmailPatternArgs) ToOrganizationRulesetRulesCommitAuthorEmailPatternOutput() OrganizationRulesetRulesCommitAuthorEmailPatternOutput {
	return i.ToOrganizationRulesetRulesCommitAuthorEmailPatternOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitAuthorEmailPatternArgs) ToOrganizationRulesetRulesCommitAuthorEmailPatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitAuthorEmailPatternOutput)
}

func (i OrganizationRulesetRulesCommitAuthorEmailPatternArgs) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitAuthorEmailPatternArgs) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitAuthorEmailPatternOutput).ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput is an input type that accepts OrganizationRulesetRulesCommitAuthorEmailPatternArgs, OrganizationRulesetRulesCommitAuthorEmailPatternPtr and OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput` via:
//
//	        OrganizationRulesetRulesCommitAuthorEmailPatternArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput
	ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput
}

type organizationRulesetRulesCommitAuthorEmailPatternPtrType OrganizationRulesetRulesCommitAuthorEmailPatternArgs

func OrganizationRulesetRulesCommitAuthorEmailPatternPtr(v *OrganizationRulesetRulesCommitAuthorEmailPatternArgs) OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput {
	return (*organizationRulesetRulesCommitAuthorEmailPatternPtrType)(v)
}

func (*organizationRulesetRulesCommitAuthorEmailPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (i *organizationRulesetRulesCommitAuthorEmailPatternPtrType) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesCommitAuthorEmailPatternPtrType) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

type OrganizationRulesetRulesCommitAuthorEmailPatternOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitAuthorEmailPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternOutput() OrganizationRulesetRulesCommitAuthorEmailPatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesCommitAuthorEmailPattern) *OrganizationRulesetRulesCommitAuthorEmailPattern {
		return &v
	}).(OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitAuthorEmailPattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitAuthorEmailPattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitAuthorEmailPattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitAuthorEmailPattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput() OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) ToOrganizationRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) Elem() OrganizationRulesetRulesCommitAuthorEmailPatternOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitAuthorEmailPattern) OrganizationRulesetRulesCommitAuthorEmailPattern {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesCommitAuthorEmailPattern
		return ret
	}).(OrganizationRulesetRulesCommitAuthorEmailPatternOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitAuthorEmailPattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type OrganizationRulesetRulesCommitMessagePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// OrganizationRulesetRulesCommitMessagePatternInput is an input type that accepts OrganizationRulesetRulesCommitMessagePatternArgs and OrganizationRulesetRulesCommitMessagePatternOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitMessagePatternInput` via:
//
//	OrganizationRulesetRulesCommitMessagePatternArgs{...}
type OrganizationRulesetRulesCommitMessagePatternInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitMessagePatternOutput() OrganizationRulesetRulesCommitMessagePatternOutput
	ToOrganizationRulesetRulesCommitMessagePatternOutputWithContext(context.Context) OrganizationRulesetRulesCommitMessagePatternOutput
}

type OrganizationRulesetRulesCommitMessagePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (OrganizationRulesetRulesCommitMessagePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (i OrganizationRulesetRulesCommitMessagePatternArgs) ToOrganizationRulesetRulesCommitMessagePatternOutput() OrganizationRulesetRulesCommitMessagePatternOutput {
	return i.ToOrganizationRulesetRulesCommitMessagePatternOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitMessagePatternArgs) ToOrganizationRulesetRulesCommitMessagePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitMessagePatternOutput)
}

func (i OrganizationRulesetRulesCommitMessagePatternArgs) ToOrganizationRulesetRulesCommitMessagePatternPtrOutput() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitMessagePatternArgs) ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitMessagePatternOutput).ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesCommitMessagePatternPtrInput is an input type that accepts OrganizationRulesetRulesCommitMessagePatternArgs, OrganizationRulesetRulesCommitMessagePatternPtr and OrganizationRulesetRulesCommitMessagePatternPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitMessagePatternPtrInput` via:
//
//	        OrganizationRulesetRulesCommitMessagePatternArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesCommitMessagePatternPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitMessagePatternPtrOutput() OrganizationRulesetRulesCommitMessagePatternPtrOutput
	ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Context) OrganizationRulesetRulesCommitMessagePatternPtrOutput
}

type organizationRulesetRulesCommitMessagePatternPtrType OrganizationRulesetRulesCommitMessagePatternArgs

func OrganizationRulesetRulesCommitMessagePatternPtr(v *OrganizationRulesetRulesCommitMessagePatternArgs) OrganizationRulesetRulesCommitMessagePatternPtrInput {
	return (*organizationRulesetRulesCommitMessagePatternPtrType)(v)
}

func (*organizationRulesetRulesCommitMessagePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (i *organizationRulesetRulesCommitMessagePatternPtrType) ToOrganizationRulesetRulesCommitMessagePatternPtrOutput() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesCommitMessagePatternPtrType) ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitMessagePatternPtrOutput)
}

type OrganizationRulesetRulesCommitMessagePatternOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitMessagePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitMessagePatternOutput) ToOrganizationRulesetRulesCommitMessagePatternOutput() OrganizationRulesetRulesCommitMessagePatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitMessagePatternOutput) ToOrganizationRulesetRulesCommitMessagePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitMessagePatternOutput) ToOrganizationRulesetRulesCommitMessagePatternPtrOutput() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o.ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesCommitMessagePatternOutput) ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesCommitMessagePattern) *OrganizationRulesetRulesCommitMessagePattern {
		return &v
	}).(OrganizationRulesetRulesCommitMessagePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitMessagePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitMessagePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitMessagePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitMessagePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitMessagePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitMessagePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitMessagePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitMessagePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type OrganizationRulesetRulesCommitMessagePatternPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitMessagePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) ToOrganizationRulesetRulesCommitMessagePatternPtrOutput() OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) ToOrganizationRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitMessagePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) Elem() OrganizationRulesetRulesCommitMessagePatternOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitMessagePattern) OrganizationRulesetRulesCommitMessagePattern {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesCommitMessagePattern
		return ret
	}).(OrganizationRulesetRulesCommitMessagePatternOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitMessagePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitMessagePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type OrganizationRulesetRulesCommitterEmailPattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// OrganizationRulesetRulesCommitterEmailPatternInput is an input type that accepts OrganizationRulesetRulesCommitterEmailPatternArgs and OrganizationRulesetRulesCommitterEmailPatternOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitterEmailPatternInput` via:
//
//	OrganizationRulesetRulesCommitterEmailPatternArgs{...}
type OrganizationRulesetRulesCommitterEmailPatternInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitterEmailPatternOutput() OrganizationRulesetRulesCommitterEmailPatternOutput
	ToOrganizationRulesetRulesCommitterEmailPatternOutputWithContext(context.Context) OrganizationRulesetRulesCommitterEmailPatternOutput
}

type OrganizationRulesetRulesCommitterEmailPatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (OrganizationRulesetRulesCommitterEmailPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (i OrganizationRulesetRulesCommitterEmailPatternArgs) ToOrganizationRulesetRulesCommitterEmailPatternOutput() OrganizationRulesetRulesCommitterEmailPatternOutput {
	return i.ToOrganizationRulesetRulesCommitterEmailPatternOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitterEmailPatternArgs) ToOrganizationRulesetRulesCommitterEmailPatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitterEmailPatternOutput)
}

func (i OrganizationRulesetRulesCommitterEmailPatternArgs) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutput() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesCommitterEmailPatternArgs) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitterEmailPatternOutput).ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesCommitterEmailPatternPtrInput is an input type that accepts OrganizationRulesetRulesCommitterEmailPatternArgs, OrganizationRulesetRulesCommitterEmailPatternPtr and OrganizationRulesetRulesCommitterEmailPatternPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesCommitterEmailPatternPtrInput` via:
//
//	        OrganizationRulesetRulesCommitterEmailPatternArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesCommitterEmailPatternPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesCommitterEmailPatternPtrOutput() OrganizationRulesetRulesCommitterEmailPatternPtrOutput
	ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Context) OrganizationRulesetRulesCommitterEmailPatternPtrOutput
}

type organizationRulesetRulesCommitterEmailPatternPtrType OrganizationRulesetRulesCommitterEmailPatternArgs

func OrganizationRulesetRulesCommitterEmailPatternPtr(v *OrganizationRulesetRulesCommitterEmailPatternArgs) OrganizationRulesetRulesCommitterEmailPatternPtrInput {
	return (*organizationRulesetRulesCommitterEmailPatternPtrType)(v)
}

func (*organizationRulesetRulesCommitterEmailPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (i *organizationRulesetRulesCommitterEmailPatternPtrType) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutput() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return i.ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesCommitterEmailPatternPtrType) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesCommitterEmailPatternPtrOutput)
}

type OrganizationRulesetRulesCommitterEmailPatternOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitterEmailPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitterEmailPatternOutput) ToOrganizationRulesetRulesCommitterEmailPatternOutput() OrganizationRulesetRulesCommitterEmailPatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitterEmailPatternOutput) ToOrganizationRulesetRulesCommitterEmailPatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternOutput {
	return o
}

func (o OrganizationRulesetRulesCommitterEmailPatternOutput) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutput() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesCommitterEmailPatternOutput) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesCommitterEmailPattern) *OrganizationRulesetRulesCommitterEmailPattern {
		return &v
	}).(OrganizationRulesetRulesCommitterEmailPatternPtrOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitterEmailPatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitterEmailPattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitterEmailPatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitterEmailPattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitterEmailPatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitterEmailPattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitterEmailPatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesCommitterEmailPattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type OrganizationRulesetRulesCommitterEmailPatternPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesCommitterEmailPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutput() OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) ToOrganizationRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesCommitterEmailPatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) Elem() OrganizationRulesetRulesCommitterEmailPatternOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitterEmailPattern) OrganizationRulesetRulesCommitterEmailPattern {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesCommitterEmailPattern
		return ret
	}).(OrganizationRulesetRulesCommitterEmailPatternOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitterEmailPattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesCommitterEmailPatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type OrganizationRulesetRulesPullRequest struct {
	// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
	DismissStaleReviewsOnPush *bool `pulumi:"dismissStaleReviewsOnPush"`
	// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
	RequireCodeOwnerReview *bool `pulumi:"requireCodeOwnerReview"`
	// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
	RequireLastPushApproval *bool `pulumi:"requireLastPushApproval"`
	// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
	RequiredApprovingReviewCount *int `pulumi:"requiredApprovingReviewCount"`
	// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
	RequiredReviewThreadResolution *bool `pulumi:"requiredReviewThreadResolution"`
}

// OrganizationRulesetRulesPullRequestInput is an input type that accepts OrganizationRulesetRulesPullRequestArgs and OrganizationRulesetRulesPullRequestOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesPullRequestInput` via:
//
//	OrganizationRulesetRulesPullRequestArgs{...}
type OrganizationRulesetRulesPullRequestInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesPullRequestOutput() OrganizationRulesetRulesPullRequestOutput
	ToOrganizationRulesetRulesPullRequestOutputWithContext(context.Context) OrganizationRulesetRulesPullRequestOutput
}

type OrganizationRulesetRulesPullRequestArgs struct {
	// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
	DismissStaleReviewsOnPush pulumi.BoolPtrInput `pulumi:"dismissStaleReviewsOnPush"`
	// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
	RequireCodeOwnerReview pulumi.BoolPtrInput `pulumi:"requireCodeOwnerReview"`
	// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
	RequireLastPushApproval pulumi.BoolPtrInput `pulumi:"requireLastPushApproval"`
	// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
	RequiredApprovingReviewCount pulumi.IntPtrInput `pulumi:"requiredApprovingReviewCount"`
	// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
	RequiredReviewThreadResolution pulumi.BoolPtrInput `pulumi:"requiredReviewThreadResolution"`
}

func (OrganizationRulesetRulesPullRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesPullRequest)(nil)).Elem()
}

func (i OrganizationRulesetRulesPullRequestArgs) ToOrganizationRulesetRulesPullRequestOutput() OrganizationRulesetRulesPullRequestOutput {
	return i.ToOrganizationRulesetRulesPullRequestOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesPullRequestArgs) ToOrganizationRulesetRulesPullRequestOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesPullRequestOutput)
}

func (i OrganizationRulesetRulesPullRequestArgs) ToOrganizationRulesetRulesPullRequestPtrOutput() OrganizationRulesetRulesPullRequestPtrOutput {
	return i.ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesPullRequestArgs) ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesPullRequestOutput).ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesPullRequestPtrInput is an input type that accepts OrganizationRulesetRulesPullRequestArgs, OrganizationRulesetRulesPullRequestPtr and OrganizationRulesetRulesPullRequestPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesPullRequestPtrInput` via:
//
//	        OrganizationRulesetRulesPullRequestArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesPullRequestPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesPullRequestPtrOutput() OrganizationRulesetRulesPullRequestPtrOutput
	ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(context.Context) OrganizationRulesetRulesPullRequestPtrOutput
}

type organizationRulesetRulesPullRequestPtrType OrganizationRulesetRulesPullRequestArgs

func OrganizationRulesetRulesPullRequestPtr(v *OrganizationRulesetRulesPullRequestArgs) OrganizationRulesetRulesPullRequestPtrInput {
	return (*organizationRulesetRulesPullRequestPtrType)(v)
}

func (*organizationRulesetRulesPullRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesPullRequest)(nil)).Elem()
}

func (i *organizationRulesetRulesPullRequestPtrType) ToOrganizationRulesetRulesPullRequestPtrOutput() OrganizationRulesetRulesPullRequestPtrOutput {
	return i.ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesPullRequestPtrType) ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesPullRequestPtrOutput)
}

type OrganizationRulesetRulesPullRequestOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesPullRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesPullRequest)(nil)).Elem()
}

func (o OrganizationRulesetRulesPullRequestOutput) ToOrganizationRulesetRulesPullRequestOutput() OrganizationRulesetRulesPullRequestOutput {
	return o
}

func (o OrganizationRulesetRulesPullRequestOutput) ToOrganizationRulesetRulesPullRequestOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestOutput {
	return o
}

func (o OrganizationRulesetRulesPullRequestOutput) ToOrganizationRulesetRulesPullRequestPtrOutput() OrganizationRulesetRulesPullRequestPtrOutput {
	return o.ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesPullRequestOutput) ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesPullRequest) *OrganizationRulesetRulesPullRequest {
		return &v
	}).(OrganizationRulesetRulesPullRequestPtrOutput)
}

// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestOutput) DismissStaleReviewsOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesPullRequest) *bool { return v.DismissStaleReviewsOnPush }).(pulumi.BoolPtrOutput)
}

// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestOutput) RequireCodeOwnerReview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesPullRequest) *bool { return v.RequireCodeOwnerReview }).(pulumi.BoolPtrOutput)
}

// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestOutput) RequireLastPushApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesPullRequest) *bool { return v.RequireLastPushApproval }).(pulumi.BoolPtrOutput)
}

// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
func (o OrganizationRulesetRulesPullRequestOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesPullRequest) *int { return v.RequiredApprovingReviewCount }).(pulumi.IntPtrOutput)
}

// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestOutput) RequiredReviewThreadResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesPullRequest) *bool { return v.RequiredReviewThreadResolution }).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesPullRequestPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesPullRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesPullRequest)(nil)).Elem()
}

func (o OrganizationRulesetRulesPullRequestPtrOutput) ToOrganizationRulesetRulesPullRequestPtrOutput() OrganizationRulesetRulesPullRequestPtrOutput {
	return o
}

func (o OrganizationRulesetRulesPullRequestPtrOutput) ToOrganizationRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesPullRequestPtrOutput {
	return o
}

func (o OrganizationRulesetRulesPullRequestPtrOutput) Elem() OrganizationRulesetRulesPullRequestOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) OrganizationRulesetRulesPullRequest {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesPullRequest
		return ret
	}).(OrganizationRulesetRulesPullRequestOutput)
}

// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestPtrOutput) DismissStaleReviewsOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.DismissStaleReviewsOnPush
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestPtrOutput) RequireCodeOwnerReview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequireCodeOwnerReview
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestPtrOutput) RequireLastPushApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequireLastPushApproval
	}).(pulumi.BoolPtrOutput)
}

// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
func (o OrganizationRulesetRulesPullRequestPtrOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) *int {
		if v == nil {
			return nil
		}
		return v.RequiredApprovingReviewCount
	}).(pulumi.IntPtrOutput)
}

// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
func (o OrganizationRulesetRulesPullRequestPtrOutput) RequiredReviewThreadResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredReviewThreadResolution
	}).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesRequiredStatusChecks struct {
	// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
	RequiredChecks []OrganizationRulesetRulesRequiredStatusChecksRequiredCheck `pulumi:"requiredChecks"`
	// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
	StrictRequiredStatusChecksPolicy *bool `pulumi:"strictRequiredStatusChecksPolicy"`
}

// OrganizationRulesetRulesRequiredStatusChecksInput is an input type that accepts OrganizationRulesetRulesRequiredStatusChecksArgs and OrganizationRulesetRulesRequiredStatusChecksOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesRequiredStatusChecksInput` via:
//
//	OrganizationRulesetRulesRequiredStatusChecksArgs{...}
type OrganizationRulesetRulesRequiredStatusChecksInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesRequiredStatusChecksOutput() OrganizationRulesetRulesRequiredStatusChecksOutput
	ToOrganizationRulesetRulesRequiredStatusChecksOutputWithContext(context.Context) OrganizationRulesetRulesRequiredStatusChecksOutput
}

type OrganizationRulesetRulesRequiredStatusChecksArgs struct {
	// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
	RequiredChecks OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayInput `pulumi:"requiredChecks"`
	// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
	StrictRequiredStatusChecksPolicy pulumi.BoolPtrInput `pulumi:"strictRequiredStatusChecksPolicy"`
}

func (OrganizationRulesetRulesRequiredStatusChecksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (i OrganizationRulesetRulesRequiredStatusChecksArgs) ToOrganizationRulesetRulesRequiredStatusChecksOutput() OrganizationRulesetRulesRequiredStatusChecksOutput {
	return i.ToOrganizationRulesetRulesRequiredStatusChecksOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesRequiredStatusChecksArgs) ToOrganizationRulesetRulesRequiredStatusChecksOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesRequiredStatusChecksOutput)
}

func (i OrganizationRulesetRulesRequiredStatusChecksArgs) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutput() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return i.ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesRequiredStatusChecksArgs) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesRequiredStatusChecksOutput).ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesRequiredStatusChecksPtrInput is an input type that accepts OrganizationRulesetRulesRequiredStatusChecksArgs, OrganizationRulesetRulesRequiredStatusChecksPtr and OrganizationRulesetRulesRequiredStatusChecksPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesRequiredStatusChecksPtrInput` via:
//
//	        OrganizationRulesetRulesRequiredStatusChecksArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesRequiredStatusChecksPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesRequiredStatusChecksPtrOutput() OrganizationRulesetRulesRequiredStatusChecksPtrOutput
	ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Context) OrganizationRulesetRulesRequiredStatusChecksPtrOutput
}

type organizationRulesetRulesRequiredStatusChecksPtrType OrganizationRulesetRulesRequiredStatusChecksArgs

func OrganizationRulesetRulesRequiredStatusChecksPtr(v *OrganizationRulesetRulesRequiredStatusChecksArgs) OrganizationRulesetRulesRequiredStatusChecksPtrInput {
	return (*organizationRulesetRulesRequiredStatusChecksPtrType)(v)
}

func (*organizationRulesetRulesRequiredStatusChecksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (i *organizationRulesetRulesRequiredStatusChecksPtrType) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutput() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return i.ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesRequiredStatusChecksPtrType) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesRequiredStatusChecksPtrOutput)
}

type OrganizationRulesetRulesRequiredStatusChecksOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesRequiredStatusChecksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (o OrganizationRulesetRulesRequiredStatusChecksOutput) ToOrganizationRulesetRulesRequiredStatusChecksOutput() OrganizationRulesetRulesRequiredStatusChecksOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksOutput) ToOrganizationRulesetRulesRequiredStatusChecksOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksOutput) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutput() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesRequiredStatusChecksOutput) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesRequiredStatusChecks) *OrganizationRulesetRulesRequiredStatusChecks {
		return &v
	}).(OrganizationRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
func (o OrganizationRulesetRulesRequiredStatusChecksOutput) RequiredChecks() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesRequiredStatusChecks) []OrganizationRulesetRulesRequiredStatusChecksRequiredCheck {
		return v.RequiredChecks
	}).(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
func (o OrganizationRulesetRulesRequiredStatusChecksOutput) StrictRequiredStatusChecksPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesRequiredStatusChecks) *bool { return v.StrictRequiredStatusChecksPolicy }).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesRequiredStatusChecksPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesRequiredStatusChecksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (o OrganizationRulesetRulesRequiredStatusChecksPtrOutput) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutput() OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksPtrOutput) ToOrganizationRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksPtrOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksPtrOutput) Elem() OrganizationRulesetRulesRequiredStatusChecksOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesRequiredStatusChecks) OrganizationRulesetRulesRequiredStatusChecks {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesRequiredStatusChecks
		return ret
	}).(OrganizationRulesetRulesRequiredStatusChecksOutput)
}

// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
func (o OrganizationRulesetRulesRequiredStatusChecksPtrOutput) RequiredChecks() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesRequiredStatusChecks) []OrganizationRulesetRulesRequiredStatusChecksRequiredCheck {
		if v == nil {
			return nil
		}
		return v.RequiredChecks
	}).(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
func (o OrganizationRulesetRulesRequiredStatusChecksPtrOutput) StrictRequiredStatusChecksPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesRequiredStatusChecks) *bool {
		if v == nil {
			return nil
		}
		return v.StrictRequiredStatusChecksPolicy
	}).(pulumi.BoolPtrOutput)
}

type OrganizationRulesetRulesRequiredStatusChecksRequiredCheck struct {
	// (String) The status check context name that must be present on the commit.
	Context string `pulumi:"context"`
	// (Number) The optional integration ID that this status check must originate from.
	IntegrationId *int `pulumi:"integrationId"`
}

// OrganizationRulesetRulesRequiredStatusChecksRequiredCheckInput is an input type that accepts OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs and OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesRequiredStatusChecksRequiredCheckInput` via:
//
//	OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs{...}
type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput
	ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput
}

type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs struct {
	// (String) The status check context name that must be present on the commit.
	Context pulumi.StringInput `pulumi:"context"`
	// (Number) The optional integration ID that this status check must originate from.
	IntegrationId pulumi.IntPtrInput `pulumi:"integrationId"`
}

func (OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (i OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return i.ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput)
}

// OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayInput is an input type that accepts OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray and OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayInput` via:
//
//	OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray{ OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs{...} }
type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput
	ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput
}

type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray []OrganizationRulesetRulesRequiredStatusChecksRequiredCheckInput

func (OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (i OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return i.ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return o
}

// (String) The status check context name that must be present on the commit.
func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput) Context() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesRequiredStatusChecksRequiredCheck) string { return v.Context }).(pulumi.StringOutput)
}

// (Number) The optional integration ID that this status check must originate from.
func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput) IntegrationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesRequiredStatusChecksRequiredCheck) *int { return v.IntegrationId }).(pulumi.IntPtrOutput)
}

type OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrganizationRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ToOrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(ctx context.Context) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o
}

func (o OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) Index(i pulumi.IntInput) OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrganizationRulesetRulesRequiredStatusChecksRequiredCheck {
		return vs[0].([]OrganizationRulesetRulesRequiredStatusChecksRequiredCheck)[vs[1].(int)]
	}).(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput)
}

type OrganizationRulesetRulesTagNamePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// OrganizationRulesetRulesTagNamePatternInput is an input type that accepts OrganizationRulesetRulesTagNamePatternArgs and OrganizationRulesetRulesTagNamePatternOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesTagNamePatternInput` via:
//
//	OrganizationRulesetRulesTagNamePatternArgs{...}
type OrganizationRulesetRulesTagNamePatternInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesTagNamePatternOutput() OrganizationRulesetRulesTagNamePatternOutput
	ToOrganizationRulesetRulesTagNamePatternOutputWithContext(context.Context) OrganizationRulesetRulesTagNamePatternOutput
}

type OrganizationRulesetRulesTagNamePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (OrganizationRulesetRulesTagNamePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesTagNamePattern)(nil)).Elem()
}

func (i OrganizationRulesetRulesTagNamePatternArgs) ToOrganizationRulesetRulesTagNamePatternOutput() OrganizationRulesetRulesTagNamePatternOutput {
	return i.ToOrganizationRulesetRulesTagNamePatternOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesTagNamePatternArgs) ToOrganizationRulesetRulesTagNamePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesTagNamePatternOutput)
}

func (i OrganizationRulesetRulesTagNamePatternArgs) ToOrganizationRulesetRulesTagNamePatternPtrOutput() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return i.ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (i OrganizationRulesetRulesTagNamePatternArgs) ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesTagNamePatternOutput).ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(ctx)
}

// OrganizationRulesetRulesTagNamePatternPtrInput is an input type that accepts OrganizationRulesetRulesTagNamePatternArgs, OrganizationRulesetRulesTagNamePatternPtr and OrganizationRulesetRulesTagNamePatternPtrOutput values.
// You can construct a concrete instance of `OrganizationRulesetRulesTagNamePatternPtrInput` via:
//
//	        OrganizationRulesetRulesTagNamePatternArgs{...}
//
//	or:
//
//	        nil
type OrganizationRulesetRulesTagNamePatternPtrInput interface {
	pulumi.Input

	ToOrganizationRulesetRulesTagNamePatternPtrOutput() OrganizationRulesetRulesTagNamePatternPtrOutput
	ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(context.Context) OrganizationRulesetRulesTagNamePatternPtrOutput
}

type organizationRulesetRulesTagNamePatternPtrType OrganizationRulesetRulesTagNamePatternArgs

func OrganizationRulesetRulesTagNamePatternPtr(v *OrganizationRulesetRulesTagNamePatternArgs) OrganizationRulesetRulesTagNamePatternPtrInput {
	return (*organizationRulesetRulesTagNamePatternPtrType)(v)
}

func (*organizationRulesetRulesTagNamePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesTagNamePattern)(nil)).Elem()
}

func (i *organizationRulesetRulesTagNamePatternPtrType) ToOrganizationRulesetRulesTagNamePatternPtrOutput() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return i.ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (i *organizationRulesetRulesTagNamePatternPtrType) ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRulesetRulesTagNamePatternPtrOutput)
}

type OrganizationRulesetRulesTagNamePatternOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesTagNamePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationRulesetRulesTagNamePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesTagNamePatternOutput) ToOrganizationRulesetRulesTagNamePatternOutput() OrganizationRulesetRulesTagNamePatternOutput {
	return o
}

func (o OrganizationRulesetRulesTagNamePatternOutput) ToOrganizationRulesetRulesTagNamePatternOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternOutput {
	return o
}

func (o OrganizationRulesetRulesTagNamePatternOutput) ToOrganizationRulesetRulesTagNamePatternPtrOutput() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o.ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (o OrganizationRulesetRulesTagNamePatternOutput) ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationRulesetRulesTagNamePattern) *OrganizationRulesetRulesTagNamePattern {
		return &v
	}).(OrganizationRulesetRulesTagNamePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesTagNamePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesTagNamePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesTagNamePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesTagNamePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesTagNamePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesTagNamePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesTagNamePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationRulesetRulesTagNamePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type OrganizationRulesetRulesTagNamePatternPtrOutput struct{ *pulumi.OutputState }

func (OrganizationRulesetRulesTagNamePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRulesetRulesTagNamePattern)(nil)).Elem()
}

func (o OrganizationRulesetRulesTagNamePatternPtrOutput) ToOrganizationRulesetRulesTagNamePatternPtrOutput() OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesTagNamePatternPtrOutput) ToOrganizationRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) OrganizationRulesetRulesTagNamePatternPtrOutput {
	return o
}

func (o OrganizationRulesetRulesTagNamePatternPtrOutput) Elem() OrganizationRulesetRulesTagNamePatternOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesTagNamePattern) OrganizationRulesetRulesTagNamePattern {
		if v != nil {
			return *v
		}
		var ret OrganizationRulesetRulesTagNamePattern
		return ret
	}).(OrganizationRulesetRulesTagNamePatternOutput)
}

// (String) The name of the ruleset.
func (o OrganizationRulesetRulesTagNamePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o OrganizationRulesetRulesTagNamePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesTagNamePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o OrganizationRulesetRulesTagNamePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o OrganizationRulesetRulesTagNamePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type OrganizationWebhookConfiguration struct {
	ContentType *string `pulumi:"contentType"`
	InsecureSsl *bool   `pulumi:"insecureSsl"`
	Secret      *string `pulumi:"secret"`
	// URL of the webhook
	Url string `pulumi:"url"`
}

// OrganizationWebhookConfigurationInput is an input type that accepts OrganizationWebhookConfigurationArgs and OrganizationWebhookConfigurationOutput values.
// You can construct a concrete instance of `OrganizationWebhookConfigurationInput` via:
//
//	OrganizationWebhookConfigurationArgs{...}
type OrganizationWebhookConfigurationInput interface {
	pulumi.Input

	ToOrganizationWebhookConfigurationOutput() OrganizationWebhookConfigurationOutput
	ToOrganizationWebhookConfigurationOutputWithContext(context.Context) OrganizationWebhookConfigurationOutput
}

type OrganizationWebhookConfigurationArgs struct {
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	InsecureSsl pulumi.BoolPtrInput   `pulumi:"insecureSsl"`
	Secret      pulumi.StringPtrInput `pulumi:"secret"`
	// URL of the webhook
	Url pulumi.StringInput `pulumi:"url"`
}

func (OrganizationWebhookConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationWebhookConfiguration)(nil)).Elem()
}

func (i OrganizationWebhookConfigurationArgs) ToOrganizationWebhookConfigurationOutput() OrganizationWebhookConfigurationOutput {
	return i.ToOrganizationWebhookConfigurationOutputWithContext(context.Background())
}

func (i OrganizationWebhookConfigurationArgs) ToOrganizationWebhookConfigurationOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationWebhookConfigurationOutput)
}

func (i OrganizationWebhookConfigurationArgs) ToOrganizationWebhookConfigurationPtrOutput() OrganizationWebhookConfigurationPtrOutput {
	return i.ToOrganizationWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (i OrganizationWebhookConfigurationArgs) ToOrganizationWebhookConfigurationPtrOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationWebhookConfigurationOutput).ToOrganizationWebhookConfigurationPtrOutputWithContext(ctx)
}

// OrganizationWebhookConfigurationPtrInput is an input type that accepts OrganizationWebhookConfigurationArgs, OrganizationWebhookConfigurationPtr and OrganizationWebhookConfigurationPtrOutput values.
// You can construct a concrete instance of `OrganizationWebhookConfigurationPtrInput` via:
//
//	        OrganizationWebhookConfigurationArgs{...}
//
//	or:
//
//	        nil
type OrganizationWebhookConfigurationPtrInput interface {
	pulumi.Input

	ToOrganizationWebhookConfigurationPtrOutput() OrganizationWebhookConfigurationPtrOutput
	ToOrganizationWebhookConfigurationPtrOutputWithContext(context.Context) OrganizationWebhookConfigurationPtrOutput
}

type organizationWebhookConfigurationPtrType OrganizationWebhookConfigurationArgs

func OrganizationWebhookConfigurationPtr(v *OrganizationWebhookConfigurationArgs) OrganizationWebhookConfigurationPtrInput {
	return (*organizationWebhookConfigurationPtrType)(v)
}

func (*organizationWebhookConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationWebhookConfiguration)(nil)).Elem()
}

func (i *organizationWebhookConfigurationPtrType) ToOrganizationWebhookConfigurationPtrOutput() OrganizationWebhookConfigurationPtrOutput {
	return i.ToOrganizationWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (i *organizationWebhookConfigurationPtrType) ToOrganizationWebhookConfigurationPtrOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationWebhookConfigurationPtrOutput)
}

type OrganizationWebhookConfigurationOutput struct{ *pulumi.OutputState }

func (OrganizationWebhookConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationWebhookConfiguration)(nil)).Elem()
}

func (o OrganizationWebhookConfigurationOutput) ToOrganizationWebhookConfigurationOutput() OrganizationWebhookConfigurationOutput {
	return o
}

func (o OrganizationWebhookConfigurationOutput) ToOrganizationWebhookConfigurationOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationOutput {
	return o
}

func (o OrganizationWebhookConfigurationOutput) ToOrganizationWebhookConfigurationPtrOutput() OrganizationWebhookConfigurationPtrOutput {
	return o.ToOrganizationWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (o OrganizationWebhookConfigurationOutput) ToOrganizationWebhookConfigurationPtrOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrganizationWebhookConfiguration) *OrganizationWebhookConfiguration {
		return &v
	}).(OrganizationWebhookConfigurationPtrOutput)
}

func (o OrganizationWebhookConfigurationOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationWebhookConfiguration) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o OrganizationWebhookConfigurationOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OrganizationWebhookConfiguration) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

func (o OrganizationWebhookConfigurationOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrganizationWebhookConfiguration) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// URL of the webhook
func (o OrganizationWebhookConfigurationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OrganizationWebhookConfiguration) string { return v.Url }).(pulumi.StringOutput)
}

type OrganizationWebhookConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OrganizationWebhookConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationWebhookConfiguration)(nil)).Elem()
}

func (o OrganizationWebhookConfigurationPtrOutput) ToOrganizationWebhookConfigurationPtrOutput() OrganizationWebhookConfigurationPtrOutput {
	return o
}

func (o OrganizationWebhookConfigurationPtrOutput) ToOrganizationWebhookConfigurationPtrOutputWithContext(ctx context.Context) OrganizationWebhookConfigurationPtrOutput {
	return o
}

func (o OrganizationWebhookConfigurationPtrOutput) Elem() OrganizationWebhookConfigurationOutput {
	return o.ApplyT(func(v *OrganizationWebhookConfiguration) OrganizationWebhookConfiguration {
		if v != nil {
			return *v
		}
		var ret OrganizationWebhookConfiguration
		return ret
	}).(OrganizationWebhookConfigurationOutput)
}

func (o OrganizationWebhookConfigurationPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

func (o OrganizationWebhookConfigurationPtrOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OrganizationWebhookConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSsl
	}).(pulumi.BoolPtrOutput)
}

func (o OrganizationWebhookConfigurationPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// URL of the webhook
func (o OrganizationWebhookConfigurationPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type ProviderAppAuth struct {
	Id             string `pulumi:"id"`
	InstallationId string `pulumi:"installationId"`
	PemFile        string `pulumi:"pemFile"`
}

// ProviderAppAuthInput is an input type that accepts ProviderAppAuthArgs and ProviderAppAuthOutput values.
// You can construct a concrete instance of `ProviderAppAuthInput` via:
//
//	ProviderAppAuthArgs{...}
type ProviderAppAuthInput interface {
	pulumi.Input

	ToProviderAppAuthOutput() ProviderAppAuthOutput
	ToProviderAppAuthOutputWithContext(context.Context) ProviderAppAuthOutput
}

type ProviderAppAuthArgs struct {
	Id             pulumi.StringInput `pulumi:"id"`
	InstallationId pulumi.StringInput `pulumi:"installationId"`
	PemFile        pulumi.StringInput `pulumi:"pemFile"`
}

func (ProviderAppAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAppAuth)(nil)).Elem()
}

func (i ProviderAppAuthArgs) ToProviderAppAuthOutput() ProviderAppAuthOutput {
	return i.ToProviderAppAuthOutputWithContext(context.Background())
}

func (i ProviderAppAuthArgs) ToProviderAppAuthOutputWithContext(ctx context.Context) ProviderAppAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAppAuthOutput)
}

func (i ProviderAppAuthArgs) ToProviderAppAuthPtrOutput() ProviderAppAuthPtrOutput {
	return i.ToProviderAppAuthPtrOutputWithContext(context.Background())
}

func (i ProviderAppAuthArgs) ToProviderAppAuthPtrOutputWithContext(ctx context.Context) ProviderAppAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAppAuthOutput).ToProviderAppAuthPtrOutputWithContext(ctx)
}

// ProviderAppAuthPtrInput is an input type that accepts ProviderAppAuthArgs, ProviderAppAuthPtr and ProviderAppAuthPtrOutput values.
// You can construct a concrete instance of `ProviderAppAuthPtrInput` via:
//
//	        ProviderAppAuthArgs{...}
//
//	or:
//
//	        nil
type ProviderAppAuthPtrInput interface {
	pulumi.Input

	ToProviderAppAuthPtrOutput() ProviderAppAuthPtrOutput
	ToProviderAppAuthPtrOutputWithContext(context.Context) ProviderAppAuthPtrOutput
}

type providerAppAuthPtrType ProviderAppAuthArgs

func ProviderAppAuthPtr(v *ProviderAppAuthArgs) ProviderAppAuthPtrInput {
	return (*providerAppAuthPtrType)(v)
}

func (*providerAppAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAppAuth)(nil)).Elem()
}

func (i *providerAppAuthPtrType) ToProviderAppAuthPtrOutput() ProviderAppAuthPtrOutput {
	return i.ToProviderAppAuthPtrOutputWithContext(context.Background())
}

func (i *providerAppAuthPtrType) ToProviderAppAuthPtrOutputWithContext(ctx context.Context) ProviderAppAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAppAuthPtrOutput)
}

type ProviderAppAuthOutput struct{ *pulumi.OutputState }

func (ProviderAppAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAppAuth)(nil)).Elem()
}

func (o ProviderAppAuthOutput) ToProviderAppAuthOutput() ProviderAppAuthOutput {
	return o
}

func (o ProviderAppAuthOutput) ToProviderAppAuthOutputWithContext(ctx context.Context) ProviderAppAuthOutput {
	return o
}

func (o ProviderAppAuthOutput) ToProviderAppAuthPtrOutput() ProviderAppAuthPtrOutput {
	return o.ToProviderAppAuthPtrOutputWithContext(context.Background())
}

func (o ProviderAppAuthOutput) ToProviderAppAuthPtrOutputWithContext(ctx context.Context) ProviderAppAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAppAuth) *ProviderAppAuth {
		return &v
	}).(ProviderAppAuthPtrOutput)
}

func (o ProviderAppAuthOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAppAuth) string { return v.Id }).(pulumi.StringOutput)
}

func (o ProviderAppAuthOutput) InstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAppAuth) string { return v.InstallationId }).(pulumi.StringOutput)
}

func (o ProviderAppAuthOutput) PemFile() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAppAuth) string { return v.PemFile }).(pulumi.StringOutput)
}

type ProviderAppAuthPtrOutput struct{ *pulumi.OutputState }

func (ProviderAppAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAppAuth)(nil)).Elem()
}

func (o ProviderAppAuthPtrOutput) ToProviderAppAuthPtrOutput() ProviderAppAuthPtrOutput {
	return o
}

func (o ProviderAppAuthPtrOutput) ToProviderAppAuthPtrOutputWithContext(ctx context.Context) ProviderAppAuthPtrOutput {
	return o
}

func (o ProviderAppAuthPtrOutput) Elem() ProviderAppAuthOutput {
	return o.ApplyT(func(v *ProviderAppAuth) ProviderAppAuth {
		if v != nil {
			return *v
		}
		var ret ProviderAppAuth
		return ret
	}).(ProviderAppAuthOutput)
}

func (o ProviderAppAuthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAppAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o ProviderAppAuthPtrOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAppAuth) *string {
		if v == nil {
			return nil
		}
		return &v.InstallationId
	}).(pulumi.StringPtrOutput)
}

func (o ProviderAppAuthPtrOutput) PemFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAppAuth) *string {
		if v == nil {
			return nil
		}
		return &v.PemFile
	}).(pulumi.StringPtrOutput)
}

type RepositoryCollaboratorsTeam struct {
	// The permission of the outside collaborators for the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.
	// Must be `push` for personal repositories. Defaults to `push`.
	Permission *string `pulumi:"permission"`
	// The GitHub team id or the GitHub team slug
	TeamId string `pulumi:"teamId"`
}

// RepositoryCollaboratorsTeamInput is an input type that accepts RepositoryCollaboratorsTeamArgs and RepositoryCollaboratorsTeamOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorsTeamInput` via:
//
//	RepositoryCollaboratorsTeamArgs{...}
type RepositoryCollaboratorsTeamInput interface {
	pulumi.Input

	ToRepositoryCollaboratorsTeamOutput() RepositoryCollaboratorsTeamOutput
	ToRepositoryCollaboratorsTeamOutputWithContext(context.Context) RepositoryCollaboratorsTeamOutput
}

type RepositoryCollaboratorsTeamArgs struct {
	// The permission of the outside collaborators for the repository.
	// Must be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.
	// Must be `push` for personal repositories. Defaults to `push`.
	Permission pulumi.StringPtrInput `pulumi:"permission"`
	// The GitHub team id or the GitHub team slug
	TeamId pulumi.StringInput `pulumi:"teamId"`
}

func (RepositoryCollaboratorsTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCollaboratorsTeam)(nil)).Elem()
}

func (i RepositoryCollaboratorsTeamArgs) ToRepositoryCollaboratorsTeamOutput() RepositoryCollaboratorsTeamOutput {
	return i.ToRepositoryCollaboratorsTeamOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorsTeamArgs) ToRepositoryCollaboratorsTeamOutputWithContext(ctx context.Context) RepositoryCollaboratorsTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorsTeamOutput)
}

// RepositoryCollaboratorsTeamArrayInput is an input type that accepts RepositoryCollaboratorsTeamArray and RepositoryCollaboratorsTeamArrayOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorsTeamArrayInput` via:
//
//	RepositoryCollaboratorsTeamArray{ RepositoryCollaboratorsTeamArgs{...} }
type RepositoryCollaboratorsTeamArrayInput interface {
	pulumi.Input

	ToRepositoryCollaboratorsTeamArrayOutput() RepositoryCollaboratorsTeamArrayOutput
	ToRepositoryCollaboratorsTeamArrayOutputWithContext(context.Context) RepositoryCollaboratorsTeamArrayOutput
}

type RepositoryCollaboratorsTeamArray []RepositoryCollaboratorsTeamInput

func (RepositoryCollaboratorsTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCollaboratorsTeam)(nil)).Elem()
}

func (i RepositoryCollaboratorsTeamArray) ToRepositoryCollaboratorsTeamArrayOutput() RepositoryCollaboratorsTeamArrayOutput {
	return i.ToRepositoryCollaboratorsTeamArrayOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorsTeamArray) ToRepositoryCollaboratorsTeamArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorsTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorsTeamArrayOutput)
}

type RepositoryCollaboratorsTeamOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorsTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCollaboratorsTeam)(nil)).Elem()
}

func (o RepositoryCollaboratorsTeamOutput) ToRepositoryCollaboratorsTeamOutput() RepositoryCollaboratorsTeamOutput {
	return o
}

func (o RepositoryCollaboratorsTeamOutput) ToRepositoryCollaboratorsTeamOutputWithContext(ctx context.Context) RepositoryCollaboratorsTeamOutput {
	return o
}

// The permission of the outside collaborators for the repository.
// Must be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.
// Must be `push` for personal repositories. Defaults to `push`.
func (o RepositoryCollaboratorsTeamOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCollaboratorsTeam) *string { return v.Permission }).(pulumi.StringPtrOutput)
}

// The GitHub team id or the GitHub team slug
func (o RepositoryCollaboratorsTeamOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCollaboratorsTeam) string { return v.TeamId }).(pulumi.StringOutput)
}

type RepositoryCollaboratorsTeamArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorsTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCollaboratorsTeam)(nil)).Elem()
}

func (o RepositoryCollaboratorsTeamArrayOutput) ToRepositoryCollaboratorsTeamArrayOutput() RepositoryCollaboratorsTeamArrayOutput {
	return o
}

func (o RepositoryCollaboratorsTeamArrayOutput) ToRepositoryCollaboratorsTeamArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorsTeamArrayOutput {
	return o
}

func (o RepositoryCollaboratorsTeamArrayOutput) Index(i pulumi.IntInput) RepositoryCollaboratorsTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryCollaboratorsTeam {
		return vs[0].([]RepositoryCollaboratorsTeam)[vs[1].(int)]
	}).(RepositoryCollaboratorsTeamOutput)
}

type RepositoryCollaboratorsUser struct {
	// The permission of the outside collaborators for the repository.
	// Must be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.
	// Must be `push` for personal repositories. Defaults to `push`.
	Permission *string `pulumi:"permission"`
	// The user to add to the repository as a collaborator.
	Username string `pulumi:"username"`
}

// RepositoryCollaboratorsUserInput is an input type that accepts RepositoryCollaboratorsUserArgs and RepositoryCollaboratorsUserOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorsUserInput` via:
//
//	RepositoryCollaboratorsUserArgs{...}
type RepositoryCollaboratorsUserInput interface {
	pulumi.Input

	ToRepositoryCollaboratorsUserOutput() RepositoryCollaboratorsUserOutput
	ToRepositoryCollaboratorsUserOutputWithContext(context.Context) RepositoryCollaboratorsUserOutput
}

type RepositoryCollaboratorsUserArgs struct {
	// The permission of the outside collaborators for the repository.
	// Must be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.
	// Must be `push` for personal repositories. Defaults to `push`.
	Permission pulumi.StringPtrInput `pulumi:"permission"`
	// The user to add to the repository as a collaborator.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RepositoryCollaboratorsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCollaboratorsUser)(nil)).Elem()
}

func (i RepositoryCollaboratorsUserArgs) ToRepositoryCollaboratorsUserOutput() RepositoryCollaboratorsUserOutput {
	return i.ToRepositoryCollaboratorsUserOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorsUserArgs) ToRepositoryCollaboratorsUserOutputWithContext(ctx context.Context) RepositoryCollaboratorsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorsUserOutput)
}

// RepositoryCollaboratorsUserArrayInput is an input type that accepts RepositoryCollaboratorsUserArray and RepositoryCollaboratorsUserArrayOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorsUserArrayInput` via:
//
//	RepositoryCollaboratorsUserArray{ RepositoryCollaboratorsUserArgs{...} }
type RepositoryCollaboratorsUserArrayInput interface {
	pulumi.Input

	ToRepositoryCollaboratorsUserArrayOutput() RepositoryCollaboratorsUserArrayOutput
	ToRepositoryCollaboratorsUserArrayOutputWithContext(context.Context) RepositoryCollaboratorsUserArrayOutput
}

type RepositoryCollaboratorsUserArray []RepositoryCollaboratorsUserInput

func (RepositoryCollaboratorsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCollaboratorsUser)(nil)).Elem()
}

func (i RepositoryCollaboratorsUserArray) ToRepositoryCollaboratorsUserArrayOutput() RepositoryCollaboratorsUserArrayOutput {
	return i.ToRepositoryCollaboratorsUserArrayOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorsUserArray) ToRepositoryCollaboratorsUserArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorsUserArrayOutput)
}

type RepositoryCollaboratorsUserOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCollaboratorsUser)(nil)).Elem()
}

func (o RepositoryCollaboratorsUserOutput) ToRepositoryCollaboratorsUserOutput() RepositoryCollaboratorsUserOutput {
	return o
}

func (o RepositoryCollaboratorsUserOutput) ToRepositoryCollaboratorsUserOutputWithContext(ctx context.Context) RepositoryCollaboratorsUserOutput {
	return o
}

// The permission of the outside collaborators for the repository.
// Must be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.
// Must be `push` for personal repositories. Defaults to `push`.
func (o RepositoryCollaboratorsUserOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCollaboratorsUser) *string { return v.Permission }).(pulumi.StringPtrOutput)
}

// The user to add to the repository as a collaborator.
func (o RepositoryCollaboratorsUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCollaboratorsUser) string { return v.Username }).(pulumi.StringOutput)
}

type RepositoryCollaboratorsUserArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryCollaboratorsUser)(nil)).Elem()
}

func (o RepositoryCollaboratorsUserArrayOutput) ToRepositoryCollaboratorsUserArrayOutput() RepositoryCollaboratorsUserArrayOutput {
	return o
}

func (o RepositoryCollaboratorsUserArrayOutput) ToRepositoryCollaboratorsUserArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorsUserArrayOutput {
	return o
}

func (o RepositoryCollaboratorsUserArrayOutput) Index(i pulumi.IntInput) RepositoryCollaboratorsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryCollaboratorsUser {
		return vs[0].([]RepositoryCollaboratorsUser)[vs[1].(int)]
	}).(RepositoryCollaboratorsUserOutput)
}

type RepositoryEnvironmentDeploymentBranchPolicy struct {
	// Whether only branches that match the specified name patterns can deploy to this environment.
	CustomBranchPolicies bool `pulumi:"customBranchPolicies"`
	// Whether only branches with branch protection rules can deploy to this environment.
	ProtectedBranches bool `pulumi:"protectedBranches"`
}

// RepositoryEnvironmentDeploymentBranchPolicyInput is an input type that accepts RepositoryEnvironmentDeploymentBranchPolicyArgs and RepositoryEnvironmentDeploymentBranchPolicyOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentDeploymentBranchPolicyInput` via:
//
//	RepositoryEnvironmentDeploymentBranchPolicyArgs{...}
type RepositoryEnvironmentDeploymentBranchPolicyInput interface {
	pulumi.Input

	ToRepositoryEnvironmentDeploymentBranchPolicyOutput() RepositoryEnvironmentDeploymentBranchPolicyOutput
	ToRepositoryEnvironmentDeploymentBranchPolicyOutputWithContext(context.Context) RepositoryEnvironmentDeploymentBranchPolicyOutput
}

type RepositoryEnvironmentDeploymentBranchPolicyArgs struct {
	// Whether only branches that match the specified name patterns can deploy to this environment.
	CustomBranchPolicies pulumi.BoolInput `pulumi:"customBranchPolicies"`
	// Whether only branches with branch protection rules can deploy to this environment.
	ProtectedBranches pulumi.BoolInput `pulumi:"protectedBranches"`
}

func (RepositoryEnvironmentDeploymentBranchPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironmentDeploymentBranchPolicy)(nil)).Elem()
}

func (i RepositoryEnvironmentDeploymentBranchPolicyArgs) ToRepositoryEnvironmentDeploymentBranchPolicyOutput() RepositoryEnvironmentDeploymentBranchPolicyOutput {
	return i.ToRepositoryEnvironmentDeploymentBranchPolicyOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentDeploymentBranchPolicyArgs) ToRepositoryEnvironmentDeploymentBranchPolicyOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentDeploymentBranchPolicyOutput)
}

func (i RepositoryEnvironmentDeploymentBranchPolicyArgs) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutput() RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return i.ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentDeploymentBranchPolicyArgs) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentDeploymentBranchPolicyOutput).ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(ctx)
}

// RepositoryEnvironmentDeploymentBranchPolicyPtrInput is an input type that accepts RepositoryEnvironmentDeploymentBranchPolicyArgs, RepositoryEnvironmentDeploymentBranchPolicyPtr and RepositoryEnvironmentDeploymentBranchPolicyPtrOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentDeploymentBranchPolicyPtrInput` via:
//
//	        RepositoryEnvironmentDeploymentBranchPolicyArgs{...}
//
//	or:
//
//	        nil
type RepositoryEnvironmentDeploymentBranchPolicyPtrInput interface {
	pulumi.Input

	ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutput() RepositoryEnvironmentDeploymentBranchPolicyPtrOutput
	ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(context.Context) RepositoryEnvironmentDeploymentBranchPolicyPtrOutput
}

type repositoryEnvironmentDeploymentBranchPolicyPtrType RepositoryEnvironmentDeploymentBranchPolicyArgs

func RepositoryEnvironmentDeploymentBranchPolicyPtr(v *RepositoryEnvironmentDeploymentBranchPolicyArgs) RepositoryEnvironmentDeploymentBranchPolicyPtrInput {
	return (*repositoryEnvironmentDeploymentBranchPolicyPtrType)(v)
}

func (*repositoryEnvironmentDeploymentBranchPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEnvironmentDeploymentBranchPolicy)(nil)).Elem()
}

func (i *repositoryEnvironmentDeploymentBranchPolicyPtrType) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutput() RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return i.ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(context.Background())
}

func (i *repositoryEnvironmentDeploymentBranchPolicyPtrType) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentDeploymentBranchPolicyPtrOutput)
}

type RepositoryEnvironmentDeploymentBranchPolicyOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentDeploymentBranchPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironmentDeploymentBranchPolicy)(nil)).Elem()
}

func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) ToRepositoryEnvironmentDeploymentBranchPolicyOutput() RepositoryEnvironmentDeploymentBranchPolicyOutput {
	return o
}

func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) ToRepositoryEnvironmentDeploymentBranchPolicyOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyOutput {
	return o
}

func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutput() RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return o.ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(context.Background())
}

func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryEnvironmentDeploymentBranchPolicy) *RepositoryEnvironmentDeploymentBranchPolicy {
		return &v
	}).(RepositoryEnvironmentDeploymentBranchPolicyPtrOutput)
}

// Whether only branches that match the specified name patterns can deploy to this environment.
func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) CustomBranchPolicies() pulumi.BoolOutput {
	return o.ApplyT(func(v RepositoryEnvironmentDeploymentBranchPolicy) bool { return v.CustomBranchPolicies }).(pulumi.BoolOutput)
}

// Whether only branches with branch protection rules can deploy to this environment.
func (o RepositoryEnvironmentDeploymentBranchPolicyOutput) ProtectedBranches() pulumi.BoolOutput {
	return o.ApplyT(func(v RepositoryEnvironmentDeploymentBranchPolicy) bool { return v.ProtectedBranches }).(pulumi.BoolOutput)
}

type RepositoryEnvironmentDeploymentBranchPolicyPtrOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEnvironmentDeploymentBranchPolicy)(nil)).Elem()
}

func (o RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutput() RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return o
}

func (o RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) ToRepositoryEnvironmentDeploymentBranchPolicyPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentDeploymentBranchPolicyPtrOutput {
	return o
}

func (o RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) Elem() RepositoryEnvironmentDeploymentBranchPolicyOutput {
	return o.ApplyT(func(v *RepositoryEnvironmentDeploymentBranchPolicy) RepositoryEnvironmentDeploymentBranchPolicy {
		if v != nil {
			return *v
		}
		var ret RepositoryEnvironmentDeploymentBranchPolicy
		return ret
	}).(RepositoryEnvironmentDeploymentBranchPolicyOutput)
}

// Whether only branches that match the specified name patterns can deploy to this environment.
func (o RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) CustomBranchPolicies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryEnvironmentDeploymentBranchPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.CustomBranchPolicies
	}).(pulumi.BoolPtrOutput)
}

// Whether only branches with branch protection rules can deploy to this environment.
func (o RepositoryEnvironmentDeploymentBranchPolicyPtrOutput) ProtectedBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryEnvironmentDeploymentBranchPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.ProtectedBranches
	}).(pulumi.BoolPtrOutput)
}

type RepositoryEnvironmentReviewer struct {
	// Up to 6 IDs for teams who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Teams []int `pulumi:"teams"`
	// Up to 6 IDs for users who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Users []int `pulumi:"users"`
}

// RepositoryEnvironmentReviewerInput is an input type that accepts RepositoryEnvironmentReviewerArgs and RepositoryEnvironmentReviewerOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentReviewerInput` via:
//
//	RepositoryEnvironmentReviewerArgs{...}
type RepositoryEnvironmentReviewerInput interface {
	pulumi.Input

	ToRepositoryEnvironmentReviewerOutput() RepositoryEnvironmentReviewerOutput
	ToRepositoryEnvironmentReviewerOutputWithContext(context.Context) RepositoryEnvironmentReviewerOutput
}

type RepositoryEnvironmentReviewerArgs struct {
	// Up to 6 IDs for teams who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Teams pulumi.IntArrayInput `pulumi:"teams"`
	// Up to 6 IDs for users who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Users pulumi.IntArrayInput `pulumi:"users"`
}

func (RepositoryEnvironmentReviewerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironmentReviewer)(nil)).Elem()
}

func (i RepositoryEnvironmentReviewerArgs) ToRepositoryEnvironmentReviewerOutput() RepositoryEnvironmentReviewerOutput {
	return i.ToRepositoryEnvironmentReviewerOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentReviewerArgs) ToRepositoryEnvironmentReviewerOutputWithContext(ctx context.Context) RepositoryEnvironmentReviewerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentReviewerOutput)
}

// RepositoryEnvironmentReviewerArrayInput is an input type that accepts RepositoryEnvironmentReviewerArray and RepositoryEnvironmentReviewerArrayOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentReviewerArrayInput` via:
//
//	RepositoryEnvironmentReviewerArray{ RepositoryEnvironmentReviewerArgs{...} }
type RepositoryEnvironmentReviewerArrayInput interface {
	pulumi.Input

	ToRepositoryEnvironmentReviewerArrayOutput() RepositoryEnvironmentReviewerArrayOutput
	ToRepositoryEnvironmentReviewerArrayOutputWithContext(context.Context) RepositoryEnvironmentReviewerArrayOutput
}

type RepositoryEnvironmentReviewerArray []RepositoryEnvironmentReviewerInput

func (RepositoryEnvironmentReviewerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryEnvironmentReviewer)(nil)).Elem()
}

func (i RepositoryEnvironmentReviewerArray) ToRepositoryEnvironmentReviewerArrayOutput() RepositoryEnvironmentReviewerArrayOutput {
	return i.ToRepositoryEnvironmentReviewerArrayOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentReviewerArray) ToRepositoryEnvironmentReviewerArrayOutputWithContext(ctx context.Context) RepositoryEnvironmentReviewerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentReviewerArrayOutput)
}

type RepositoryEnvironmentReviewerOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentReviewerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironmentReviewer)(nil)).Elem()
}

func (o RepositoryEnvironmentReviewerOutput) ToRepositoryEnvironmentReviewerOutput() RepositoryEnvironmentReviewerOutput {
	return o
}

func (o RepositoryEnvironmentReviewerOutput) ToRepositoryEnvironmentReviewerOutputWithContext(ctx context.Context) RepositoryEnvironmentReviewerOutput {
	return o
}

// Up to 6 IDs for teams who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
func (o RepositoryEnvironmentReviewerOutput) Teams() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RepositoryEnvironmentReviewer) []int { return v.Teams }).(pulumi.IntArrayOutput)
}

// Up to 6 IDs for users who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
func (o RepositoryEnvironmentReviewerOutput) Users() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RepositoryEnvironmentReviewer) []int { return v.Users }).(pulumi.IntArrayOutput)
}

type RepositoryEnvironmentReviewerArrayOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentReviewerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryEnvironmentReviewer)(nil)).Elem()
}

func (o RepositoryEnvironmentReviewerArrayOutput) ToRepositoryEnvironmentReviewerArrayOutput() RepositoryEnvironmentReviewerArrayOutput {
	return o
}

func (o RepositoryEnvironmentReviewerArrayOutput) ToRepositoryEnvironmentReviewerArrayOutputWithContext(ctx context.Context) RepositoryEnvironmentReviewerArrayOutput {
	return o
}

func (o RepositoryEnvironmentReviewerArrayOutput) Index(i pulumi.IntInput) RepositoryEnvironmentReviewerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryEnvironmentReviewer {
		return vs[0].([]RepositoryEnvironmentReviewer)[vs[1].(int)]
	}).(RepositoryEnvironmentReviewerOutput)
}

type RepositoryPages struct {
	// The type of GitHub Pages site to build. Can be `legacy` or `workflow`. If you use `legacy` as build type you need to set the option `source`.
	BuildType *string `pulumi:"buildType"`
	// The custom domain for the repository. This can only be set after the repository has been created.
	Cname *string `pulumi:"cname"`
	// Whether the rendered GitHub Pages site has a custom 404 page.
	Custom404 *bool `pulumi:"custom404"`
	// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
	HtmlUrl *string `pulumi:"htmlUrl"`
	// The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.
	Source *RepositoryPagesSource `pulumi:"source"`
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status *string `pulumi:"status"`
	Url    *string `pulumi:"url"`
}

// RepositoryPagesInput is an input type that accepts RepositoryPagesArgs and RepositoryPagesOutput values.
// You can construct a concrete instance of `RepositoryPagesInput` via:
//
//	RepositoryPagesArgs{...}
type RepositoryPagesInput interface {
	pulumi.Input

	ToRepositoryPagesOutput() RepositoryPagesOutput
	ToRepositoryPagesOutputWithContext(context.Context) RepositoryPagesOutput
}

type RepositoryPagesArgs struct {
	// The type of GitHub Pages site to build. Can be `legacy` or `workflow`. If you use `legacy` as build type you need to set the option `source`.
	BuildType pulumi.StringPtrInput `pulumi:"buildType"`
	// The custom domain for the repository. This can only be set after the repository has been created.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
	// Whether the rendered GitHub Pages site has a custom 404 page.
	Custom404 pulumi.BoolPtrInput `pulumi:"custom404"`
	// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
	HtmlUrl pulumi.StringPtrInput `pulumi:"htmlUrl"`
	// The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.
	Source RepositoryPagesSourcePtrInput `pulumi:"source"`
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	Url    pulumi.StringPtrInput `pulumi:"url"`
}

func (RepositoryPagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPages)(nil)).Elem()
}

func (i RepositoryPagesArgs) ToRepositoryPagesOutput() RepositoryPagesOutput {
	return i.ToRepositoryPagesOutputWithContext(context.Background())
}

func (i RepositoryPagesArgs) ToRepositoryPagesOutputWithContext(ctx context.Context) RepositoryPagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesOutput)
}

func (i RepositoryPagesArgs) ToRepositoryPagesPtrOutput() RepositoryPagesPtrOutput {
	return i.ToRepositoryPagesPtrOutputWithContext(context.Background())
}

func (i RepositoryPagesArgs) ToRepositoryPagesPtrOutputWithContext(ctx context.Context) RepositoryPagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesOutput).ToRepositoryPagesPtrOutputWithContext(ctx)
}

// RepositoryPagesPtrInput is an input type that accepts RepositoryPagesArgs, RepositoryPagesPtr and RepositoryPagesPtrOutput values.
// You can construct a concrete instance of `RepositoryPagesPtrInput` via:
//
//	        RepositoryPagesArgs{...}
//
//	or:
//
//	        nil
type RepositoryPagesPtrInput interface {
	pulumi.Input

	ToRepositoryPagesPtrOutput() RepositoryPagesPtrOutput
	ToRepositoryPagesPtrOutputWithContext(context.Context) RepositoryPagesPtrOutput
}

type repositoryPagesPtrType RepositoryPagesArgs

func RepositoryPagesPtr(v *RepositoryPagesArgs) RepositoryPagesPtrInput {
	return (*repositoryPagesPtrType)(v)
}

func (*repositoryPagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPages)(nil)).Elem()
}

func (i *repositoryPagesPtrType) ToRepositoryPagesPtrOutput() RepositoryPagesPtrOutput {
	return i.ToRepositoryPagesPtrOutputWithContext(context.Background())
}

func (i *repositoryPagesPtrType) ToRepositoryPagesPtrOutputWithContext(ctx context.Context) RepositoryPagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesPtrOutput)
}

type RepositoryPagesOutput struct{ *pulumi.OutputState }

func (RepositoryPagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPages)(nil)).Elem()
}

func (o RepositoryPagesOutput) ToRepositoryPagesOutput() RepositoryPagesOutput {
	return o
}

func (o RepositoryPagesOutput) ToRepositoryPagesOutputWithContext(ctx context.Context) RepositoryPagesOutput {
	return o
}

func (o RepositoryPagesOutput) ToRepositoryPagesPtrOutput() RepositoryPagesPtrOutput {
	return o.ToRepositoryPagesPtrOutputWithContext(context.Background())
}

func (o RepositoryPagesOutput) ToRepositoryPagesPtrOutputWithContext(ctx context.Context) RepositoryPagesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryPages) *RepositoryPages {
		return &v
	}).(RepositoryPagesPtrOutput)
}

// The type of GitHub Pages site to build. Can be `legacy` or `workflow`. If you use `legacy` as build type you need to set the option `source`.
func (o RepositoryPagesOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *string { return v.BuildType }).(pulumi.StringPtrOutput)
}

// The custom domain for the repository. This can only be set after the repository has been created.
func (o RepositoryPagesOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// Whether the rendered GitHub Pages site has a custom 404 page.
func (o RepositoryPagesOutput) Custom404() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *bool { return v.Custom404 }).(pulumi.BoolPtrOutput)
}

// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
func (o RepositoryPagesOutput) HtmlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *string { return v.HtmlUrl }).(pulumi.StringPtrOutput)
}

// The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.
func (o RepositoryPagesOutput) Source() RepositoryPagesSourcePtrOutput {
	return o.ApplyT(func(v RepositoryPages) *RepositoryPagesSource { return v.Source }).(RepositoryPagesSourcePtrOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositoryPagesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o RepositoryPagesOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPages) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RepositoryPagesPtrOutput struct{ *pulumi.OutputState }

func (RepositoryPagesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPages)(nil)).Elem()
}

func (o RepositoryPagesPtrOutput) ToRepositoryPagesPtrOutput() RepositoryPagesPtrOutput {
	return o
}

func (o RepositoryPagesPtrOutput) ToRepositoryPagesPtrOutputWithContext(ctx context.Context) RepositoryPagesPtrOutput {
	return o
}

func (o RepositoryPagesPtrOutput) Elem() RepositoryPagesOutput {
	return o.ApplyT(func(v *RepositoryPages) RepositoryPages {
		if v != nil {
			return *v
		}
		var ret RepositoryPages
		return ret
	}).(RepositoryPagesOutput)
}

// The type of GitHub Pages site to build. Can be `legacy` or `workflow`. If you use `legacy` as build type you need to set the option `source`.
func (o RepositoryPagesPtrOutput) BuildType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *string {
		if v == nil {
			return nil
		}
		return v.BuildType
	}).(pulumi.StringPtrOutput)
}

// The custom domain for the repository. This can only be set after the repository has been created.
func (o RepositoryPagesPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// Whether the rendered GitHub Pages site has a custom 404 page.
func (o RepositoryPagesPtrOutput) Custom404() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *bool {
		if v == nil {
			return nil
		}
		return v.Custom404
	}).(pulumi.BoolPtrOutput)
}

// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
func (o RepositoryPagesPtrOutput) HtmlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *string {
		if v == nil {
			return nil
		}
		return v.HtmlUrl
	}).(pulumi.StringPtrOutput)
}

// The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.
func (o RepositoryPagesPtrOutput) Source() RepositoryPagesSourcePtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *RepositoryPagesSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(RepositoryPagesSourcePtrOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositoryPagesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

func (o RepositoryPagesPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPages) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type RepositoryPagesSource struct {
	// The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.
	Branch string `pulumi:"branch"`
	// The repository directory from which the site publishes (Default: `/`).
	Path *string `pulumi:"path"`
}

// RepositoryPagesSourceInput is an input type that accepts RepositoryPagesSourceArgs and RepositoryPagesSourceOutput values.
// You can construct a concrete instance of `RepositoryPagesSourceInput` via:
//
//	RepositoryPagesSourceArgs{...}
type RepositoryPagesSourceInput interface {
	pulumi.Input

	ToRepositoryPagesSourceOutput() RepositoryPagesSourceOutput
	ToRepositoryPagesSourceOutputWithContext(context.Context) RepositoryPagesSourceOutput
}

type RepositoryPagesSourceArgs struct {
	// The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.
	Branch pulumi.StringInput `pulumi:"branch"`
	// The repository directory from which the site publishes (Default: `/`).
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (RepositoryPagesSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPagesSource)(nil)).Elem()
}

func (i RepositoryPagesSourceArgs) ToRepositoryPagesSourceOutput() RepositoryPagesSourceOutput {
	return i.ToRepositoryPagesSourceOutputWithContext(context.Background())
}

func (i RepositoryPagesSourceArgs) ToRepositoryPagesSourceOutputWithContext(ctx context.Context) RepositoryPagesSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesSourceOutput)
}

func (i RepositoryPagesSourceArgs) ToRepositoryPagesSourcePtrOutput() RepositoryPagesSourcePtrOutput {
	return i.ToRepositoryPagesSourcePtrOutputWithContext(context.Background())
}

func (i RepositoryPagesSourceArgs) ToRepositoryPagesSourcePtrOutputWithContext(ctx context.Context) RepositoryPagesSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesSourceOutput).ToRepositoryPagesSourcePtrOutputWithContext(ctx)
}

// RepositoryPagesSourcePtrInput is an input type that accepts RepositoryPagesSourceArgs, RepositoryPagesSourcePtr and RepositoryPagesSourcePtrOutput values.
// You can construct a concrete instance of `RepositoryPagesSourcePtrInput` via:
//
//	        RepositoryPagesSourceArgs{...}
//
//	or:
//
//	        nil
type RepositoryPagesSourcePtrInput interface {
	pulumi.Input

	ToRepositoryPagesSourcePtrOutput() RepositoryPagesSourcePtrOutput
	ToRepositoryPagesSourcePtrOutputWithContext(context.Context) RepositoryPagesSourcePtrOutput
}

type repositoryPagesSourcePtrType RepositoryPagesSourceArgs

func RepositoryPagesSourcePtr(v *RepositoryPagesSourceArgs) RepositoryPagesSourcePtrInput {
	return (*repositoryPagesSourcePtrType)(v)
}

func (*repositoryPagesSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPagesSource)(nil)).Elem()
}

func (i *repositoryPagesSourcePtrType) ToRepositoryPagesSourcePtrOutput() RepositoryPagesSourcePtrOutput {
	return i.ToRepositoryPagesSourcePtrOutputWithContext(context.Background())
}

func (i *repositoryPagesSourcePtrType) ToRepositoryPagesSourcePtrOutputWithContext(ctx context.Context) RepositoryPagesSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPagesSourcePtrOutput)
}

type RepositoryPagesSourceOutput struct{ *pulumi.OutputState }

func (RepositoryPagesSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPagesSource)(nil)).Elem()
}

func (o RepositoryPagesSourceOutput) ToRepositoryPagesSourceOutput() RepositoryPagesSourceOutput {
	return o
}

func (o RepositoryPagesSourceOutput) ToRepositoryPagesSourceOutputWithContext(ctx context.Context) RepositoryPagesSourceOutput {
	return o
}

func (o RepositoryPagesSourceOutput) ToRepositoryPagesSourcePtrOutput() RepositoryPagesSourcePtrOutput {
	return o.ToRepositoryPagesSourcePtrOutputWithContext(context.Background())
}

func (o RepositoryPagesSourceOutput) ToRepositoryPagesSourcePtrOutputWithContext(ctx context.Context) RepositoryPagesSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryPagesSource) *RepositoryPagesSource {
		return &v
	}).(RepositoryPagesSourcePtrOutput)
}

// The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.
func (o RepositoryPagesSourceOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryPagesSource) string { return v.Branch }).(pulumi.StringOutput)
}

// The repository directory from which the site publishes (Default: `/`).
func (o RepositoryPagesSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryPagesSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type RepositoryPagesSourcePtrOutput struct{ *pulumi.OutputState }

func (RepositoryPagesSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPagesSource)(nil)).Elem()
}

func (o RepositoryPagesSourcePtrOutput) ToRepositoryPagesSourcePtrOutput() RepositoryPagesSourcePtrOutput {
	return o
}

func (o RepositoryPagesSourcePtrOutput) ToRepositoryPagesSourcePtrOutputWithContext(ctx context.Context) RepositoryPagesSourcePtrOutput {
	return o
}

func (o RepositoryPagesSourcePtrOutput) Elem() RepositoryPagesSourceOutput {
	return o.ApplyT(func(v *RepositoryPagesSource) RepositoryPagesSource {
		if v != nil {
			return *v
		}
		var ret RepositoryPagesSource
		return ret
	}).(RepositoryPagesSourceOutput)
}

// The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.
func (o RepositoryPagesSourcePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPagesSource) *string {
		if v == nil {
			return nil
		}
		return &v.Branch
	}).(pulumi.StringPtrOutput)
}

// The repository directory from which the site publishes (Default: `/`).
func (o RepositoryPagesSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPagesSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

type RepositoryRulesetBypassActor struct {
	// (Number) The ID of the actor that can bypass a ruleset.
	ActorId int `pulumi:"actorId"`
	// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
	ActorType string `pulumi:"actorType"`
	// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
	//
	// > Note: at the time of writing this, the following actor types correspond to the following actor IDs:
	BypassMode string `pulumi:"bypassMode"`
}

// RepositoryRulesetBypassActorInput is an input type that accepts RepositoryRulesetBypassActorArgs and RepositoryRulesetBypassActorOutput values.
// You can construct a concrete instance of `RepositoryRulesetBypassActorInput` via:
//
//	RepositoryRulesetBypassActorArgs{...}
type RepositoryRulesetBypassActorInput interface {
	pulumi.Input

	ToRepositoryRulesetBypassActorOutput() RepositoryRulesetBypassActorOutput
	ToRepositoryRulesetBypassActorOutputWithContext(context.Context) RepositoryRulesetBypassActorOutput
}

type RepositoryRulesetBypassActorArgs struct {
	// (Number) The ID of the actor that can bypass a ruleset.
	ActorId pulumi.IntInput `pulumi:"actorId"`
	// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
	ActorType pulumi.StringInput `pulumi:"actorType"`
	// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
	//
	// > Note: at the time of writing this, the following actor types correspond to the following actor IDs:
	BypassMode pulumi.StringInput `pulumi:"bypassMode"`
}

func (RepositoryRulesetBypassActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetBypassActor)(nil)).Elem()
}

func (i RepositoryRulesetBypassActorArgs) ToRepositoryRulesetBypassActorOutput() RepositoryRulesetBypassActorOutput {
	return i.ToRepositoryRulesetBypassActorOutputWithContext(context.Background())
}

func (i RepositoryRulesetBypassActorArgs) ToRepositoryRulesetBypassActorOutputWithContext(ctx context.Context) RepositoryRulesetBypassActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetBypassActorOutput)
}

// RepositoryRulesetBypassActorArrayInput is an input type that accepts RepositoryRulesetBypassActorArray and RepositoryRulesetBypassActorArrayOutput values.
// You can construct a concrete instance of `RepositoryRulesetBypassActorArrayInput` via:
//
//	RepositoryRulesetBypassActorArray{ RepositoryRulesetBypassActorArgs{...} }
type RepositoryRulesetBypassActorArrayInput interface {
	pulumi.Input

	ToRepositoryRulesetBypassActorArrayOutput() RepositoryRulesetBypassActorArrayOutput
	ToRepositoryRulesetBypassActorArrayOutputWithContext(context.Context) RepositoryRulesetBypassActorArrayOutput
}

type RepositoryRulesetBypassActorArray []RepositoryRulesetBypassActorInput

func (RepositoryRulesetBypassActorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRulesetBypassActor)(nil)).Elem()
}

func (i RepositoryRulesetBypassActorArray) ToRepositoryRulesetBypassActorArrayOutput() RepositoryRulesetBypassActorArrayOutput {
	return i.ToRepositoryRulesetBypassActorArrayOutputWithContext(context.Background())
}

func (i RepositoryRulesetBypassActorArray) ToRepositoryRulesetBypassActorArrayOutputWithContext(ctx context.Context) RepositoryRulesetBypassActorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetBypassActorArrayOutput)
}

type RepositoryRulesetBypassActorOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetBypassActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetBypassActor)(nil)).Elem()
}

func (o RepositoryRulesetBypassActorOutput) ToRepositoryRulesetBypassActorOutput() RepositoryRulesetBypassActorOutput {
	return o
}

func (o RepositoryRulesetBypassActorOutput) ToRepositoryRulesetBypassActorOutputWithContext(ctx context.Context) RepositoryRulesetBypassActorOutput {
	return o
}

// (Number) The ID of the actor that can bypass a ruleset.
func (o RepositoryRulesetBypassActorOutput) ActorId() pulumi.IntOutput {
	return o.ApplyT(func(v RepositoryRulesetBypassActor) int { return v.ActorId }).(pulumi.IntOutput)
}

// The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.
func (o RepositoryRulesetBypassActorOutput) ActorType() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetBypassActor) string { return v.ActorType }).(pulumi.StringOutput)
}

// (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`.
//
// > Note: at the time of writing this, the following actor types correspond to the following actor IDs:
func (o RepositoryRulesetBypassActorOutput) BypassMode() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetBypassActor) string { return v.BypassMode }).(pulumi.StringOutput)
}

type RepositoryRulesetBypassActorArrayOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetBypassActorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRulesetBypassActor)(nil)).Elem()
}

func (o RepositoryRulesetBypassActorArrayOutput) ToRepositoryRulesetBypassActorArrayOutput() RepositoryRulesetBypassActorArrayOutput {
	return o
}

func (o RepositoryRulesetBypassActorArrayOutput) ToRepositoryRulesetBypassActorArrayOutputWithContext(ctx context.Context) RepositoryRulesetBypassActorArrayOutput {
	return o
}

func (o RepositoryRulesetBypassActorArrayOutput) Index(i pulumi.IntInput) RepositoryRulesetBypassActorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryRulesetBypassActor {
		return vs[0].([]RepositoryRulesetBypassActor)[vs[1].(int)]
	}).(RepositoryRulesetBypassActorOutput)
}

type RepositoryRulesetConditions struct {
	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	RefName RepositoryRulesetConditionsRefName `pulumi:"refName"`
}

// RepositoryRulesetConditionsInput is an input type that accepts RepositoryRulesetConditionsArgs and RepositoryRulesetConditionsOutput values.
// You can construct a concrete instance of `RepositoryRulesetConditionsInput` via:
//
//	RepositoryRulesetConditionsArgs{...}
type RepositoryRulesetConditionsInput interface {
	pulumi.Input

	ToRepositoryRulesetConditionsOutput() RepositoryRulesetConditionsOutput
	ToRepositoryRulesetConditionsOutputWithContext(context.Context) RepositoryRulesetConditionsOutput
}

type RepositoryRulesetConditionsArgs struct {
	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	RefName RepositoryRulesetConditionsRefNameInput `pulumi:"refName"`
}

func (RepositoryRulesetConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetConditions)(nil)).Elem()
}

func (i RepositoryRulesetConditionsArgs) ToRepositoryRulesetConditionsOutput() RepositoryRulesetConditionsOutput {
	return i.ToRepositoryRulesetConditionsOutputWithContext(context.Background())
}

func (i RepositoryRulesetConditionsArgs) ToRepositoryRulesetConditionsOutputWithContext(ctx context.Context) RepositoryRulesetConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsOutput)
}

func (i RepositoryRulesetConditionsArgs) ToRepositoryRulesetConditionsPtrOutput() RepositoryRulesetConditionsPtrOutput {
	return i.ToRepositoryRulesetConditionsPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetConditionsArgs) ToRepositoryRulesetConditionsPtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsOutput).ToRepositoryRulesetConditionsPtrOutputWithContext(ctx)
}

// RepositoryRulesetConditionsPtrInput is an input type that accepts RepositoryRulesetConditionsArgs, RepositoryRulesetConditionsPtr and RepositoryRulesetConditionsPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetConditionsPtrInput` via:
//
//	        RepositoryRulesetConditionsArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetConditionsPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetConditionsPtrOutput() RepositoryRulesetConditionsPtrOutput
	ToRepositoryRulesetConditionsPtrOutputWithContext(context.Context) RepositoryRulesetConditionsPtrOutput
}

type repositoryRulesetConditionsPtrType RepositoryRulesetConditionsArgs

func RepositoryRulesetConditionsPtr(v *RepositoryRulesetConditionsArgs) RepositoryRulesetConditionsPtrInput {
	return (*repositoryRulesetConditionsPtrType)(v)
}

func (*repositoryRulesetConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetConditions)(nil)).Elem()
}

func (i *repositoryRulesetConditionsPtrType) ToRepositoryRulesetConditionsPtrOutput() RepositoryRulesetConditionsPtrOutput {
	return i.ToRepositoryRulesetConditionsPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetConditionsPtrType) ToRepositoryRulesetConditionsPtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsPtrOutput)
}

type RepositoryRulesetConditionsOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetConditions)(nil)).Elem()
}

func (o RepositoryRulesetConditionsOutput) ToRepositoryRulesetConditionsOutput() RepositoryRulesetConditionsOutput {
	return o
}

func (o RepositoryRulesetConditionsOutput) ToRepositoryRulesetConditionsOutputWithContext(ctx context.Context) RepositoryRulesetConditionsOutput {
	return o
}

func (o RepositoryRulesetConditionsOutput) ToRepositoryRulesetConditionsPtrOutput() RepositoryRulesetConditionsPtrOutput {
	return o.ToRepositoryRulesetConditionsPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetConditionsOutput) ToRepositoryRulesetConditionsPtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetConditions) *RepositoryRulesetConditions {
		return &v
	}).(RepositoryRulesetConditionsPtrOutput)
}

// (Block List, Min: 1, Max: 1) (see below for nested schema)
func (o RepositoryRulesetConditionsOutput) RefName() RepositoryRulesetConditionsRefNameOutput {
	return o.ApplyT(func(v RepositoryRulesetConditions) RepositoryRulesetConditionsRefName { return v.RefName }).(RepositoryRulesetConditionsRefNameOutput)
}

type RepositoryRulesetConditionsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetConditions)(nil)).Elem()
}

func (o RepositoryRulesetConditionsPtrOutput) ToRepositoryRulesetConditionsPtrOutput() RepositoryRulesetConditionsPtrOutput {
	return o
}

func (o RepositoryRulesetConditionsPtrOutput) ToRepositoryRulesetConditionsPtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsPtrOutput {
	return o
}

func (o RepositoryRulesetConditionsPtrOutput) Elem() RepositoryRulesetConditionsOutput {
	return o.ApplyT(func(v *RepositoryRulesetConditions) RepositoryRulesetConditions {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetConditions
		return ret
	}).(RepositoryRulesetConditionsOutput)
}

// (Block List, Min: 1, Max: 1) (see below for nested schema)
func (o RepositoryRulesetConditionsPtrOutput) RefName() RepositoryRulesetConditionsRefNamePtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetConditions) *RepositoryRulesetConditionsRefName {
		if v == nil {
			return nil
		}
		return &v.RefName
	}).(RepositoryRulesetConditionsRefNamePtrOutput)
}

type RepositoryRulesetConditionsRefName struct {
	// (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes []string `pulumi:"excludes"`
	// (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Includes []string `pulumi:"includes"`
}

// RepositoryRulesetConditionsRefNameInput is an input type that accepts RepositoryRulesetConditionsRefNameArgs and RepositoryRulesetConditionsRefNameOutput values.
// You can construct a concrete instance of `RepositoryRulesetConditionsRefNameInput` via:
//
//	RepositoryRulesetConditionsRefNameArgs{...}
type RepositoryRulesetConditionsRefNameInput interface {
	pulumi.Input

	ToRepositoryRulesetConditionsRefNameOutput() RepositoryRulesetConditionsRefNameOutput
	ToRepositoryRulesetConditionsRefNameOutputWithContext(context.Context) RepositoryRulesetConditionsRefNameOutput
}

type RepositoryRulesetConditionsRefNameArgs struct {
	// (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
}

func (RepositoryRulesetConditionsRefNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetConditionsRefName)(nil)).Elem()
}

func (i RepositoryRulesetConditionsRefNameArgs) ToRepositoryRulesetConditionsRefNameOutput() RepositoryRulesetConditionsRefNameOutput {
	return i.ToRepositoryRulesetConditionsRefNameOutputWithContext(context.Background())
}

func (i RepositoryRulesetConditionsRefNameArgs) ToRepositoryRulesetConditionsRefNameOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsRefNameOutput)
}

func (i RepositoryRulesetConditionsRefNameArgs) ToRepositoryRulesetConditionsRefNamePtrOutput() RepositoryRulesetConditionsRefNamePtrOutput {
	return i.ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetConditionsRefNameArgs) ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsRefNameOutput).ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(ctx)
}

// RepositoryRulesetConditionsRefNamePtrInput is an input type that accepts RepositoryRulesetConditionsRefNameArgs, RepositoryRulesetConditionsRefNamePtr and RepositoryRulesetConditionsRefNamePtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetConditionsRefNamePtrInput` via:
//
//	        RepositoryRulesetConditionsRefNameArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetConditionsRefNamePtrInput interface {
	pulumi.Input

	ToRepositoryRulesetConditionsRefNamePtrOutput() RepositoryRulesetConditionsRefNamePtrOutput
	ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(context.Context) RepositoryRulesetConditionsRefNamePtrOutput
}

type repositoryRulesetConditionsRefNamePtrType RepositoryRulesetConditionsRefNameArgs

func RepositoryRulesetConditionsRefNamePtr(v *RepositoryRulesetConditionsRefNameArgs) RepositoryRulesetConditionsRefNamePtrInput {
	return (*repositoryRulesetConditionsRefNamePtrType)(v)
}

func (*repositoryRulesetConditionsRefNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetConditionsRefName)(nil)).Elem()
}

func (i *repositoryRulesetConditionsRefNamePtrType) ToRepositoryRulesetConditionsRefNamePtrOutput() RepositoryRulesetConditionsRefNamePtrOutput {
	return i.ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetConditionsRefNamePtrType) ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetConditionsRefNamePtrOutput)
}

type RepositoryRulesetConditionsRefNameOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetConditionsRefNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetConditionsRefName)(nil)).Elem()
}

func (o RepositoryRulesetConditionsRefNameOutput) ToRepositoryRulesetConditionsRefNameOutput() RepositoryRulesetConditionsRefNameOutput {
	return o
}

func (o RepositoryRulesetConditionsRefNameOutput) ToRepositoryRulesetConditionsRefNameOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNameOutput {
	return o
}

func (o RepositoryRulesetConditionsRefNameOutput) ToRepositoryRulesetConditionsRefNamePtrOutput() RepositoryRulesetConditionsRefNamePtrOutput {
	return o.ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetConditionsRefNameOutput) ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetConditionsRefName) *RepositoryRulesetConditionsRefName {
		return &v
	}).(RepositoryRulesetConditionsRefNamePtrOutput)
}

// (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o RepositoryRulesetConditionsRefNameOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryRulesetConditionsRefName) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
func (o RepositoryRulesetConditionsRefNameOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryRulesetConditionsRefName) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

type RepositoryRulesetConditionsRefNamePtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetConditionsRefNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetConditionsRefName)(nil)).Elem()
}

func (o RepositoryRulesetConditionsRefNamePtrOutput) ToRepositoryRulesetConditionsRefNamePtrOutput() RepositoryRulesetConditionsRefNamePtrOutput {
	return o
}

func (o RepositoryRulesetConditionsRefNamePtrOutput) ToRepositoryRulesetConditionsRefNamePtrOutputWithContext(ctx context.Context) RepositoryRulesetConditionsRefNamePtrOutput {
	return o
}

func (o RepositoryRulesetConditionsRefNamePtrOutput) Elem() RepositoryRulesetConditionsRefNameOutput {
	return o.ApplyT(func(v *RepositoryRulesetConditionsRefName) RepositoryRulesetConditionsRefName {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetConditionsRefName
		return ret
	}).(RepositoryRulesetConditionsRefNameOutput)
}

// (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
func (o RepositoryRulesetConditionsRefNamePtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryRulesetConditionsRefName) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
func (o RepositoryRulesetConditionsRefNamePtrOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryRulesetConditionsRefName) []string {
		if v == nil {
			return nil
		}
		return v.Includes
	}).(pulumi.StringArrayOutput)
}

type RepositoryRulesetRules struct {
	// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applied to rulesets with target `branch`. (see below for nested schema)
	BranchNamePattern *RepositoryRulesetRulesBranchNamePattern `pulumi:"branchNamePattern"`
	// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitAuthorEmailPattern *RepositoryRulesetRulesCommitAuthorEmailPattern `pulumi:"commitAuthorEmailPattern"`
	// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitMessagePattern *RepositoryRulesetRulesCommitMessagePattern `pulumi:"commitMessagePattern"`
	// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitterEmailPattern *RepositoryRulesetRulesCommitterEmailPattern `pulumi:"committerEmailPattern"`
	// (Boolean) Only allow users with bypass permission to create matching refs.
	Creation *bool `pulumi:"creation"`
	// (Boolean) Only allow users with bypass permissions to delete matching refs.
	Deletion *bool `pulumi:"deletion"`
	// (Boolean) Prevent users with push access from force pushing to branches.
	NonFastForward *bool `pulumi:"nonFastForward"`
	// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
	PullRequest *RepositoryRulesetRulesPullRequest `pulumi:"pullRequest"`
	// (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
	RequiredDeployments *RepositoryRulesetRulesRequiredDeployments `pulumi:"requiredDeployments"`
	// (Boolean) Prevent merge commits from being pushed to matching branches.
	RequiredLinearHistory *bool `pulumi:"requiredLinearHistory"`
	// (Boolean) Commits pushed to matching branches must have verified signatures.
	RequiredSignatures *bool `pulumi:"requiredSignatures"`
	// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
	RequiredStatusChecks *RepositoryRulesetRulesRequiredStatusChecks `pulumi:"requiredStatusChecks"`
	// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applied to rulesets with target `tag`. (see below for nested schema)
	TagNamePattern *RepositoryRulesetRulesTagNamePattern `pulumi:"tagNamePattern"`
	// (Boolean) Only allow users with bypass permission to update matching refs.
	Update *bool `pulumi:"update"`
	// (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
	UpdateAllowsFetchAndMerge *bool `pulumi:"updateAllowsFetchAndMerge"`
}

// RepositoryRulesetRulesInput is an input type that accepts RepositoryRulesetRulesArgs and RepositoryRulesetRulesOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesInput` via:
//
//	RepositoryRulesetRulesArgs{...}
type RepositoryRulesetRulesInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesOutput() RepositoryRulesetRulesOutput
	ToRepositoryRulesetRulesOutputWithContext(context.Context) RepositoryRulesetRulesOutput
}

type RepositoryRulesetRulesArgs struct {
	// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applied to rulesets with target `branch`. (see below for nested schema)
	BranchNamePattern RepositoryRulesetRulesBranchNamePatternPtrInput `pulumi:"branchNamePattern"`
	// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitAuthorEmailPattern RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput `pulumi:"commitAuthorEmailPattern"`
	// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitMessagePattern RepositoryRulesetRulesCommitMessagePatternPtrInput `pulumi:"commitMessagePattern"`
	// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
	CommitterEmailPattern RepositoryRulesetRulesCommitterEmailPatternPtrInput `pulumi:"committerEmailPattern"`
	// (Boolean) Only allow users with bypass permission to create matching refs.
	Creation pulumi.BoolPtrInput `pulumi:"creation"`
	// (Boolean) Only allow users with bypass permissions to delete matching refs.
	Deletion pulumi.BoolPtrInput `pulumi:"deletion"`
	// (Boolean) Prevent users with push access from force pushing to branches.
	NonFastForward pulumi.BoolPtrInput `pulumi:"nonFastForward"`
	// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
	PullRequest RepositoryRulesetRulesPullRequestPtrInput `pulumi:"pullRequest"`
	// (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
	RequiredDeployments RepositoryRulesetRulesRequiredDeploymentsPtrInput `pulumi:"requiredDeployments"`
	// (Boolean) Prevent merge commits from being pushed to matching branches.
	RequiredLinearHistory pulumi.BoolPtrInput `pulumi:"requiredLinearHistory"`
	// (Boolean) Commits pushed to matching branches must have verified signatures.
	RequiredSignatures pulumi.BoolPtrInput `pulumi:"requiredSignatures"`
	// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
	RequiredStatusChecks RepositoryRulesetRulesRequiredStatusChecksPtrInput `pulumi:"requiredStatusChecks"`
	// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applied to rulesets with target `tag`. (see below for nested schema)
	TagNamePattern RepositoryRulesetRulesTagNamePatternPtrInput `pulumi:"tagNamePattern"`
	// (Boolean) Only allow users with bypass permission to update matching refs.
	Update pulumi.BoolPtrInput `pulumi:"update"`
	// (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
	UpdateAllowsFetchAndMerge pulumi.BoolPtrInput `pulumi:"updateAllowsFetchAndMerge"`
}

func (RepositoryRulesetRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRules)(nil)).Elem()
}

func (i RepositoryRulesetRulesArgs) ToRepositoryRulesetRulesOutput() RepositoryRulesetRulesOutput {
	return i.ToRepositoryRulesetRulesOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesArgs) ToRepositoryRulesetRulesOutputWithContext(ctx context.Context) RepositoryRulesetRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesOutput)
}

func (i RepositoryRulesetRulesArgs) ToRepositoryRulesetRulesPtrOutput() RepositoryRulesetRulesPtrOutput {
	return i.ToRepositoryRulesetRulesPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesArgs) ToRepositoryRulesetRulesPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesOutput).ToRepositoryRulesetRulesPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesPtrInput is an input type that accepts RepositoryRulesetRulesArgs, RepositoryRulesetRulesPtr and RepositoryRulesetRulesPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesPtrInput` via:
//
//	        RepositoryRulesetRulesArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesPtrOutput() RepositoryRulesetRulesPtrOutput
	ToRepositoryRulesetRulesPtrOutputWithContext(context.Context) RepositoryRulesetRulesPtrOutput
}

type repositoryRulesetRulesPtrType RepositoryRulesetRulesArgs

func RepositoryRulesetRulesPtr(v *RepositoryRulesetRulesArgs) RepositoryRulesetRulesPtrInput {
	return (*repositoryRulesetRulesPtrType)(v)
}

func (*repositoryRulesetRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRules)(nil)).Elem()
}

func (i *repositoryRulesetRulesPtrType) ToRepositoryRulesetRulesPtrOutput() RepositoryRulesetRulesPtrOutput {
	return i.ToRepositoryRulesetRulesPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesPtrType) ToRepositoryRulesetRulesPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesPtrOutput)
}

type RepositoryRulesetRulesOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRules)(nil)).Elem()
}

func (o RepositoryRulesetRulesOutput) ToRepositoryRulesetRulesOutput() RepositoryRulesetRulesOutput {
	return o
}

func (o RepositoryRulesetRulesOutput) ToRepositoryRulesetRulesOutputWithContext(ctx context.Context) RepositoryRulesetRulesOutput {
	return o
}

func (o RepositoryRulesetRulesOutput) ToRepositoryRulesetRulesPtrOutput() RepositoryRulesetRulesPtrOutput {
	return o.ToRepositoryRulesetRulesPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesOutput) ToRepositoryRulesetRulesPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRules) *RepositoryRulesetRules {
		return &v
	}).(RepositoryRulesetRulesPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applied to rulesets with target `branch`. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) BranchNamePattern() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesBranchNamePattern { return v.BranchNamePattern }).(RepositoryRulesetRulesBranchNamePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) CommitAuthorEmailPattern() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesCommitAuthorEmailPattern {
		return v.CommitAuthorEmailPattern
	}).(RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) CommitMessagePattern() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesCommitMessagePattern {
		return v.CommitMessagePattern
	}).(RepositoryRulesetRulesCommitMessagePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) CommitterEmailPattern() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesCommitterEmailPattern {
		return v.CommitterEmailPattern
	}).(RepositoryRulesetRulesCommitterEmailPatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to create matching refs.
func (o RepositoryRulesetRulesOutput) Creation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.Creation }).(pulumi.BoolPtrOutput)
}

// (Boolean) Only allow users with bypass permissions to delete matching refs.
func (o RepositoryRulesetRulesOutput) Deletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.Deletion }).(pulumi.BoolPtrOutput)
}

// (Boolean) Prevent users with push access from force pushing to branches.
func (o RepositoryRulesetRulesOutput) NonFastForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.NonFastForward }).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) PullRequest() RepositoryRulesetRulesPullRequestPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesPullRequest { return v.PullRequest }).(RepositoryRulesetRulesPullRequestPtrOutput)
}

// (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) RequiredDeployments() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesRequiredDeployments {
		return v.RequiredDeployments
	}).(RepositoryRulesetRulesRequiredDeploymentsPtrOutput)
}

// (Boolean) Prevent merge commits from being pushed to matching branches.
func (o RepositoryRulesetRulesOutput) RequiredLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.RequiredLinearHistory }).(pulumi.BoolPtrOutput)
}

// (Boolean) Commits pushed to matching branches must have verified signatures.
func (o RepositoryRulesetRulesOutput) RequiredSignatures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.RequiredSignatures }).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) RequiredStatusChecks() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesRequiredStatusChecks {
		return v.RequiredStatusChecks
	}).(RepositoryRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applied to rulesets with target `tag`. (see below for nested schema)
func (o RepositoryRulesetRulesOutput) TagNamePattern() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *RepositoryRulesetRulesTagNamePattern { return v.TagNamePattern }).(RepositoryRulesetRulesTagNamePatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to update matching refs.
func (o RepositoryRulesetRulesOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.Update }).(pulumi.BoolPtrOutput)
}

// (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
func (o RepositoryRulesetRulesOutput) UpdateAllowsFetchAndMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRules) *bool { return v.UpdateAllowsFetchAndMerge }).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRules)(nil)).Elem()
}

func (o RepositoryRulesetRulesPtrOutput) ToRepositoryRulesetRulesPtrOutput() RepositoryRulesetRulesPtrOutput {
	return o
}

func (o RepositoryRulesetRulesPtrOutput) ToRepositoryRulesetRulesPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPtrOutput {
	return o
}

func (o RepositoryRulesetRulesPtrOutput) Elem() RepositoryRulesetRulesOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) RepositoryRulesetRules {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRules
		return ret
	}).(RepositoryRulesetRulesOutput)
}

// (Block List, Max: 1) Parameters to be used for the branchNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tagNamePattern` as it only applied to rulesets with target `branch`. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) BranchNamePattern() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesBranchNamePattern {
		if v == nil {
			return nil
		}
		return v.BranchNamePattern
	}).(RepositoryRulesetRulesBranchNamePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitAuthorEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) CommitAuthorEmailPattern() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesCommitAuthorEmailPattern {
		if v == nil {
			return nil
		}
		return v.CommitAuthorEmailPattern
	}).(RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the commitMessagePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) CommitMessagePattern() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesCommitMessagePattern {
		if v == nil {
			return nil
		}
		return v.CommitMessagePattern
	}).(RepositoryRulesetRulesCommitMessagePatternPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the committerEmailPattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) CommitterEmailPattern() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesCommitterEmailPattern {
		if v == nil {
			return nil
		}
		return v.CommitterEmailPattern
	}).(RepositoryRulesetRulesCommitterEmailPatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to create matching refs.
func (o RepositoryRulesetRulesPtrOutput) Creation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Creation
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Only allow users with bypass permissions to delete matching refs.
func (o RepositoryRulesetRulesPtrOutput) Deletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Deletion
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Prevent users with push access from force pushing to branches.
func (o RepositoryRulesetRulesPtrOutput) NonFastForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.NonFastForward
	}).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) PullRequest() RepositoryRulesetRulesPullRequestPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesPullRequest {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(RepositoryRulesetRulesPullRequestPtrOutput)
}

// (Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) RequiredDeployments() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesRequiredDeployments {
		if v == nil {
			return nil
		}
		return v.RequiredDeployments
	}).(RepositoryRulesetRulesRequiredDeploymentsPtrOutput)
}

// (Boolean) Prevent merge commits from being pushed to matching branches.
func (o RepositoryRulesetRulesPtrOutput) RequiredLinearHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredLinearHistory
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Commits pushed to matching branches must have verified signatures.
func (o RepositoryRulesetRulesPtrOutput) RequiredSignatures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredSignatures
	}).(pulumi.BoolPtrOutput)
}

// (Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) RequiredStatusChecks() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesRequiredStatusChecks {
		if v == nil {
			return nil
		}
		return v.RequiredStatusChecks
	}).(RepositoryRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block List, Max: 1) Parameters to be used for the tagNamePattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branchNamePattern` as it only applied to rulesets with target `tag`. (see below for nested schema)
func (o RepositoryRulesetRulesPtrOutput) TagNamePattern() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *RepositoryRulesetRulesTagNamePattern {
		if v == nil {
			return nil
		}
		return v.TagNamePattern
	}).(RepositoryRulesetRulesTagNamePatternPtrOutput)
}

// (Boolean) Only allow users with bypass permission to update matching refs.
func (o RepositoryRulesetRulesPtrOutput) Update() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.
func (o RepositoryRulesetRulesPtrOutput) UpdateAllowsFetchAndMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRules) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateAllowsFetchAndMerge
	}).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesBranchNamePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// RepositoryRulesetRulesBranchNamePatternInput is an input type that accepts RepositoryRulesetRulesBranchNamePatternArgs and RepositoryRulesetRulesBranchNamePatternOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesBranchNamePatternInput` via:
//
//	RepositoryRulesetRulesBranchNamePatternArgs{...}
type RepositoryRulesetRulesBranchNamePatternInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesBranchNamePatternOutput() RepositoryRulesetRulesBranchNamePatternOutput
	ToRepositoryRulesetRulesBranchNamePatternOutputWithContext(context.Context) RepositoryRulesetRulesBranchNamePatternOutput
}

type RepositoryRulesetRulesBranchNamePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (RepositoryRulesetRulesBranchNamePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (i RepositoryRulesetRulesBranchNamePatternArgs) ToRepositoryRulesetRulesBranchNamePatternOutput() RepositoryRulesetRulesBranchNamePatternOutput {
	return i.ToRepositoryRulesetRulesBranchNamePatternOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesBranchNamePatternArgs) ToRepositoryRulesetRulesBranchNamePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesBranchNamePatternOutput)
}

func (i RepositoryRulesetRulesBranchNamePatternArgs) ToRepositoryRulesetRulesBranchNamePatternPtrOutput() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return i.ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesBranchNamePatternArgs) ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesBranchNamePatternOutput).ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesBranchNamePatternPtrInput is an input type that accepts RepositoryRulesetRulesBranchNamePatternArgs, RepositoryRulesetRulesBranchNamePatternPtr and RepositoryRulesetRulesBranchNamePatternPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesBranchNamePatternPtrInput` via:
//
//	        RepositoryRulesetRulesBranchNamePatternArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesBranchNamePatternPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesBranchNamePatternPtrOutput() RepositoryRulesetRulesBranchNamePatternPtrOutput
	ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(context.Context) RepositoryRulesetRulesBranchNamePatternPtrOutput
}

type repositoryRulesetRulesBranchNamePatternPtrType RepositoryRulesetRulesBranchNamePatternArgs

func RepositoryRulesetRulesBranchNamePatternPtr(v *RepositoryRulesetRulesBranchNamePatternArgs) RepositoryRulesetRulesBranchNamePatternPtrInput {
	return (*repositoryRulesetRulesBranchNamePatternPtrType)(v)
}

func (*repositoryRulesetRulesBranchNamePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (i *repositoryRulesetRulesBranchNamePatternPtrType) ToRepositoryRulesetRulesBranchNamePatternPtrOutput() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return i.ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesBranchNamePatternPtrType) ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesBranchNamePatternPtrOutput)
}

type RepositoryRulesetRulesBranchNamePatternOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesBranchNamePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesBranchNamePatternOutput) ToRepositoryRulesetRulesBranchNamePatternOutput() RepositoryRulesetRulesBranchNamePatternOutput {
	return o
}

func (o RepositoryRulesetRulesBranchNamePatternOutput) ToRepositoryRulesetRulesBranchNamePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternOutput {
	return o
}

func (o RepositoryRulesetRulesBranchNamePatternOutput) ToRepositoryRulesetRulesBranchNamePatternPtrOutput() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o.ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesBranchNamePatternOutput) ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesBranchNamePattern) *RepositoryRulesetRulesBranchNamePattern {
		return &v
	}).(RepositoryRulesetRulesBranchNamePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesBranchNamePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesBranchNamePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesBranchNamePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesBranchNamePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesBranchNamePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesBranchNamePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesBranchNamePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesBranchNamePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type RepositoryRulesetRulesBranchNamePatternPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesBranchNamePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesBranchNamePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) ToRepositoryRulesetRulesBranchNamePatternPtrOutput() RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) ToRepositoryRulesetRulesBranchNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesBranchNamePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) Elem() RepositoryRulesetRulesBranchNamePatternOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesBranchNamePattern) RepositoryRulesetRulesBranchNamePattern {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesBranchNamePattern
		return ret
	}).(RepositoryRulesetRulesBranchNamePatternOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesBranchNamePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesBranchNamePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesBranchNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type RepositoryRulesetRulesCommitAuthorEmailPattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// RepositoryRulesetRulesCommitAuthorEmailPatternInput is an input type that accepts RepositoryRulesetRulesCommitAuthorEmailPatternArgs and RepositoryRulesetRulesCommitAuthorEmailPatternOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitAuthorEmailPatternInput` via:
//
//	RepositoryRulesetRulesCommitAuthorEmailPatternArgs{...}
type RepositoryRulesetRulesCommitAuthorEmailPatternInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitAuthorEmailPatternOutput() RepositoryRulesetRulesCommitAuthorEmailPatternOutput
	ToRepositoryRulesetRulesCommitAuthorEmailPatternOutputWithContext(context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternOutput
}

type RepositoryRulesetRulesCommitAuthorEmailPatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (RepositoryRulesetRulesCommitAuthorEmailPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (i RepositoryRulesetRulesCommitAuthorEmailPatternArgs) ToRepositoryRulesetRulesCommitAuthorEmailPatternOutput() RepositoryRulesetRulesCommitAuthorEmailPatternOutput {
	return i.ToRepositoryRulesetRulesCommitAuthorEmailPatternOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitAuthorEmailPatternArgs) ToRepositoryRulesetRulesCommitAuthorEmailPatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitAuthorEmailPatternOutput)
}

func (i RepositoryRulesetRulesCommitAuthorEmailPatternArgs) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitAuthorEmailPatternArgs) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitAuthorEmailPatternOutput).ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput is an input type that accepts RepositoryRulesetRulesCommitAuthorEmailPatternArgs, RepositoryRulesetRulesCommitAuthorEmailPatternPtr and RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput` via:
//
//	        RepositoryRulesetRulesCommitAuthorEmailPatternArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput
	ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput
}

type repositoryRulesetRulesCommitAuthorEmailPatternPtrType RepositoryRulesetRulesCommitAuthorEmailPatternArgs

func RepositoryRulesetRulesCommitAuthorEmailPatternPtr(v *RepositoryRulesetRulesCommitAuthorEmailPatternArgs) RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput {
	return (*repositoryRulesetRulesCommitAuthorEmailPatternPtrType)(v)
}

func (*repositoryRulesetRulesCommitAuthorEmailPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (i *repositoryRulesetRulesCommitAuthorEmailPatternPtrType) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesCommitAuthorEmailPatternPtrType) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

type RepositoryRulesetRulesCommitAuthorEmailPatternOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitAuthorEmailPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternOutput() RepositoryRulesetRulesCommitAuthorEmailPatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesCommitAuthorEmailPattern) *RepositoryRulesetRulesCommitAuthorEmailPattern {
		return &v
	}).(RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitAuthorEmailPattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitAuthorEmailPattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitAuthorEmailPattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitAuthorEmailPattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitAuthorEmailPattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput() RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) ToRepositoryRulesetRulesCommitAuthorEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) Elem() RepositoryRulesetRulesCommitAuthorEmailPatternOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitAuthorEmailPattern) RepositoryRulesetRulesCommitAuthorEmailPattern {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesCommitAuthorEmailPattern
		return ret
	}).(RepositoryRulesetRulesCommitAuthorEmailPatternOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitAuthorEmailPattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitAuthorEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type RepositoryRulesetRulesCommitMessagePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// RepositoryRulesetRulesCommitMessagePatternInput is an input type that accepts RepositoryRulesetRulesCommitMessagePatternArgs and RepositoryRulesetRulesCommitMessagePatternOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitMessagePatternInput` via:
//
//	RepositoryRulesetRulesCommitMessagePatternArgs{...}
type RepositoryRulesetRulesCommitMessagePatternInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitMessagePatternOutput() RepositoryRulesetRulesCommitMessagePatternOutput
	ToRepositoryRulesetRulesCommitMessagePatternOutputWithContext(context.Context) RepositoryRulesetRulesCommitMessagePatternOutput
}

type RepositoryRulesetRulesCommitMessagePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (RepositoryRulesetRulesCommitMessagePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (i RepositoryRulesetRulesCommitMessagePatternArgs) ToRepositoryRulesetRulesCommitMessagePatternOutput() RepositoryRulesetRulesCommitMessagePatternOutput {
	return i.ToRepositoryRulesetRulesCommitMessagePatternOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitMessagePatternArgs) ToRepositoryRulesetRulesCommitMessagePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitMessagePatternOutput)
}

func (i RepositoryRulesetRulesCommitMessagePatternArgs) ToRepositoryRulesetRulesCommitMessagePatternPtrOutput() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitMessagePatternArgs) ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitMessagePatternOutput).ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesCommitMessagePatternPtrInput is an input type that accepts RepositoryRulesetRulesCommitMessagePatternArgs, RepositoryRulesetRulesCommitMessagePatternPtr and RepositoryRulesetRulesCommitMessagePatternPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitMessagePatternPtrInput` via:
//
//	        RepositoryRulesetRulesCommitMessagePatternArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesCommitMessagePatternPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitMessagePatternPtrOutput() RepositoryRulesetRulesCommitMessagePatternPtrOutput
	ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Context) RepositoryRulesetRulesCommitMessagePatternPtrOutput
}

type repositoryRulesetRulesCommitMessagePatternPtrType RepositoryRulesetRulesCommitMessagePatternArgs

func RepositoryRulesetRulesCommitMessagePatternPtr(v *RepositoryRulesetRulesCommitMessagePatternArgs) RepositoryRulesetRulesCommitMessagePatternPtrInput {
	return (*repositoryRulesetRulesCommitMessagePatternPtrType)(v)
}

func (*repositoryRulesetRulesCommitMessagePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (i *repositoryRulesetRulesCommitMessagePatternPtrType) ToRepositoryRulesetRulesCommitMessagePatternPtrOutput() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesCommitMessagePatternPtrType) ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitMessagePatternPtrOutput)
}

type RepositoryRulesetRulesCommitMessagePatternOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitMessagePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitMessagePatternOutput) ToRepositoryRulesetRulesCommitMessagePatternOutput() RepositoryRulesetRulesCommitMessagePatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitMessagePatternOutput) ToRepositoryRulesetRulesCommitMessagePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitMessagePatternOutput) ToRepositoryRulesetRulesCommitMessagePatternPtrOutput() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o.ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesCommitMessagePatternOutput) ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesCommitMessagePattern) *RepositoryRulesetRulesCommitMessagePattern {
		return &v
	}).(RepositoryRulesetRulesCommitMessagePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitMessagePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitMessagePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitMessagePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitMessagePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitMessagePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitMessagePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitMessagePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitMessagePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type RepositoryRulesetRulesCommitMessagePatternPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitMessagePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitMessagePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) ToRepositoryRulesetRulesCommitMessagePatternPtrOutput() RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) ToRepositoryRulesetRulesCommitMessagePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitMessagePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) Elem() RepositoryRulesetRulesCommitMessagePatternOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitMessagePattern) RepositoryRulesetRulesCommitMessagePattern {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesCommitMessagePattern
		return ret
	}).(RepositoryRulesetRulesCommitMessagePatternOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitMessagePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitMessagePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitMessagePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type RepositoryRulesetRulesCommitterEmailPattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// RepositoryRulesetRulesCommitterEmailPatternInput is an input type that accepts RepositoryRulesetRulesCommitterEmailPatternArgs and RepositoryRulesetRulesCommitterEmailPatternOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitterEmailPatternInput` via:
//
//	RepositoryRulesetRulesCommitterEmailPatternArgs{...}
type RepositoryRulesetRulesCommitterEmailPatternInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitterEmailPatternOutput() RepositoryRulesetRulesCommitterEmailPatternOutput
	ToRepositoryRulesetRulesCommitterEmailPatternOutputWithContext(context.Context) RepositoryRulesetRulesCommitterEmailPatternOutput
}

type RepositoryRulesetRulesCommitterEmailPatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (RepositoryRulesetRulesCommitterEmailPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (i RepositoryRulesetRulesCommitterEmailPatternArgs) ToRepositoryRulesetRulesCommitterEmailPatternOutput() RepositoryRulesetRulesCommitterEmailPatternOutput {
	return i.ToRepositoryRulesetRulesCommitterEmailPatternOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitterEmailPatternArgs) ToRepositoryRulesetRulesCommitterEmailPatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitterEmailPatternOutput)
}

func (i RepositoryRulesetRulesCommitterEmailPatternArgs) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutput() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesCommitterEmailPatternArgs) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitterEmailPatternOutput).ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesCommitterEmailPatternPtrInput is an input type that accepts RepositoryRulesetRulesCommitterEmailPatternArgs, RepositoryRulesetRulesCommitterEmailPatternPtr and RepositoryRulesetRulesCommitterEmailPatternPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesCommitterEmailPatternPtrInput` via:
//
//	        RepositoryRulesetRulesCommitterEmailPatternArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesCommitterEmailPatternPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesCommitterEmailPatternPtrOutput() RepositoryRulesetRulesCommitterEmailPatternPtrOutput
	ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Context) RepositoryRulesetRulesCommitterEmailPatternPtrOutput
}

type repositoryRulesetRulesCommitterEmailPatternPtrType RepositoryRulesetRulesCommitterEmailPatternArgs

func RepositoryRulesetRulesCommitterEmailPatternPtr(v *RepositoryRulesetRulesCommitterEmailPatternArgs) RepositoryRulesetRulesCommitterEmailPatternPtrInput {
	return (*repositoryRulesetRulesCommitterEmailPatternPtrType)(v)
}

func (*repositoryRulesetRulesCommitterEmailPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (i *repositoryRulesetRulesCommitterEmailPatternPtrType) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutput() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return i.ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesCommitterEmailPatternPtrType) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesCommitterEmailPatternPtrOutput)
}

type RepositoryRulesetRulesCommitterEmailPatternOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitterEmailPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitterEmailPatternOutput) ToRepositoryRulesetRulesCommitterEmailPatternOutput() RepositoryRulesetRulesCommitterEmailPatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitterEmailPatternOutput) ToRepositoryRulesetRulesCommitterEmailPatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternOutput {
	return o
}

func (o RepositoryRulesetRulesCommitterEmailPatternOutput) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutput() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesCommitterEmailPatternOutput) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesCommitterEmailPattern) *RepositoryRulesetRulesCommitterEmailPattern {
		return &v
	}).(RepositoryRulesetRulesCommitterEmailPatternPtrOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitterEmailPatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitterEmailPattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitterEmailPatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitterEmailPattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitterEmailPatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitterEmailPattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitterEmailPatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesCommitterEmailPattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type RepositoryRulesetRulesCommitterEmailPatternPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesCommitterEmailPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesCommitterEmailPattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutput() RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) ToRepositoryRulesetRulesCommitterEmailPatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesCommitterEmailPatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) Elem() RepositoryRulesetRulesCommitterEmailPatternOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitterEmailPattern) RepositoryRulesetRulesCommitterEmailPattern {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesCommitterEmailPattern
		return ret
	}).(RepositoryRulesetRulesCommitterEmailPatternOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitterEmailPattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesCommitterEmailPatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesCommitterEmailPattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type RepositoryRulesetRulesPullRequest struct {
	// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
	DismissStaleReviewsOnPush *bool `pulumi:"dismissStaleReviewsOnPush"`
	// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
	RequireCodeOwnerReview *bool `pulumi:"requireCodeOwnerReview"`
	// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
	RequireLastPushApproval *bool `pulumi:"requireLastPushApproval"`
	// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
	RequiredApprovingReviewCount *int `pulumi:"requiredApprovingReviewCount"`
	// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
	RequiredReviewThreadResolution *bool `pulumi:"requiredReviewThreadResolution"`
}

// RepositoryRulesetRulesPullRequestInput is an input type that accepts RepositoryRulesetRulesPullRequestArgs and RepositoryRulesetRulesPullRequestOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesPullRequestInput` via:
//
//	RepositoryRulesetRulesPullRequestArgs{...}
type RepositoryRulesetRulesPullRequestInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesPullRequestOutput() RepositoryRulesetRulesPullRequestOutput
	ToRepositoryRulesetRulesPullRequestOutputWithContext(context.Context) RepositoryRulesetRulesPullRequestOutput
}

type RepositoryRulesetRulesPullRequestArgs struct {
	// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
	DismissStaleReviewsOnPush pulumi.BoolPtrInput `pulumi:"dismissStaleReviewsOnPush"`
	// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
	RequireCodeOwnerReview pulumi.BoolPtrInput `pulumi:"requireCodeOwnerReview"`
	// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
	RequireLastPushApproval pulumi.BoolPtrInput `pulumi:"requireLastPushApproval"`
	// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
	RequiredApprovingReviewCount pulumi.IntPtrInput `pulumi:"requiredApprovingReviewCount"`
	// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
	RequiredReviewThreadResolution pulumi.BoolPtrInput `pulumi:"requiredReviewThreadResolution"`
}

func (RepositoryRulesetRulesPullRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesPullRequest)(nil)).Elem()
}

func (i RepositoryRulesetRulesPullRequestArgs) ToRepositoryRulesetRulesPullRequestOutput() RepositoryRulesetRulesPullRequestOutput {
	return i.ToRepositoryRulesetRulesPullRequestOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesPullRequestArgs) ToRepositoryRulesetRulesPullRequestOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesPullRequestOutput)
}

func (i RepositoryRulesetRulesPullRequestArgs) ToRepositoryRulesetRulesPullRequestPtrOutput() RepositoryRulesetRulesPullRequestPtrOutput {
	return i.ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesPullRequestArgs) ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesPullRequestOutput).ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesPullRequestPtrInput is an input type that accepts RepositoryRulesetRulesPullRequestArgs, RepositoryRulesetRulesPullRequestPtr and RepositoryRulesetRulesPullRequestPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesPullRequestPtrInput` via:
//
//	        RepositoryRulesetRulesPullRequestArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesPullRequestPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesPullRequestPtrOutput() RepositoryRulesetRulesPullRequestPtrOutput
	ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(context.Context) RepositoryRulesetRulesPullRequestPtrOutput
}

type repositoryRulesetRulesPullRequestPtrType RepositoryRulesetRulesPullRequestArgs

func RepositoryRulesetRulesPullRequestPtr(v *RepositoryRulesetRulesPullRequestArgs) RepositoryRulesetRulesPullRequestPtrInput {
	return (*repositoryRulesetRulesPullRequestPtrType)(v)
}

func (*repositoryRulesetRulesPullRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesPullRequest)(nil)).Elem()
}

func (i *repositoryRulesetRulesPullRequestPtrType) ToRepositoryRulesetRulesPullRequestPtrOutput() RepositoryRulesetRulesPullRequestPtrOutput {
	return i.ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesPullRequestPtrType) ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesPullRequestPtrOutput)
}

type RepositoryRulesetRulesPullRequestOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesPullRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesPullRequest)(nil)).Elem()
}

func (o RepositoryRulesetRulesPullRequestOutput) ToRepositoryRulesetRulesPullRequestOutput() RepositoryRulesetRulesPullRequestOutput {
	return o
}

func (o RepositoryRulesetRulesPullRequestOutput) ToRepositoryRulesetRulesPullRequestOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestOutput {
	return o
}

func (o RepositoryRulesetRulesPullRequestOutput) ToRepositoryRulesetRulesPullRequestPtrOutput() RepositoryRulesetRulesPullRequestPtrOutput {
	return o.ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesPullRequestOutput) ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesPullRequest) *RepositoryRulesetRulesPullRequest {
		return &v
	}).(RepositoryRulesetRulesPullRequestPtrOutput)
}

// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestOutput) DismissStaleReviewsOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesPullRequest) *bool { return v.DismissStaleReviewsOnPush }).(pulumi.BoolPtrOutput)
}

// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestOutput) RequireCodeOwnerReview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesPullRequest) *bool { return v.RequireCodeOwnerReview }).(pulumi.BoolPtrOutput)
}

// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestOutput) RequireLastPushApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesPullRequest) *bool { return v.RequireLastPushApproval }).(pulumi.BoolPtrOutput)
}

// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
func (o RepositoryRulesetRulesPullRequestOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesPullRequest) *int { return v.RequiredApprovingReviewCount }).(pulumi.IntPtrOutput)
}

// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestOutput) RequiredReviewThreadResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesPullRequest) *bool { return v.RequiredReviewThreadResolution }).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesPullRequestPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesPullRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesPullRequest)(nil)).Elem()
}

func (o RepositoryRulesetRulesPullRequestPtrOutput) ToRepositoryRulesetRulesPullRequestPtrOutput() RepositoryRulesetRulesPullRequestPtrOutput {
	return o
}

func (o RepositoryRulesetRulesPullRequestPtrOutput) ToRepositoryRulesetRulesPullRequestPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesPullRequestPtrOutput {
	return o
}

func (o RepositoryRulesetRulesPullRequestPtrOutput) Elem() RepositoryRulesetRulesPullRequestOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) RepositoryRulesetRulesPullRequest {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesPullRequest
		return ret
	}).(RepositoryRulesetRulesPullRequestOutput)
}

// (Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestPtrOutput) DismissStaleReviewsOnPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.DismissStaleReviewsOnPush
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestPtrOutput) RequireCodeOwnerReview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequireCodeOwnerReview
	}).(pulumi.BoolPtrOutput)
}

// (Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestPtrOutput) RequireLastPushApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequireLastPushApproval
	}).(pulumi.BoolPtrOutput)
}

// (Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.
func (o RepositoryRulesetRulesPullRequestPtrOutput) RequiredApprovingReviewCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) *int {
		if v == nil {
			return nil
		}
		return v.RequiredApprovingReviewCount
	}).(pulumi.IntPtrOutput)
}

// (Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.
func (o RepositoryRulesetRulesPullRequestPtrOutput) RequiredReviewThreadResolution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesPullRequest) *bool {
		if v == nil {
			return nil
		}
		return v.RequiredReviewThreadResolution
	}).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesRequiredDeployments struct {
	// (List of String) The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments []string `pulumi:"requiredDeploymentEnvironments"`
}

// RepositoryRulesetRulesRequiredDeploymentsInput is an input type that accepts RepositoryRulesetRulesRequiredDeploymentsArgs and RepositoryRulesetRulesRequiredDeploymentsOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredDeploymentsInput` via:
//
//	RepositoryRulesetRulesRequiredDeploymentsArgs{...}
type RepositoryRulesetRulesRequiredDeploymentsInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredDeploymentsOutput() RepositoryRulesetRulesRequiredDeploymentsOutput
	ToRepositoryRulesetRulesRequiredDeploymentsOutputWithContext(context.Context) RepositoryRulesetRulesRequiredDeploymentsOutput
}

type RepositoryRulesetRulesRequiredDeploymentsArgs struct {
	// (List of String) The environments that must be successfully deployed to before branches can be merged.
	RequiredDeploymentEnvironments pulumi.StringArrayInput `pulumi:"requiredDeploymentEnvironments"`
}

func (RepositoryRulesetRulesRequiredDeploymentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredDeployments)(nil)).Elem()
}

func (i RepositoryRulesetRulesRequiredDeploymentsArgs) ToRepositoryRulesetRulesRequiredDeploymentsOutput() RepositoryRulesetRulesRequiredDeploymentsOutput {
	return i.ToRepositoryRulesetRulesRequiredDeploymentsOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredDeploymentsArgs) ToRepositoryRulesetRulesRequiredDeploymentsOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredDeploymentsOutput)
}

func (i RepositoryRulesetRulesRequiredDeploymentsArgs) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutput() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return i.ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredDeploymentsArgs) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredDeploymentsOutput).ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesRequiredDeploymentsPtrInput is an input type that accepts RepositoryRulesetRulesRequiredDeploymentsArgs, RepositoryRulesetRulesRequiredDeploymentsPtr and RepositoryRulesetRulesRequiredDeploymentsPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredDeploymentsPtrInput` via:
//
//	        RepositoryRulesetRulesRequiredDeploymentsArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesRequiredDeploymentsPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredDeploymentsPtrOutput() RepositoryRulesetRulesRequiredDeploymentsPtrOutput
	ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(context.Context) RepositoryRulesetRulesRequiredDeploymentsPtrOutput
}

type repositoryRulesetRulesRequiredDeploymentsPtrType RepositoryRulesetRulesRequiredDeploymentsArgs

func RepositoryRulesetRulesRequiredDeploymentsPtr(v *RepositoryRulesetRulesRequiredDeploymentsArgs) RepositoryRulesetRulesRequiredDeploymentsPtrInput {
	return (*repositoryRulesetRulesRequiredDeploymentsPtrType)(v)
}

func (*repositoryRulesetRulesRequiredDeploymentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesRequiredDeployments)(nil)).Elem()
}

func (i *repositoryRulesetRulesRequiredDeploymentsPtrType) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutput() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return i.ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesRequiredDeploymentsPtrType) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredDeploymentsPtrOutput)
}

type RepositoryRulesetRulesRequiredDeploymentsOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredDeploymentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredDeployments)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredDeploymentsOutput) ToRepositoryRulesetRulesRequiredDeploymentsOutput() RepositoryRulesetRulesRequiredDeploymentsOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredDeploymentsOutput) ToRepositoryRulesetRulesRequiredDeploymentsOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredDeploymentsOutput) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutput() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o.ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesRequiredDeploymentsOutput) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesRequiredDeployments) *RepositoryRulesetRulesRequiredDeployments {
		return &v
	}).(RepositoryRulesetRulesRequiredDeploymentsPtrOutput)
}

// (List of String) The environments that must be successfully deployed to before branches can be merged.
func (o RepositoryRulesetRulesRequiredDeploymentsOutput) RequiredDeploymentEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesRequiredDeployments) []string { return v.RequiredDeploymentEnvironments }).(pulumi.StringArrayOutput)
}

type RepositoryRulesetRulesRequiredDeploymentsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredDeploymentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesRequiredDeployments)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredDeploymentsPtrOutput) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutput() RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredDeploymentsPtrOutput) ToRepositoryRulesetRulesRequiredDeploymentsPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredDeploymentsPtrOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredDeploymentsPtrOutput) Elem() RepositoryRulesetRulesRequiredDeploymentsOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesRequiredDeployments) RepositoryRulesetRulesRequiredDeployments {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesRequiredDeployments
		return ret
	}).(RepositoryRulesetRulesRequiredDeploymentsOutput)
}

// (List of String) The environments that must be successfully deployed to before branches can be merged.
func (o RepositoryRulesetRulesRequiredDeploymentsPtrOutput) RequiredDeploymentEnvironments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesRequiredDeployments) []string {
		if v == nil {
			return nil
		}
		return v.RequiredDeploymentEnvironments
	}).(pulumi.StringArrayOutput)
}

type RepositoryRulesetRulesRequiredStatusChecks struct {
	// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
	RequiredChecks []RepositoryRulesetRulesRequiredStatusChecksRequiredCheck `pulumi:"requiredChecks"`
	// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
	StrictRequiredStatusChecksPolicy *bool `pulumi:"strictRequiredStatusChecksPolicy"`
}

// RepositoryRulesetRulesRequiredStatusChecksInput is an input type that accepts RepositoryRulesetRulesRequiredStatusChecksArgs and RepositoryRulesetRulesRequiredStatusChecksOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredStatusChecksInput` via:
//
//	RepositoryRulesetRulesRequiredStatusChecksArgs{...}
type RepositoryRulesetRulesRequiredStatusChecksInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredStatusChecksOutput() RepositoryRulesetRulesRequiredStatusChecksOutput
	ToRepositoryRulesetRulesRequiredStatusChecksOutputWithContext(context.Context) RepositoryRulesetRulesRequiredStatusChecksOutput
}

type RepositoryRulesetRulesRequiredStatusChecksArgs struct {
	// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
	RequiredChecks RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayInput `pulumi:"requiredChecks"`
	// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
	StrictRequiredStatusChecksPolicy pulumi.BoolPtrInput `pulumi:"strictRequiredStatusChecksPolicy"`
}

func (RepositoryRulesetRulesRequiredStatusChecksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (i RepositoryRulesetRulesRequiredStatusChecksArgs) ToRepositoryRulesetRulesRequiredStatusChecksOutput() RepositoryRulesetRulesRequiredStatusChecksOutput {
	return i.ToRepositoryRulesetRulesRequiredStatusChecksOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredStatusChecksArgs) ToRepositoryRulesetRulesRequiredStatusChecksOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredStatusChecksOutput)
}

func (i RepositoryRulesetRulesRequiredStatusChecksArgs) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutput() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return i.ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredStatusChecksArgs) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredStatusChecksOutput).ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesRequiredStatusChecksPtrInput is an input type that accepts RepositoryRulesetRulesRequiredStatusChecksArgs, RepositoryRulesetRulesRequiredStatusChecksPtr and RepositoryRulesetRulesRequiredStatusChecksPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredStatusChecksPtrInput` via:
//
//	        RepositoryRulesetRulesRequiredStatusChecksArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesRequiredStatusChecksPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredStatusChecksPtrOutput() RepositoryRulesetRulesRequiredStatusChecksPtrOutput
	ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Context) RepositoryRulesetRulesRequiredStatusChecksPtrOutput
}

type repositoryRulesetRulesRequiredStatusChecksPtrType RepositoryRulesetRulesRequiredStatusChecksArgs

func RepositoryRulesetRulesRequiredStatusChecksPtr(v *RepositoryRulesetRulesRequiredStatusChecksArgs) RepositoryRulesetRulesRequiredStatusChecksPtrInput {
	return (*repositoryRulesetRulesRequiredStatusChecksPtrType)(v)
}

func (*repositoryRulesetRulesRequiredStatusChecksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (i *repositoryRulesetRulesRequiredStatusChecksPtrType) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutput() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return i.ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesRequiredStatusChecksPtrType) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredStatusChecksPtrOutput)
}

type RepositoryRulesetRulesRequiredStatusChecksOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredStatusChecksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredStatusChecksOutput) ToRepositoryRulesetRulesRequiredStatusChecksOutput() RepositoryRulesetRulesRequiredStatusChecksOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksOutput) ToRepositoryRulesetRulesRequiredStatusChecksOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksOutput) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutput() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesRequiredStatusChecksOutput) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesRequiredStatusChecks) *RepositoryRulesetRulesRequiredStatusChecks {
		return &v
	}).(RepositoryRulesetRulesRequiredStatusChecksPtrOutput)
}

// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
func (o RepositoryRulesetRulesRequiredStatusChecksOutput) RequiredChecks() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesRequiredStatusChecks) []RepositoryRulesetRulesRequiredStatusChecksRequiredCheck {
		return v.RequiredChecks
	}).(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
func (o RepositoryRulesetRulesRequiredStatusChecksOutput) StrictRequiredStatusChecksPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesRequiredStatusChecks) *bool { return v.StrictRequiredStatusChecksPolicy }).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesRequiredStatusChecksPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredStatusChecksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesRequiredStatusChecks)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredStatusChecksPtrOutput) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutput() RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksPtrOutput) ToRepositoryRulesetRulesRequiredStatusChecksPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksPtrOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksPtrOutput) Elem() RepositoryRulesetRulesRequiredStatusChecksOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesRequiredStatusChecks) RepositoryRulesetRulesRequiredStatusChecks {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesRequiredStatusChecks
		return ret
	}).(RepositoryRulesetRulesRequiredStatusChecksOutput)
}

// (Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)
func (o RepositoryRulesetRulesRequiredStatusChecksPtrOutput) RequiredChecks() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesRequiredStatusChecks) []RepositoryRulesetRulesRequiredStatusChecksRequiredCheck {
		if v == nil {
			return nil
		}
		return v.RequiredChecks
	}).(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

// (Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
func (o RepositoryRulesetRulesRequiredStatusChecksPtrOutput) StrictRequiredStatusChecksPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesRequiredStatusChecks) *bool {
		if v == nil {
			return nil
		}
		return v.StrictRequiredStatusChecksPolicy
	}).(pulumi.BoolPtrOutput)
}

type RepositoryRulesetRulesRequiredStatusChecksRequiredCheck struct {
	// (String) The status check context name that must be present on the commit.
	Context string `pulumi:"context"`
	// (Number) The optional integration ID that this status check must originate from.
	IntegrationId *int `pulumi:"integrationId"`
}

// RepositoryRulesetRulesRequiredStatusChecksRequiredCheckInput is an input type that accepts RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs and RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredStatusChecksRequiredCheckInput` via:
//
//	RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs{...}
type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput
	ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput
}

type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs struct {
	// (String) The status check context name that must be present on the commit.
	Context pulumi.StringInput `pulumi:"context"`
	// (Number) The optional integration ID that this status check must originate from.
	IntegrationId pulumi.IntPtrInput `pulumi:"integrationId"`
}

func (RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (i RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return i.ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput)
}

// RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayInput is an input type that accepts RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray and RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayInput` via:
//
//	RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray{ RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs{...} }
type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput
	ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput
}

type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray []RepositoryRulesetRulesRequiredStatusChecksRequiredCheckInput

func (RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (i RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return i.ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput)
}

type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return o
}

// (String) The status check context name that must be present on the commit.
func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput) Context() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesRequiredStatusChecksRequiredCheck) string { return v.Context }).(pulumi.StringOutput)
}

// (Number) The optional integration ID that this status check must originate from.
func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput) IntegrationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesRequiredStatusChecksRequiredCheck) *int { return v.IntegrationId }).(pulumi.IntPtrOutput)
}

type RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryRulesetRulesRequiredStatusChecksRequiredCheck)(nil)).Elem()
}

func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput() RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) ToRepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutputWithContext(ctx context.Context) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput {
	return o
}

func (o RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput) Index(i pulumi.IntInput) RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryRulesetRulesRequiredStatusChecksRequiredCheck {
		return vs[0].([]RepositoryRulesetRulesRequiredStatusChecksRequiredCheck)[vs[1].(int)]
	}).(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput)
}

type RepositoryRulesetRulesTagNamePattern struct {
	// (String) The name of the ruleset.
	Name *string `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate *bool `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator string `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern string `pulumi:"pattern"`
}

// RepositoryRulesetRulesTagNamePatternInput is an input type that accepts RepositoryRulesetRulesTagNamePatternArgs and RepositoryRulesetRulesTagNamePatternOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesTagNamePatternInput` via:
//
//	RepositoryRulesetRulesTagNamePatternArgs{...}
type RepositoryRulesetRulesTagNamePatternInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesTagNamePatternOutput() RepositoryRulesetRulesTagNamePatternOutput
	ToRepositoryRulesetRulesTagNamePatternOutputWithContext(context.Context) RepositoryRulesetRulesTagNamePatternOutput
}

type RepositoryRulesetRulesTagNamePatternArgs struct {
	// (String) The name of the ruleset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Boolean) If true, the rule will fail if the pattern matches.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// (String) The pattern to match with.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (RepositoryRulesetRulesTagNamePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesTagNamePattern)(nil)).Elem()
}

func (i RepositoryRulesetRulesTagNamePatternArgs) ToRepositoryRulesetRulesTagNamePatternOutput() RepositoryRulesetRulesTagNamePatternOutput {
	return i.ToRepositoryRulesetRulesTagNamePatternOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesTagNamePatternArgs) ToRepositoryRulesetRulesTagNamePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesTagNamePatternOutput)
}

func (i RepositoryRulesetRulesTagNamePatternArgs) ToRepositoryRulesetRulesTagNamePatternPtrOutput() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return i.ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (i RepositoryRulesetRulesTagNamePatternArgs) ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesTagNamePatternOutput).ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(ctx)
}

// RepositoryRulesetRulesTagNamePatternPtrInput is an input type that accepts RepositoryRulesetRulesTagNamePatternArgs, RepositoryRulesetRulesTagNamePatternPtr and RepositoryRulesetRulesTagNamePatternPtrOutput values.
// You can construct a concrete instance of `RepositoryRulesetRulesTagNamePatternPtrInput` via:
//
//	        RepositoryRulesetRulesTagNamePatternArgs{...}
//
//	or:
//
//	        nil
type RepositoryRulesetRulesTagNamePatternPtrInput interface {
	pulumi.Input

	ToRepositoryRulesetRulesTagNamePatternPtrOutput() RepositoryRulesetRulesTagNamePatternPtrOutput
	ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(context.Context) RepositoryRulesetRulesTagNamePatternPtrOutput
}

type repositoryRulesetRulesTagNamePatternPtrType RepositoryRulesetRulesTagNamePatternArgs

func RepositoryRulesetRulesTagNamePatternPtr(v *RepositoryRulesetRulesTagNamePatternArgs) RepositoryRulesetRulesTagNamePatternPtrInput {
	return (*repositoryRulesetRulesTagNamePatternPtrType)(v)
}

func (*repositoryRulesetRulesTagNamePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesTagNamePattern)(nil)).Elem()
}

func (i *repositoryRulesetRulesTagNamePatternPtrType) ToRepositoryRulesetRulesTagNamePatternPtrOutput() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return i.ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (i *repositoryRulesetRulesTagNamePatternPtrType) ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRulesetRulesTagNamePatternPtrOutput)
}

type RepositoryRulesetRulesTagNamePatternOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesTagNamePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRulesetRulesTagNamePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesTagNamePatternOutput) ToRepositoryRulesetRulesTagNamePatternOutput() RepositoryRulesetRulesTagNamePatternOutput {
	return o
}

func (o RepositoryRulesetRulesTagNamePatternOutput) ToRepositoryRulesetRulesTagNamePatternOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternOutput {
	return o
}

func (o RepositoryRulesetRulesTagNamePatternOutput) ToRepositoryRulesetRulesTagNamePatternPtrOutput() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o.ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(context.Background())
}

func (o RepositoryRulesetRulesTagNamePatternOutput) ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRulesetRulesTagNamePattern) *RepositoryRulesetRulesTagNamePattern {
		return &v
	}).(RepositoryRulesetRulesTagNamePatternPtrOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesTagNamePatternOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesTagNamePattern) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesTagNamePatternOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesTagNamePattern) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesTagNamePatternOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesTagNamePattern) string { return v.Operator }).(pulumi.StringOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesTagNamePatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryRulesetRulesTagNamePattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type RepositoryRulesetRulesTagNamePatternPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRulesetRulesTagNamePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRulesetRulesTagNamePattern)(nil)).Elem()
}

func (o RepositoryRulesetRulesTagNamePatternPtrOutput) ToRepositoryRulesetRulesTagNamePatternPtrOutput() RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesTagNamePatternPtrOutput) ToRepositoryRulesetRulesTagNamePatternPtrOutputWithContext(ctx context.Context) RepositoryRulesetRulesTagNamePatternPtrOutput {
	return o
}

func (o RepositoryRulesetRulesTagNamePatternPtrOutput) Elem() RepositoryRulesetRulesTagNamePatternOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesTagNamePattern) RepositoryRulesetRulesTagNamePattern {
		if v != nil {
			return *v
		}
		var ret RepositoryRulesetRulesTagNamePattern
		return ret
	}).(RepositoryRulesetRulesTagNamePatternOutput)
}

// (String) The name of the ruleset.
func (o RepositoryRulesetRulesTagNamePatternPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Boolean) If true, the rule will fail if the pattern matches.
func (o RepositoryRulesetRulesTagNamePatternPtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesTagNamePattern) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// (String) The operator to use for matching. Can be one of: `startsWith`, `endsWith`, `contains`, `regex`.
func (o RepositoryRulesetRulesTagNamePatternPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// (String) The pattern to match with.
func (o RepositoryRulesetRulesTagNamePatternPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRulesetRulesTagNamePattern) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

type RepositorySecurityAndAnalysis struct {
	// The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository's visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
	AdvancedSecurity *RepositorySecurityAndAnalysisAdvancedSecurity `pulumi:"advancedSecurity"`
	// The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
	SecretScanning *RepositorySecurityAndAnalysisSecretScanning `pulumi:"secretScanning"`
	// The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
	SecretScanningPushProtection *RepositorySecurityAndAnalysisSecretScanningPushProtection `pulumi:"secretScanningPushProtection"`
}

// RepositorySecurityAndAnalysisInput is an input type that accepts RepositorySecurityAndAnalysisArgs and RepositorySecurityAndAnalysisOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisInput` via:
//
//	RepositorySecurityAndAnalysisArgs{...}
type RepositorySecurityAndAnalysisInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisOutput() RepositorySecurityAndAnalysisOutput
	ToRepositorySecurityAndAnalysisOutputWithContext(context.Context) RepositorySecurityAndAnalysisOutput
}

type RepositorySecurityAndAnalysisArgs struct {
	// The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository's visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
	AdvancedSecurity RepositorySecurityAndAnalysisAdvancedSecurityPtrInput `pulumi:"advancedSecurity"`
	// The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
	SecretScanning RepositorySecurityAndAnalysisSecretScanningPtrInput `pulumi:"secretScanning"`
	// The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
	SecretScanningPushProtection RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput `pulumi:"secretScanningPushProtection"`
}

func (RepositorySecurityAndAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysis)(nil)).Elem()
}

func (i RepositorySecurityAndAnalysisArgs) ToRepositorySecurityAndAnalysisOutput() RepositorySecurityAndAnalysisOutput {
	return i.ToRepositorySecurityAndAnalysisOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisArgs) ToRepositorySecurityAndAnalysisOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisOutput)
}

func (i RepositorySecurityAndAnalysisArgs) ToRepositorySecurityAndAnalysisPtrOutput() RepositorySecurityAndAnalysisPtrOutput {
	return i.ToRepositorySecurityAndAnalysisPtrOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisArgs) ToRepositorySecurityAndAnalysisPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisOutput).ToRepositorySecurityAndAnalysisPtrOutputWithContext(ctx)
}

// RepositorySecurityAndAnalysisPtrInput is an input type that accepts RepositorySecurityAndAnalysisArgs, RepositorySecurityAndAnalysisPtr and RepositorySecurityAndAnalysisPtrOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisPtrInput` via:
//
//	        RepositorySecurityAndAnalysisArgs{...}
//
//	or:
//
//	        nil
type RepositorySecurityAndAnalysisPtrInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisPtrOutput() RepositorySecurityAndAnalysisPtrOutput
	ToRepositorySecurityAndAnalysisPtrOutputWithContext(context.Context) RepositorySecurityAndAnalysisPtrOutput
}

type repositorySecurityAndAnalysisPtrType RepositorySecurityAndAnalysisArgs

func RepositorySecurityAndAnalysisPtr(v *RepositorySecurityAndAnalysisArgs) RepositorySecurityAndAnalysisPtrInput {
	return (*repositorySecurityAndAnalysisPtrType)(v)
}

func (*repositorySecurityAndAnalysisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysis)(nil)).Elem()
}

func (i *repositorySecurityAndAnalysisPtrType) ToRepositorySecurityAndAnalysisPtrOutput() RepositorySecurityAndAnalysisPtrOutput {
	return i.ToRepositorySecurityAndAnalysisPtrOutputWithContext(context.Background())
}

func (i *repositorySecurityAndAnalysisPtrType) ToRepositorySecurityAndAnalysisPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisPtrOutput)
}

type RepositorySecurityAndAnalysisOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysis)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisOutput) ToRepositorySecurityAndAnalysisOutput() RepositorySecurityAndAnalysisOutput {
	return o
}

func (o RepositorySecurityAndAnalysisOutput) ToRepositorySecurityAndAnalysisOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisOutput {
	return o
}

func (o RepositorySecurityAndAnalysisOutput) ToRepositorySecurityAndAnalysisPtrOutput() RepositorySecurityAndAnalysisPtrOutput {
	return o.ToRepositorySecurityAndAnalysisPtrOutputWithContext(context.Background())
}

func (o RepositorySecurityAndAnalysisOutput) ToRepositorySecurityAndAnalysisPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysis {
		return &v
	}).(RepositorySecurityAndAnalysisPtrOutput)
}

// The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository's visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
func (o RepositorySecurityAndAnalysisOutput) AdvancedSecurity() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisAdvancedSecurity {
		return v.AdvancedSecurity
	}).(RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput)
}

// The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
func (o RepositorySecurityAndAnalysisOutput) SecretScanning() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisSecretScanning {
		return v.SecretScanning
	}).(RepositorySecurityAndAnalysisSecretScanningPtrOutput)
}

// The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
func (o RepositorySecurityAndAnalysisOutput) SecretScanningPushProtection() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisSecretScanningPushProtection {
		return v.SecretScanningPushProtection
	}).(RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput)
}

type RepositorySecurityAndAnalysisPtrOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysis)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisPtrOutput) ToRepositorySecurityAndAnalysisPtrOutput() RepositorySecurityAndAnalysisPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisPtrOutput) ToRepositorySecurityAndAnalysisPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisPtrOutput) Elem() RepositorySecurityAndAnalysisOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysis) RepositorySecurityAndAnalysis {
		if v != nil {
			return *v
		}
		var ret RepositorySecurityAndAnalysis
		return ret
	}).(RepositorySecurityAndAnalysisOutput)
}

// The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository's visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
func (o RepositorySecurityAndAnalysisPtrOutput) AdvancedSecurity() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisAdvancedSecurity {
		if v == nil {
			return nil
		}
		return v.AdvancedSecurity
	}).(RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput)
}

// The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
func (o RepositorySecurityAndAnalysisPtrOutput) SecretScanning() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisSecretScanning {
		if v == nil {
			return nil
		}
		return v.SecretScanning
	}).(RepositorySecurityAndAnalysisSecretScanningPtrOutput)
}

// The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
func (o RepositorySecurityAndAnalysisPtrOutput) SecretScanningPushProtection() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysis) *RepositorySecurityAndAnalysisSecretScanningPushProtection {
		if v == nil {
			return nil
		}
		return v.SecretScanningPushProtection
	}).(RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput)
}

type RepositorySecurityAndAnalysisAdvancedSecurity struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status string `pulumi:"status"`
}

// RepositorySecurityAndAnalysisAdvancedSecurityInput is an input type that accepts RepositorySecurityAndAnalysisAdvancedSecurityArgs and RepositorySecurityAndAnalysisAdvancedSecurityOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisAdvancedSecurityInput` via:
//
//	RepositorySecurityAndAnalysisAdvancedSecurityArgs{...}
type RepositorySecurityAndAnalysisAdvancedSecurityInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisAdvancedSecurityOutput() RepositorySecurityAndAnalysisAdvancedSecurityOutput
	ToRepositorySecurityAndAnalysisAdvancedSecurityOutputWithContext(context.Context) RepositorySecurityAndAnalysisAdvancedSecurityOutput
}

type RepositorySecurityAndAnalysisAdvancedSecurityArgs struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RepositorySecurityAndAnalysisAdvancedSecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisAdvancedSecurity)(nil)).Elem()
}

func (i RepositorySecurityAndAnalysisAdvancedSecurityArgs) ToRepositorySecurityAndAnalysisAdvancedSecurityOutput() RepositorySecurityAndAnalysisAdvancedSecurityOutput {
	return i.ToRepositorySecurityAndAnalysisAdvancedSecurityOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisAdvancedSecurityArgs) ToRepositorySecurityAndAnalysisAdvancedSecurityOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisAdvancedSecurityOutput)
}

func (i RepositorySecurityAndAnalysisAdvancedSecurityArgs) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutput() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return i.ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisAdvancedSecurityArgs) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisAdvancedSecurityOutput).ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(ctx)
}

// RepositorySecurityAndAnalysisAdvancedSecurityPtrInput is an input type that accepts RepositorySecurityAndAnalysisAdvancedSecurityArgs, RepositorySecurityAndAnalysisAdvancedSecurityPtr and RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisAdvancedSecurityPtrInput` via:
//
//	        RepositorySecurityAndAnalysisAdvancedSecurityArgs{...}
//
//	or:
//
//	        nil
type RepositorySecurityAndAnalysisAdvancedSecurityPtrInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutput() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput
	ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(context.Context) RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput
}

type repositorySecurityAndAnalysisAdvancedSecurityPtrType RepositorySecurityAndAnalysisAdvancedSecurityArgs

func RepositorySecurityAndAnalysisAdvancedSecurityPtr(v *RepositorySecurityAndAnalysisAdvancedSecurityArgs) RepositorySecurityAndAnalysisAdvancedSecurityPtrInput {
	return (*repositorySecurityAndAnalysisAdvancedSecurityPtrType)(v)
}

func (*repositorySecurityAndAnalysisAdvancedSecurityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisAdvancedSecurity)(nil)).Elem()
}

func (i *repositorySecurityAndAnalysisAdvancedSecurityPtrType) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutput() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return i.ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(context.Background())
}

func (i *repositorySecurityAndAnalysisAdvancedSecurityPtrType) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput)
}

type RepositorySecurityAndAnalysisAdvancedSecurityOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisAdvancedSecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisAdvancedSecurity)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityOutput() RepositorySecurityAndAnalysisAdvancedSecurityOutput {
	return o
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityOutput {
	return o
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutput() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o.ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(context.Background())
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositorySecurityAndAnalysisAdvancedSecurity) *RepositorySecurityAndAnalysisAdvancedSecurity {
		return &v
	}).(RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisAdvancedSecurityOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysisAdvancedSecurity) string { return v.Status }).(pulumi.StringOutput)
}

type RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisAdvancedSecurity)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutput() RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput) ToRepositorySecurityAndAnalysisAdvancedSecurityPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput) Elem() RepositorySecurityAndAnalysisAdvancedSecurityOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisAdvancedSecurity) RepositorySecurityAndAnalysisAdvancedSecurity {
		if v != nil {
			return *v
		}
		var ret RepositorySecurityAndAnalysisAdvancedSecurity
		return ret
	}).(RepositorySecurityAndAnalysisAdvancedSecurityOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisAdvancedSecurity) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type RepositorySecurityAndAnalysisSecretScanning struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status string `pulumi:"status"`
}

// RepositorySecurityAndAnalysisSecretScanningInput is an input type that accepts RepositorySecurityAndAnalysisSecretScanningArgs and RepositorySecurityAndAnalysisSecretScanningOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisSecretScanningInput` via:
//
//	RepositorySecurityAndAnalysisSecretScanningArgs{...}
type RepositorySecurityAndAnalysisSecretScanningInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisSecretScanningOutput() RepositorySecurityAndAnalysisSecretScanningOutput
	ToRepositorySecurityAndAnalysisSecretScanningOutputWithContext(context.Context) RepositorySecurityAndAnalysisSecretScanningOutput
}

type RepositorySecurityAndAnalysisSecretScanningArgs struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RepositorySecurityAndAnalysisSecretScanningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanning)(nil)).Elem()
}

func (i RepositorySecurityAndAnalysisSecretScanningArgs) ToRepositorySecurityAndAnalysisSecretScanningOutput() RepositorySecurityAndAnalysisSecretScanningOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisSecretScanningArgs) ToRepositorySecurityAndAnalysisSecretScanningOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningOutput)
}

func (i RepositorySecurityAndAnalysisSecretScanningArgs) ToRepositorySecurityAndAnalysisSecretScanningPtrOutput() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisSecretScanningArgs) ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningOutput).ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(ctx)
}

// RepositorySecurityAndAnalysisSecretScanningPtrInput is an input type that accepts RepositorySecurityAndAnalysisSecretScanningArgs, RepositorySecurityAndAnalysisSecretScanningPtr and RepositorySecurityAndAnalysisSecretScanningPtrOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisSecretScanningPtrInput` via:
//
//	        RepositorySecurityAndAnalysisSecretScanningArgs{...}
//
//	or:
//
//	        nil
type RepositorySecurityAndAnalysisSecretScanningPtrInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisSecretScanningPtrOutput() RepositorySecurityAndAnalysisSecretScanningPtrOutput
	ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(context.Context) RepositorySecurityAndAnalysisSecretScanningPtrOutput
}

type repositorySecurityAndAnalysisSecretScanningPtrType RepositorySecurityAndAnalysisSecretScanningArgs

func RepositorySecurityAndAnalysisSecretScanningPtr(v *RepositorySecurityAndAnalysisSecretScanningArgs) RepositorySecurityAndAnalysisSecretScanningPtrInput {
	return (*repositorySecurityAndAnalysisSecretScanningPtrType)(v)
}

func (*repositorySecurityAndAnalysisSecretScanningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisSecretScanning)(nil)).Elem()
}

func (i *repositorySecurityAndAnalysisSecretScanningPtrType) ToRepositorySecurityAndAnalysisSecretScanningPtrOutput() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(context.Background())
}

func (i *repositorySecurityAndAnalysisSecretScanningPtrType) ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningPtrOutput)
}

type RepositorySecurityAndAnalysisSecretScanningOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisSecretScanningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanning)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisSecretScanningOutput) ToRepositorySecurityAndAnalysisSecretScanningOutput() RepositorySecurityAndAnalysisSecretScanningOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningOutput) ToRepositorySecurityAndAnalysisSecretScanningOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningOutput) ToRepositorySecurityAndAnalysisSecretScanningPtrOutput() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o.ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(context.Background())
}

func (o RepositorySecurityAndAnalysisSecretScanningOutput) ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositorySecurityAndAnalysisSecretScanning) *RepositorySecurityAndAnalysisSecretScanning {
		return &v
	}).(RepositorySecurityAndAnalysisSecretScanningPtrOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisSecretScanningOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysisSecretScanning) string { return v.Status }).(pulumi.StringOutput)
}

type RepositorySecurityAndAnalysisSecretScanningPtrOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisSecretScanningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisSecretScanning)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisSecretScanningPtrOutput) ToRepositorySecurityAndAnalysisSecretScanningPtrOutput() RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPtrOutput) ToRepositorySecurityAndAnalysisSecretScanningPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPtrOutput) Elem() RepositorySecurityAndAnalysisSecretScanningOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisSecretScanning) RepositorySecurityAndAnalysisSecretScanning {
		if v != nil {
			return *v
		}
		var ret RepositorySecurityAndAnalysisSecretScanning
		return ret
	}).(RepositorySecurityAndAnalysisSecretScanningOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisSecretScanningPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisSecretScanning) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type RepositorySecurityAndAnalysisSecretScanningPushProtection struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status string `pulumi:"status"`
}

// RepositorySecurityAndAnalysisSecretScanningPushProtectionInput is an input type that accepts RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs and RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisSecretScanningPushProtectionInput` via:
//
//	RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs{...}
type RepositorySecurityAndAnalysisSecretScanningPushProtectionInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput
	ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutputWithContext(context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput
}

type RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs struct {
	// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningPushProtection)(nil)).Elem()
}

func (i RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput)
}

func (i RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(context.Background())
}

func (i RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput).ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(ctx)
}

// RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput is an input type that accepts RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs, RepositorySecurityAndAnalysisSecretScanningPushProtectionPtr and RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput values.
// You can construct a concrete instance of `RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput` via:
//
//	        RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs{...}
//
//	or:
//
//	        nil
type RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput interface {
	pulumi.Input

	ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput
	ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput
}

type repositorySecurityAndAnalysisSecretScanningPushProtectionPtrType RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs

func RepositorySecurityAndAnalysisSecretScanningPushProtectionPtr(v *RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput {
	return (*repositorySecurityAndAnalysisSecretScanningPushProtectionPtrType)(v)
}

func (*repositorySecurityAndAnalysisSecretScanningPushProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisSecretScanningPushProtection)(nil)).Elem()
}

func (i *repositorySecurityAndAnalysisSecretScanningPushProtectionPtrType) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return i.ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(context.Background())
}

func (i *repositorySecurityAndAnalysisSecretScanningPushProtectionPtrType) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput)
}

type RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningPushProtection)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o.ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(context.Background())
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositorySecurityAndAnalysisSecretScanningPushProtection) *RepositorySecurityAndAnalysisSecretScanningPushProtection {
		return &v
	}).(RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RepositorySecurityAndAnalysisSecretScanningPushProtection) string { return v.Status }).(pulumi.StringOutput)
}

type RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput struct{ *pulumi.OutputState }

func (RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositorySecurityAndAnalysisSecretScanningPushProtection)(nil)).Elem()
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput() RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput) ToRepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutputWithContext(ctx context.Context) RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput {
	return o
}

func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput) Elem() RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisSecretScanningPushProtection) RepositorySecurityAndAnalysisSecretScanningPushProtection {
		if v != nil {
			return *v
		}
		var ret RepositorySecurityAndAnalysisSecretScanningPushProtection
		return ret
	}).(RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput)
}

// Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.
func (o RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositorySecurityAndAnalysisSecretScanningPushProtection) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type RepositoryTemplate struct {
	// Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
	IncludeAllBranches *bool `pulumi:"includeAllBranches"`
	// The GitHub organization or user the template repository is owned by.
	Owner string `pulumi:"owner"`
	// The name of the template repository.
	Repository string `pulumi:"repository"`
}

// RepositoryTemplateInput is an input type that accepts RepositoryTemplateArgs and RepositoryTemplateOutput values.
// You can construct a concrete instance of `RepositoryTemplateInput` via:
//
//	RepositoryTemplateArgs{...}
type RepositoryTemplateInput interface {
	pulumi.Input

	ToRepositoryTemplateOutput() RepositoryTemplateOutput
	ToRepositoryTemplateOutputWithContext(context.Context) RepositoryTemplateOutput
}

type RepositoryTemplateArgs struct {
	// Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
	IncludeAllBranches pulumi.BoolPtrInput `pulumi:"includeAllBranches"`
	// The GitHub organization or user the template repository is owned by.
	Owner pulumi.StringInput `pulumi:"owner"`
	// The name of the template repository.
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (RepositoryTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTemplate)(nil)).Elem()
}

func (i RepositoryTemplateArgs) ToRepositoryTemplateOutput() RepositoryTemplateOutput {
	return i.ToRepositoryTemplateOutputWithContext(context.Background())
}

func (i RepositoryTemplateArgs) ToRepositoryTemplateOutputWithContext(ctx context.Context) RepositoryTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTemplateOutput)
}

func (i RepositoryTemplateArgs) ToRepositoryTemplatePtrOutput() RepositoryTemplatePtrOutput {
	return i.ToRepositoryTemplatePtrOutputWithContext(context.Background())
}

func (i RepositoryTemplateArgs) ToRepositoryTemplatePtrOutputWithContext(ctx context.Context) RepositoryTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTemplateOutput).ToRepositoryTemplatePtrOutputWithContext(ctx)
}

// RepositoryTemplatePtrInput is an input type that accepts RepositoryTemplateArgs, RepositoryTemplatePtr and RepositoryTemplatePtrOutput values.
// You can construct a concrete instance of `RepositoryTemplatePtrInput` via:
//
//	        RepositoryTemplateArgs{...}
//
//	or:
//
//	        nil
type RepositoryTemplatePtrInput interface {
	pulumi.Input

	ToRepositoryTemplatePtrOutput() RepositoryTemplatePtrOutput
	ToRepositoryTemplatePtrOutputWithContext(context.Context) RepositoryTemplatePtrOutput
}

type repositoryTemplatePtrType RepositoryTemplateArgs

func RepositoryTemplatePtr(v *RepositoryTemplateArgs) RepositoryTemplatePtrInput {
	return (*repositoryTemplatePtrType)(v)
}

func (*repositoryTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryTemplate)(nil)).Elem()
}

func (i *repositoryTemplatePtrType) ToRepositoryTemplatePtrOutput() RepositoryTemplatePtrOutput {
	return i.ToRepositoryTemplatePtrOutputWithContext(context.Background())
}

func (i *repositoryTemplatePtrType) ToRepositoryTemplatePtrOutputWithContext(ctx context.Context) RepositoryTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTemplatePtrOutput)
}

type RepositoryTemplateOutput struct{ *pulumi.OutputState }

func (RepositoryTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryTemplate)(nil)).Elem()
}

func (o RepositoryTemplateOutput) ToRepositoryTemplateOutput() RepositoryTemplateOutput {
	return o
}

func (o RepositoryTemplateOutput) ToRepositoryTemplateOutputWithContext(ctx context.Context) RepositoryTemplateOutput {
	return o
}

func (o RepositoryTemplateOutput) ToRepositoryTemplatePtrOutput() RepositoryTemplatePtrOutput {
	return o.ToRepositoryTemplatePtrOutputWithContext(context.Background())
}

func (o RepositoryTemplateOutput) ToRepositoryTemplatePtrOutputWithContext(ctx context.Context) RepositoryTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryTemplate) *RepositoryTemplate {
		return &v
	}).(RepositoryTemplatePtrOutput)
}

// Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
func (o RepositoryTemplateOutput) IncludeAllBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryTemplate) *bool { return v.IncludeAllBranches }).(pulumi.BoolPtrOutput)
}

// The GitHub organization or user the template repository is owned by.
func (o RepositoryTemplateOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTemplate) string { return v.Owner }).(pulumi.StringOutput)
}

// The name of the template repository.
func (o RepositoryTemplateOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryTemplate) string { return v.Repository }).(pulumi.StringOutput)
}

type RepositoryTemplatePtrOutput struct{ *pulumi.OutputState }

func (RepositoryTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryTemplate)(nil)).Elem()
}

func (o RepositoryTemplatePtrOutput) ToRepositoryTemplatePtrOutput() RepositoryTemplatePtrOutput {
	return o
}

func (o RepositoryTemplatePtrOutput) ToRepositoryTemplatePtrOutputWithContext(ctx context.Context) RepositoryTemplatePtrOutput {
	return o
}

func (o RepositoryTemplatePtrOutput) Elem() RepositoryTemplateOutput {
	return o.ApplyT(func(v *RepositoryTemplate) RepositoryTemplate {
		if v != nil {
			return *v
		}
		var ret RepositoryTemplate
		return ret
	}).(RepositoryTemplateOutput)
}

// Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
func (o RepositoryTemplatePtrOutput) IncludeAllBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeAllBranches
	}).(pulumi.BoolPtrOutput)
}

// The GitHub organization or user the template repository is owned by.
func (o RepositoryTemplatePtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Owner
	}).(pulumi.StringPtrOutput)
}

// The name of the template repository.
func (o RepositoryTemplatePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

type RepositoryWebhookConfiguration struct {
	// The content type for the payload. Valid values are either `form` or `json`.
	ContentType *string `pulumi:"contentType"`
	// Insecure SSL boolean toggle. Defaults to `false`.
	InsecureSsl *bool `pulumi:"insecureSsl"`
	// The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Secret *string `pulumi:"secret"`
	// The URL of the webhook.
	Url string `pulumi:"url"`
}

// RepositoryWebhookConfigurationInput is an input type that accepts RepositoryWebhookConfigurationArgs and RepositoryWebhookConfigurationOutput values.
// You can construct a concrete instance of `RepositoryWebhookConfigurationInput` via:
//
//	RepositoryWebhookConfigurationArgs{...}
type RepositoryWebhookConfigurationInput interface {
	pulumi.Input

	ToRepositoryWebhookConfigurationOutput() RepositoryWebhookConfigurationOutput
	ToRepositoryWebhookConfigurationOutputWithContext(context.Context) RepositoryWebhookConfigurationOutput
}

type RepositoryWebhookConfigurationArgs struct {
	// The content type for the payload. Valid values are either `form` or `json`.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Insecure SSL boolean toggle. Defaults to `false`.
	InsecureSsl pulumi.BoolPtrInput `pulumi:"insecureSsl"`
	// The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// The URL of the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

func (RepositoryWebhookConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryWebhookConfiguration)(nil)).Elem()
}

func (i RepositoryWebhookConfigurationArgs) ToRepositoryWebhookConfigurationOutput() RepositoryWebhookConfigurationOutput {
	return i.ToRepositoryWebhookConfigurationOutputWithContext(context.Background())
}

func (i RepositoryWebhookConfigurationArgs) ToRepositoryWebhookConfigurationOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWebhookConfigurationOutput)
}

func (i RepositoryWebhookConfigurationArgs) ToRepositoryWebhookConfigurationPtrOutput() RepositoryWebhookConfigurationPtrOutput {
	return i.ToRepositoryWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (i RepositoryWebhookConfigurationArgs) ToRepositoryWebhookConfigurationPtrOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWebhookConfigurationOutput).ToRepositoryWebhookConfigurationPtrOutputWithContext(ctx)
}

// RepositoryWebhookConfigurationPtrInput is an input type that accepts RepositoryWebhookConfigurationArgs, RepositoryWebhookConfigurationPtr and RepositoryWebhookConfigurationPtrOutput values.
// You can construct a concrete instance of `RepositoryWebhookConfigurationPtrInput` via:
//
//	        RepositoryWebhookConfigurationArgs{...}
//
//	or:
//
//	        nil
type RepositoryWebhookConfigurationPtrInput interface {
	pulumi.Input

	ToRepositoryWebhookConfigurationPtrOutput() RepositoryWebhookConfigurationPtrOutput
	ToRepositoryWebhookConfigurationPtrOutputWithContext(context.Context) RepositoryWebhookConfigurationPtrOutput
}

type repositoryWebhookConfigurationPtrType RepositoryWebhookConfigurationArgs

func RepositoryWebhookConfigurationPtr(v *RepositoryWebhookConfigurationArgs) RepositoryWebhookConfigurationPtrInput {
	return (*repositoryWebhookConfigurationPtrType)(v)
}

func (*repositoryWebhookConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryWebhookConfiguration)(nil)).Elem()
}

func (i *repositoryWebhookConfigurationPtrType) ToRepositoryWebhookConfigurationPtrOutput() RepositoryWebhookConfigurationPtrOutput {
	return i.ToRepositoryWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (i *repositoryWebhookConfigurationPtrType) ToRepositoryWebhookConfigurationPtrOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryWebhookConfigurationPtrOutput)
}

type RepositoryWebhookConfigurationOutput struct{ *pulumi.OutputState }

func (RepositoryWebhookConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryWebhookConfiguration)(nil)).Elem()
}

func (o RepositoryWebhookConfigurationOutput) ToRepositoryWebhookConfigurationOutput() RepositoryWebhookConfigurationOutput {
	return o
}

func (o RepositoryWebhookConfigurationOutput) ToRepositoryWebhookConfigurationOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationOutput {
	return o
}

func (o RepositoryWebhookConfigurationOutput) ToRepositoryWebhookConfigurationPtrOutput() RepositoryWebhookConfigurationPtrOutput {
	return o.ToRepositoryWebhookConfigurationPtrOutputWithContext(context.Background())
}

func (o RepositoryWebhookConfigurationOutput) ToRepositoryWebhookConfigurationPtrOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryWebhookConfiguration) *RepositoryWebhookConfiguration {
		return &v
	}).(RepositoryWebhookConfigurationPtrOutput)
}

// The content type for the payload. Valid values are either `form` or `json`.
func (o RepositoryWebhookConfigurationOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryWebhookConfiguration) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Insecure SSL boolean toggle. Defaults to `false`.
func (o RepositoryWebhookConfigurationOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepositoryWebhookConfiguration) *bool { return v.InsecureSsl }).(pulumi.BoolPtrOutput)
}

// The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
func (o RepositoryWebhookConfigurationOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryWebhookConfiguration) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// The URL of the webhook.
func (o RepositoryWebhookConfigurationOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryWebhookConfiguration) string { return v.Url }).(pulumi.StringOutput)
}

type RepositoryWebhookConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RepositoryWebhookConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryWebhookConfiguration)(nil)).Elem()
}

func (o RepositoryWebhookConfigurationPtrOutput) ToRepositoryWebhookConfigurationPtrOutput() RepositoryWebhookConfigurationPtrOutput {
	return o
}

func (o RepositoryWebhookConfigurationPtrOutput) ToRepositoryWebhookConfigurationPtrOutputWithContext(ctx context.Context) RepositoryWebhookConfigurationPtrOutput {
	return o
}

func (o RepositoryWebhookConfigurationPtrOutput) Elem() RepositoryWebhookConfigurationOutput {
	return o.ApplyT(func(v *RepositoryWebhookConfiguration) RepositoryWebhookConfiguration {
		if v != nil {
			return *v
		}
		var ret RepositoryWebhookConfiguration
		return ret
	}).(RepositoryWebhookConfigurationOutput)
}

// The content type for the payload. Valid values are either `form` or `json`.
func (o RepositoryWebhookConfigurationPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Insecure SSL boolean toggle. Defaults to `false`.
func (o RepositoryWebhookConfigurationPtrOutput) InsecureSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryWebhookConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSsl
	}).(pulumi.BoolPtrOutput)
}

// The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
func (o RepositoryWebhookConfigurationPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// The URL of the webhook.
func (o RepositoryWebhookConfigurationPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryWebhookConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type TeamMembersMember struct {
	// The role of the user within the team.
	// Must be one of `member` or `maintainer`. Defaults to `member`.
	Role *string `pulumi:"role"`
	// The user to add to the team.
	Username string `pulumi:"username"`
}

// TeamMembersMemberInput is an input type that accepts TeamMembersMemberArgs and TeamMembersMemberOutput values.
// You can construct a concrete instance of `TeamMembersMemberInput` via:
//
//	TeamMembersMemberArgs{...}
type TeamMembersMemberInput interface {
	pulumi.Input

	ToTeamMembersMemberOutput() TeamMembersMemberOutput
	ToTeamMembersMemberOutputWithContext(context.Context) TeamMembersMemberOutput
}

type TeamMembersMemberArgs struct {
	// The role of the user within the team.
	// Must be one of `member` or `maintainer`. Defaults to `member`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// The user to add to the team.
	Username pulumi.StringInput `pulumi:"username"`
}

func (TeamMembersMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamMembersMember)(nil)).Elem()
}

func (i TeamMembersMemberArgs) ToTeamMembersMemberOutput() TeamMembersMemberOutput {
	return i.ToTeamMembersMemberOutputWithContext(context.Background())
}

func (i TeamMembersMemberArgs) ToTeamMembersMemberOutputWithContext(ctx context.Context) TeamMembersMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMembersMemberOutput)
}

// TeamMembersMemberArrayInput is an input type that accepts TeamMembersMemberArray and TeamMembersMemberArrayOutput values.
// You can construct a concrete instance of `TeamMembersMemberArrayInput` via:
//
//	TeamMembersMemberArray{ TeamMembersMemberArgs{...} }
type TeamMembersMemberArrayInput interface {
	pulumi.Input

	ToTeamMembersMemberArrayOutput() TeamMembersMemberArrayOutput
	ToTeamMembersMemberArrayOutputWithContext(context.Context) TeamMembersMemberArrayOutput
}

type TeamMembersMemberArray []TeamMembersMemberInput

func (TeamMembersMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamMembersMember)(nil)).Elem()
}

func (i TeamMembersMemberArray) ToTeamMembersMemberArrayOutput() TeamMembersMemberArrayOutput {
	return i.ToTeamMembersMemberArrayOutputWithContext(context.Background())
}

func (i TeamMembersMemberArray) ToTeamMembersMemberArrayOutputWithContext(ctx context.Context) TeamMembersMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMembersMemberArrayOutput)
}

type TeamMembersMemberOutput struct{ *pulumi.OutputState }

func (TeamMembersMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamMembersMember)(nil)).Elem()
}

func (o TeamMembersMemberOutput) ToTeamMembersMemberOutput() TeamMembersMemberOutput {
	return o
}

func (o TeamMembersMemberOutput) ToTeamMembersMemberOutputWithContext(ctx context.Context) TeamMembersMemberOutput {
	return o
}

// The role of the user within the team.
// Must be one of `member` or `maintainer`. Defaults to `member`.
func (o TeamMembersMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamMembersMember) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// The user to add to the team.
func (o TeamMembersMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMembersMember) string { return v.Username }).(pulumi.StringOutput)
}

type TeamMembersMemberArrayOutput struct{ *pulumi.OutputState }

func (TeamMembersMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamMembersMember)(nil)).Elem()
}

func (o TeamMembersMemberArrayOutput) ToTeamMembersMemberArrayOutput() TeamMembersMemberArrayOutput {
	return o
}

func (o TeamMembersMemberArrayOutput) ToTeamMembersMemberArrayOutputWithContext(ctx context.Context) TeamMembersMemberArrayOutput {
	return o
}

func (o TeamMembersMemberArrayOutput) Index(i pulumi.IntInput) TeamMembersMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamMembersMember {
		return vs[0].([]TeamMembersMember)[vs[1].(int)]
	}).(TeamMembersMemberOutput)
}

type TeamSettingsReviewRequestDelegation struct {
	// The algorithm to use when assigning pull requests to team members. Supported values are `ROUND_ROBIN` and `LOAD_BALANCE`. Default value is `ROUND_ROBIN`
	Algorithm *string `pulumi:"algorithm"`
	// The number of team members to assign to a pull request
	MemberCount *int `pulumi:"memberCount"`
	// whether to notify the entire team when at least one member is also assigned to the pull request
	Notify *bool `pulumi:"notify"`
}

// TeamSettingsReviewRequestDelegationInput is an input type that accepts TeamSettingsReviewRequestDelegationArgs and TeamSettingsReviewRequestDelegationOutput values.
// You can construct a concrete instance of `TeamSettingsReviewRequestDelegationInput` via:
//
//	TeamSettingsReviewRequestDelegationArgs{...}
type TeamSettingsReviewRequestDelegationInput interface {
	pulumi.Input

	ToTeamSettingsReviewRequestDelegationOutput() TeamSettingsReviewRequestDelegationOutput
	ToTeamSettingsReviewRequestDelegationOutputWithContext(context.Context) TeamSettingsReviewRequestDelegationOutput
}

type TeamSettingsReviewRequestDelegationArgs struct {
	// The algorithm to use when assigning pull requests to team members. Supported values are `ROUND_ROBIN` and `LOAD_BALANCE`. Default value is `ROUND_ROBIN`
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// The number of team members to assign to a pull request
	MemberCount pulumi.IntPtrInput `pulumi:"memberCount"`
	// whether to notify the entire team when at least one member is also assigned to the pull request
	Notify pulumi.BoolPtrInput `pulumi:"notify"`
}

func (TeamSettingsReviewRequestDelegationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSettingsReviewRequestDelegation)(nil)).Elem()
}

func (i TeamSettingsReviewRequestDelegationArgs) ToTeamSettingsReviewRequestDelegationOutput() TeamSettingsReviewRequestDelegationOutput {
	return i.ToTeamSettingsReviewRequestDelegationOutputWithContext(context.Background())
}

func (i TeamSettingsReviewRequestDelegationArgs) ToTeamSettingsReviewRequestDelegationOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSettingsReviewRequestDelegationOutput)
}

func (i TeamSettingsReviewRequestDelegationArgs) ToTeamSettingsReviewRequestDelegationPtrOutput() TeamSettingsReviewRequestDelegationPtrOutput {
	return i.ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(context.Background())
}

func (i TeamSettingsReviewRequestDelegationArgs) ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSettingsReviewRequestDelegationOutput).ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(ctx)
}

// TeamSettingsReviewRequestDelegationPtrInput is an input type that accepts TeamSettingsReviewRequestDelegationArgs, TeamSettingsReviewRequestDelegationPtr and TeamSettingsReviewRequestDelegationPtrOutput values.
// You can construct a concrete instance of `TeamSettingsReviewRequestDelegationPtrInput` via:
//
//	        TeamSettingsReviewRequestDelegationArgs{...}
//
//	or:
//
//	        nil
type TeamSettingsReviewRequestDelegationPtrInput interface {
	pulumi.Input

	ToTeamSettingsReviewRequestDelegationPtrOutput() TeamSettingsReviewRequestDelegationPtrOutput
	ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(context.Context) TeamSettingsReviewRequestDelegationPtrOutput
}

type teamSettingsReviewRequestDelegationPtrType TeamSettingsReviewRequestDelegationArgs

func TeamSettingsReviewRequestDelegationPtr(v *TeamSettingsReviewRequestDelegationArgs) TeamSettingsReviewRequestDelegationPtrInput {
	return (*teamSettingsReviewRequestDelegationPtrType)(v)
}

func (*teamSettingsReviewRequestDelegationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamSettingsReviewRequestDelegation)(nil)).Elem()
}

func (i *teamSettingsReviewRequestDelegationPtrType) ToTeamSettingsReviewRequestDelegationPtrOutput() TeamSettingsReviewRequestDelegationPtrOutput {
	return i.ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(context.Background())
}

func (i *teamSettingsReviewRequestDelegationPtrType) ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSettingsReviewRequestDelegationPtrOutput)
}

type TeamSettingsReviewRequestDelegationOutput struct{ *pulumi.OutputState }

func (TeamSettingsReviewRequestDelegationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSettingsReviewRequestDelegation)(nil)).Elem()
}

func (o TeamSettingsReviewRequestDelegationOutput) ToTeamSettingsReviewRequestDelegationOutput() TeamSettingsReviewRequestDelegationOutput {
	return o
}

func (o TeamSettingsReviewRequestDelegationOutput) ToTeamSettingsReviewRequestDelegationOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationOutput {
	return o
}

func (o TeamSettingsReviewRequestDelegationOutput) ToTeamSettingsReviewRequestDelegationPtrOutput() TeamSettingsReviewRequestDelegationPtrOutput {
	return o.ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(context.Background())
}

func (o TeamSettingsReviewRequestDelegationOutput) ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeamSettingsReviewRequestDelegation) *TeamSettingsReviewRequestDelegation {
		return &v
	}).(TeamSettingsReviewRequestDelegationPtrOutput)
}

// The algorithm to use when assigning pull requests to team members. Supported values are `ROUND_ROBIN` and `LOAD_BALANCE`. Default value is `ROUND_ROBIN`
func (o TeamSettingsReviewRequestDelegationOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamSettingsReviewRequestDelegation) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// The number of team members to assign to a pull request
func (o TeamSettingsReviewRequestDelegationOutput) MemberCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TeamSettingsReviewRequestDelegation) *int { return v.MemberCount }).(pulumi.IntPtrOutput)
}

// whether to notify the entire team when at least one member is also assigned to the pull request
func (o TeamSettingsReviewRequestDelegationOutput) Notify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeamSettingsReviewRequestDelegation) *bool { return v.Notify }).(pulumi.BoolPtrOutput)
}

type TeamSettingsReviewRequestDelegationPtrOutput struct{ *pulumi.OutputState }

func (TeamSettingsReviewRequestDelegationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamSettingsReviewRequestDelegation)(nil)).Elem()
}

func (o TeamSettingsReviewRequestDelegationPtrOutput) ToTeamSettingsReviewRequestDelegationPtrOutput() TeamSettingsReviewRequestDelegationPtrOutput {
	return o
}

func (o TeamSettingsReviewRequestDelegationPtrOutput) ToTeamSettingsReviewRequestDelegationPtrOutputWithContext(ctx context.Context) TeamSettingsReviewRequestDelegationPtrOutput {
	return o
}

func (o TeamSettingsReviewRequestDelegationPtrOutput) Elem() TeamSettingsReviewRequestDelegationOutput {
	return o.ApplyT(func(v *TeamSettingsReviewRequestDelegation) TeamSettingsReviewRequestDelegation {
		if v != nil {
			return *v
		}
		var ret TeamSettingsReviewRequestDelegation
		return ret
	}).(TeamSettingsReviewRequestDelegationOutput)
}

// The algorithm to use when assigning pull requests to team members. Supported values are `ROUND_ROBIN` and `LOAD_BALANCE`. Default value is `ROUND_ROBIN`
func (o TeamSettingsReviewRequestDelegationPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamSettingsReviewRequestDelegation) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The number of team members to assign to a pull request
func (o TeamSettingsReviewRequestDelegationPtrOutput) MemberCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TeamSettingsReviewRequestDelegation) *int {
		if v == nil {
			return nil
		}
		return v.MemberCount
	}).(pulumi.IntPtrOutput)
}

// whether to notify the entire team when at least one member is also assigned to the pull request
func (o TeamSettingsReviewRequestDelegationPtrOutput) Notify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TeamSettingsReviewRequestDelegation) *bool {
		if v == nil {
			return nil
		}
		return v.Notify
	}).(pulumi.BoolPtrOutput)
}

type TeamSyncGroupMappingGroup struct {
	// The description of the IdP group.
	GroupDescription string `pulumi:"groupDescription"`
	// The ID of the IdP group.
	GroupId string `pulumi:"groupId"`
	// The name of the IdP group.
	GroupName string `pulumi:"groupName"`
}

// TeamSyncGroupMappingGroupInput is an input type that accepts TeamSyncGroupMappingGroupArgs and TeamSyncGroupMappingGroupOutput values.
// You can construct a concrete instance of `TeamSyncGroupMappingGroupInput` via:
//
//	TeamSyncGroupMappingGroupArgs{...}
type TeamSyncGroupMappingGroupInput interface {
	pulumi.Input

	ToTeamSyncGroupMappingGroupOutput() TeamSyncGroupMappingGroupOutput
	ToTeamSyncGroupMappingGroupOutputWithContext(context.Context) TeamSyncGroupMappingGroupOutput
}

type TeamSyncGroupMappingGroupArgs struct {
	// The description of the IdP group.
	GroupDescription pulumi.StringInput `pulumi:"groupDescription"`
	// The ID of the IdP group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The name of the IdP group.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (TeamSyncGroupMappingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSyncGroupMappingGroup)(nil)).Elem()
}

func (i TeamSyncGroupMappingGroupArgs) ToTeamSyncGroupMappingGroupOutput() TeamSyncGroupMappingGroupOutput {
	return i.ToTeamSyncGroupMappingGroupOutputWithContext(context.Background())
}

func (i TeamSyncGroupMappingGroupArgs) ToTeamSyncGroupMappingGroupOutputWithContext(ctx context.Context) TeamSyncGroupMappingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSyncGroupMappingGroupOutput)
}

// TeamSyncGroupMappingGroupArrayInput is an input type that accepts TeamSyncGroupMappingGroupArray and TeamSyncGroupMappingGroupArrayOutput values.
// You can construct a concrete instance of `TeamSyncGroupMappingGroupArrayInput` via:
//
//	TeamSyncGroupMappingGroupArray{ TeamSyncGroupMappingGroupArgs{...} }
type TeamSyncGroupMappingGroupArrayInput interface {
	pulumi.Input

	ToTeamSyncGroupMappingGroupArrayOutput() TeamSyncGroupMappingGroupArrayOutput
	ToTeamSyncGroupMappingGroupArrayOutputWithContext(context.Context) TeamSyncGroupMappingGroupArrayOutput
}

type TeamSyncGroupMappingGroupArray []TeamSyncGroupMappingGroupInput

func (TeamSyncGroupMappingGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamSyncGroupMappingGroup)(nil)).Elem()
}

func (i TeamSyncGroupMappingGroupArray) ToTeamSyncGroupMappingGroupArrayOutput() TeamSyncGroupMappingGroupArrayOutput {
	return i.ToTeamSyncGroupMappingGroupArrayOutputWithContext(context.Background())
}

func (i TeamSyncGroupMappingGroupArray) ToTeamSyncGroupMappingGroupArrayOutputWithContext(ctx context.Context) TeamSyncGroupMappingGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamSyncGroupMappingGroupArrayOutput)
}

type TeamSyncGroupMappingGroupOutput struct{ *pulumi.OutputState }

func (TeamSyncGroupMappingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamSyncGroupMappingGroup)(nil)).Elem()
}

func (o TeamSyncGroupMappingGroupOutput) ToTeamSyncGroupMappingGroupOutput() TeamSyncGroupMappingGroupOutput {
	return o
}

func (o TeamSyncGroupMappingGroupOutput) ToTeamSyncGroupMappingGroupOutputWithContext(ctx context.Context) TeamSyncGroupMappingGroupOutput {
	return o
}

// The description of the IdP group.
func (o TeamSyncGroupMappingGroupOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v TeamSyncGroupMappingGroup) string { return v.GroupDescription }).(pulumi.StringOutput)
}

// The ID of the IdP group.
func (o TeamSyncGroupMappingGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v TeamSyncGroupMappingGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The name of the IdP group.
func (o TeamSyncGroupMappingGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v TeamSyncGroupMappingGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type TeamSyncGroupMappingGroupArrayOutput struct{ *pulumi.OutputState }

func (TeamSyncGroupMappingGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamSyncGroupMappingGroup)(nil)).Elem()
}

func (o TeamSyncGroupMappingGroupArrayOutput) ToTeamSyncGroupMappingGroupArrayOutput() TeamSyncGroupMappingGroupArrayOutput {
	return o
}

func (o TeamSyncGroupMappingGroupArrayOutput) ToTeamSyncGroupMappingGroupArrayOutputWithContext(ctx context.Context) TeamSyncGroupMappingGroupArrayOutput {
	return o
}

func (o TeamSyncGroupMappingGroupArrayOutput) Index(i pulumi.IntInput) TeamSyncGroupMappingGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamSyncGroupMappingGroup {
		return vs[0].([]TeamSyncGroupMappingGroup)[vs[1].(int)]
	}).(TeamSyncGroupMappingGroupOutput)
}

type GetActionsEnvironmentSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// Name of the secret
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetActionsEnvironmentSecretsSecretInput is an input type that accepts GetActionsEnvironmentSecretsSecretArgs and GetActionsEnvironmentSecretsSecretOutput values.
// You can construct a concrete instance of `GetActionsEnvironmentSecretsSecretInput` via:
//
//	GetActionsEnvironmentSecretsSecretArgs{...}
type GetActionsEnvironmentSecretsSecretInput interface {
	pulumi.Input

	ToGetActionsEnvironmentSecretsSecretOutput() GetActionsEnvironmentSecretsSecretOutput
	ToGetActionsEnvironmentSecretsSecretOutputWithContext(context.Context) GetActionsEnvironmentSecretsSecretOutput
}

type GetActionsEnvironmentSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the secret
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetActionsEnvironmentSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsEnvironmentSecretsSecret)(nil)).Elem()
}

func (i GetActionsEnvironmentSecretsSecretArgs) ToGetActionsEnvironmentSecretsSecretOutput() GetActionsEnvironmentSecretsSecretOutput {
	return i.ToGetActionsEnvironmentSecretsSecretOutputWithContext(context.Background())
}

func (i GetActionsEnvironmentSecretsSecretArgs) ToGetActionsEnvironmentSecretsSecretOutputWithContext(ctx context.Context) GetActionsEnvironmentSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsEnvironmentSecretsSecretOutput)
}

// GetActionsEnvironmentSecretsSecretArrayInput is an input type that accepts GetActionsEnvironmentSecretsSecretArray and GetActionsEnvironmentSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetActionsEnvironmentSecretsSecretArrayInput` via:
//
//	GetActionsEnvironmentSecretsSecretArray{ GetActionsEnvironmentSecretsSecretArgs{...} }
type GetActionsEnvironmentSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetActionsEnvironmentSecretsSecretArrayOutput() GetActionsEnvironmentSecretsSecretArrayOutput
	ToGetActionsEnvironmentSecretsSecretArrayOutputWithContext(context.Context) GetActionsEnvironmentSecretsSecretArrayOutput
}

type GetActionsEnvironmentSecretsSecretArray []GetActionsEnvironmentSecretsSecretInput

func (GetActionsEnvironmentSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsEnvironmentSecretsSecret)(nil)).Elem()
}

func (i GetActionsEnvironmentSecretsSecretArray) ToGetActionsEnvironmentSecretsSecretArrayOutput() GetActionsEnvironmentSecretsSecretArrayOutput {
	return i.ToGetActionsEnvironmentSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetActionsEnvironmentSecretsSecretArray) ToGetActionsEnvironmentSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsEnvironmentSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsEnvironmentSecretsSecretArrayOutput)
}

type GetActionsEnvironmentSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetActionsEnvironmentSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsEnvironmentSecretsSecret)(nil)).Elem()
}

func (o GetActionsEnvironmentSecretsSecretOutput) ToGetActionsEnvironmentSecretsSecretOutput() GetActionsEnvironmentSecretsSecretOutput {
	return o
}

func (o GetActionsEnvironmentSecretsSecretOutput) ToGetActionsEnvironmentSecretsSecretOutputWithContext(ctx context.Context) GetActionsEnvironmentSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetActionsEnvironmentSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the secret
func (o GetActionsEnvironmentSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetActionsEnvironmentSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetActionsEnvironmentSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetActionsEnvironmentSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsEnvironmentSecretsSecret)(nil)).Elem()
}

func (o GetActionsEnvironmentSecretsSecretArrayOutput) ToGetActionsEnvironmentSecretsSecretArrayOutput() GetActionsEnvironmentSecretsSecretArrayOutput {
	return o
}

func (o GetActionsEnvironmentSecretsSecretArrayOutput) ToGetActionsEnvironmentSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsEnvironmentSecretsSecretArrayOutput {
	return o
}

func (o GetActionsEnvironmentSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetActionsEnvironmentSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsEnvironmentSecretsSecret {
		return vs[0].([]GetActionsEnvironmentSecretsSecret)[vs[1].(int)]
	}).(GetActionsEnvironmentSecretsSecretOutput)
}

type GetActionsEnvironmentVariablesVariable struct {
	// Timestamp of the variable creation
	CreatedAt string `pulumi:"createdAt"`
	// Name of the variable
	Name string `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// GetActionsEnvironmentVariablesVariableInput is an input type that accepts GetActionsEnvironmentVariablesVariableArgs and GetActionsEnvironmentVariablesVariableOutput values.
// You can construct a concrete instance of `GetActionsEnvironmentVariablesVariableInput` via:
//
//	GetActionsEnvironmentVariablesVariableArgs{...}
type GetActionsEnvironmentVariablesVariableInput interface {
	pulumi.Input

	ToGetActionsEnvironmentVariablesVariableOutput() GetActionsEnvironmentVariablesVariableOutput
	ToGetActionsEnvironmentVariablesVariableOutputWithContext(context.Context) GetActionsEnvironmentVariablesVariableOutput
}

type GetActionsEnvironmentVariablesVariableArgs struct {
	// Timestamp of the variable creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetActionsEnvironmentVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsEnvironmentVariablesVariable)(nil)).Elem()
}

func (i GetActionsEnvironmentVariablesVariableArgs) ToGetActionsEnvironmentVariablesVariableOutput() GetActionsEnvironmentVariablesVariableOutput {
	return i.ToGetActionsEnvironmentVariablesVariableOutputWithContext(context.Background())
}

func (i GetActionsEnvironmentVariablesVariableArgs) ToGetActionsEnvironmentVariablesVariableOutputWithContext(ctx context.Context) GetActionsEnvironmentVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsEnvironmentVariablesVariableOutput)
}

// GetActionsEnvironmentVariablesVariableArrayInput is an input type that accepts GetActionsEnvironmentVariablesVariableArray and GetActionsEnvironmentVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetActionsEnvironmentVariablesVariableArrayInput` via:
//
//	GetActionsEnvironmentVariablesVariableArray{ GetActionsEnvironmentVariablesVariableArgs{...} }
type GetActionsEnvironmentVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetActionsEnvironmentVariablesVariableArrayOutput() GetActionsEnvironmentVariablesVariableArrayOutput
	ToGetActionsEnvironmentVariablesVariableArrayOutputWithContext(context.Context) GetActionsEnvironmentVariablesVariableArrayOutput
}

type GetActionsEnvironmentVariablesVariableArray []GetActionsEnvironmentVariablesVariableInput

func (GetActionsEnvironmentVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsEnvironmentVariablesVariable)(nil)).Elem()
}

func (i GetActionsEnvironmentVariablesVariableArray) ToGetActionsEnvironmentVariablesVariableArrayOutput() GetActionsEnvironmentVariablesVariableArrayOutput {
	return i.ToGetActionsEnvironmentVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetActionsEnvironmentVariablesVariableArray) ToGetActionsEnvironmentVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsEnvironmentVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsEnvironmentVariablesVariableArrayOutput)
}

type GetActionsEnvironmentVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetActionsEnvironmentVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsEnvironmentVariablesVariable)(nil)).Elem()
}

func (o GetActionsEnvironmentVariablesVariableOutput) ToGetActionsEnvironmentVariablesVariableOutput() GetActionsEnvironmentVariablesVariableOutput {
	return o
}

func (o GetActionsEnvironmentVariablesVariableOutput) ToGetActionsEnvironmentVariablesVariableOutputWithContext(ctx context.Context) GetActionsEnvironmentVariablesVariableOutput {
	return o
}

// Timestamp of the variable creation
func (o GetActionsEnvironmentVariablesVariableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentVariablesVariable) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the variable
func (o GetActionsEnvironmentVariablesVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentVariablesVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the variable last update
func (o GetActionsEnvironmentVariablesVariableOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentVariablesVariable) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Value of the variable
func (o GetActionsEnvironmentVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsEnvironmentVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

type GetActionsEnvironmentVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetActionsEnvironmentVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsEnvironmentVariablesVariable)(nil)).Elem()
}

func (o GetActionsEnvironmentVariablesVariableArrayOutput) ToGetActionsEnvironmentVariablesVariableArrayOutput() GetActionsEnvironmentVariablesVariableArrayOutput {
	return o
}

func (o GetActionsEnvironmentVariablesVariableArrayOutput) ToGetActionsEnvironmentVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsEnvironmentVariablesVariableArrayOutput {
	return o
}

func (o GetActionsEnvironmentVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetActionsEnvironmentVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsEnvironmentVariablesVariable {
		return vs[0].([]GetActionsEnvironmentVariablesVariable)[vs[1].(int)]
	}).(GetActionsEnvironmentVariablesVariableOutput)
}

type GetActionsOrganizationSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// Secret name
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Secret visibility
	Visibility string `pulumi:"visibility"`
}

// GetActionsOrganizationSecretsSecretInput is an input type that accepts GetActionsOrganizationSecretsSecretArgs and GetActionsOrganizationSecretsSecretOutput values.
// You can construct a concrete instance of `GetActionsOrganizationSecretsSecretInput` via:
//
//	GetActionsOrganizationSecretsSecretArgs{...}
type GetActionsOrganizationSecretsSecretInput interface {
	pulumi.Input

	ToGetActionsOrganizationSecretsSecretOutput() GetActionsOrganizationSecretsSecretOutput
	ToGetActionsOrganizationSecretsSecretOutputWithContext(context.Context) GetActionsOrganizationSecretsSecretOutput
}

type GetActionsOrganizationSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Secret name
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Secret visibility
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetActionsOrganizationSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetActionsOrganizationSecretsSecretArgs) ToGetActionsOrganizationSecretsSecretOutput() GetActionsOrganizationSecretsSecretOutput {
	return i.ToGetActionsOrganizationSecretsSecretOutputWithContext(context.Background())
}

func (i GetActionsOrganizationSecretsSecretArgs) ToGetActionsOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetActionsOrganizationSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsOrganizationSecretsSecretOutput)
}

// GetActionsOrganizationSecretsSecretArrayInput is an input type that accepts GetActionsOrganizationSecretsSecretArray and GetActionsOrganizationSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetActionsOrganizationSecretsSecretArrayInput` via:
//
//	GetActionsOrganizationSecretsSecretArray{ GetActionsOrganizationSecretsSecretArgs{...} }
type GetActionsOrganizationSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetActionsOrganizationSecretsSecretArrayOutput() GetActionsOrganizationSecretsSecretArrayOutput
	ToGetActionsOrganizationSecretsSecretArrayOutputWithContext(context.Context) GetActionsOrganizationSecretsSecretArrayOutput
}

type GetActionsOrganizationSecretsSecretArray []GetActionsOrganizationSecretsSecretInput

func (GetActionsOrganizationSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetActionsOrganizationSecretsSecretArray) ToGetActionsOrganizationSecretsSecretArrayOutput() GetActionsOrganizationSecretsSecretArrayOutput {
	return i.ToGetActionsOrganizationSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetActionsOrganizationSecretsSecretArray) ToGetActionsOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsOrganizationSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsOrganizationSecretsSecretArrayOutput)
}

type GetActionsOrganizationSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetActionsOrganizationSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetActionsOrganizationSecretsSecretOutput) ToGetActionsOrganizationSecretsSecretOutput() GetActionsOrganizationSecretsSecretOutput {
	return o
}

func (o GetActionsOrganizationSecretsSecretOutput) ToGetActionsOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetActionsOrganizationSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetActionsOrganizationSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Secret name
func (o GetActionsOrganizationSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetActionsOrganizationSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Secret visibility
func (o GetActionsOrganizationSecretsSecretOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationSecretsSecret) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetActionsOrganizationSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetActionsOrganizationSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetActionsOrganizationSecretsSecretArrayOutput) ToGetActionsOrganizationSecretsSecretArrayOutput() GetActionsOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetActionsOrganizationSecretsSecretArrayOutput) ToGetActionsOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetActionsOrganizationSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetActionsOrganizationSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsOrganizationSecretsSecret {
		return vs[0].([]GetActionsOrganizationSecretsSecret)[vs[1].(int)]
	}).(GetActionsOrganizationSecretsSecretOutput)
}

type GetActionsOrganizationVariablesVariable struct {
	// Timestamp of the variable creation
	CreatedAt string `pulumi:"createdAt"`
	// Name of the variable
	Name string `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Value of the variable
	Value string `pulumi:"value"`
	// Visibility of the variable
	Visibility string `pulumi:"visibility"`
}

// GetActionsOrganizationVariablesVariableInput is an input type that accepts GetActionsOrganizationVariablesVariableArgs and GetActionsOrganizationVariablesVariableOutput values.
// You can construct a concrete instance of `GetActionsOrganizationVariablesVariableInput` via:
//
//	GetActionsOrganizationVariablesVariableArgs{...}
type GetActionsOrganizationVariablesVariableInput interface {
	pulumi.Input

	ToGetActionsOrganizationVariablesVariableOutput() GetActionsOrganizationVariablesVariableOutput
	ToGetActionsOrganizationVariablesVariableOutputWithContext(context.Context) GetActionsOrganizationVariablesVariableOutput
}

type GetActionsOrganizationVariablesVariableArgs struct {
	// Timestamp of the variable creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the variable
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
	// Visibility of the variable
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetActionsOrganizationVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsOrganizationVariablesVariable)(nil)).Elem()
}

func (i GetActionsOrganizationVariablesVariableArgs) ToGetActionsOrganizationVariablesVariableOutput() GetActionsOrganizationVariablesVariableOutput {
	return i.ToGetActionsOrganizationVariablesVariableOutputWithContext(context.Background())
}

func (i GetActionsOrganizationVariablesVariableArgs) ToGetActionsOrganizationVariablesVariableOutputWithContext(ctx context.Context) GetActionsOrganizationVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsOrganizationVariablesVariableOutput)
}

// GetActionsOrganizationVariablesVariableArrayInput is an input type that accepts GetActionsOrganizationVariablesVariableArray and GetActionsOrganizationVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetActionsOrganizationVariablesVariableArrayInput` via:
//
//	GetActionsOrganizationVariablesVariableArray{ GetActionsOrganizationVariablesVariableArgs{...} }
type GetActionsOrganizationVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetActionsOrganizationVariablesVariableArrayOutput() GetActionsOrganizationVariablesVariableArrayOutput
	ToGetActionsOrganizationVariablesVariableArrayOutputWithContext(context.Context) GetActionsOrganizationVariablesVariableArrayOutput
}

type GetActionsOrganizationVariablesVariableArray []GetActionsOrganizationVariablesVariableInput

func (GetActionsOrganizationVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsOrganizationVariablesVariable)(nil)).Elem()
}

func (i GetActionsOrganizationVariablesVariableArray) ToGetActionsOrganizationVariablesVariableArrayOutput() GetActionsOrganizationVariablesVariableArrayOutput {
	return i.ToGetActionsOrganizationVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetActionsOrganizationVariablesVariableArray) ToGetActionsOrganizationVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsOrganizationVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsOrganizationVariablesVariableArrayOutput)
}

type GetActionsOrganizationVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetActionsOrganizationVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsOrganizationVariablesVariable)(nil)).Elem()
}

func (o GetActionsOrganizationVariablesVariableOutput) ToGetActionsOrganizationVariablesVariableOutput() GetActionsOrganizationVariablesVariableOutput {
	return o
}

func (o GetActionsOrganizationVariablesVariableOutput) ToGetActionsOrganizationVariablesVariableOutputWithContext(ctx context.Context) GetActionsOrganizationVariablesVariableOutput {
	return o
}

// Timestamp of the variable creation
func (o GetActionsOrganizationVariablesVariableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationVariablesVariable) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the variable
func (o GetActionsOrganizationVariablesVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationVariablesVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the variable last update
func (o GetActionsOrganizationVariablesVariableOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationVariablesVariable) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Value of the variable
func (o GetActionsOrganizationVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

// Visibility of the variable
func (o GetActionsOrganizationVariablesVariableOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsOrganizationVariablesVariable) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetActionsOrganizationVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetActionsOrganizationVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsOrganizationVariablesVariable)(nil)).Elem()
}

func (o GetActionsOrganizationVariablesVariableArrayOutput) ToGetActionsOrganizationVariablesVariableArrayOutput() GetActionsOrganizationVariablesVariableArrayOutput {
	return o
}

func (o GetActionsOrganizationVariablesVariableArrayOutput) ToGetActionsOrganizationVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsOrganizationVariablesVariableArrayOutput {
	return o
}

func (o GetActionsOrganizationVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetActionsOrganizationVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsOrganizationVariablesVariable {
		return vs[0].([]GetActionsOrganizationVariablesVariable)[vs[1].(int)]
	}).(GetActionsOrganizationVariablesVariableOutput)
}

type GetActionsSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// The name of the repository.
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetActionsSecretsSecretInput is an input type that accepts GetActionsSecretsSecretArgs and GetActionsSecretsSecretOutput values.
// You can construct a concrete instance of `GetActionsSecretsSecretInput` via:
//
//	GetActionsSecretsSecretArgs{...}
type GetActionsSecretsSecretInput interface {
	pulumi.Input

	ToGetActionsSecretsSecretOutput() GetActionsSecretsSecretOutput
	ToGetActionsSecretsSecretOutputWithContext(context.Context) GetActionsSecretsSecretOutput
}

type GetActionsSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetActionsSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsSecretsSecret)(nil)).Elem()
}

func (i GetActionsSecretsSecretArgs) ToGetActionsSecretsSecretOutput() GetActionsSecretsSecretOutput {
	return i.ToGetActionsSecretsSecretOutputWithContext(context.Background())
}

func (i GetActionsSecretsSecretArgs) ToGetActionsSecretsSecretOutputWithContext(ctx context.Context) GetActionsSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsSecretsSecretOutput)
}

// GetActionsSecretsSecretArrayInput is an input type that accepts GetActionsSecretsSecretArray and GetActionsSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetActionsSecretsSecretArrayInput` via:
//
//	GetActionsSecretsSecretArray{ GetActionsSecretsSecretArgs{...} }
type GetActionsSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetActionsSecretsSecretArrayOutput() GetActionsSecretsSecretArrayOutput
	ToGetActionsSecretsSecretArrayOutputWithContext(context.Context) GetActionsSecretsSecretArrayOutput
}

type GetActionsSecretsSecretArray []GetActionsSecretsSecretInput

func (GetActionsSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsSecretsSecret)(nil)).Elem()
}

func (i GetActionsSecretsSecretArray) ToGetActionsSecretsSecretArrayOutput() GetActionsSecretsSecretArrayOutput {
	return i.ToGetActionsSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetActionsSecretsSecretArray) ToGetActionsSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsSecretsSecretArrayOutput)
}

type GetActionsSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetActionsSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsSecretsSecret)(nil)).Elem()
}

func (o GetActionsSecretsSecretOutput) ToGetActionsSecretsSecretOutput() GetActionsSecretsSecretOutput {
	return o
}

func (o GetActionsSecretsSecretOutput) ToGetActionsSecretsSecretOutputWithContext(ctx context.Context) GetActionsSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetActionsSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the repository.
func (o GetActionsSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetActionsSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetActionsSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetActionsSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsSecretsSecret)(nil)).Elem()
}

func (o GetActionsSecretsSecretArrayOutput) ToGetActionsSecretsSecretArrayOutput() GetActionsSecretsSecretArrayOutput {
	return o
}

func (o GetActionsSecretsSecretArrayOutput) ToGetActionsSecretsSecretArrayOutputWithContext(ctx context.Context) GetActionsSecretsSecretArrayOutput {
	return o
}

func (o GetActionsSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetActionsSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsSecretsSecret {
		return vs[0].([]GetActionsSecretsSecret)[vs[1].(int)]
	}).(GetActionsSecretsSecretOutput)
}

type GetActionsVariablesVariable struct {
	// Timestamp of the variable creation
	CreatedAt string `pulumi:"createdAt"`
	// The name of the repository.
	Name string `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Value of the variable
	Value string `pulumi:"value"`
}

// GetActionsVariablesVariableInput is an input type that accepts GetActionsVariablesVariableArgs and GetActionsVariablesVariableOutput values.
// You can construct a concrete instance of `GetActionsVariablesVariableInput` via:
//
//	GetActionsVariablesVariableArgs{...}
type GetActionsVariablesVariableInput interface {
	pulumi.Input

	ToGetActionsVariablesVariableOutput() GetActionsVariablesVariableOutput
	ToGetActionsVariablesVariableOutputWithContext(context.Context) GetActionsVariablesVariableOutput
}

type GetActionsVariablesVariableArgs struct {
	// Timestamp of the variable creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the variable last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Value of the variable
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetActionsVariablesVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsVariablesVariable)(nil)).Elem()
}

func (i GetActionsVariablesVariableArgs) ToGetActionsVariablesVariableOutput() GetActionsVariablesVariableOutput {
	return i.ToGetActionsVariablesVariableOutputWithContext(context.Background())
}

func (i GetActionsVariablesVariableArgs) ToGetActionsVariablesVariableOutputWithContext(ctx context.Context) GetActionsVariablesVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsVariablesVariableOutput)
}

// GetActionsVariablesVariableArrayInput is an input type that accepts GetActionsVariablesVariableArray and GetActionsVariablesVariableArrayOutput values.
// You can construct a concrete instance of `GetActionsVariablesVariableArrayInput` via:
//
//	GetActionsVariablesVariableArray{ GetActionsVariablesVariableArgs{...} }
type GetActionsVariablesVariableArrayInput interface {
	pulumi.Input

	ToGetActionsVariablesVariableArrayOutput() GetActionsVariablesVariableArrayOutput
	ToGetActionsVariablesVariableArrayOutputWithContext(context.Context) GetActionsVariablesVariableArrayOutput
}

type GetActionsVariablesVariableArray []GetActionsVariablesVariableInput

func (GetActionsVariablesVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsVariablesVariable)(nil)).Elem()
}

func (i GetActionsVariablesVariableArray) ToGetActionsVariablesVariableArrayOutput() GetActionsVariablesVariableArrayOutput {
	return i.ToGetActionsVariablesVariableArrayOutputWithContext(context.Background())
}

func (i GetActionsVariablesVariableArray) ToGetActionsVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsVariablesVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionsVariablesVariableArrayOutput)
}

type GetActionsVariablesVariableOutput struct{ *pulumi.OutputState }

func (GetActionsVariablesVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionsVariablesVariable)(nil)).Elem()
}

func (o GetActionsVariablesVariableOutput) ToGetActionsVariablesVariableOutput() GetActionsVariablesVariableOutput {
	return o
}

func (o GetActionsVariablesVariableOutput) ToGetActionsVariablesVariableOutputWithContext(ctx context.Context) GetActionsVariablesVariableOutput {
	return o
}

// Timestamp of the variable creation
func (o GetActionsVariablesVariableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsVariablesVariable) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the repository.
func (o GetActionsVariablesVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsVariablesVariable) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the variable last update
func (o GetActionsVariablesVariableOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsVariablesVariable) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Value of the variable
func (o GetActionsVariablesVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionsVariablesVariable) string { return v.Value }).(pulumi.StringOutput)
}

type GetActionsVariablesVariableArrayOutput struct{ *pulumi.OutputState }

func (GetActionsVariablesVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionsVariablesVariable)(nil)).Elem()
}

func (o GetActionsVariablesVariableArrayOutput) ToGetActionsVariablesVariableArrayOutput() GetActionsVariablesVariableArrayOutput {
	return o
}

func (o GetActionsVariablesVariableArrayOutput) ToGetActionsVariablesVariableArrayOutputWithContext(ctx context.Context) GetActionsVariablesVariableArrayOutput {
	return o
}

func (o GetActionsVariablesVariableArrayOutput) Index(i pulumi.IntInput) GetActionsVariablesVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionsVariablesVariable {
		return vs[0].([]GetActionsVariablesVariable)[vs[1].(int)]
	}).(GetActionsVariablesVariableOutput)
}

type GetBranchProtectionRulesRule struct {
	// Identifies the protection rule pattern.
	Pattern string `pulumi:"pattern"`
}

// GetBranchProtectionRulesRuleInput is an input type that accepts GetBranchProtectionRulesRuleArgs and GetBranchProtectionRulesRuleOutput values.
// You can construct a concrete instance of `GetBranchProtectionRulesRuleInput` via:
//
//	GetBranchProtectionRulesRuleArgs{...}
type GetBranchProtectionRulesRuleInput interface {
	pulumi.Input

	ToGetBranchProtectionRulesRuleOutput() GetBranchProtectionRulesRuleOutput
	ToGetBranchProtectionRulesRuleOutputWithContext(context.Context) GetBranchProtectionRulesRuleOutput
}

type GetBranchProtectionRulesRuleArgs struct {
	// Identifies the protection rule pattern.
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (GetBranchProtectionRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchProtectionRulesRule)(nil)).Elem()
}

func (i GetBranchProtectionRulesRuleArgs) ToGetBranchProtectionRulesRuleOutput() GetBranchProtectionRulesRuleOutput {
	return i.ToGetBranchProtectionRulesRuleOutputWithContext(context.Background())
}

func (i GetBranchProtectionRulesRuleArgs) ToGetBranchProtectionRulesRuleOutputWithContext(ctx context.Context) GetBranchProtectionRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchProtectionRulesRuleOutput)
}

// GetBranchProtectionRulesRuleArrayInput is an input type that accepts GetBranchProtectionRulesRuleArray and GetBranchProtectionRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetBranchProtectionRulesRuleArrayInput` via:
//
//	GetBranchProtectionRulesRuleArray{ GetBranchProtectionRulesRuleArgs{...} }
type GetBranchProtectionRulesRuleArrayInput interface {
	pulumi.Input

	ToGetBranchProtectionRulesRuleArrayOutput() GetBranchProtectionRulesRuleArrayOutput
	ToGetBranchProtectionRulesRuleArrayOutputWithContext(context.Context) GetBranchProtectionRulesRuleArrayOutput
}

type GetBranchProtectionRulesRuleArray []GetBranchProtectionRulesRuleInput

func (GetBranchProtectionRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchProtectionRulesRule)(nil)).Elem()
}

func (i GetBranchProtectionRulesRuleArray) ToGetBranchProtectionRulesRuleArrayOutput() GetBranchProtectionRulesRuleArrayOutput {
	return i.ToGetBranchProtectionRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetBranchProtectionRulesRuleArray) ToGetBranchProtectionRulesRuleArrayOutputWithContext(ctx context.Context) GetBranchProtectionRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBranchProtectionRulesRuleArrayOutput)
}

type GetBranchProtectionRulesRuleOutput struct{ *pulumi.OutputState }

func (GetBranchProtectionRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBranchProtectionRulesRule)(nil)).Elem()
}

func (o GetBranchProtectionRulesRuleOutput) ToGetBranchProtectionRulesRuleOutput() GetBranchProtectionRulesRuleOutput {
	return o
}

func (o GetBranchProtectionRulesRuleOutput) ToGetBranchProtectionRulesRuleOutputWithContext(ctx context.Context) GetBranchProtectionRulesRuleOutput {
	return o
}

// Identifies the protection rule pattern.
func (o GetBranchProtectionRulesRuleOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v GetBranchProtectionRulesRule) string { return v.Pattern }).(pulumi.StringOutput)
}

type GetBranchProtectionRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetBranchProtectionRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBranchProtectionRulesRule)(nil)).Elem()
}

func (o GetBranchProtectionRulesRuleArrayOutput) ToGetBranchProtectionRulesRuleArrayOutput() GetBranchProtectionRulesRuleArrayOutput {
	return o
}

func (o GetBranchProtectionRulesRuleArrayOutput) ToGetBranchProtectionRulesRuleArrayOutputWithContext(ctx context.Context) GetBranchProtectionRulesRuleArrayOutput {
	return o
}

func (o GetBranchProtectionRulesRuleArrayOutput) Index(i pulumi.IntInput) GetBranchProtectionRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBranchProtectionRulesRule {
		return vs[0].([]GetBranchProtectionRulesRule)[vs[1].(int)]
	}).(GetBranchProtectionRulesRuleOutput)
}

type GetCodespacesOrganizationSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// Secret name
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Secret visibility
	Visibility string `pulumi:"visibility"`
}

// GetCodespacesOrganizationSecretsSecretInput is an input type that accepts GetCodespacesOrganizationSecretsSecretArgs and GetCodespacesOrganizationSecretsSecretOutput values.
// You can construct a concrete instance of `GetCodespacesOrganizationSecretsSecretInput` via:
//
//	GetCodespacesOrganizationSecretsSecretArgs{...}
type GetCodespacesOrganizationSecretsSecretInput interface {
	pulumi.Input

	ToGetCodespacesOrganizationSecretsSecretOutput() GetCodespacesOrganizationSecretsSecretOutput
	ToGetCodespacesOrganizationSecretsSecretOutputWithContext(context.Context) GetCodespacesOrganizationSecretsSecretOutput
}

type GetCodespacesOrganizationSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Secret name
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Secret visibility
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetCodespacesOrganizationSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesOrganizationSecretsSecretArgs) ToGetCodespacesOrganizationSecretsSecretOutput() GetCodespacesOrganizationSecretsSecretOutput {
	return i.ToGetCodespacesOrganizationSecretsSecretOutputWithContext(context.Background())
}

func (i GetCodespacesOrganizationSecretsSecretArgs) ToGetCodespacesOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesOrganizationSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesOrganizationSecretsSecretOutput)
}

// GetCodespacesOrganizationSecretsSecretArrayInput is an input type that accepts GetCodespacesOrganizationSecretsSecretArray and GetCodespacesOrganizationSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetCodespacesOrganizationSecretsSecretArrayInput` via:
//
//	GetCodespacesOrganizationSecretsSecretArray{ GetCodespacesOrganizationSecretsSecretArgs{...} }
type GetCodespacesOrganizationSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetCodespacesOrganizationSecretsSecretArrayOutput() GetCodespacesOrganizationSecretsSecretArrayOutput
	ToGetCodespacesOrganizationSecretsSecretArrayOutputWithContext(context.Context) GetCodespacesOrganizationSecretsSecretArrayOutput
}

type GetCodespacesOrganizationSecretsSecretArray []GetCodespacesOrganizationSecretsSecretInput

func (GetCodespacesOrganizationSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesOrganizationSecretsSecretArray) ToGetCodespacesOrganizationSecretsSecretArrayOutput() GetCodespacesOrganizationSecretsSecretArrayOutput {
	return i.ToGetCodespacesOrganizationSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetCodespacesOrganizationSecretsSecretArray) ToGetCodespacesOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesOrganizationSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesOrganizationSecretsSecretArrayOutput)
}

type GetCodespacesOrganizationSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetCodespacesOrganizationSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesOrganizationSecretsSecretOutput) ToGetCodespacesOrganizationSecretsSecretOutput() GetCodespacesOrganizationSecretsSecretOutput {
	return o
}

func (o GetCodespacesOrganizationSecretsSecretOutput) ToGetCodespacesOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesOrganizationSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetCodespacesOrganizationSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesOrganizationSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Secret name
func (o GetCodespacesOrganizationSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesOrganizationSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetCodespacesOrganizationSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesOrganizationSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Secret visibility
func (o GetCodespacesOrganizationSecretsSecretOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesOrganizationSecretsSecret) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetCodespacesOrganizationSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetCodespacesOrganizationSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesOrganizationSecretsSecretArrayOutput) ToGetCodespacesOrganizationSecretsSecretArrayOutput() GetCodespacesOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesOrganizationSecretsSecretArrayOutput) ToGetCodespacesOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesOrganizationSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetCodespacesOrganizationSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCodespacesOrganizationSecretsSecret {
		return vs[0].([]GetCodespacesOrganizationSecretsSecret)[vs[1].(int)]
	}).(GetCodespacesOrganizationSecretsSecretOutput)
}

type GetCodespacesSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// The name of the repository.
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetCodespacesSecretsSecretInput is an input type that accepts GetCodespacesSecretsSecretArgs and GetCodespacesSecretsSecretOutput values.
// You can construct a concrete instance of `GetCodespacesSecretsSecretInput` via:
//
//	GetCodespacesSecretsSecretArgs{...}
type GetCodespacesSecretsSecretInput interface {
	pulumi.Input

	ToGetCodespacesSecretsSecretOutput() GetCodespacesSecretsSecretOutput
	ToGetCodespacesSecretsSecretOutputWithContext(context.Context) GetCodespacesSecretsSecretOutput
}

type GetCodespacesSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetCodespacesSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesSecretsSecretArgs) ToGetCodespacesSecretsSecretOutput() GetCodespacesSecretsSecretOutput {
	return i.ToGetCodespacesSecretsSecretOutputWithContext(context.Background())
}

func (i GetCodespacesSecretsSecretArgs) ToGetCodespacesSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesSecretsSecretOutput)
}

// GetCodespacesSecretsSecretArrayInput is an input type that accepts GetCodespacesSecretsSecretArray and GetCodespacesSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetCodespacesSecretsSecretArrayInput` via:
//
//	GetCodespacesSecretsSecretArray{ GetCodespacesSecretsSecretArgs{...} }
type GetCodespacesSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetCodespacesSecretsSecretArrayOutput() GetCodespacesSecretsSecretArrayOutput
	ToGetCodespacesSecretsSecretArrayOutputWithContext(context.Context) GetCodespacesSecretsSecretArrayOutput
}

type GetCodespacesSecretsSecretArray []GetCodespacesSecretsSecretInput

func (GetCodespacesSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesSecretsSecretArray) ToGetCodespacesSecretsSecretArrayOutput() GetCodespacesSecretsSecretArrayOutput {
	return i.ToGetCodespacesSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetCodespacesSecretsSecretArray) ToGetCodespacesSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesSecretsSecretArrayOutput)
}

type GetCodespacesSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetCodespacesSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesSecretsSecretOutput) ToGetCodespacesSecretsSecretOutput() GetCodespacesSecretsSecretOutput {
	return o
}

func (o GetCodespacesSecretsSecretOutput) ToGetCodespacesSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetCodespacesSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the repository.
func (o GetCodespacesSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetCodespacesSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetCodespacesSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetCodespacesSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesSecretsSecretArrayOutput) ToGetCodespacesSecretsSecretArrayOutput() GetCodespacesSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesSecretsSecretArrayOutput) ToGetCodespacesSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetCodespacesSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCodespacesSecretsSecret {
		return vs[0].([]GetCodespacesSecretsSecret)[vs[1].(int)]
	}).(GetCodespacesSecretsSecretOutput)
}

type GetCodespacesUserSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// Secret name
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Secret visibility
	Visibility string `pulumi:"visibility"`
}

// GetCodespacesUserSecretsSecretInput is an input type that accepts GetCodespacesUserSecretsSecretArgs and GetCodespacesUserSecretsSecretOutput values.
// You can construct a concrete instance of `GetCodespacesUserSecretsSecretInput` via:
//
//	GetCodespacesUserSecretsSecretArgs{...}
type GetCodespacesUserSecretsSecretInput interface {
	pulumi.Input

	ToGetCodespacesUserSecretsSecretOutput() GetCodespacesUserSecretsSecretOutput
	ToGetCodespacesUserSecretsSecretOutputWithContext(context.Context) GetCodespacesUserSecretsSecretOutput
}

type GetCodespacesUserSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Secret name
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Secret visibility
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetCodespacesUserSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesUserSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesUserSecretsSecretArgs) ToGetCodespacesUserSecretsSecretOutput() GetCodespacesUserSecretsSecretOutput {
	return i.ToGetCodespacesUserSecretsSecretOutputWithContext(context.Background())
}

func (i GetCodespacesUserSecretsSecretArgs) ToGetCodespacesUserSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesUserSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesUserSecretsSecretOutput)
}

// GetCodespacesUserSecretsSecretArrayInput is an input type that accepts GetCodespacesUserSecretsSecretArray and GetCodespacesUserSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetCodespacesUserSecretsSecretArrayInput` via:
//
//	GetCodespacesUserSecretsSecretArray{ GetCodespacesUserSecretsSecretArgs{...} }
type GetCodespacesUserSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetCodespacesUserSecretsSecretArrayOutput() GetCodespacesUserSecretsSecretArrayOutput
	ToGetCodespacesUserSecretsSecretArrayOutputWithContext(context.Context) GetCodespacesUserSecretsSecretArrayOutput
}

type GetCodespacesUserSecretsSecretArray []GetCodespacesUserSecretsSecretInput

func (GetCodespacesUserSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesUserSecretsSecret)(nil)).Elem()
}

func (i GetCodespacesUserSecretsSecretArray) ToGetCodespacesUserSecretsSecretArrayOutput() GetCodespacesUserSecretsSecretArrayOutput {
	return i.ToGetCodespacesUserSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetCodespacesUserSecretsSecretArray) ToGetCodespacesUserSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesUserSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCodespacesUserSecretsSecretArrayOutput)
}

type GetCodespacesUserSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetCodespacesUserSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCodespacesUserSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesUserSecretsSecretOutput) ToGetCodespacesUserSecretsSecretOutput() GetCodespacesUserSecretsSecretOutput {
	return o
}

func (o GetCodespacesUserSecretsSecretOutput) ToGetCodespacesUserSecretsSecretOutputWithContext(ctx context.Context) GetCodespacesUserSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetCodespacesUserSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesUserSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Secret name
func (o GetCodespacesUserSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesUserSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetCodespacesUserSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesUserSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Secret visibility
func (o GetCodespacesUserSecretsSecretOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetCodespacesUserSecretsSecret) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetCodespacesUserSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetCodespacesUserSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCodespacesUserSecretsSecret)(nil)).Elem()
}

func (o GetCodespacesUserSecretsSecretArrayOutput) ToGetCodespacesUserSecretsSecretArrayOutput() GetCodespacesUserSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesUserSecretsSecretArrayOutput) ToGetCodespacesUserSecretsSecretArrayOutputWithContext(ctx context.Context) GetCodespacesUserSecretsSecretArrayOutput {
	return o
}

func (o GetCodespacesUserSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetCodespacesUserSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCodespacesUserSecretsSecret {
		return vs[0].([]GetCodespacesUserSecretsSecret)[vs[1].(int)]
	}).(GetCodespacesUserSecretsSecretOutput)
}

type GetCollaboratorsCollaborator struct {
	// The GitHub API URL for the collaborator's events.
	EventsUrl string `pulumi:"eventsUrl"`
	// The GitHub API URL for the collaborator's followers.
	FollowersUrl string `pulumi:"followersUrl"`
	// The GitHub API URL for those following the collaborator.
	FollowingUrl string `pulumi:"followingUrl"`
	// The GitHub API URL for the collaborator's gists.
	GistsUrl string `pulumi:"gistsUrl"`
	// The GitHub HTML URL for the collaborator.
	HtmlUrl string `pulumi:"htmlUrl"`
	// The ID of the collaborator.
	Id int `pulumi:"id"`
	// The collaborator's login.
	Login string `pulumi:"login"`
	// The GitHub API URL for the collaborator's organizations.
	OrganizationsUrl string `pulumi:"organizationsUrl"`
	// The permission of the collaborator.
	Permission string `pulumi:"permission"`
	// The GitHub API URL for the collaborator's received events.
	ReceivedEventsUrl string `pulumi:"receivedEventsUrl"`
	// The GitHub API URL for the collaborator's repositories.
	ReposUrl string `pulumi:"reposUrl"`
	// Whether the user is a GitHub admin.
	SiteAdmin bool `pulumi:"siteAdmin"`
	// The GitHub API URL for the collaborator's starred repositories.
	StarredUrl string `pulumi:"starredUrl"`
	// The GitHub API URL for the collaborator's subscribed repositories.
	SubscriptionsUrl string `pulumi:"subscriptionsUrl"`
	// The type of the collaborator (ex. `user`).
	Type string `pulumi:"type"`
	// The GitHub API URL for the collaborator.
	Url string `pulumi:"url"`
}

// GetCollaboratorsCollaboratorInput is an input type that accepts GetCollaboratorsCollaboratorArgs and GetCollaboratorsCollaboratorOutput values.
// You can construct a concrete instance of `GetCollaboratorsCollaboratorInput` via:
//
//	GetCollaboratorsCollaboratorArgs{...}
type GetCollaboratorsCollaboratorInput interface {
	pulumi.Input

	ToGetCollaboratorsCollaboratorOutput() GetCollaboratorsCollaboratorOutput
	ToGetCollaboratorsCollaboratorOutputWithContext(context.Context) GetCollaboratorsCollaboratorOutput
}

type GetCollaboratorsCollaboratorArgs struct {
	// The GitHub API URL for the collaborator's events.
	EventsUrl pulumi.StringInput `pulumi:"eventsUrl"`
	// The GitHub API URL for the collaborator's followers.
	FollowersUrl pulumi.StringInput `pulumi:"followersUrl"`
	// The GitHub API URL for those following the collaborator.
	FollowingUrl pulumi.StringInput `pulumi:"followingUrl"`
	// The GitHub API URL for the collaborator's gists.
	GistsUrl pulumi.StringInput `pulumi:"gistsUrl"`
	// The GitHub HTML URL for the collaborator.
	HtmlUrl pulumi.StringInput `pulumi:"htmlUrl"`
	// The ID of the collaborator.
	Id pulumi.IntInput `pulumi:"id"`
	// The collaborator's login.
	Login pulumi.StringInput `pulumi:"login"`
	// The GitHub API URL for the collaborator's organizations.
	OrganizationsUrl pulumi.StringInput `pulumi:"organizationsUrl"`
	// The permission of the collaborator.
	Permission pulumi.StringInput `pulumi:"permission"`
	// The GitHub API URL for the collaborator's received events.
	ReceivedEventsUrl pulumi.StringInput `pulumi:"receivedEventsUrl"`
	// The GitHub API URL for the collaborator's repositories.
	ReposUrl pulumi.StringInput `pulumi:"reposUrl"`
	// Whether the user is a GitHub admin.
	SiteAdmin pulumi.BoolInput `pulumi:"siteAdmin"`
	// The GitHub API URL for the collaborator's starred repositories.
	StarredUrl pulumi.StringInput `pulumi:"starredUrl"`
	// The GitHub API URL for the collaborator's subscribed repositories.
	SubscriptionsUrl pulumi.StringInput `pulumi:"subscriptionsUrl"`
	// The type of the collaborator (ex. `user`).
	Type pulumi.StringInput `pulumi:"type"`
	// The GitHub API URL for the collaborator.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetCollaboratorsCollaboratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCollaboratorsCollaborator)(nil)).Elem()
}

func (i GetCollaboratorsCollaboratorArgs) ToGetCollaboratorsCollaboratorOutput() GetCollaboratorsCollaboratorOutput {
	return i.ToGetCollaboratorsCollaboratorOutputWithContext(context.Background())
}

func (i GetCollaboratorsCollaboratorArgs) ToGetCollaboratorsCollaboratorOutputWithContext(ctx context.Context) GetCollaboratorsCollaboratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCollaboratorsCollaboratorOutput)
}

// GetCollaboratorsCollaboratorArrayInput is an input type that accepts GetCollaboratorsCollaboratorArray and GetCollaboratorsCollaboratorArrayOutput values.
// You can construct a concrete instance of `GetCollaboratorsCollaboratorArrayInput` via:
//
//	GetCollaboratorsCollaboratorArray{ GetCollaboratorsCollaboratorArgs{...} }
type GetCollaboratorsCollaboratorArrayInput interface {
	pulumi.Input

	ToGetCollaboratorsCollaboratorArrayOutput() GetCollaboratorsCollaboratorArrayOutput
	ToGetCollaboratorsCollaboratorArrayOutputWithContext(context.Context) GetCollaboratorsCollaboratorArrayOutput
}

type GetCollaboratorsCollaboratorArray []GetCollaboratorsCollaboratorInput

func (GetCollaboratorsCollaboratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCollaboratorsCollaborator)(nil)).Elem()
}

func (i GetCollaboratorsCollaboratorArray) ToGetCollaboratorsCollaboratorArrayOutput() GetCollaboratorsCollaboratorArrayOutput {
	return i.ToGetCollaboratorsCollaboratorArrayOutputWithContext(context.Background())
}

func (i GetCollaboratorsCollaboratorArray) ToGetCollaboratorsCollaboratorArrayOutputWithContext(ctx context.Context) GetCollaboratorsCollaboratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCollaboratorsCollaboratorArrayOutput)
}

type GetCollaboratorsCollaboratorOutput struct{ *pulumi.OutputState }

func (GetCollaboratorsCollaboratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCollaboratorsCollaborator)(nil)).Elem()
}

func (o GetCollaboratorsCollaboratorOutput) ToGetCollaboratorsCollaboratorOutput() GetCollaboratorsCollaboratorOutput {
	return o
}

func (o GetCollaboratorsCollaboratorOutput) ToGetCollaboratorsCollaboratorOutputWithContext(ctx context.Context) GetCollaboratorsCollaboratorOutput {
	return o
}

// The GitHub API URL for the collaborator's events.
func (o GetCollaboratorsCollaboratorOutput) EventsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.EventsUrl }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's followers.
func (o GetCollaboratorsCollaboratorOutput) FollowersUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.FollowersUrl }).(pulumi.StringOutput)
}

// The GitHub API URL for those following the collaborator.
func (o GetCollaboratorsCollaboratorOutput) FollowingUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.FollowingUrl }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's gists.
func (o GetCollaboratorsCollaboratorOutput) GistsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.GistsUrl }).(pulumi.StringOutput)
}

// The GitHub HTML URL for the collaborator.
func (o GetCollaboratorsCollaboratorOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The ID of the collaborator.
func (o GetCollaboratorsCollaboratorOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) int { return v.Id }).(pulumi.IntOutput)
}

// The collaborator's login.
func (o GetCollaboratorsCollaboratorOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.Login }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's organizations.
func (o GetCollaboratorsCollaboratorOutput) OrganizationsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.OrganizationsUrl }).(pulumi.StringOutput)
}

// The permission of the collaborator.
func (o GetCollaboratorsCollaboratorOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.Permission }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's received events.
func (o GetCollaboratorsCollaboratorOutput) ReceivedEventsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.ReceivedEventsUrl }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's repositories.
func (o GetCollaboratorsCollaboratorOutput) ReposUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.ReposUrl }).(pulumi.StringOutput)
}

// Whether the user is a GitHub admin.
func (o GetCollaboratorsCollaboratorOutput) SiteAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) bool { return v.SiteAdmin }).(pulumi.BoolOutput)
}

// The GitHub API URL for the collaborator's starred repositories.
func (o GetCollaboratorsCollaboratorOutput) StarredUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.StarredUrl }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator's subscribed repositories.
func (o GetCollaboratorsCollaboratorOutput) SubscriptionsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.SubscriptionsUrl }).(pulumi.StringOutput)
}

// The type of the collaborator (ex. `user`).
func (o GetCollaboratorsCollaboratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.Type }).(pulumi.StringOutput)
}

// The GitHub API URL for the collaborator.
func (o GetCollaboratorsCollaboratorOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetCollaboratorsCollaborator) string { return v.Url }).(pulumi.StringOutput)
}

type GetCollaboratorsCollaboratorArrayOutput struct{ *pulumi.OutputState }

func (GetCollaboratorsCollaboratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCollaboratorsCollaborator)(nil)).Elem()
}

func (o GetCollaboratorsCollaboratorArrayOutput) ToGetCollaboratorsCollaboratorArrayOutput() GetCollaboratorsCollaboratorArrayOutput {
	return o
}

func (o GetCollaboratorsCollaboratorArrayOutput) ToGetCollaboratorsCollaboratorArrayOutputWithContext(ctx context.Context) GetCollaboratorsCollaboratorArrayOutput {
	return o
}

func (o GetCollaboratorsCollaboratorArrayOutput) Index(i pulumi.IntInput) GetCollaboratorsCollaboratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCollaboratorsCollaborator {
		return vs[0].([]GetCollaboratorsCollaborator)[vs[1].(int)]
	}).(GetCollaboratorsCollaboratorOutput)
}

type GetDependabotOrganizationSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// Secret name
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
	// Secret visibility
	Visibility string `pulumi:"visibility"`
}

// GetDependabotOrganizationSecretsSecretInput is an input type that accepts GetDependabotOrganizationSecretsSecretArgs and GetDependabotOrganizationSecretsSecretOutput values.
// You can construct a concrete instance of `GetDependabotOrganizationSecretsSecretInput` via:
//
//	GetDependabotOrganizationSecretsSecretArgs{...}
type GetDependabotOrganizationSecretsSecretInput interface {
	pulumi.Input

	ToGetDependabotOrganizationSecretsSecretOutput() GetDependabotOrganizationSecretsSecretOutput
	ToGetDependabotOrganizationSecretsSecretOutputWithContext(context.Context) GetDependabotOrganizationSecretsSecretOutput
}

type GetDependabotOrganizationSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Secret name
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Secret visibility
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetDependabotOrganizationSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDependabotOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetDependabotOrganizationSecretsSecretArgs) ToGetDependabotOrganizationSecretsSecretOutput() GetDependabotOrganizationSecretsSecretOutput {
	return i.ToGetDependabotOrganizationSecretsSecretOutputWithContext(context.Background())
}

func (i GetDependabotOrganizationSecretsSecretArgs) ToGetDependabotOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetDependabotOrganizationSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDependabotOrganizationSecretsSecretOutput)
}

// GetDependabotOrganizationSecretsSecretArrayInput is an input type that accepts GetDependabotOrganizationSecretsSecretArray and GetDependabotOrganizationSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetDependabotOrganizationSecretsSecretArrayInput` via:
//
//	GetDependabotOrganizationSecretsSecretArray{ GetDependabotOrganizationSecretsSecretArgs{...} }
type GetDependabotOrganizationSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetDependabotOrganizationSecretsSecretArrayOutput() GetDependabotOrganizationSecretsSecretArrayOutput
	ToGetDependabotOrganizationSecretsSecretArrayOutputWithContext(context.Context) GetDependabotOrganizationSecretsSecretArrayOutput
}

type GetDependabotOrganizationSecretsSecretArray []GetDependabotOrganizationSecretsSecretInput

func (GetDependabotOrganizationSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDependabotOrganizationSecretsSecret)(nil)).Elem()
}

func (i GetDependabotOrganizationSecretsSecretArray) ToGetDependabotOrganizationSecretsSecretArrayOutput() GetDependabotOrganizationSecretsSecretArrayOutput {
	return i.ToGetDependabotOrganizationSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetDependabotOrganizationSecretsSecretArray) ToGetDependabotOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetDependabotOrganizationSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDependabotOrganizationSecretsSecretArrayOutput)
}

type GetDependabotOrganizationSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetDependabotOrganizationSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDependabotOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetDependabotOrganizationSecretsSecretOutput) ToGetDependabotOrganizationSecretsSecretOutput() GetDependabotOrganizationSecretsSecretOutput {
	return o
}

func (o GetDependabotOrganizationSecretsSecretOutput) ToGetDependabotOrganizationSecretsSecretOutputWithContext(ctx context.Context) GetDependabotOrganizationSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetDependabotOrganizationSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotOrganizationSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Secret name
func (o GetDependabotOrganizationSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotOrganizationSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetDependabotOrganizationSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotOrganizationSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Secret visibility
func (o GetDependabotOrganizationSecretsSecretOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotOrganizationSecretsSecret) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetDependabotOrganizationSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetDependabotOrganizationSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDependabotOrganizationSecretsSecret)(nil)).Elem()
}

func (o GetDependabotOrganizationSecretsSecretArrayOutput) ToGetDependabotOrganizationSecretsSecretArrayOutput() GetDependabotOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetDependabotOrganizationSecretsSecretArrayOutput) ToGetDependabotOrganizationSecretsSecretArrayOutputWithContext(ctx context.Context) GetDependabotOrganizationSecretsSecretArrayOutput {
	return o
}

func (o GetDependabotOrganizationSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetDependabotOrganizationSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDependabotOrganizationSecretsSecret {
		return vs[0].([]GetDependabotOrganizationSecretsSecret)[vs[1].(int)]
	}).(GetDependabotOrganizationSecretsSecretOutput)
}

type GetDependabotSecretsSecret struct {
	// Timestamp of the secret creation
	CreatedAt string `pulumi:"createdAt"`
	// The name of the repository.
	Name string `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetDependabotSecretsSecretInput is an input type that accepts GetDependabotSecretsSecretArgs and GetDependabotSecretsSecretOutput values.
// You can construct a concrete instance of `GetDependabotSecretsSecretInput` via:
//
//	GetDependabotSecretsSecretArgs{...}
type GetDependabotSecretsSecretInput interface {
	pulumi.Input

	ToGetDependabotSecretsSecretOutput() GetDependabotSecretsSecretOutput
	ToGetDependabotSecretsSecretOutputWithContext(context.Context) GetDependabotSecretsSecretOutput
}

type GetDependabotSecretsSecretArgs struct {
	// Timestamp of the secret creation
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Timestamp of the secret last update
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetDependabotSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDependabotSecretsSecret)(nil)).Elem()
}

func (i GetDependabotSecretsSecretArgs) ToGetDependabotSecretsSecretOutput() GetDependabotSecretsSecretOutput {
	return i.ToGetDependabotSecretsSecretOutputWithContext(context.Background())
}

func (i GetDependabotSecretsSecretArgs) ToGetDependabotSecretsSecretOutputWithContext(ctx context.Context) GetDependabotSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDependabotSecretsSecretOutput)
}

// GetDependabotSecretsSecretArrayInput is an input type that accepts GetDependabotSecretsSecretArray and GetDependabotSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetDependabotSecretsSecretArrayInput` via:
//
//	GetDependabotSecretsSecretArray{ GetDependabotSecretsSecretArgs{...} }
type GetDependabotSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetDependabotSecretsSecretArrayOutput() GetDependabotSecretsSecretArrayOutput
	ToGetDependabotSecretsSecretArrayOutputWithContext(context.Context) GetDependabotSecretsSecretArrayOutput
}

type GetDependabotSecretsSecretArray []GetDependabotSecretsSecretInput

func (GetDependabotSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDependabotSecretsSecret)(nil)).Elem()
}

func (i GetDependabotSecretsSecretArray) ToGetDependabotSecretsSecretArrayOutput() GetDependabotSecretsSecretArrayOutput {
	return i.ToGetDependabotSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetDependabotSecretsSecretArray) ToGetDependabotSecretsSecretArrayOutputWithContext(ctx context.Context) GetDependabotSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDependabotSecretsSecretArrayOutput)
}

type GetDependabotSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetDependabotSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDependabotSecretsSecret)(nil)).Elem()
}

func (o GetDependabotSecretsSecretOutput) ToGetDependabotSecretsSecretOutput() GetDependabotSecretsSecretOutput {
	return o
}

func (o GetDependabotSecretsSecretOutput) ToGetDependabotSecretsSecretOutputWithContext(ctx context.Context) GetDependabotSecretsSecretOutput {
	return o
}

// Timestamp of the secret creation
func (o GetDependabotSecretsSecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotSecretsSecret) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The name of the repository.
func (o GetDependabotSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

// Timestamp of the secret last update
func (o GetDependabotSecretsSecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDependabotSecretsSecret) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetDependabotSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetDependabotSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDependabotSecretsSecret)(nil)).Elem()
}

func (o GetDependabotSecretsSecretArrayOutput) ToGetDependabotSecretsSecretArrayOutput() GetDependabotSecretsSecretArrayOutput {
	return o
}

func (o GetDependabotSecretsSecretArrayOutput) ToGetDependabotSecretsSecretArrayOutputWithContext(ctx context.Context) GetDependabotSecretsSecretArrayOutput {
	return o
}

func (o GetDependabotSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetDependabotSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDependabotSecretsSecret {
		return vs[0].([]GetDependabotSecretsSecret)[vs[1].(int)]
	}).(GetDependabotSecretsSecretOutput)
}

type GetExternalGroupsExternalGroup struct {
	// the ID of the group.
	GroupId int `pulumi:"groupId"`
	// the name of the group.
	GroupName string `pulumi:"groupName"`
	// the date the group was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetExternalGroupsExternalGroupInput is an input type that accepts GetExternalGroupsExternalGroupArgs and GetExternalGroupsExternalGroupOutput values.
// You can construct a concrete instance of `GetExternalGroupsExternalGroupInput` via:
//
//	GetExternalGroupsExternalGroupArgs{...}
type GetExternalGroupsExternalGroupInput interface {
	pulumi.Input

	ToGetExternalGroupsExternalGroupOutput() GetExternalGroupsExternalGroupOutput
	ToGetExternalGroupsExternalGroupOutputWithContext(context.Context) GetExternalGroupsExternalGroupOutput
}

type GetExternalGroupsExternalGroupArgs struct {
	// the ID of the group.
	GroupId pulumi.IntInput `pulumi:"groupId"`
	// the name of the group.
	GroupName pulumi.StringInput `pulumi:"groupName"`
	// the date the group was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetExternalGroupsExternalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalGroupsExternalGroup)(nil)).Elem()
}

func (i GetExternalGroupsExternalGroupArgs) ToGetExternalGroupsExternalGroupOutput() GetExternalGroupsExternalGroupOutput {
	return i.ToGetExternalGroupsExternalGroupOutputWithContext(context.Background())
}

func (i GetExternalGroupsExternalGroupArgs) ToGetExternalGroupsExternalGroupOutputWithContext(ctx context.Context) GetExternalGroupsExternalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalGroupsExternalGroupOutput)
}

// GetExternalGroupsExternalGroupArrayInput is an input type that accepts GetExternalGroupsExternalGroupArray and GetExternalGroupsExternalGroupArrayOutput values.
// You can construct a concrete instance of `GetExternalGroupsExternalGroupArrayInput` via:
//
//	GetExternalGroupsExternalGroupArray{ GetExternalGroupsExternalGroupArgs{...} }
type GetExternalGroupsExternalGroupArrayInput interface {
	pulumi.Input

	ToGetExternalGroupsExternalGroupArrayOutput() GetExternalGroupsExternalGroupArrayOutput
	ToGetExternalGroupsExternalGroupArrayOutputWithContext(context.Context) GetExternalGroupsExternalGroupArrayOutput
}

type GetExternalGroupsExternalGroupArray []GetExternalGroupsExternalGroupInput

func (GetExternalGroupsExternalGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalGroupsExternalGroup)(nil)).Elem()
}

func (i GetExternalGroupsExternalGroupArray) ToGetExternalGroupsExternalGroupArrayOutput() GetExternalGroupsExternalGroupArrayOutput {
	return i.ToGetExternalGroupsExternalGroupArrayOutputWithContext(context.Background())
}

func (i GetExternalGroupsExternalGroupArray) ToGetExternalGroupsExternalGroupArrayOutputWithContext(ctx context.Context) GetExternalGroupsExternalGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExternalGroupsExternalGroupArrayOutput)
}

type GetExternalGroupsExternalGroupOutput struct{ *pulumi.OutputState }

func (GetExternalGroupsExternalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExternalGroupsExternalGroup)(nil)).Elem()
}

func (o GetExternalGroupsExternalGroupOutput) ToGetExternalGroupsExternalGroupOutput() GetExternalGroupsExternalGroupOutput {
	return o
}

func (o GetExternalGroupsExternalGroupOutput) ToGetExternalGroupsExternalGroupOutputWithContext(ctx context.Context) GetExternalGroupsExternalGroupOutput {
	return o
}

// the ID of the group.
func (o GetExternalGroupsExternalGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v GetExternalGroupsExternalGroup) int { return v.GroupId }).(pulumi.IntOutput)
}

// the name of the group.
func (o GetExternalGroupsExternalGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalGroupsExternalGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

// the date the group was last updated.
func (o GetExternalGroupsExternalGroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetExternalGroupsExternalGroup) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetExternalGroupsExternalGroupArrayOutput struct{ *pulumi.OutputState }

func (GetExternalGroupsExternalGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExternalGroupsExternalGroup)(nil)).Elem()
}

func (o GetExternalGroupsExternalGroupArrayOutput) ToGetExternalGroupsExternalGroupArrayOutput() GetExternalGroupsExternalGroupArrayOutput {
	return o
}

func (o GetExternalGroupsExternalGroupArrayOutput) ToGetExternalGroupsExternalGroupArrayOutputWithContext(ctx context.Context) GetExternalGroupsExternalGroupArrayOutput {
	return o
}

func (o GetExternalGroupsExternalGroupArrayOutput) Index(i pulumi.IntInput) GetExternalGroupsExternalGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExternalGroupsExternalGroup {
		return vs[0].([]GetExternalGroupsExternalGroup)[vs[1].(int)]
	}).(GetExternalGroupsExternalGroupOutput)
}

type GetIssueLabelsLabel struct {
	// The hexadecimal color code for the label, without the leading #.
	Color string `pulumi:"color"`
	// A short description of the label.
	Description string `pulumi:"description"`
	// The name of the label.
	Name string `pulumi:"name"`
	// The URL of the label.
	Url string `pulumi:"url"`
}

// GetIssueLabelsLabelInput is an input type that accepts GetIssueLabelsLabelArgs and GetIssueLabelsLabelOutput values.
// You can construct a concrete instance of `GetIssueLabelsLabelInput` via:
//
//	GetIssueLabelsLabelArgs{...}
type GetIssueLabelsLabelInput interface {
	pulumi.Input

	ToGetIssueLabelsLabelOutput() GetIssueLabelsLabelOutput
	ToGetIssueLabelsLabelOutputWithContext(context.Context) GetIssueLabelsLabelOutput
}

type GetIssueLabelsLabelArgs struct {
	// The hexadecimal color code for the label, without the leading #.
	Color pulumi.StringInput `pulumi:"color"`
	// A short description of the label.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the label.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the label.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetIssueLabelsLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIssueLabelsLabel)(nil)).Elem()
}

func (i GetIssueLabelsLabelArgs) ToGetIssueLabelsLabelOutput() GetIssueLabelsLabelOutput {
	return i.ToGetIssueLabelsLabelOutputWithContext(context.Background())
}

func (i GetIssueLabelsLabelArgs) ToGetIssueLabelsLabelOutputWithContext(ctx context.Context) GetIssueLabelsLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIssueLabelsLabelOutput)
}

// GetIssueLabelsLabelArrayInput is an input type that accepts GetIssueLabelsLabelArray and GetIssueLabelsLabelArrayOutput values.
// You can construct a concrete instance of `GetIssueLabelsLabelArrayInput` via:
//
//	GetIssueLabelsLabelArray{ GetIssueLabelsLabelArgs{...} }
type GetIssueLabelsLabelArrayInput interface {
	pulumi.Input

	ToGetIssueLabelsLabelArrayOutput() GetIssueLabelsLabelArrayOutput
	ToGetIssueLabelsLabelArrayOutputWithContext(context.Context) GetIssueLabelsLabelArrayOutput
}

type GetIssueLabelsLabelArray []GetIssueLabelsLabelInput

func (GetIssueLabelsLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIssueLabelsLabel)(nil)).Elem()
}

func (i GetIssueLabelsLabelArray) ToGetIssueLabelsLabelArrayOutput() GetIssueLabelsLabelArrayOutput {
	return i.ToGetIssueLabelsLabelArrayOutputWithContext(context.Background())
}

func (i GetIssueLabelsLabelArray) ToGetIssueLabelsLabelArrayOutputWithContext(ctx context.Context) GetIssueLabelsLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIssueLabelsLabelArrayOutput)
}

type GetIssueLabelsLabelOutput struct{ *pulumi.OutputState }

func (GetIssueLabelsLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIssueLabelsLabel)(nil)).Elem()
}

func (o GetIssueLabelsLabelOutput) ToGetIssueLabelsLabelOutput() GetIssueLabelsLabelOutput {
	return o
}

func (o GetIssueLabelsLabelOutput) ToGetIssueLabelsLabelOutputWithContext(ctx context.Context) GetIssueLabelsLabelOutput {
	return o
}

// The hexadecimal color code for the label, without the leading #.
func (o GetIssueLabelsLabelOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v GetIssueLabelsLabel) string { return v.Color }).(pulumi.StringOutput)
}

// A short description of the label.
func (o GetIssueLabelsLabelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetIssueLabelsLabel) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the label.
func (o GetIssueLabelsLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIssueLabelsLabel) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the label.
func (o GetIssueLabelsLabelOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetIssueLabelsLabel) string { return v.Url }).(pulumi.StringOutput)
}

type GetIssueLabelsLabelArrayOutput struct{ *pulumi.OutputState }

func (GetIssueLabelsLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIssueLabelsLabel)(nil)).Elem()
}

func (o GetIssueLabelsLabelArrayOutput) ToGetIssueLabelsLabelArrayOutput() GetIssueLabelsLabelArrayOutput {
	return o
}

func (o GetIssueLabelsLabelArrayOutput) ToGetIssueLabelsLabelArrayOutputWithContext(ctx context.Context) GetIssueLabelsLabelArrayOutput {
	return o
}

func (o GetIssueLabelsLabelArrayOutput) Index(i pulumi.IntInput) GetIssueLabelsLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIssueLabelsLabel {
		return vs[0].([]GetIssueLabelsLabel)[vs[1].(int)]
	}).(GetIssueLabelsLabelOutput)
}

type GetOrganizationExternalIdentitiesIdentity struct {
	// The username of the GitHub user
	Login string `pulumi:"login"`
	// An Object containing the user's SAML data. This object will
	// be empty if the user is not managed by SAML.
	SamlIdentity map[string]string `pulumi:"samlIdentity"`
	// An Object contining the user's SCIM data. This object will
	// be empty if the user is not managed by SCIM.
	ScimIdentity map[string]string `pulumi:"scimIdentity"`
}

// GetOrganizationExternalIdentitiesIdentityInput is an input type that accepts GetOrganizationExternalIdentitiesIdentityArgs and GetOrganizationExternalIdentitiesIdentityOutput values.
// You can construct a concrete instance of `GetOrganizationExternalIdentitiesIdentityInput` via:
//
//	GetOrganizationExternalIdentitiesIdentityArgs{...}
type GetOrganizationExternalIdentitiesIdentityInput interface {
	pulumi.Input

	ToGetOrganizationExternalIdentitiesIdentityOutput() GetOrganizationExternalIdentitiesIdentityOutput
	ToGetOrganizationExternalIdentitiesIdentityOutputWithContext(context.Context) GetOrganizationExternalIdentitiesIdentityOutput
}

type GetOrganizationExternalIdentitiesIdentityArgs struct {
	// The username of the GitHub user
	Login pulumi.StringInput `pulumi:"login"`
	// An Object containing the user's SAML data. This object will
	// be empty if the user is not managed by SAML.
	SamlIdentity pulumi.StringMapInput `pulumi:"samlIdentity"`
	// An Object contining the user's SCIM data. This object will
	// be empty if the user is not managed by SCIM.
	ScimIdentity pulumi.StringMapInput `pulumi:"scimIdentity"`
}

func (GetOrganizationExternalIdentitiesIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationExternalIdentitiesIdentity)(nil)).Elem()
}

func (i GetOrganizationExternalIdentitiesIdentityArgs) ToGetOrganizationExternalIdentitiesIdentityOutput() GetOrganizationExternalIdentitiesIdentityOutput {
	return i.ToGetOrganizationExternalIdentitiesIdentityOutputWithContext(context.Background())
}

func (i GetOrganizationExternalIdentitiesIdentityArgs) ToGetOrganizationExternalIdentitiesIdentityOutputWithContext(ctx context.Context) GetOrganizationExternalIdentitiesIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationExternalIdentitiesIdentityOutput)
}

// GetOrganizationExternalIdentitiesIdentityArrayInput is an input type that accepts GetOrganizationExternalIdentitiesIdentityArray and GetOrganizationExternalIdentitiesIdentityArrayOutput values.
// You can construct a concrete instance of `GetOrganizationExternalIdentitiesIdentityArrayInput` via:
//
//	GetOrganizationExternalIdentitiesIdentityArray{ GetOrganizationExternalIdentitiesIdentityArgs{...} }
type GetOrganizationExternalIdentitiesIdentityArrayInput interface {
	pulumi.Input

	ToGetOrganizationExternalIdentitiesIdentityArrayOutput() GetOrganizationExternalIdentitiesIdentityArrayOutput
	ToGetOrganizationExternalIdentitiesIdentityArrayOutputWithContext(context.Context) GetOrganizationExternalIdentitiesIdentityArrayOutput
}

type GetOrganizationExternalIdentitiesIdentityArray []GetOrganizationExternalIdentitiesIdentityInput

func (GetOrganizationExternalIdentitiesIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationExternalIdentitiesIdentity)(nil)).Elem()
}

func (i GetOrganizationExternalIdentitiesIdentityArray) ToGetOrganizationExternalIdentitiesIdentityArrayOutput() GetOrganizationExternalIdentitiesIdentityArrayOutput {
	return i.ToGetOrganizationExternalIdentitiesIdentityArrayOutputWithContext(context.Background())
}

func (i GetOrganizationExternalIdentitiesIdentityArray) ToGetOrganizationExternalIdentitiesIdentityArrayOutputWithContext(ctx context.Context) GetOrganizationExternalIdentitiesIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationExternalIdentitiesIdentityArrayOutput)
}

type GetOrganizationExternalIdentitiesIdentityOutput struct{ *pulumi.OutputState }

func (GetOrganizationExternalIdentitiesIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationExternalIdentitiesIdentity)(nil)).Elem()
}

func (o GetOrganizationExternalIdentitiesIdentityOutput) ToGetOrganizationExternalIdentitiesIdentityOutput() GetOrganizationExternalIdentitiesIdentityOutput {
	return o
}

func (o GetOrganizationExternalIdentitiesIdentityOutput) ToGetOrganizationExternalIdentitiesIdentityOutputWithContext(ctx context.Context) GetOrganizationExternalIdentitiesIdentityOutput {
	return o
}

// The username of the GitHub user
func (o GetOrganizationExternalIdentitiesIdentityOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationExternalIdentitiesIdentity) string { return v.Login }).(pulumi.StringOutput)
}

// An Object containing the user's SAML data. This object will
// be empty if the user is not managed by SAML.
func (o GetOrganizationExternalIdentitiesIdentityOutput) SamlIdentity() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetOrganizationExternalIdentitiesIdentity) map[string]string { return v.SamlIdentity }).(pulumi.StringMapOutput)
}

// An Object contining the user's SCIM data. This object will
// be empty if the user is not managed by SCIM.
func (o GetOrganizationExternalIdentitiesIdentityOutput) ScimIdentity() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetOrganizationExternalIdentitiesIdentity) map[string]string { return v.ScimIdentity }).(pulumi.StringMapOutput)
}

type GetOrganizationExternalIdentitiesIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationExternalIdentitiesIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationExternalIdentitiesIdentity)(nil)).Elem()
}

func (o GetOrganizationExternalIdentitiesIdentityArrayOutput) ToGetOrganizationExternalIdentitiesIdentityArrayOutput() GetOrganizationExternalIdentitiesIdentityArrayOutput {
	return o
}

func (o GetOrganizationExternalIdentitiesIdentityArrayOutput) ToGetOrganizationExternalIdentitiesIdentityArrayOutputWithContext(ctx context.Context) GetOrganizationExternalIdentitiesIdentityArrayOutput {
	return o
}

func (o GetOrganizationExternalIdentitiesIdentityArrayOutput) Index(i pulumi.IntInput) GetOrganizationExternalIdentitiesIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationExternalIdentitiesIdentity {
		return vs[0].([]GetOrganizationExternalIdentitiesIdentity)[vs[1].(int)]
	}).(GetOrganizationExternalIdentitiesIdentityOutput)
}

type GetOrganizationIpAllowListIpAllowList struct {
	// A single IP address or range of IP addresses in CIDR notation.
	AllowListValue string `pulumi:"allowListValue"`
	// Identifies the date and time when the object was created.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the IP allow list entry.
	Id string `pulumi:"id"`
	// Whether the entry is currently active.
	IsActive bool `pulumi:"isActive"`
	// The name of the IP allow list entry.
	Name string `pulumi:"name"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetOrganizationIpAllowListIpAllowListInput is an input type that accepts GetOrganizationIpAllowListIpAllowListArgs and GetOrganizationIpAllowListIpAllowListOutput values.
// You can construct a concrete instance of `GetOrganizationIpAllowListIpAllowListInput` via:
//
//	GetOrganizationIpAllowListIpAllowListArgs{...}
type GetOrganizationIpAllowListIpAllowListInput interface {
	pulumi.Input

	ToGetOrganizationIpAllowListIpAllowListOutput() GetOrganizationIpAllowListIpAllowListOutput
	ToGetOrganizationIpAllowListIpAllowListOutputWithContext(context.Context) GetOrganizationIpAllowListIpAllowListOutput
}

type GetOrganizationIpAllowListIpAllowListArgs struct {
	// A single IP address or range of IP addresses in CIDR notation.
	AllowListValue pulumi.StringInput `pulumi:"allowListValue"`
	// Identifies the date and time when the object was created.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of the IP allow list entry.
	Id pulumi.StringInput `pulumi:"id"`
	// Whether the entry is currently active.
	IsActive pulumi.BoolInput `pulumi:"isActive"`
	// The name of the IP allow list entry.
	Name pulumi.StringInput `pulumi:"name"`
	// Identifies the date and time when the object was last updated.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetOrganizationIpAllowListIpAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationIpAllowListIpAllowList)(nil)).Elem()
}

func (i GetOrganizationIpAllowListIpAllowListArgs) ToGetOrganizationIpAllowListIpAllowListOutput() GetOrganizationIpAllowListIpAllowListOutput {
	return i.ToGetOrganizationIpAllowListIpAllowListOutputWithContext(context.Background())
}

func (i GetOrganizationIpAllowListIpAllowListArgs) ToGetOrganizationIpAllowListIpAllowListOutputWithContext(ctx context.Context) GetOrganizationIpAllowListIpAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationIpAllowListIpAllowListOutput)
}

// GetOrganizationIpAllowListIpAllowListArrayInput is an input type that accepts GetOrganizationIpAllowListIpAllowListArray and GetOrganizationIpAllowListIpAllowListArrayOutput values.
// You can construct a concrete instance of `GetOrganizationIpAllowListIpAllowListArrayInput` via:
//
//	GetOrganizationIpAllowListIpAllowListArray{ GetOrganizationIpAllowListIpAllowListArgs{...} }
type GetOrganizationIpAllowListIpAllowListArrayInput interface {
	pulumi.Input

	ToGetOrganizationIpAllowListIpAllowListArrayOutput() GetOrganizationIpAllowListIpAllowListArrayOutput
	ToGetOrganizationIpAllowListIpAllowListArrayOutputWithContext(context.Context) GetOrganizationIpAllowListIpAllowListArrayOutput
}

type GetOrganizationIpAllowListIpAllowListArray []GetOrganizationIpAllowListIpAllowListInput

func (GetOrganizationIpAllowListIpAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationIpAllowListIpAllowList)(nil)).Elem()
}

func (i GetOrganizationIpAllowListIpAllowListArray) ToGetOrganizationIpAllowListIpAllowListArrayOutput() GetOrganizationIpAllowListIpAllowListArrayOutput {
	return i.ToGetOrganizationIpAllowListIpAllowListArrayOutputWithContext(context.Background())
}

func (i GetOrganizationIpAllowListIpAllowListArray) ToGetOrganizationIpAllowListIpAllowListArrayOutputWithContext(ctx context.Context) GetOrganizationIpAllowListIpAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationIpAllowListIpAllowListArrayOutput)
}

type GetOrganizationIpAllowListIpAllowListOutput struct{ *pulumi.OutputState }

func (GetOrganizationIpAllowListIpAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationIpAllowListIpAllowList)(nil)).Elem()
}

func (o GetOrganizationIpAllowListIpAllowListOutput) ToGetOrganizationIpAllowListIpAllowListOutput() GetOrganizationIpAllowListIpAllowListOutput {
	return o
}

func (o GetOrganizationIpAllowListIpAllowListOutput) ToGetOrganizationIpAllowListIpAllowListOutputWithContext(ctx context.Context) GetOrganizationIpAllowListIpAllowListOutput {
	return o
}

// A single IP address or range of IP addresses in CIDR notation.
func (o GetOrganizationIpAllowListIpAllowListOutput) AllowListValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) string { return v.AllowListValue }).(pulumi.StringOutput)
}

// Identifies the date and time when the object was created.
func (o GetOrganizationIpAllowListIpAllowListOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the IP allow list entry.
func (o GetOrganizationIpAllowListIpAllowListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the entry is currently active.
func (o GetOrganizationIpAllowListIpAllowListOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// The name of the IP allow list entry.
func (o GetOrganizationIpAllowListIpAllowListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) string { return v.Name }).(pulumi.StringOutput)
}

// Identifies the date and time when the object was last updated.
func (o GetOrganizationIpAllowListIpAllowListOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationIpAllowListIpAllowList) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetOrganizationIpAllowListIpAllowListArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationIpAllowListIpAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationIpAllowListIpAllowList)(nil)).Elem()
}

func (o GetOrganizationIpAllowListIpAllowListArrayOutput) ToGetOrganizationIpAllowListIpAllowListArrayOutput() GetOrganizationIpAllowListIpAllowListArrayOutput {
	return o
}

func (o GetOrganizationIpAllowListIpAllowListArrayOutput) ToGetOrganizationIpAllowListIpAllowListArrayOutputWithContext(ctx context.Context) GetOrganizationIpAllowListIpAllowListArrayOutput {
	return o
}

func (o GetOrganizationIpAllowListIpAllowListArrayOutput) Index(i pulumi.IntInput) GetOrganizationIpAllowListIpAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationIpAllowListIpAllowList {
		return vs[0].([]GetOrganizationIpAllowListIpAllowList)[vs[1].(int)]
	}).(GetOrganizationIpAllowListIpAllowListOutput)
}

type GetOrganizationTeamSyncGroupsGroup struct {
	// The description of the IdP group.
	GroupDescription string `pulumi:"groupDescription"`
	// The ID of the IdP group.
	GroupId string `pulumi:"groupId"`
	// The name of the IdP group.
	GroupName string `pulumi:"groupName"`
}

// GetOrganizationTeamSyncGroupsGroupInput is an input type that accepts GetOrganizationTeamSyncGroupsGroupArgs and GetOrganizationTeamSyncGroupsGroupOutput values.
// You can construct a concrete instance of `GetOrganizationTeamSyncGroupsGroupInput` via:
//
//	GetOrganizationTeamSyncGroupsGroupArgs{...}
type GetOrganizationTeamSyncGroupsGroupInput interface {
	pulumi.Input

	ToGetOrganizationTeamSyncGroupsGroupOutput() GetOrganizationTeamSyncGroupsGroupOutput
	ToGetOrganizationTeamSyncGroupsGroupOutputWithContext(context.Context) GetOrganizationTeamSyncGroupsGroupOutput
}

type GetOrganizationTeamSyncGroupsGroupArgs struct {
	// The description of the IdP group.
	GroupDescription pulumi.StringInput `pulumi:"groupDescription"`
	// The ID of the IdP group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The name of the IdP group.
	GroupName pulumi.StringInput `pulumi:"groupName"`
}

func (GetOrganizationTeamSyncGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationTeamSyncGroupsGroup)(nil)).Elem()
}

func (i GetOrganizationTeamSyncGroupsGroupArgs) ToGetOrganizationTeamSyncGroupsGroupOutput() GetOrganizationTeamSyncGroupsGroupOutput {
	return i.ToGetOrganizationTeamSyncGroupsGroupOutputWithContext(context.Background())
}

func (i GetOrganizationTeamSyncGroupsGroupArgs) ToGetOrganizationTeamSyncGroupsGroupOutputWithContext(ctx context.Context) GetOrganizationTeamSyncGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationTeamSyncGroupsGroupOutput)
}

// GetOrganizationTeamSyncGroupsGroupArrayInput is an input type that accepts GetOrganizationTeamSyncGroupsGroupArray and GetOrganizationTeamSyncGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetOrganizationTeamSyncGroupsGroupArrayInput` via:
//
//	GetOrganizationTeamSyncGroupsGroupArray{ GetOrganizationTeamSyncGroupsGroupArgs{...} }
type GetOrganizationTeamSyncGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetOrganizationTeamSyncGroupsGroupArrayOutput() GetOrganizationTeamSyncGroupsGroupArrayOutput
	ToGetOrganizationTeamSyncGroupsGroupArrayOutputWithContext(context.Context) GetOrganizationTeamSyncGroupsGroupArrayOutput
}

type GetOrganizationTeamSyncGroupsGroupArray []GetOrganizationTeamSyncGroupsGroupInput

func (GetOrganizationTeamSyncGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationTeamSyncGroupsGroup)(nil)).Elem()
}

func (i GetOrganizationTeamSyncGroupsGroupArray) ToGetOrganizationTeamSyncGroupsGroupArrayOutput() GetOrganizationTeamSyncGroupsGroupArrayOutput {
	return i.ToGetOrganizationTeamSyncGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetOrganizationTeamSyncGroupsGroupArray) ToGetOrganizationTeamSyncGroupsGroupArrayOutputWithContext(ctx context.Context) GetOrganizationTeamSyncGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationTeamSyncGroupsGroupArrayOutput)
}

type GetOrganizationTeamSyncGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetOrganizationTeamSyncGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationTeamSyncGroupsGroup)(nil)).Elem()
}

func (o GetOrganizationTeamSyncGroupsGroupOutput) ToGetOrganizationTeamSyncGroupsGroupOutput() GetOrganizationTeamSyncGroupsGroupOutput {
	return o
}

func (o GetOrganizationTeamSyncGroupsGroupOutput) ToGetOrganizationTeamSyncGroupsGroupOutputWithContext(ctx context.Context) GetOrganizationTeamSyncGroupsGroupOutput {
	return o
}

// The description of the IdP group.
func (o GetOrganizationTeamSyncGroupsGroupOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamSyncGroupsGroup) string { return v.GroupDescription }).(pulumi.StringOutput)
}

// The ID of the IdP group.
func (o GetOrganizationTeamSyncGroupsGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamSyncGroupsGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The name of the IdP group.
func (o GetOrganizationTeamSyncGroupsGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamSyncGroupsGroup) string { return v.GroupName }).(pulumi.StringOutput)
}

type GetOrganizationTeamSyncGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationTeamSyncGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationTeamSyncGroupsGroup)(nil)).Elem()
}

func (o GetOrganizationTeamSyncGroupsGroupArrayOutput) ToGetOrganizationTeamSyncGroupsGroupArrayOutput() GetOrganizationTeamSyncGroupsGroupArrayOutput {
	return o
}

func (o GetOrganizationTeamSyncGroupsGroupArrayOutput) ToGetOrganizationTeamSyncGroupsGroupArrayOutputWithContext(ctx context.Context) GetOrganizationTeamSyncGroupsGroupArrayOutput {
	return o
}

func (o GetOrganizationTeamSyncGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetOrganizationTeamSyncGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationTeamSyncGroupsGroup {
		return vs[0].([]GetOrganizationTeamSyncGroupsGroup)[vs[1].(int)]
	}).(GetOrganizationTeamSyncGroupsGroupOutput)
}

type GetOrganizationTeamsTeam struct {
	// the team's description.
	Description string `pulumi:"description"`
	// the ID of the team.
	Id int `pulumi:"id"`
	// List of team members. Not returned if `summaryOnly = true`
	Members []string `pulumi:"members"`
	// the team's full name.
	Name string `pulumi:"name"`
	// the Node ID of the team.
	NodeId string `pulumi:"nodeId"`
	// the parent team.
	Parent map[string]string `pulumi:"parent"`
	// the team's privacy type.
	Privacy string `pulumi:"privacy"`
	// List of team repositories. Not returned if `summaryOnly = true`
	Repositories []string `pulumi:"repositories"`
	// the slug of the team.
	Slug string `pulumi:"slug"`
}

// GetOrganizationTeamsTeamInput is an input type that accepts GetOrganizationTeamsTeamArgs and GetOrganizationTeamsTeamOutput values.
// You can construct a concrete instance of `GetOrganizationTeamsTeamInput` via:
//
//	GetOrganizationTeamsTeamArgs{...}
type GetOrganizationTeamsTeamInput interface {
	pulumi.Input

	ToGetOrganizationTeamsTeamOutput() GetOrganizationTeamsTeamOutput
	ToGetOrganizationTeamsTeamOutputWithContext(context.Context) GetOrganizationTeamsTeamOutput
}

type GetOrganizationTeamsTeamArgs struct {
	// the team's description.
	Description pulumi.StringInput `pulumi:"description"`
	// the ID of the team.
	Id pulumi.IntInput `pulumi:"id"`
	// List of team members. Not returned if `summaryOnly = true`
	Members pulumi.StringArrayInput `pulumi:"members"`
	// the team's full name.
	Name pulumi.StringInput `pulumi:"name"`
	// the Node ID of the team.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// the parent team.
	Parent pulumi.StringMapInput `pulumi:"parent"`
	// the team's privacy type.
	Privacy pulumi.StringInput `pulumi:"privacy"`
	// List of team repositories. Not returned if `summaryOnly = true`
	Repositories pulumi.StringArrayInput `pulumi:"repositories"`
	// the slug of the team.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetOrganizationTeamsTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationTeamsTeam)(nil)).Elem()
}

func (i GetOrganizationTeamsTeamArgs) ToGetOrganizationTeamsTeamOutput() GetOrganizationTeamsTeamOutput {
	return i.ToGetOrganizationTeamsTeamOutputWithContext(context.Background())
}

func (i GetOrganizationTeamsTeamArgs) ToGetOrganizationTeamsTeamOutputWithContext(ctx context.Context) GetOrganizationTeamsTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationTeamsTeamOutput)
}

// GetOrganizationTeamsTeamArrayInput is an input type that accepts GetOrganizationTeamsTeamArray and GetOrganizationTeamsTeamArrayOutput values.
// You can construct a concrete instance of `GetOrganizationTeamsTeamArrayInput` via:
//
//	GetOrganizationTeamsTeamArray{ GetOrganizationTeamsTeamArgs{...} }
type GetOrganizationTeamsTeamArrayInput interface {
	pulumi.Input

	ToGetOrganizationTeamsTeamArrayOutput() GetOrganizationTeamsTeamArrayOutput
	ToGetOrganizationTeamsTeamArrayOutputWithContext(context.Context) GetOrganizationTeamsTeamArrayOutput
}

type GetOrganizationTeamsTeamArray []GetOrganizationTeamsTeamInput

func (GetOrganizationTeamsTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationTeamsTeam)(nil)).Elem()
}

func (i GetOrganizationTeamsTeamArray) ToGetOrganizationTeamsTeamArrayOutput() GetOrganizationTeamsTeamArrayOutput {
	return i.ToGetOrganizationTeamsTeamArrayOutputWithContext(context.Background())
}

func (i GetOrganizationTeamsTeamArray) ToGetOrganizationTeamsTeamArrayOutputWithContext(ctx context.Context) GetOrganizationTeamsTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationTeamsTeamArrayOutput)
}

type GetOrganizationTeamsTeamOutput struct{ *pulumi.OutputState }

func (GetOrganizationTeamsTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationTeamsTeam)(nil)).Elem()
}

func (o GetOrganizationTeamsTeamOutput) ToGetOrganizationTeamsTeamOutput() GetOrganizationTeamsTeamOutput {
	return o
}

func (o GetOrganizationTeamsTeamOutput) ToGetOrganizationTeamsTeamOutputWithContext(ctx context.Context) GetOrganizationTeamsTeamOutput {
	return o
}

// the team's description.
func (o GetOrganizationTeamsTeamOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) string { return v.Description }).(pulumi.StringOutput)
}

// the ID of the team.
func (o GetOrganizationTeamsTeamOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) int { return v.Id }).(pulumi.IntOutput)
}

// List of team members. Not returned if `summaryOnly = true`
func (o GetOrganizationTeamsTeamOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// the team's full name.
func (o GetOrganizationTeamsTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) string { return v.Name }).(pulumi.StringOutput)
}

// the Node ID of the team.
func (o GetOrganizationTeamsTeamOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) string { return v.NodeId }).(pulumi.StringOutput)
}

// the parent team.
func (o GetOrganizationTeamsTeamOutput) Parent() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) map[string]string { return v.Parent }).(pulumi.StringMapOutput)
}

// the team's privacy type.
func (o GetOrganizationTeamsTeamOutput) Privacy() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) string { return v.Privacy }).(pulumi.StringOutput)
}

// List of team repositories. Not returned if `summaryOnly = true`
func (o GetOrganizationTeamsTeamOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

// the slug of the team.
func (o GetOrganizationTeamsTeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationTeamsTeam) string { return v.Slug }).(pulumi.StringOutput)
}

type GetOrganizationTeamsTeamArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationTeamsTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationTeamsTeam)(nil)).Elem()
}

func (o GetOrganizationTeamsTeamArrayOutput) ToGetOrganizationTeamsTeamArrayOutput() GetOrganizationTeamsTeamArrayOutput {
	return o
}

func (o GetOrganizationTeamsTeamArrayOutput) ToGetOrganizationTeamsTeamArrayOutputWithContext(ctx context.Context) GetOrganizationTeamsTeamArrayOutput {
	return o
}

func (o GetOrganizationTeamsTeamArrayOutput) Index(i pulumi.IntInput) GetOrganizationTeamsTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationTeamsTeam {
		return vs[0].([]GetOrganizationTeamsTeam)[vs[1].(int)]
	}).(GetOrganizationTeamsTeamOutput)
}

type GetOrganizationWebhooksWebhook struct {
	// `true` if the webhook is active.
	Active bool `pulumi:"active"`
	// the ID of the webhook.
	Id int `pulumi:"id"`
	// the name of the webhook.
	Name string `pulumi:"name"`
	// the type of the webhook.
	Type string `pulumi:"type"`
	// the url of the webhook.
	Url string `pulumi:"url"`
}

// GetOrganizationWebhooksWebhookInput is an input type that accepts GetOrganizationWebhooksWebhookArgs and GetOrganizationWebhooksWebhookOutput values.
// You can construct a concrete instance of `GetOrganizationWebhooksWebhookInput` via:
//
//	GetOrganizationWebhooksWebhookArgs{...}
type GetOrganizationWebhooksWebhookInput interface {
	pulumi.Input

	ToGetOrganizationWebhooksWebhookOutput() GetOrganizationWebhooksWebhookOutput
	ToGetOrganizationWebhooksWebhookOutputWithContext(context.Context) GetOrganizationWebhooksWebhookOutput
}

type GetOrganizationWebhooksWebhookArgs struct {
	// `true` if the webhook is active.
	Active pulumi.BoolInput `pulumi:"active"`
	// the ID of the webhook.
	Id pulumi.IntInput `pulumi:"id"`
	// the name of the webhook.
	Name pulumi.StringInput `pulumi:"name"`
	// the type of the webhook.
	Type pulumi.StringInput `pulumi:"type"`
	// the url of the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetOrganizationWebhooksWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationWebhooksWebhook)(nil)).Elem()
}

func (i GetOrganizationWebhooksWebhookArgs) ToGetOrganizationWebhooksWebhookOutput() GetOrganizationWebhooksWebhookOutput {
	return i.ToGetOrganizationWebhooksWebhookOutputWithContext(context.Background())
}

func (i GetOrganizationWebhooksWebhookArgs) ToGetOrganizationWebhooksWebhookOutputWithContext(ctx context.Context) GetOrganizationWebhooksWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationWebhooksWebhookOutput)
}

// GetOrganizationWebhooksWebhookArrayInput is an input type that accepts GetOrganizationWebhooksWebhookArray and GetOrganizationWebhooksWebhookArrayOutput values.
// You can construct a concrete instance of `GetOrganizationWebhooksWebhookArrayInput` via:
//
//	GetOrganizationWebhooksWebhookArray{ GetOrganizationWebhooksWebhookArgs{...} }
type GetOrganizationWebhooksWebhookArrayInput interface {
	pulumi.Input

	ToGetOrganizationWebhooksWebhookArrayOutput() GetOrganizationWebhooksWebhookArrayOutput
	ToGetOrganizationWebhooksWebhookArrayOutputWithContext(context.Context) GetOrganizationWebhooksWebhookArrayOutput
}

type GetOrganizationWebhooksWebhookArray []GetOrganizationWebhooksWebhookInput

func (GetOrganizationWebhooksWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationWebhooksWebhook)(nil)).Elem()
}

func (i GetOrganizationWebhooksWebhookArray) ToGetOrganizationWebhooksWebhookArrayOutput() GetOrganizationWebhooksWebhookArrayOutput {
	return i.ToGetOrganizationWebhooksWebhookArrayOutputWithContext(context.Background())
}

func (i GetOrganizationWebhooksWebhookArray) ToGetOrganizationWebhooksWebhookArrayOutputWithContext(ctx context.Context) GetOrganizationWebhooksWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOrganizationWebhooksWebhookArrayOutput)
}

type GetOrganizationWebhooksWebhookOutput struct{ *pulumi.OutputState }

func (GetOrganizationWebhooksWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOrganizationWebhooksWebhook)(nil)).Elem()
}

func (o GetOrganizationWebhooksWebhookOutput) ToGetOrganizationWebhooksWebhookOutput() GetOrganizationWebhooksWebhookOutput {
	return o
}

func (o GetOrganizationWebhooksWebhookOutput) ToGetOrganizationWebhooksWebhookOutputWithContext(ctx context.Context) GetOrganizationWebhooksWebhookOutput {
	return o
}

// `true` if the webhook is active.
func (o GetOrganizationWebhooksWebhookOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOrganizationWebhooksWebhook) bool { return v.Active }).(pulumi.BoolOutput)
}

// the ID of the webhook.
func (o GetOrganizationWebhooksWebhookOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetOrganizationWebhooksWebhook) int { return v.Id }).(pulumi.IntOutput)
}

// the name of the webhook.
func (o GetOrganizationWebhooksWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationWebhooksWebhook) string { return v.Name }).(pulumi.StringOutput)
}

// the type of the webhook.
func (o GetOrganizationWebhooksWebhookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationWebhooksWebhook) string { return v.Type }).(pulumi.StringOutput)
}

// the url of the webhook.
func (o GetOrganizationWebhooksWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetOrganizationWebhooksWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type GetOrganizationWebhooksWebhookArrayOutput struct{ *pulumi.OutputState }

func (GetOrganizationWebhooksWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOrganizationWebhooksWebhook)(nil)).Elem()
}

func (o GetOrganizationWebhooksWebhookArrayOutput) ToGetOrganizationWebhooksWebhookArrayOutput() GetOrganizationWebhooksWebhookArrayOutput {
	return o
}

func (o GetOrganizationWebhooksWebhookArrayOutput) ToGetOrganizationWebhooksWebhookArrayOutputWithContext(ctx context.Context) GetOrganizationWebhooksWebhookArrayOutput {
	return o
}

func (o GetOrganizationWebhooksWebhookArrayOutput) Index(i pulumi.IntInput) GetOrganizationWebhooksWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOrganizationWebhooksWebhook {
		return vs[0].([]GetOrganizationWebhooksWebhook)[vs[1].(int)]
	}).(GetOrganizationWebhooksWebhookOutput)
}

type GetReleaseAsset struct {
	// Browser download URL
	BrowserDownloadUrl string `pulumi:"browserDownloadUrl"`
	// MIME type of the asset
	ContentType string `pulumi:"contentType"`
	// Date the asset was created
	CreatedAt string `pulumi:"createdAt"`
	// ID of the asset
	Id int `pulumi:"id"`
	// Label for the asset
	Label string `pulumi:"label"`
	// The file name of the asset
	Name string `pulumi:"name"`
	// Node ID of the asset
	NodeId string `pulumi:"nodeId"`
	// Size in byte
	Size int `pulumi:"size"`
	// Date the asset was last updated
	UpdatedAt string `pulumi:"updatedAt"`
	// URL of the asset
	Url string `pulumi:"url"`
}

// GetReleaseAssetInput is an input type that accepts GetReleaseAssetArgs and GetReleaseAssetOutput values.
// You can construct a concrete instance of `GetReleaseAssetInput` via:
//
//	GetReleaseAssetArgs{...}
type GetReleaseAssetInput interface {
	pulumi.Input

	ToGetReleaseAssetOutput() GetReleaseAssetOutput
	ToGetReleaseAssetOutputWithContext(context.Context) GetReleaseAssetOutput
}

type GetReleaseAssetArgs struct {
	// Browser download URL
	BrowserDownloadUrl pulumi.StringInput `pulumi:"browserDownloadUrl"`
	// MIME type of the asset
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Date the asset was created
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// ID of the asset
	Id pulumi.IntInput `pulumi:"id"`
	// Label for the asset
	Label pulumi.StringInput `pulumi:"label"`
	// The file name of the asset
	Name pulumi.StringInput `pulumi:"name"`
	// Node ID of the asset
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Size in byte
	Size pulumi.IntInput `pulumi:"size"`
	// Date the asset was last updated
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// URL of the asset
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetReleaseAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAsset)(nil)).Elem()
}

func (i GetReleaseAssetArgs) ToGetReleaseAssetOutput() GetReleaseAssetOutput {
	return i.ToGetReleaseAssetOutputWithContext(context.Background())
}

func (i GetReleaseAssetArgs) ToGetReleaseAssetOutputWithContext(ctx context.Context) GetReleaseAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetOutput)
}

// GetReleaseAssetArrayInput is an input type that accepts GetReleaseAssetArray and GetReleaseAssetArrayOutput values.
// You can construct a concrete instance of `GetReleaseAssetArrayInput` via:
//
//	GetReleaseAssetArray{ GetReleaseAssetArgs{...} }
type GetReleaseAssetArrayInput interface {
	pulumi.Input

	ToGetReleaseAssetArrayOutput() GetReleaseAssetArrayOutput
	ToGetReleaseAssetArrayOutputWithContext(context.Context) GetReleaseAssetArrayOutput
}

type GetReleaseAssetArray []GetReleaseAssetInput

func (GetReleaseAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAsset)(nil)).Elem()
}

func (i GetReleaseAssetArray) ToGetReleaseAssetArrayOutput() GetReleaseAssetArrayOutput {
	return i.ToGetReleaseAssetArrayOutputWithContext(context.Background())
}

func (i GetReleaseAssetArray) ToGetReleaseAssetArrayOutputWithContext(ctx context.Context) GetReleaseAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetReleaseAssetArrayOutput)
}

type GetReleaseAssetOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseAsset)(nil)).Elem()
}

func (o GetReleaseAssetOutput) ToGetReleaseAssetOutput() GetReleaseAssetOutput {
	return o
}

func (o GetReleaseAssetOutput) ToGetReleaseAssetOutputWithContext(ctx context.Context) GetReleaseAssetOutput {
	return o
}

// Browser download URL
func (o GetReleaseAssetOutput) BrowserDownloadUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.BrowserDownloadUrl }).(pulumi.StringOutput)
}

// MIME type of the asset
func (o GetReleaseAssetOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.ContentType }).(pulumi.StringOutput)
}

// Date the asset was created
func (o GetReleaseAssetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the asset
func (o GetReleaseAssetOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseAsset) int { return v.Id }).(pulumi.IntOutput)
}

// Label for the asset
func (o GetReleaseAssetOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.Label }).(pulumi.StringOutput)
}

// The file name of the asset
func (o GetReleaseAssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.Name }).(pulumi.StringOutput)
}

// Node ID of the asset
func (o GetReleaseAssetOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.NodeId }).(pulumi.StringOutput)
}

// Size in byte
func (o GetReleaseAssetOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetReleaseAsset) int { return v.Size }).(pulumi.IntOutput)
}

// Date the asset was last updated
func (o GetReleaseAssetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// URL of the asset
func (o GetReleaseAssetOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseAsset) string { return v.Url }).(pulumi.StringOutput)
}

type GetReleaseAssetArrayOutput struct{ *pulumi.OutputState }

func (GetReleaseAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetReleaseAsset)(nil)).Elem()
}

func (o GetReleaseAssetArrayOutput) ToGetReleaseAssetArrayOutput() GetReleaseAssetArrayOutput {
	return o
}

func (o GetReleaseAssetArrayOutput) ToGetReleaseAssetArrayOutputWithContext(ctx context.Context) GetReleaseAssetArrayOutput {
	return o
}

func (o GetReleaseAssetArrayOutput) Index(i pulumi.IntInput) GetReleaseAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetReleaseAsset {
		return vs[0].([]GetReleaseAsset)[vs[1].(int)]
	}).(GetReleaseAssetOutput)
}

type GetRepositoryAutolinkReferencesAutolinkReference struct {
	// True if alphanumeric.
	IsAlphanumeric bool `pulumi:"isAlphanumeric"`
	// Key prefix.
	KeyPrefix string `pulumi:"keyPrefix"`
	// Target url template.
	TargetUrlTemplate string `pulumi:"targetUrlTemplate"`
}

// GetRepositoryAutolinkReferencesAutolinkReferenceInput is an input type that accepts GetRepositoryAutolinkReferencesAutolinkReferenceArgs and GetRepositoryAutolinkReferencesAutolinkReferenceOutput values.
// You can construct a concrete instance of `GetRepositoryAutolinkReferencesAutolinkReferenceInput` via:
//
//	GetRepositoryAutolinkReferencesAutolinkReferenceArgs{...}
type GetRepositoryAutolinkReferencesAutolinkReferenceInput interface {
	pulumi.Input

	ToGetRepositoryAutolinkReferencesAutolinkReferenceOutput() GetRepositoryAutolinkReferencesAutolinkReferenceOutput
	ToGetRepositoryAutolinkReferencesAutolinkReferenceOutputWithContext(context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceOutput
}

type GetRepositoryAutolinkReferencesAutolinkReferenceArgs struct {
	// True if alphanumeric.
	IsAlphanumeric pulumi.BoolInput `pulumi:"isAlphanumeric"`
	// Key prefix.
	KeyPrefix pulumi.StringInput `pulumi:"keyPrefix"`
	// Target url template.
	TargetUrlTemplate pulumi.StringInput `pulumi:"targetUrlTemplate"`
}

func (GetRepositoryAutolinkReferencesAutolinkReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryAutolinkReferencesAutolinkReference)(nil)).Elem()
}

func (i GetRepositoryAutolinkReferencesAutolinkReferenceArgs) ToGetRepositoryAutolinkReferencesAutolinkReferenceOutput() GetRepositoryAutolinkReferencesAutolinkReferenceOutput {
	return i.ToGetRepositoryAutolinkReferencesAutolinkReferenceOutputWithContext(context.Background())
}

func (i GetRepositoryAutolinkReferencesAutolinkReferenceArgs) ToGetRepositoryAutolinkReferencesAutolinkReferenceOutputWithContext(ctx context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryAutolinkReferencesAutolinkReferenceOutput)
}

// GetRepositoryAutolinkReferencesAutolinkReferenceArrayInput is an input type that accepts GetRepositoryAutolinkReferencesAutolinkReferenceArray and GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput values.
// You can construct a concrete instance of `GetRepositoryAutolinkReferencesAutolinkReferenceArrayInput` via:
//
//	GetRepositoryAutolinkReferencesAutolinkReferenceArray{ GetRepositoryAutolinkReferencesAutolinkReferenceArgs{...} }
type GetRepositoryAutolinkReferencesAutolinkReferenceArrayInput interface {
	pulumi.Input

	ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput() GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput
	ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutputWithContext(context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput
}

type GetRepositoryAutolinkReferencesAutolinkReferenceArray []GetRepositoryAutolinkReferencesAutolinkReferenceInput

func (GetRepositoryAutolinkReferencesAutolinkReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryAutolinkReferencesAutolinkReference)(nil)).Elem()
}

func (i GetRepositoryAutolinkReferencesAutolinkReferenceArray) ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput() GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput {
	return i.ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutputWithContext(context.Background())
}

func (i GetRepositoryAutolinkReferencesAutolinkReferenceArray) ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutputWithContext(ctx context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput)
}

type GetRepositoryAutolinkReferencesAutolinkReferenceOutput struct{ *pulumi.OutputState }

func (GetRepositoryAutolinkReferencesAutolinkReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryAutolinkReferencesAutolinkReference)(nil)).Elem()
}

func (o GetRepositoryAutolinkReferencesAutolinkReferenceOutput) ToGetRepositoryAutolinkReferencesAutolinkReferenceOutput() GetRepositoryAutolinkReferencesAutolinkReferenceOutput {
	return o
}

func (o GetRepositoryAutolinkReferencesAutolinkReferenceOutput) ToGetRepositoryAutolinkReferencesAutolinkReferenceOutputWithContext(ctx context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceOutput {
	return o
}

// True if alphanumeric.
func (o GetRepositoryAutolinkReferencesAutolinkReferenceOutput) IsAlphanumeric() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryAutolinkReferencesAutolinkReference) bool { return v.IsAlphanumeric }).(pulumi.BoolOutput)
}

// Key prefix.
func (o GetRepositoryAutolinkReferencesAutolinkReferenceOutput) KeyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryAutolinkReferencesAutolinkReference) string { return v.KeyPrefix }).(pulumi.StringOutput)
}

// Target url template.
func (o GetRepositoryAutolinkReferencesAutolinkReferenceOutput) TargetUrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryAutolinkReferencesAutolinkReference) string { return v.TargetUrlTemplate }).(pulumi.StringOutput)
}

type GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryAutolinkReferencesAutolinkReference)(nil)).Elem()
}

func (o GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput) ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput() GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput {
	return o
}

func (o GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput) ToGetRepositoryAutolinkReferencesAutolinkReferenceArrayOutputWithContext(ctx context.Context) GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput {
	return o
}

func (o GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput) Index(i pulumi.IntInput) GetRepositoryAutolinkReferencesAutolinkReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryAutolinkReferencesAutolinkReference {
		return vs[0].([]GetRepositoryAutolinkReferencesAutolinkReference)[vs[1].(int)]
	}).(GetRepositoryAutolinkReferencesAutolinkReferenceOutput)
}

type GetRepositoryBranchesBranch struct {
	// Name of the branch.
	Name string `pulumi:"name"`
	// Whether the branch is protected.
	Protected bool `pulumi:"protected"`
}

// GetRepositoryBranchesBranchInput is an input type that accepts GetRepositoryBranchesBranchArgs and GetRepositoryBranchesBranchOutput values.
// You can construct a concrete instance of `GetRepositoryBranchesBranchInput` via:
//
//	GetRepositoryBranchesBranchArgs{...}
type GetRepositoryBranchesBranchInput interface {
	pulumi.Input

	ToGetRepositoryBranchesBranchOutput() GetRepositoryBranchesBranchOutput
	ToGetRepositoryBranchesBranchOutputWithContext(context.Context) GetRepositoryBranchesBranchOutput
}

type GetRepositoryBranchesBranchArgs struct {
	// Name of the branch.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the branch is protected.
	Protected pulumi.BoolInput `pulumi:"protected"`
}

func (GetRepositoryBranchesBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryBranchesBranch)(nil)).Elem()
}

func (i GetRepositoryBranchesBranchArgs) ToGetRepositoryBranchesBranchOutput() GetRepositoryBranchesBranchOutput {
	return i.ToGetRepositoryBranchesBranchOutputWithContext(context.Background())
}

func (i GetRepositoryBranchesBranchArgs) ToGetRepositoryBranchesBranchOutputWithContext(ctx context.Context) GetRepositoryBranchesBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryBranchesBranchOutput)
}

// GetRepositoryBranchesBranchArrayInput is an input type that accepts GetRepositoryBranchesBranchArray and GetRepositoryBranchesBranchArrayOutput values.
// You can construct a concrete instance of `GetRepositoryBranchesBranchArrayInput` via:
//
//	GetRepositoryBranchesBranchArray{ GetRepositoryBranchesBranchArgs{...} }
type GetRepositoryBranchesBranchArrayInput interface {
	pulumi.Input

	ToGetRepositoryBranchesBranchArrayOutput() GetRepositoryBranchesBranchArrayOutput
	ToGetRepositoryBranchesBranchArrayOutputWithContext(context.Context) GetRepositoryBranchesBranchArrayOutput
}

type GetRepositoryBranchesBranchArray []GetRepositoryBranchesBranchInput

func (GetRepositoryBranchesBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryBranchesBranch)(nil)).Elem()
}

func (i GetRepositoryBranchesBranchArray) ToGetRepositoryBranchesBranchArrayOutput() GetRepositoryBranchesBranchArrayOutput {
	return i.ToGetRepositoryBranchesBranchArrayOutputWithContext(context.Background())
}

func (i GetRepositoryBranchesBranchArray) ToGetRepositoryBranchesBranchArrayOutputWithContext(ctx context.Context) GetRepositoryBranchesBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryBranchesBranchArrayOutput)
}

type GetRepositoryBranchesBranchOutput struct{ *pulumi.OutputState }

func (GetRepositoryBranchesBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryBranchesBranch)(nil)).Elem()
}

func (o GetRepositoryBranchesBranchOutput) ToGetRepositoryBranchesBranchOutput() GetRepositoryBranchesBranchOutput {
	return o
}

func (o GetRepositoryBranchesBranchOutput) ToGetRepositoryBranchesBranchOutputWithContext(ctx context.Context) GetRepositoryBranchesBranchOutput {
	return o
}

// Name of the branch.
func (o GetRepositoryBranchesBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryBranchesBranch) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the branch is protected.
func (o GetRepositoryBranchesBranchOutput) Protected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryBranchesBranch) bool { return v.Protected }).(pulumi.BoolOutput)
}

type GetRepositoryBranchesBranchArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryBranchesBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryBranchesBranch)(nil)).Elem()
}

func (o GetRepositoryBranchesBranchArrayOutput) ToGetRepositoryBranchesBranchArrayOutput() GetRepositoryBranchesBranchArrayOutput {
	return o
}

func (o GetRepositoryBranchesBranchArrayOutput) ToGetRepositoryBranchesBranchArrayOutputWithContext(ctx context.Context) GetRepositoryBranchesBranchArrayOutput {
	return o
}

func (o GetRepositoryBranchesBranchArrayOutput) Index(i pulumi.IntInput) GetRepositoryBranchesBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryBranchesBranch {
		return vs[0].([]GetRepositoryBranchesBranch)[vs[1].(int)]
	}).(GetRepositoryBranchesBranchOutput)
}

type GetRepositoryDeployKeysKey struct {
	// Key id
	Id int `pulumi:"id"`
	// Key itself
	Key string `pulumi:"key"`
	// Key title
	Title string `pulumi:"title"`
	// `true` if the key was verified.
	Verified bool `pulumi:"verified"`
}

// GetRepositoryDeployKeysKeyInput is an input type that accepts GetRepositoryDeployKeysKeyArgs and GetRepositoryDeployKeysKeyOutput values.
// You can construct a concrete instance of `GetRepositoryDeployKeysKeyInput` via:
//
//	GetRepositoryDeployKeysKeyArgs{...}
type GetRepositoryDeployKeysKeyInput interface {
	pulumi.Input

	ToGetRepositoryDeployKeysKeyOutput() GetRepositoryDeployKeysKeyOutput
	ToGetRepositoryDeployKeysKeyOutputWithContext(context.Context) GetRepositoryDeployKeysKeyOutput
}

type GetRepositoryDeployKeysKeyArgs struct {
	// Key id
	Id pulumi.IntInput `pulumi:"id"`
	// Key itself
	Key pulumi.StringInput `pulumi:"key"`
	// Key title
	Title pulumi.StringInput `pulumi:"title"`
	// `true` if the key was verified.
	Verified pulumi.BoolInput `pulumi:"verified"`
}

func (GetRepositoryDeployKeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDeployKeysKey)(nil)).Elem()
}

func (i GetRepositoryDeployKeysKeyArgs) ToGetRepositoryDeployKeysKeyOutput() GetRepositoryDeployKeysKeyOutput {
	return i.ToGetRepositoryDeployKeysKeyOutputWithContext(context.Background())
}

func (i GetRepositoryDeployKeysKeyArgs) ToGetRepositoryDeployKeysKeyOutputWithContext(ctx context.Context) GetRepositoryDeployKeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDeployKeysKeyOutput)
}

// GetRepositoryDeployKeysKeyArrayInput is an input type that accepts GetRepositoryDeployKeysKeyArray and GetRepositoryDeployKeysKeyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryDeployKeysKeyArrayInput` via:
//
//	GetRepositoryDeployKeysKeyArray{ GetRepositoryDeployKeysKeyArgs{...} }
type GetRepositoryDeployKeysKeyArrayInput interface {
	pulumi.Input

	ToGetRepositoryDeployKeysKeyArrayOutput() GetRepositoryDeployKeysKeyArrayOutput
	ToGetRepositoryDeployKeysKeyArrayOutputWithContext(context.Context) GetRepositoryDeployKeysKeyArrayOutput
}

type GetRepositoryDeployKeysKeyArray []GetRepositoryDeployKeysKeyInput

func (GetRepositoryDeployKeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDeployKeysKey)(nil)).Elem()
}

func (i GetRepositoryDeployKeysKeyArray) ToGetRepositoryDeployKeysKeyArrayOutput() GetRepositoryDeployKeysKeyArrayOutput {
	return i.ToGetRepositoryDeployKeysKeyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryDeployKeysKeyArray) ToGetRepositoryDeployKeysKeyArrayOutputWithContext(ctx context.Context) GetRepositoryDeployKeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDeployKeysKeyArrayOutput)
}

type GetRepositoryDeployKeysKeyOutput struct{ *pulumi.OutputState }

func (GetRepositoryDeployKeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDeployKeysKey)(nil)).Elem()
}

func (o GetRepositoryDeployKeysKeyOutput) ToGetRepositoryDeployKeysKeyOutput() GetRepositoryDeployKeysKeyOutput {
	return o
}

func (o GetRepositoryDeployKeysKeyOutput) ToGetRepositoryDeployKeysKeyOutputWithContext(ctx context.Context) GetRepositoryDeployKeysKeyOutput {
	return o
}

// Key id
func (o GetRepositoryDeployKeysKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryDeployKeysKey) int { return v.Id }).(pulumi.IntOutput)
}

// Key itself
func (o GetRepositoryDeployKeysKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDeployKeysKey) string { return v.Key }).(pulumi.StringOutput)
}

// Key title
func (o GetRepositoryDeployKeysKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDeployKeysKey) string { return v.Title }).(pulumi.StringOutput)
}

// `true` if the key was verified.
func (o GetRepositoryDeployKeysKeyOutput) Verified() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryDeployKeysKey) bool { return v.Verified }).(pulumi.BoolOutput)
}

type GetRepositoryDeployKeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryDeployKeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDeployKeysKey)(nil)).Elem()
}

func (o GetRepositoryDeployKeysKeyArrayOutput) ToGetRepositoryDeployKeysKeyArrayOutput() GetRepositoryDeployKeysKeyArrayOutput {
	return o
}

func (o GetRepositoryDeployKeysKeyArrayOutput) ToGetRepositoryDeployKeysKeyArrayOutputWithContext(ctx context.Context) GetRepositoryDeployKeysKeyArrayOutput {
	return o
}

func (o GetRepositoryDeployKeysKeyArrayOutput) Index(i pulumi.IntInput) GetRepositoryDeployKeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryDeployKeysKey {
		return vs[0].([]GetRepositoryDeployKeysKey)[vs[1].(int)]
	}).(GetRepositoryDeployKeysKeyOutput)
}

type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy struct {
	// Id of the policy.
	Id string `pulumi:"id"`
	// The name pattern that branches must match in order to deploy to the environment.
	Name string `pulumi:"name"`
}

// GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyInput is an input type that accepts GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs and GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput values.
// You can construct a concrete instance of `GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyInput` via:
//
//	GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs{...}
type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyInput interface {
	pulumi.Input

	ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput
	ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutputWithContext(context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput
}

type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs struct {
	// Id of the policy.
	Id pulumi.StringInput `pulumi:"id"`
	// The name pattern that branches must match in order to deploy to the environment.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy)(nil)).Elem()
}

func (i GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput {
	return i.ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutputWithContext(context.Background())
}

func (i GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutputWithContext(ctx context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput)
}

// GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayInput is an input type that accepts GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray and GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput values.
// You can construct a concrete instance of `GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayInput` via:
//
//	GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray{ GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs{...} }
type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayInput interface {
	pulumi.Input

	ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput
	ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutputWithContext(context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput
}

type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray []GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyInput

func (GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy)(nil)).Elem()
}

func (i GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput {
	return i.ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutputWithContext(context.Background())
}

func (i GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput)
}

type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput struct{ *pulumi.OutputState }

func (GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy)(nil)).Elem()
}

func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput {
	return o
}

func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutputWithContext(ctx context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput {
	return o
}

// Id of the policy.
func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// The name pattern that branches must match in order to deploy to the environment.
func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy) string { return v.Name }).(pulumi.StringOutput)
}

type GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy)(nil)).Elem()
}

func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput() GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput {
	return o
}

func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput) ToGetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutputWithContext(ctx context.Context) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput {
	return o
}

func (o GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput) Index(i pulumi.IntInput) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy {
		return vs[0].([]GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy)[vs[1].(int)]
	}).(GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput)
}

type GetRepositoryEnvironmentsEnvironment struct {
	// Environment name.
	Name string `pulumi:"name"`
	// Environment node id.
	NodeId string `pulumi:"nodeId"`
}

// GetRepositoryEnvironmentsEnvironmentInput is an input type that accepts GetRepositoryEnvironmentsEnvironmentArgs and GetRepositoryEnvironmentsEnvironmentOutput values.
// You can construct a concrete instance of `GetRepositoryEnvironmentsEnvironmentInput` via:
//
//	GetRepositoryEnvironmentsEnvironmentArgs{...}
type GetRepositoryEnvironmentsEnvironmentInput interface {
	pulumi.Input

	ToGetRepositoryEnvironmentsEnvironmentOutput() GetRepositoryEnvironmentsEnvironmentOutput
	ToGetRepositoryEnvironmentsEnvironmentOutputWithContext(context.Context) GetRepositoryEnvironmentsEnvironmentOutput
}

type GetRepositoryEnvironmentsEnvironmentArgs struct {
	// Environment name.
	Name pulumi.StringInput `pulumi:"name"`
	// Environment node id.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
}

func (GetRepositoryEnvironmentsEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetRepositoryEnvironmentsEnvironmentArgs) ToGetRepositoryEnvironmentsEnvironmentOutput() GetRepositoryEnvironmentsEnvironmentOutput {
	return i.ToGetRepositoryEnvironmentsEnvironmentOutputWithContext(context.Background())
}

func (i GetRepositoryEnvironmentsEnvironmentArgs) ToGetRepositoryEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetRepositoryEnvironmentsEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryEnvironmentsEnvironmentOutput)
}

// GetRepositoryEnvironmentsEnvironmentArrayInput is an input type that accepts GetRepositoryEnvironmentsEnvironmentArray and GetRepositoryEnvironmentsEnvironmentArrayOutput values.
// You can construct a concrete instance of `GetRepositoryEnvironmentsEnvironmentArrayInput` via:
//
//	GetRepositoryEnvironmentsEnvironmentArray{ GetRepositoryEnvironmentsEnvironmentArgs{...} }
type GetRepositoryEnvironmentsEnvironmentArrayInput interface {
	pulumi.Input

	ToGetRepositoryEnvironmentsEnvironmentArrayOutput() GetRepositoryEnvironmentsEnvironmentArrayOutput
	ToGetRepositoryEnvironmentsEnvironmentArrayOutputWithContext(context.Context) GetRepositoryEnvironmentsEnvironmentArrayOutput
}

type GetRepositoryEnvironmentsEnvironmentArray []GetRepositoryEnvironmentsEnvironmentInput

func (GetRepositoryEnvironmentsEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryEnvironmentsEnvironment)(nil)).Elem()
}

func (i GetRepositoryEnvironmentsEnvironmentArray) ToGetRepositoryEnvironmentsEnvironmentArrayOutput() GetRepositoryEnvironmentsEnvironmentArrayOutput {
	return i.ToGetRepositoryEnvironmentsEnvironmentArrayOutputWithContext(context.Background())
}

func (i GetRepositoryEnvironmentsEnvironmentArray) ToGetRepositoryEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetRepositoryEnvironmentsEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryEnvironmentsEnvironmentArrayOutput)
}

type GetRepositoryEnvironmentsEnvironmentOutput struct{ *pulumi.OutputState }

func (GetRepositoryEnvironmentsEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetRepositoryEnvironmentsEnvironmentOutput) ToGetRepositoryEnvironmentsEnvironmentOutput() GetRepositoryEnvironmentsEnvironmentOutput {
	return o
}

func (o GetRepositoryEnvironmentsEnvironmentOutput) ToGetRepositoryEnvironmentsEnvironmentOutputWithContext(ctx context.Context) GetRepositoryEnvironmentsEnvironmentOutput {
	return o
}

// Environment name.
func (o GetRepositoryEnvironmentsEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryEnvironmentsEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// Environment node id.
func (o GetRepositoryEnvironmentsEnvironmentOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryEnvironmentsEnvironment) string { return v.NodeId }).(pulumi.StringOutput)
}

type GetRepositoryEnvironmentsEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryEnvironmentsEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryEnvironmentsEnvironment)(nil)).Elem()
}

func (o GetRepositoryEnvironmentsEnvironmentArrayOutput) ToGetRepositoryEnvironmentsEnvironmentArrayOutput() GetRepositoryEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetRepositoryEnvironmentsEnvironmentArrayOutput) ToGetRepositoryEnvironmentsEnvironmentArrayOutputWithContext(ctx context.Context) GetRepositoryEnvironmentsEnvironmentArrayOutput {
	return o
}

func (o GetRepositoryEnvironmentsEnvironmentArrayOutput) Index(i pulumi.IntInput) GetRepositoryEnvironmentsEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryEnvironmentsEnvironment {
		return vs[0].([]GetRepositoryEnvironmentsEnvironment)[vs[1].(int)]
	}).(GetRepositoryEnvironmentsEnvironmentOutput)
}

type GetRepositoryPage struct {
	BuildType string `pulumi:"buildType"`
	Cname     string `pulumi:"cname"`
	Custom404 bool   `pulumi:"custom404"`
	// URL to the repository on the web.
	HtmlUrl string                    `pulumi:"htmlUrl"`
	Sources []GetRepositoryPageSource `pulumi:"sources"`
	Status  string                    `pulumi:"status"`
	Url     string                    `pulumi:"url"`
}

// GetRepositoryPageInput is an input type that accepts GetRepositoryPageArgs and GetRepositoryPageOutput values.
// You can construct a concrete instance of `GetRepositoryPageInput` via:
//
//	GetRepositoryPageArgs{...}
type GetRepositoryPageInput interface {
	pulumi.Input

	ToGetRepositoryPageOutput() GetRepositoryPageOutput
	ToGetRepositoryPageOutputWithContext(context.Context) GetRepositoryPageOutput
}

type GetRepositoryPageArgs struct {
	BuildType pulumi.StringInput `pulumi:"buildType"`
	Cname     pulumi.StringInput `pulumi:"cname"`
	Custom404 pulumi.BoolInput   `pulumi:"custom404"`
	// URL to the repository on the web.
	HtmlUrl pulumi.StringInput                `pulumi:"htmlUrl"`
	Sources GetRepositoryPageSourceArrayInput `pulumi:"sources"`
	Status  pulumi.StringInput                `pulumi:"status"`
	Url     pulumi.StringInput                `pulumi:"url"`
}

func (GetRepositoryPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPage)(nil)).Elem()
}

func (i GetRepositoryPageArgs) ToGetRepositoryPageOutput() GetRepositoryPageOutput {
	return i.ToGetRepositoryPageOutputWithContext(context.Background())
}

func (i GetRepositoryPageArgs) ToGetRepositoryPageOutputWithContext(ctx context.Context) GetRepositoryPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPageOutput)
}

// GetRepositoryPageArrayInput is an input type that accepts GetRepositoryPageArray and GetRepositoryPageArrayOutput values.
// You can construct a concrete instance of `GetRepositoryPageArrayInput` via:
//
//	GetRepositoryPageArray{ GetRepositoryPageArgs{...} }
type GetRepositoryPageArrayInput interface {
	pulumi.Input

	ToGetRepositoryPageArrayOutput() GetRepositoryPageArrayOutput
	ToGetRepositoryPageArrayOutputWithContext(context.Context) GetRepositoryPageArrayOutput
}

type GetRepositoryPageArray []GetRepositoryPageInput

func (GetRepositoryPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPage)(nil)).Elem()
}

func (i GetRepositoryPageArray) ToGetRepositoryPageArrayOutput() GetRepositoryPageArrayOutput {
	return i.ToGetRepositoryPageArrayOutputWithContext(context.Background())
}

func (i GetRepositoryPageArray) ToGetRepositoryPageArrayOutputWithContext(ctx context.Context) GetRepositoryPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPageArrayOutput)
}

type GetRepositoryPageOutput struct{ *pulumi.OutputState }

func (GetRepositoryPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPage)(nil)).Elem()
}

func (o GetRepositoryPageOutput) ToGetRepositoryPageOutput() GetRepositoryPageOutput {
	return o
}

func (o GetRepositoryPageOutput) ToGetRepositoryPageOutputWithContext(ctx context.Context) GetRepositoryPageOutput {
	return o
}

func (o GetRepositoryPageOutput) BuildType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPage) string { return v.BuildType }).(pulumi.StringOutput)
}

func (o GetRepositoryPageOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPage) string { return v.Cname }).(pulumi.StringOutput)
}

func (o GetRepositoryPageOutput) Custom404() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryPage) bool { return v.Custom404 }).(pulumi.BoolOutput)
}

// URL to the repository on the web.
func (o GetRepositoryPageOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPage) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

func (o GetRepositoryPageOutput) Sources() GetRepositoryPageSourceArrayOutput {
	return o.ApplyT(func(v GetRepositoryPage) []GetRepositoryPageSource { return v.Sources }).(GetRepositoryPageSourceArrayOutput)
}

func (o GetRepositoryPageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPage) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetRepositoryPageOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPage) string { return v.Url }).(pulumi.StringOutput)
}

type GetRepositoryPageArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPage)(nil)).Elem()
}

func (o GetRepositoryPageArrayOutput) ToGetRepositoryPageArrayOutput() GetRepositoryPageArrayOutput {
	return o
}

func (o GetRepositoryPageArrayOutput) ToGetRepositoryPageArrayOutputWithContext(ctx context.Context) GetRepositoryPageArrayOutput {
	return o
}

func (o GetRepositoryPageArrayOutput) Index(i pulumi.IntInput) GetRepositoryPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryPage {
		return vs[0].([]GetRepositoryPage)[vs[1].(int)]
	}).(GetRepositoryPageOutput)
}

type GetRepositoryPageSource struct {
	Branch string `pulumi:"branch"`
	Path   string `pulumi:"path"`
}

// GetRepositoryPageSourceInput is an input type that accepts GetRepositoryPageSourceArgs and GetRepositoryPageSourceOutput values.
// You can construct a concrete instance of `GetRepositoryPageSourceInput` via:
//
//	GetRepositoryPageSourceArgs{...}
type GetRepositoryPageSourceInput interface {
	pulumi.Input

	ToGetRepositoryPageSourceOutput() GetRepositoryPageSourceOutput
	ToGetRepositoryPageSourceOutputWithContext(context.Context) GetRepositoryPageSourceOutput
}

type GetRepositoryPageSourceArgs struct {
	Branch pulumi.StringInput `pulumi:"branch"`
	Path   pulumi.StringInput `pulumi:"path"`
}

func (GetRepositoryPageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPageSource)(nil)).Elem()
}

func (i GetRepositoryPageSourceArgs) ToGetRepositoryPageSourceOutput() GetRepositoryPageSourceOutput {
	return i.ToGetRepositoryPageSourceOutputWithContext(context.Background())
}

func (i GetRepositoryPageSourceArgs) ToGetRepositoryPageSourceOutputWithContext(ctx context.Context) GetRepositoryPageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPageSourceOutput)
}

// GetRepositoryPageSourceArrayInput is an input type that accepts GetRepositoryPageSourceArray and GetRepositoryPageSourceArrayOutput values.
// You can construct a concrete instance of `GetRepositoryPageSourceArrayInput` via:
//
//	GetRepositoryPageSourceArray{ GetRepositoryPageSourceArgs{...} }
type GetRepositoryPageSourceArrayInput interface {
	pulumi.Input

	ToGetRepositoryPageSourceArrayOutput() GetRepositoryPageSourceArrayOutput
	ToGetRepositoryPageSourceArrayOutputWithContext(context.Context) GetRepositoryPageSourceArrayOutput
}

type GetRepositoryPageSourceArray []GetRepositoryPageSourceInput

func (GetRepositoryPageSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPageSource)(nil)).Elem()
}

func (i GetRepositoryPageSourceArray) ToGetRepositoryPageSourceArrayOutput() GetRepositoryPageSourceArrayOutput {
	return i.ToGetRepositoryPageSourceArrayOutputWithContext(context.Background())
}

func (i GetRepositoryPageSourceArray) ToGetRepositoryPageSourceArrayOutputWithContext(ctx context.Context) GetRepositoryPageSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPageSourceArrayOutput)
}

type GetRepositoryPageSourceOutput struct{ *pulumi.OutputState }

func (GetRepositoryPageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPageSource)(nil)).Elem()
}

func (o GetRepositoryPageSourceOutput) ToGetRepositoryPageSourceOutput() GetRepositoryPageSourceOutput {
	return o
}

func (o GetRepositoryPageSourceOutput) ToGetRepositoryPageSourceOutputWithContext(ctx context.Context) GetRepositoryPageSourceOutput {
	return o
}

func (o GetRepositoryPageSourceOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPageSource) string { return v.Branch }).(pulumi.StringOutput)
}

func (o GetRepositoryPageSourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPageSource) string { return v.Path }).(pulumi.StringOutput)
}

type GetRepositoryPageSourceArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryPageSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPageSource)(nil)).Elem()
}

func (o GetRepositoryPageSourceArrayOutput) ToGetRepositoryPageSourceArrayOutput() GetRepositoryPageSourceArrayOutput {
	return o
}

func (o GetRepositoryPageSourceArrayOutput) ToGetRepositoryPageSourceArrayOutputWithContext(ctx context.Context) GetRepositoryPageSourceArrayOutput {
	return o
}

func (o GetRepositoryPageSourceArrayOutput) Index(i pulumi.IntInput) GetRepositoryPageSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryPageSource {
		return vs[0].([]GetRepositoryPageSource)[vs[1].(int)]
	}).(GetRepositoryPageSourceOutput)
}

type GetRepositoryPullRequestsResult struct {
	// If set, filters Pull Requests by base branch name.
	BaseRef string `pulumi:"baseRef"`
	// Head commit SHA of the Pull Request base.
	BaseSha string `pulumi:"baseSha"`
	// Body of the Pull Request.
	Body string `pulumi:"body"`
	// Indicates Whether this Pull Request is a draft.
	Draft bool `pulumi:"draft"`
	// Owner of the Pull Request head repository.
	HeadOwner string `pulumi:"headOwner"`
	// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
	HeadRef string `pulumi:"headRef"`
	// Name of the Pull Request head repository.
	HeadRepository string `pulumi:"headRepository"`
	// Head commit SHA of the Pull Request head.
	HeadSha string `pulumi:"headSha"`
	// List of label names set on the Pull Request.
	Labels []string `pulumi:"labels"`
	// Indicates whether the base repository maintainers can modify the Pull Request.
	MaintainerCanModify bool `pulumi:"maintainerCanModify"`
	// The number of the Pull Request within the repository.
	Number int `pulumi:"number"`
	// Unix timestamp indicating the Pull Request creation time.
	OpenedAt int `pulumi:"openedAt"`
	// GitHub login of the user who opened the Pull Request.
	OpenedBy string `pulumi:"openedBy"`
	// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
	State string `pulumi:"state"`
	// The title of the Pull Request.
	Title string `pulumi:"title"`
	// The timestamp of the last Pull Request update.
	UpdatedAt int `pulumi:"updatedAt"`
}

// GetRepositoryPullRequestsResultInput is an input type that accepts GetRepositoryPullRequestsResultArgs and GetRepositoryPullRequestsResultOutput values.
// You can construct a concrete instance of `GetRepositoryPullRequestsResultInput` via:
//
//	GetRepositoryPullRequestsResultArgs{...}
type GetRepositoryPullRequestsResultInput interface {
	pulumi.Input

	ToGetRepositoryPullRequestsResultOutput() GetRepositoryPullRequestsResultOutput
	ToGetRepositoryPullRequestsResultOutputWithContext(context.Context) GetRepositoryPullRequestsResultOutput
}

type GetRepositoryPullRequestsResultArgs struct {
	// If set, filters Pull Requests by base branch name.
	BaseRef pulumi.StringInput `pulumi:"baseRef"`
	// Head commit SHA of the Pull Request base.
	BaseSha pulumi.StringInput `pulumi:"baseSha"`
	// Body of the Pull Request.
	Body pulumi.StringInput `pulumi:"body"`
	// Indicates Whether this Pull Request is a draft.
	Draft pulumi.BoolInput `pulumi:"draft"`
	// Owner of the Pull Request head repository.
	HeadOwner pulumi.StringInput `pulumi:"headOwner"`
	// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
	HeadRef pulumi.StringInput `pulumi:"headRef"`
	// Name of the Pull Request head repository.
	HeadRepository pulumi.StringInput `pulumi:"headRepository"`
	// Head commit SHA of the Pull Request head.
	HeadSha pulumi.StringInput `pulumi:"headSha"`
	// List of label names set on the Pull Request.
	Labels pulumi.StringArrayInput `pulumi:"labels"`
	// Indicates whether the base repository maintainers can modify the Pull Request.
	MaintainerCanModify pulumi.BoolInput `pulumi:"maintainerCanModify"`
	// The number of the Pull Request within the repository.
	Number pulumi.IntInput `pulumi:"number"`
	// Unix timestamp indicating the Pull Request creation time.
	OpenedAt pulumi.IntInput `pulumi:"openedAt"`
	// GitHub login of the user who opened the Pull Request.
	OpenedBy pulumi.StringInput `pulumi:"openedBy"`
	// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
	State pulumi.StringInput `pulumi:"state"`
	// The title of the Pull Request.
	Title pulumi.StringInput `pulumi:"title"`
	// The timestamp of the last Pull Request update.
	UpdatedAt pulumi.IntInput `pulumi:"updatedAt"`
}

func (GetRepositoryPullRequestsResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPullRequestsResult)(nil)).Elem()
}

func (i GetRepositoryPullRequestsResultArgs) ToGetRepositoryPullRequestsResultOutput() GetRepositoryPullRequestsResultOutput {
	return i.ToGetRepositoryPullRequestsResultOutputWithContext(context.Background())
}

func (i GetRepositoryPullRequestsResultArgs) ToGetRepositoryPullRequestsResultOutputWithContext(ctx context.Context) GetRepositoryPullRequestsResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPullRequestsResultOutput)
}

// GetRepositoryPullRequestsResultArrayInput is an input type that accepts GetRepositoryPullRequestsResultArray and GetRepositoryPullRequestsResultArrayOutput values.
// You can construct a concrete instance of `GetRepositoryPullRequestsResultArrayInput` via:
//
//	GetRepositoryPullRequestsResultArray{ GetRepositoryPullRequestsResultArgs{...} }
type GetRepositoryPullRequestsResultArrayInput interface {
	pulumi.Input

	ToGetRepositoryPullRequestsResultArrayOutput() GetRepositoryPullRequestsResultArrayOutput
	ToGetRepositoryPullRequestsResultArrayOutputWithContext(context.Context) GetRepositoryPullRequestsResultArrayOutput
}

type GetRepositoryPullRequestsResultArray []GetRepositoryPullRequestsResultInput

func (GetRepositoryPullRequestsResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPullRequestsResult)(nil)).Elem()
}

func (i GetRepositoryPullRequestsResultArray) ToGetRepositoryPullRequestsResultArrayOutput() GetRepositoryPullRequestsResultArrayOutput {
	return i.ToGetRepositoryPullRequestsResultArrayOutputWithContext(context.Background())
}

func (i GetRepositoryPullRequestsResultArray) ToGetRepositoryPullRequestsResultArrayOutputWithContext(ctx context.Context) GetRepositoryPullRequestsResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryPullRequestsResultArrayOutput)
}

type GetRepositoryPullRequestsResultOutput struct{ *pulumi.OutputState }

func (GetRepositoryPullRequestsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryPullRequestsResult)(nil)).Elem()
}

func (o GetRepositoryPullRequestsResultOutput) ToGetRepositoryPullRequestsResultOutput() GetRepositoryPullRequestsResultOutput {
	return o
}

func (o GetRepositoryPullRequestsResultOutput) ToGetRepositoryPullRequestsResultOutputWithContext(ctx context.Context) GetRepositoryPullRequestsResultOutput {
	return o
}

// If set, filters Pull Requests by base branch name.
func (o GetRepositoryPullRequestsResultOutput) BaseRef() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.BaseRef }).(pulumi.StringOutput)
}

// Head commit SHA of the Pull Request base.
func (o GetRepositoryPullRequestsResultOutput) BaseSha() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.BaseSha }).(pulumi.StringOutput)
}

// Body of the Pull Request.
func (o GetRepositoryPullRequestsResultOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.Body }).(pulumi.StringOutput)
}

// Indicates Whether this Pull Request is a draft.
func (o GetRepositoryPullRequestsResultOutput) Draft() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) bool { return v.Draft }).(pulumi.BoolOutput)
}

// Owner of the Pull Request head repository.
func (o GetRepositoryPullRequestsResultOutput) HeadOwner() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.HeadOwner }).(pulumi.StringOutput)
}

// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
func (o GetRepositoryPullRequestsResultOutput) HeadRef() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.HeadRef }).(pulumi.StringOutput)
}

// Name of the Pull Request head repository.
func (o GetRepositoryPullRequestsResultOutput) HeadRepository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.HeadRepository }).(pulumi.StringOutput)
}

// Head commit SHA of the Pull Request head.
func (o GetRepositoryPullRequestsResultOutput) HeadSha() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.HeadSha }).(pulumi.StringOutput)
}

// List of label names set on the Pull Request.
func (o GetRepositoryPullRequestsResultOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

// Indicates whether the base repository maintainers can modify the Pull Request.
func (o GetRepositoryPullRequestsResultOutput) MaintainerCanModify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) bool { return v.MaintainerCanModify }).(pulumi.BoolOutput)
}

// The number of the Pull Request within the repository.
func (o GetRepositoryPullRequestsResultOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) int { return v.Number }).(pulumi.IntOutput)
}

// Unix timestamp indicating the Pull Request creation time.
func (o GetRepositoryPullRequestsResultOutput) OpenedAt() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) int { return v.OpenedAt }).(pulumi.IntOutput)
}

// GitHub login of the user who opened the Pull Request.
func (o GetRepositoryPullRequestsResultOutput) OpenedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.OpenedBy }).(pulumi.StringOutput)
}

// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
func (o GetRepositoryPullRequestsResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.State }).(pulumi.StringOutput)
}

// The title of the Pull Request.
func (o GetRepositoryPullRequestsResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) string { return v.Title }).(pulumi.StringOutput)
}

// The timestamp of the last Pull Request update.
func (o GetRepositoryPullRequestsResultOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryPullRequestsResult) int { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GetRepositoryPullRequestsResultArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryPullRequestsResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryPullRequestsResult)(nil)).Elem()
}

func (o GetRepositoryPullRequestsResultArrayOutput) ToGetRepositoryPullRequestsResultArrayOutput() GetRepositoryPullRequestsResultArrayOutput {
	return o
}

func (o GetRepositoryPullRequestsResultArrayOutput) ToGetRepositoryPullRequestsResultArrayOutputWithContext(ctx context.Context) GetRepositoryPullRequestsResultArrayOutput {
	return o
}

func (o GetRepositoryPullRequestsResultArrayOutput) Index(i pulumi.IntInput) GetRepositoryPullRequestsResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryPullRequestsResult {
		return vs[0].([]GetRepositoryPullRequestsResult)[vs[1].(int)]
	}).(GetRepositoryPullRequestsResultOutput)
}

type GetRepositoryTeamsTeam struct {
	// The name of the repository.
	Name string `pulumi:"name"`
	// Team permission
	Permission string `pulumi:"permission"`
	// Team slug
	Slug string `pulumi:"slug"`
}

// GetRepositoryTeamsTeamInput is an input type that accepts GetRepositoryTeamsTeamArgs and GetRepositoryTeamsTeamOutput values.
// You can construct a concrete instance of `GetRepositoryTeamsTeamInput` via:
//
//	GetRepositoryTeamsTeamArgs{...}
type GetRepositoryTeamsTeamInput interface {
	pulumi.Input

	ToGetRepositoryTeamsTeamOutput() GetRepositoryTeamsTeamOutput
	ToGetRepositoryTeamsTeamOutputWithContext(context.Context) GetRepositoryTeamsTeamOutput
}

type GetRepositoryTeamsTeamArgs struct {
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// Team permission
	Permission pulumi.StringInput `pulumi:"permission"`
	// Team slug
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetRepositoryTeamsTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTeamsTeam)(nil)).Elem()
}

func (i GetRepositoryTeamsTeamArgs) ToGetRepositoryTeamsTeamOutput() GetRepositoryTeamsTeamOutput {
	return i.ToGetRepositoryTeamsTeamOutputWithContext(context.Background())
}

func (i GetRepositoryTeamsTeamArgs) ToGetRepositoryTeamsTeamOutputWithContext(ctx context.Context) GetRepositoryTeamsTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTeamsTeamOutput)
}

// GetRepositoryTeamsTeamArrayInput is an input type that accepts GetRepositoryTeamsTeamArray and GetRepositoryTeamsTeamArrayOutput values.
// You can construct a concrete instance of `GetRepositoryTeamsTeamArrayInput` via:
//
//	GetRepositoryTeamsTeamArray{ GetRepositoryTeamsTeamArgs{...} }
type GetRepositoryTeamsTeamArrayInput interface {
	pulumi.Input

	ToGetRepositoryTeamsTeamArrayOutput() GetRepositoryTeamsTeamArrayOutput
	ToGetRepositoryTeamsTeamArrayOutputWithContext(context.Context) GetRepositoryTeamsTeamArrayOutput
}

type GetRepositoryTeamsTeamArray []GetRepositoryTeamsTeamInput

func (GetRepositoryTeamsTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTeamsTeam)(nil)).Elem()
}

func (i GetRepositoryTeamsTeamArray) ToGetRepositoryTeamsTeamArrayOutput() GetRepositoryTeamsTeamArrayOutput {
	return i.ToGetRepositoryTeamsTeamArrayOutputWithContext(context.Background())
}

func (i GetRepositoryTeamsTeamArray) ToGetRepositoryTeamsTeamArrayOutputWithContext(ctx context.Context) GetRepositoryTeamsTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTeamsTeamArrayOutput)
}

type GetRepositoryTeamsTeamOutput struct{ *pulumi.OutputState }

func (GetRepositoryTeamsTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTeamsTeam)(nil)).Elem()
}

func (o GetRepositoryTeamsTeamOutput) ToGetRepositoryTeamsTeamOutput() GetRepositoryTeamsTeamOutput {
	return o
}

func (o GetRepositoryTeamsTeamOutput) ToGetRepositoryTeamsTeamOutputWithContext(ctx context.Context) GetRepositoryTeamsTeamOutput {
	return o
}

// The name of the repository.
func (o GetRepositoryTeamsTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTeamsTeam) string { return v.Name }).(pulumi.StringOutput)
}

// Team permission
func (o GetRepositoryTeamsTeamOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTeamsTeam) string { return v.Permission }).(pulumi.StringOutput)
}

// Team slug
func (o GetRepositoryTeamsTeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTeamsTeam) string { return v.Slug }).(pulumi.StringOutput)
}

type GetRepositoryTeamsTeamArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryTeamsTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryTeamsTeam)(nil)).Elem()
}

func (o GetRepositoryTeamsTeamArrayOutput) ToGetRepositoryTeamsTeamArrayOutput() GetRepositoryTeamsTeamArrayOutput {
	return o
}

func (o GetRepositoryTeamsTeamArrayOutput) ToGetRepositoryTeamsTeamArrayOutputWithContext(ctx context.Context) GetRepositoryTeamsTeamArrayOutput {
	return o
}

func (o GetRepositoryTeamsTeamArrayOutput) Index(i pulumi.IntInput) GetRepositoryTeamsTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryTeamsTeam {
		return vs[0].([]GetRepositoryTeamsTeam)[vs[1].(int)]
	}).(GetRepositoryTeamsTeamOutput)
}

type GetRepositoryTemplate struct {
	Owner      string `pulumi:"owner"`
	Repository string `pulumi:"repository"`
}

// GetRepositoryTemplateInput is an input type that accepts GetRepositoryTemplateArgs and GetRepositoryTemplateOutput values.
// You can construct a concrete instance of `GetRepositoryTemplateInput` via:
//
//	GetRepositoryTemplateArgs{...}
type GetRepositoryTemplateInput interface {
	pulumi.Input

	ToGetRepositoryTemplateOutput() GetRepositoryTemplateOutput
	ToGetRepositoryTemplateOutputWithContext(context.Context) GetRepositoryTemplateOutput
}

type GetRepositoryTemplateArgs struct {
	Owner      pulumi.StringInput `pulumi:"owner"`
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (GetRepositoryTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTemplate)(nil)).Elem()
}

func (i GetRepositoryTemplateArgs) ToGetRepositoryTemplateOutput() GetRepositoryTemplateOutput {
	return i.ToGetRepositoryTemplateOutputWithContext(context.Background())
}

func (i GetRepositoryTemplateArgs) ToGetRepositoryTemplateOutputWithContext(ctx context.Context) GetRepositoryTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryTemplateOutput)
}

type GetRepositoryTemplateOutput struct{ *pulumi.OutputState }

func (GetRepositoryTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryTemplate)(nil)).Elem()
}

func (o GetRepositoryTemplateOutput) ToGetRepositoryTemplateOutput() GetRepositoryTemplateOutput {
	return o
}

func (o GetRepositoryTemplateOutput) ToGetRepositoryTemplateOutputWithContext(ctx context.Context) GetRepositoryTemplateOutput {
	return o
}

func (o GetRepositoryTemplateOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTemplate) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetRepositoryTemplateOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryTemplate) string { return v.Repository }).(pulumi.StringOutput)
}

type GetRepositoryWebhooksWebhook struct {
	// `true` if the webhook is active.
	Active bool `pulumi:"active"`
	// the ID of the webhook.
	Id int `pulumi:"id"`
	// the name of the webhook.
	Name string `pulumi:"name"`
	// the type of the webhook.
	Type string `pulumi:"type"`
	// the url of the webhook.
	Url string `pulumi:"url"`
}

// GetRepositoryWebhooksWebhookInput is an input type that accepts GetRepositoryWebhooksWebhookArgs and GetRepositoryWebhooksWebhookOutput values.
// You can construct a concrete instance of `GetRepositoryWebhooksWebhookInput` via:
//
//	GetRepositoryWebhooksWebhookArgs{...}
type GetRepositoryWebhooksWebhookInput interface {
	pulumi.Input

	ToGetRepositoryWebhooksWebhookOutput() GetRepositoryWebhooksWebhookOutput
	ToGetRepositoryWebhooksWebhookOutputWithContext(context.Context) GetRepositoryWebhooksWebhookOutput
}

type GetRepositoryWebhooksWebhookArgs struct {
	// `true` if the webhook is active.
	Active pulumi.BoolInput `pulumi:"active"`
	// the ID of the webhook.
	Id pulumi.IntInput `pulumi:"id"`
	// the name of the webhook.
	Name pulumi.StringInput `pulumi:"name"`
	// the type of the webhook.
	Type pulumi.StringInput `pulumi:"type"`
	// the url of the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetRepositoryWebhooksWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryWebhooksWebhook)(nil)).Elem()
}

func (i GetRepositoryWebhooksWebhookArgs) ToGetRepositoryWebhooksWebhookOutput() GetRepositoryWebhooksWebhookOutput {
	return i.ToGetRepositoryWebhooksWebhookOutputWithContext(context.Background())
}

func (i GetRepositoryWebhooksWebhookArgs) ToGetRepositoryWebhooksWebhookOutputWithContext(ctx context.Context) GetRepositoryWebhooksWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryWebhooksWebhookOutput)
}

// GetRepositoryWebhooksWebhookArrayInput is an input type that accepts GetRepositoryWebhooksWebhookArray and GetRepositoryWebhooksWebhookArrayOutput values.
// You can construct a concrete instance of `GetRepositoryWebhooksWebhookArrayInput` via:
//
//	GetRepositoryWebhooksWebhookArray{ GetRepositoryWebhooksWebhookArgs{...} }
type GetRepositoryWebhooksWebhookArrayInput interface {
	pulumi.Input

	ToGetRepositoryWebhooksWebhookArrayOutput() GetRepositoryWebhooksWebhookArrayOutput
	ToGetRepositoryWebhooksWebhookArrayOutputWithContext(context.Context) GetRepositoryWebhooksWebhookArrayOutput
}

type GetRepositoryWebhooksWebhookArray []GetRepositoryWebhooksWebhookInput

func (GetRepositoryWebhooksWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryWebhooksWebhook)(nil)).Elem()
}

func (i GetRepositoryWebhooksWebhookArray) ToGetRepositoryWebhooksWebhookArrayOutput() GetRepositoryWebhooksWebhookArrayOutput {
	return i.ToGetRepositoryWebhooksWebhookArrayOutputWithContext(context.Background())
}

func (i GetRepositoryWebhooksWebhookArray) ToGetRepositoryWebhooksWebhookArrayOutputWithContext(ctx context.Context) GetRepositoryWebhooksWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoryWebhooksWebhookArrayOutput)
}

type GetRepositoryWebhooksWebhookOutput struct{ *pulumi.OutputState }

func (GetRepositoryWebhooksWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoryWebhooksWebhook)(nil)).Elem()
}

func (o GetRepositoryWebhooksWebhookOutput) ToGetRepositoryWebhooksWebhookOutput() GetRepositoryWebhooksWebhookOutput {
	return o
}

func (o GetRepositoryWebhooksWebhookOutput) ToGetRepositoryWebhooksWebhookOutputWithContext(ctx context.Context) GetRepositoryWebhooksWebhookOutput {
	return o
}

// `true` if the webhook is active.
func (o GetRepositoryWebhooksWebhookOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRepositoryWebhooksWebhook) bool { return v.Active }).(pulumi.BoolOutput)
}

// the ID of the webhook.
func (o GetRepositoryWebhooksWebhookOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetRepositoryWebhooksWebhook) int { return v.Id }).(pulumi.IntOutput)
}

// the name of the webhook.
func (o GetRepositoryWebhooksWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryWebhooksWebhook) string { return v.Name }).(pulumi.StringOutput)
}

// the type of the webhook.
func (o GetRepositoryWebhooksWebhookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryWebhooksWebhook) string { return v.Type }).(pulumi.StringOutput)
}

// the url of the webhook.
func (o GetRepositoryWebhooksWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoryWebhooksWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type GetRepositoryWebhooksWebhookArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoryWebhooksWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoryWebhooksWebhook)(nil)).Elem()
}

func (o GetRepositoryWebhooksWebhookArrayOutput) ToGetRepositoryWebhooksWebhookArrayOutput() GetRepositoryWebhooksWebhookArrayOutput {
	return o
}

func (o GetRepositoryWebhooksWebhookArrayOutput) ToGetRepositoryWebhooksWebhookArrayOutputWithContext(ctx context.Context) GetRepositoryWebhooksWebhookArrayOutput {
	return o
}

func (o GetRepositoryWebhooksWebhookArrayOutput) Index(i pulumi.IntInput) GetRepositoryWebhooksWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoryWebhooksWebhook {
		return vs[0].([]GetRepositoryWebhooksWebhook)[vs[1].(int)]
	}).(GetRepositoryWebhooksWebhookOutput)
}

type GetTeamRepositoriesDetailed struct {
	RepoId   int    `pulumi:"repoId"`
	RoleName string `pulumi:"roleName"`
}

// GetTeamRepositoriesDetailedInput is an input type that accepts GetTeamRepositoriesDetailedArgs and GetTeamRepositoriesDetailedOutput values.
// You can construct a concrete instance of `GetTeamRepositoriesDetailedInput` via:
//
//	GetTeamRepositoriesDetailedArgs{...}
type GetTeamRepositoriesDetailedInput interface {
	pulumi.Input

	ToGetTeamRepositoriesDetailedOutput() GetTeamRepositoriesDetailedOutput
	ToGetTeamRepositoriesDetailedOutputWithContext(context.Context) GetTeamRepositoriesDetailedOutput
}

type GetTeamRepositoriesDetailedArgs struct {
	RepoId   pulumi.IntInput    `pulumi:"repoId"`
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (GetTeamRepositoriesDetailedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRepositoriesDetailed)(nil)).Elem()
}

func (i GetTeamRepositoriesDetailedArgs) ToGetTeamRepositoriesDetailedOutput() GetTeamRepositoriesDetailedOutput {
	return i.ToGetTeamRepositoriesDetailedOutputWithContext(context.Background())
}

func (i GetTeamRepositoriesDetailedArgs) ToGetTeamRepositoriesDetailedOutputWithContext(ctx context.Context) GetTeamRepositoriesDetailedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRepositoriesDetailedOutput)
}

// GetTeamRepositoriesDetailedArrayInput is an input type that accepts GetTeamRepositoriesDetailedArray and GetTeamRepositoriesDetailedArrayOutput values.
// You can construct a concrete instance of `GetTeamRepositoriesDetailedArrayInput` via:
//
//	GetTeamRepositoriesDetailedArray{ GetTeamRepositoriesDetailedArgs{...} }
type GetTeamRepositoriesDetailedArrayInput interface {
	pulumi.Input

	ToGetTeamRepositoriesDetailedArrayOutput() GetTeamRepositoriesDetailedArrayOutput
	ToGetTeamRepositoriesDetailedArrayOutputWithContext(context.Context) GetTeamRepositoriesDetailedArrayOutput
}

type GetTeamRepositoriesDetailedArray []GetTeamRepositoriesDetailedInput

func (GetTeamRepositoriesDetailedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRepositoriesDetailed)(nil)).Elem()
}

func (i GetTeamRepositoriesDetailedArray) ToGetTeamRepositoriesDetailedArrayOutput() GetTeamRepositoriesDetailedArrayOutput {
	return i.ToGetTeamRepositoriesDetailedArrayOutputWithContext(context.Background())
}

func (i GetTeamRepositoriesDetailedArray) ToGetTeamRepositoriesDetailedArrayOutputWithContext(ctx context.Context) GetTeamRepositoriesDetailedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRepositoriesDetailedArrayOutput)
}

type GetTeamRepositoriesDetailedOutput struct{ *pulumi.OutputState }

func (GetTeamRepositoriesDetailedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRepositoriesDetailed)(nil)).Elem()
}

func (o GetTeamRepositoriesDetailedOutput) ToGetTeamRepositoriesDetailedOutput() GetTeamRepositoriesDetailedOutput {
	return o
}

func (o GetTeamRepositoriesDetailedOutput) ToGetTeamRepositoriesDetailedOutputWithContext(ctx context.Context) GetTeamRepositoriesDetailedOutput {
	return o
}

func (o GetTeamRepositoriesDetailedOutput) RepoId() pulumi.IntOutput {
	return o.ApplyT(func(v GetTeamRepositoriesDetailed) int { return v.RepoId }).(pulumi.IntOutput)
}

func (o GetTeamRepositoriesDetailedOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamRepositoriesDetailed) string { return v.RoleName }).(pulumi.StringOutput)
}

type GetTeamRepositoriesDetailedArrayOutput struct{ *pulumi.OutputState }

func (GetTeamRepositoriesDetailedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRepositoriesDetailed)(nil)).Elem()
}

func (o GetTeamRepositoriesDetailedArrayOutput) ToGetTeamRepositoriesDetailedArrayOutput() GetTeamRepositoriesDetailedArrayOutput {
	return o
}

func (o GetTeamRepositoriesDetailedArrayOutput) ToGetTeamRepositoriesDetailedArrayOutputWithContext(ctx context.Context) GetTeamRepositoriesDetailedArrayOutput {
	return o
}

func (o GetTeamRepositoriesDetailedArrayOutput) Index(i pulumi.IntInput) GetTeamRepositoriesDetailedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamRepositoriesDetailed {
		return vs[0].([]GetTeamRepositoriesDetailed)[vs[1].(int)]
	}).(GetTeamRepositoriesDetailedOutput)
}

type GetTreeEntry struct {
	Mode string `pulumi:"mode"`
	Path string `pulumi:"path"`
	Sha  string `pulumi:"sha"`
	Size int    `pulumi:"size"`
	Type string `pulumi:"type"`
}

// GetTreeEntryInput is an input type that accepts GetTreeEntryArgs and GetTreeEntryOutput values.
// You can construct a concrete instance of `GetTreeEntryInput` via:
//
//	GetTreeEntryArgs{...}
type GetTreeEntryInput interface {
	pulumi.Input

	ToGetTreeEntryOutput() GetTreeEntryOutput
	ToGetTreeEntryOutputWithContext(context.Context) GetTreeEntryOutput
}

type GetTreeEntryArgs struct {
	Mode pulumi.StringInput `pulumi:"mode"`
	Path pulumi.StringInput `pulumi:"path"`
	Sha  pulumi.StringInput `pulumi:"sha"`
	Size pulumi.IntInput    `pulumi:"size"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTreeEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTreeEntry)(nil)).Elem()
}

func (i GetTreeEntryArgs) ToGetTreeEntryOutput() GetTreeEntryOutput {
	return i.ToGetTreeEntryOutputWithContext(context.Background())
}

func (i GetTreeEntryArgs) ToGetTreeEntryOutputWithContext(ctx context.Context) GetTreeEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTreeEntryOutput)
}

// GetTreeEntryArrayInput is an input type that accepts GetTreeEntryArray and GetTreeEntryArrayOutput values.
// You can construct a concrete instance of `GetTreeEntryArrayInput` via:
//
//	GetTreeEntryArray{ GetTreeEntryArgs{...} }
type GetTreeEntryArrayInput interface {
	pulumi.Input

	ToGetTreeEntryArrayOutput() GetTreeEntryArrayOutput
	ToGetTreeEntryArrayOutputWithContext(context.Context) GetTreeEntryArrayOutput
}

type GetTreeEntryArray []GetTreeEntryInput

func (GetTreeEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTreeEntry)(nil)).Elem()
}

func (i GetTreeEntryArray) ToGetTreeEntryArrayOutput() GetTreeEntryArrayOutput {
	return i.ToGetTreeEntryArrayOutputWithContext(context.Background())
}

func (i GetTreeEntryArray) ToGetTreeEntryArrayOutputWithContext(ctx context.Context) GetTreeEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTreeEntryArrayOutput)
}

type GetTreeEntryOutput struct{ *pulumi.OutputState }

func (GetTreeEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTreeEntry)(nil)).Elem()
}

func (o GetTreeEntryOutput) ToGetTreeEntryOutput() GetTreeEntryOutput {
	return o
}

func (o GetTreeEntryOutput) ToGetTreeEntryOutputWithContext(ctx context.Context) GetTreeEntryOutput {
	return o
}

func (o GetTreeEntryOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetTreeEntry) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetTreeEntryOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetTreeEntry) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetTreeEntryOutput) Sha() pulumi.StringOutput {
	return o.ApplyT(func(v GetTreeEntry) string { return v.Sha }).(pulumi.StringOutput)
}

func (o GetTreeEntryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetTreeEntry) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetTreeEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTreeEntry) string { return v.Type }).(pulumi.StringOutput)
}

type GetTreeEntryArrayOutput struct{ *pulumi.OutputState }

func (GetTreeEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTreeEntry)(nil)).Elem()
}

func (o GetTreeEntryArrayOutput) ToGetTreeEntryArrayOutput() GetTreeEntryArrayOutput {
	return o
}

func (o GetTreeEntryArrayOutput) ToGetTreeEntryArrayOutputWithContext(ctx context.Context) GetTreeEntryArrayOutput {
	return o
}

func (o GetTreeEntryArrayOutput) Index(i pulumi.IntInput) GetTreeEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTreeEntry {
		return vs[0].([]GetTreeEntry)[vs[1].(int)]
	}).(GetTreeEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsOrganizationPermissionsAllowedActionsConfigInput)(nil)).Elem(), ActionsOrganizationPermissionsAllowedActionsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsOrganizationPermissionsAllowedActionsConfigPtrInput)(nil)).Elem(), ActionsOrganizationPermissionsAllowedActionsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsOrganizationPermissionsEnabledRepositoriesConfigInput)(nil)).Elem(), ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrInput)(nil)).Elem(), ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryPermissionsAllowedActionsConfigInput)(nil)).Elem(), ActionsRepositoryPermissionsAllowedActionsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryPermissionsAllowedActionsConfigPtrInput)(nil)).Elem(), ActionsRepositoryPermissionsAllowedActionsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionRequiredPullRequestReviewInput)(nil)).Elem(), BranchProtectionRequiredPullRequestReviewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionRequiredPullRequestReviewArrayInput)(nil)).Elem(), BranchProtectionRequiredPullRequestReviewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionRequiredStatusCheckInput)(nil)).Elem(), BranchProtectionRequiredStatusCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionRequiredStatusCheckArrayInput)(nil)).Elem(), BranchProtectionRequiredStatusCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsInput)(nil)).Elem(), BranchProtectionV3RequiredPullRequestReviewsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsPtrInput)(nil)).Elem(), BranchProtectionV3RequiredPullRequestReviewsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesInput)(nil)).Elem(), BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrInput)(nil)).Elem(), BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredStatusChecksInput)(nil)).Elem(), BranchProtectionV3RequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RequiredStatusChecksPtrInput)(nil)).Elem(), BranchProtectionV3RequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RestrictionsInput)(nil)).Elem(), BranchProtectionV3RestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchProtectionV3RestrictionsPtrInput)(nil)).Elem(), BranchProtectionV3RestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueLabelsLabelInput)(nil)).Elem(), IssueLabelsLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueLabelsLabelArrayInput)(nil)).Elem(), IssueLabelsLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetBypassActorInput)(nil)).Elem(), OrganizationRulesetBypassActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetBypassActorArrayInput)(nil)).Elem(), OrganizationRulesetBypassActorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsInput)(nil)).Elem(), OrganizationRulesetConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsPtrInput)(nil)).Elem(), OrganizationRulesetConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsRefNameInput)(nil)).Elem(), OrganizationRulesetConditionsRefNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsRefNamePtrInput)(nil)).Elem(), OrganizationRulesetConditionsRefNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsRepositoryNameInput)(nil)).Elem(), OrganizationRulesetConditionsRepositoryNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetConditionsRepositoryNamePtrInput)(nil)).Elem(), OrganizationRulesetConditionsRepositoryNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesInput)(nil)).Elem(), OrganizationRulesetRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesPtrInput)(nil)).Elem(), OrganizationRulesetRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesBranchNamePatternInput)(nil)).Elem(), OrganizationRulesetRulesBranchNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesBranchNamePatternPtrInput)(nil)).Elem(), OrganizationRulesetRulesBranchNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitAuthorEmailPatternInput)(nil)).Elem(), OrganizationRulesetRulesCommitAuthorEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitAuthorEmailPatternPtrInput)(nil)).Elem(), OrganizationRulesetRulesCommitAuthorEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitMessagePatternInput)(nil)).Elem(), OrganizationRulesetRulesCommitMessagePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitMessagePatternPtrInput)(nil)).Elem(), OrganizationRulesetRulesCommitMessagePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitterEmailPatternInput)(nil)).Elem(), OrganizationRulesetRulesCommitterEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesCommitterEmailPatternPtrInput)(nil)).Elem(), OrganizationRulesetRulesCommitterEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesPullRequestInput)(nil)).Elem(), OrganizationRulesetRulesPullRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesPullRequestPtrInput)(nil)).Elem(), OrganizationRulesetRulesPullRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksInput)(nil)).Elem(), OrganizationRulesetRulesRequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksPtrInput)(nil)).Elem(), OrganizationRulesetRulesRequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksRequiredCheckInput)(nil)).Elem(), OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayInput)(nil)).Elem(), OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesTagNamePatternInput)(nil)).Elem(), OrganizationRulesetRulesTagNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRulesetRulesTagNamePatternPtrInput)(nil)).Elem(), OrganizationRulesetRulesTagNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationWebhookConfigurationInput)(nil)).Elem(), OrganizationWebhookConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationWebhookConfigurationPtrInput)(nil)).Elem(), OrganizationWebhookConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAppAuthInput)(nil)).Elem(), ProviderAppAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAppAuthPtrInput)(nil)).Elem(), ProviderAppAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorsTeamInput)(nil)).Elem(), RepositoryCollaboratorsTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorsTeamArrayInput)(nil)).Elem(), RepositoryCollaboratorsTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorsUserInput)(nil)).Elem(), RepositoryCollaboratorsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorsUserArrayInput)(nil)).Elem(), RepositoryCollaboratorsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEnvironmentDeploymentBranchPolicyInput)(nil)).Elem(), RepositoryEnvironmentDeploymentBranchPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEnvironmentDeploymentBranchPolicyPtrInput)(nil)).Elem(), RepositoryEnvironmentDeploymentBranchPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEnvironmentReviewerInput)(nil)).Elem(), RepositoryEnvironmentReviewerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEnvironmentReviewerArrayInput)(nil)).Elem(), RepositoryEnvironmentReviewerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPagesInput)(nil)).Elem(), RepositoryPagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPagesPtrInput)(nil)).Elem(), RepositoryPagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPagesSourceInput)(nil)).Elem(), RepositoryPagesSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPagesSourcePtrInput)(nil)).Elem(), RepositoryPagesSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetBypassActorInput)(nil)).Elem(), RepositoryRulesetBypassActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetBypassActorArrayInput)(nil)).Elem(), RepositoryRulesetBypassActorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetConditionsInput)(nil)).Elem(), RepositoryRulesetConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetConditionsPtrInput)(nil)).Elem(), RepositoryRulesetConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetConditionsRefNameInput)(nil)).Elem(), RepositoryRulesetConditionsRefNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetConditionsRefNamePtrInput)(nil)).Elem(), RepositoryRulesetConditionsRefNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesInput)(nil)).Elem(), RepositoryRulesetRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesPtrInput)(nil)).Elem(), RepositoryRulesetRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesBranchNamePatternInput)(nil)).Elem(), RepositoryRulesetRulesBranchNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesBranchNamePatternPtrInput)(nil)).Elem(), RepositoryRulesetRulesBranchNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitAuthorEmailPatternInput)(nil)).Elem(), RepositoryRulesetRulesCommitAuthorEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitAuthorEmailPatternPtrInput)(nil)).Elem(), RepositoryRulesetRulesCommitAuthorEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitMessagePatternInput)(nil)).Elem(), RepositoryRulesetRulesCommitMessagePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitMessagePatternPtrInput)(nil)).Elem(), RepositoryRulesetRulesCommitMessagePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitterEmailPatternInput)(nil)).Elem(), RepositoryRulesetRulesCommitterEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesCommitterEmailPatternPtrInput)(nil)).Elem(), RepositoryRulesetRulesCommitterEmailPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesPullRequestInput)(nil)).Elem(), RepositoryRulesetRulesPullRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesPullRequestPtrInput)(nil)).Elem(), RepositoryRulesetRulesPullRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredDeploymentsInput)(nil)).Elem(), RepositoryRulesetRulesRequiredDeploymentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredDeploymentsPtrInput)(nil)).Elem(), RepositoryRulesetRulesRequiredDeploymentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksInput)(nil)).Elem(), RepositoryRulesetRulesRequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksPtrInput)(nil)).Elem(), RepositoryRulesetRulesRequiredStatusChecksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksRequiredCheckInput)(nil)).Elem(), RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayInput)(nil)).Elem(), RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesTagNamePatternInput)(nil)).Elem(), RepositoryRulesetRulesTagNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryRulesetRulesTagNamePatternPtrInput)(nil)).Elem(), RepositoryRulesetRulesTagNamePatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisInput)(nil)).Elem(), RepositorySecurityAndAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisPtrInput)(nil)).Elem(), RepositorySecurityAndAnalysisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisAdvancedSecurityInput)(nil)).Elem(), RepositorySecurityAndAnalysisAdvancedSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisAdvancedSecurityPtrInput)(nil)).Elem(), RepositorySecurityAndAnalysisAdvancedSecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningInput)(nil)).Elem(), RepositorySecurityAndAnalysisSecretScanningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningPtrInput)(nil)).Elem(), RepositorySecurityAndAnalysisSecretScanningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningPushProtectionInput)(nil)).Elem(), RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrInput)(nil)).Elem(), RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryTemplateInput)(nil)).Elem(), RepositoryTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryTemplatePtrInput)(nil)).Elem(), RepositoryTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryWebhookConfigurationInput)(nil)).Elem(), RepositoryWebhookConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryWebhookConfigurationPtrInput)(nil)).Elem(), RepositoryWebhookConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMembersMemberInput)(nil)).Elem(), TeamMembersMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMembersMemberArrayInput)(nil)).Elem(), TeamMembersMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamSettingsReviewRequestDelegationInput)(nil)).Elem(), TeamSettingsReviewRequestDelegationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamSettingsReviewRequestDelegationPtrInput)(nil)).Elem(), TeamSettingsReviewRequestDelegationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamSyncGroupMappingGroupInput)(nil)).Elem(), TeamSyncGroupMappingGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamSyncGroupMappingGroupArrayInput)(nil)).Elem(), TeamSyncGroupMappingGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsEnvironmentSecretsSecretInput)(nil)).Elem(), GetActionsEnvironmentSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsEnvironmentSecretsSecretArrayInput)(nil)).Elem(), GetActionsEnvironmentSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsEnvironmentVariablesVariableInput)(nil)).Elem(), GetActionsEnvironmentVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsEnvironmentVariablesVariableArrayInput)(nil)).Elem(), GetActionsEnvironmentVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsOrganizationSecretsSecretInput)(nil)).Elem(), GetActionsOrganizationSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsOrganizationSecretsSecretArrayInput)(nil)).Elem(), GetActionsOrganizationSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsOrganizationVariablesVariableInput)(nil)).Elem(), GetActionsOrganizationVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsOrganizationVariablesVariableArrayInput)(nil)).Elem(), GetActionsOrganizationVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsSecretsSecretInput)(nil)).Elem(), GetActionsSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsSecretsSecretArrayInput)(nil)).Elem(), GetActionsSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsVariablesVariableInput)(nil)).Elem(), GetActionsVariablesVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionsVariablesVariableArrayInput)(nil)).Elem(), GetActionsVariablesVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchProtectionRulesRuleInput)(nil)).Elem(), GetBranchProtectionRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBranchProtectionRulesRuleArrayInput)(nil)).Elem(), GetBranchProtectionRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesOrganizationSecretsSecretInput)(nil)).Elem(), GetCodespacesOrganizationSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesOrganizationSecretsSecretArrayInput)(nil)).Elem(), GetCodespacesOrganizationSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesSecretsSecretInput)(nil)).Elem(), GetCodespacesSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesSecretsSecretArrayInput)(nil)).Elem(), GetCodespacesSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesUserSecretsSecretInput)(nil)).Elem(), GetCodespacesUserSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCodespacesUserSecretsSecretArrayInput)(nil)).Elem(), GetCodespacesUserSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCollaboratorsCollaboratorInput)(nil)).Elem(), GetCollaboratorsCollaboratorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCollaboratorsCollaboratorArrayInput)(nil)).Elem(), GetCollaboratorsCollaboratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDependabotOrganizationSecretsSecretInput)(nil)).Elem(), GetDependabotOrganizationSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDependabotOrganizationSecretsSecretArrayInput)(nil)).Elem(), GetDependabotOrganizationSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDependabotSecretsSecretInput)(nil)).Elem(), GetDependabotSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDependabotSecretsSecretArrayInput)(nil)).Elem(), GetDependabotSecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalGroupsExternalGroupInput)(nil)).Elem(), GetExternalGroupsExternalGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExternalGroupsExternalGroupArrayInput)(nil)).Elem(), GetExternalGroupsExternalGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIssueLabelsLabelInput)(nil)).Elem(), GetIssueLabelsLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIssueLabelsLabelArrayInput)(nil)).Elem(), GetIssueLabelsLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationExternalIdentitiesIdentityInput)(nil)).Elem(), GetOrganizationExternalIdentitiesIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationExternalIdentitiesIdentityArrayInput)(nil)).Elem(), GetOrganizationExternalIdentitiesIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationIpAllowListIpAllowListInput)(nil)).Elem(), GetOrganizationIpAllowListIpAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationIpAllowListIpAllowListArrayInput)(nil)).Elem(), GetOrganizationIpAllowListIpAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationTeamSyncGroupsGroupInput)(nil)).Elem(), GetOrganizationTeamSyncGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationTeamSyncGroupsGroupArrayInput)(nil)).Elem(), GetOrganizationTeamSyncGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationTeamsTeamInput)(nil)).Elem(), GetOrganizationTeamsTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationTeamsTeamArrayInput)(nil)).Elem(), GetOrganizationTeamsTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationWebhooksWebhookInput)(nil)).Elem(), GetOrganizationWebhooksWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOrganizationWebhooksWebhookArrayInput)(nil)).Elem(), GetOrganizationWebhooksWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetInput)(nil)).Elem(), GetReleaseAssetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetReleaseAssetArrayInput)(nil)).Elem(), GetReleaseAssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryAutolinkReferencesAutolinkReferenceInput)(nil)).Elem(), GetRepositoryAutolinkReferencesAutolinkReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryAutolinkReferencesAutolinkReferenceArrayInput)(nil)).Elem(), GetRepositoryAutolinkReferencesAutolinkReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryBranchesBranchInput)(nil)).Elem(), GetRepositoryBranchesBranchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryBranchesBranchArrayInput)(nil)).Elem(), GetRepositoryBranchesBranchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDeployKeysKeyInput)(nil)).Elem(), GetRepositoryDeployKeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDeployKeysKeyArrayInput)(nil)).Elem(), GetRepositoryDeployKeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyInput)(nil)).Elem(), GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayInput)(nil)).Elem(), GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryEnvironmentsEnvironmentInput)(nil)).Elem(), GetRepositoryEnvironmentsEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryEnvironmentsEnvironmentArrayInput)(nil)).Elem(), GetRepositoryEnvironmentsEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPageInput)(nil)).Elem(), GetRepositoryPageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPageArrayInput)(nil)).Elem(), GetRepositoryPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPageSourceInput)(nil)).Elem(), GetRepositoryPageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPageSourceArrayInput)(nil)).Elem(), GetRepositoryPageSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPullRequestsResultInput)(nil)).Elem(), GetRepositoryPullRequestsResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryPullRequestsResultArrayInput)(nil)).Elem(), GetRepositoryPullRequestsResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTeamsTeamInput)(nil)).Elem(), GetRepositoryTeamsTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTeamsTeamArrayInput)(nil)).Elem(), GetRepositoryTeamsTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryTemplateInput)(nil)).Elem(), GetRepositoryTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryWebhooksWebhookInput)(nil)).Elem(), GetRepositoryWebhooksWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoryWebhooksWebhookArrayInput)(nil)).Elem(), GetRepositoryWebhooksWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRepositoriesDetailedInput)(nil)).Elem(), GetTeamRepositoriesDetailedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRepositoriesDetailedArrayInput)(nil)).Elem(), GetTeamRepositoriesDetailedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTreeEntryInput)(nil)).Elem(), GetTreeEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTreeEntryArrayInput)(nil)).Elem(), GetTreeEntryArray{})
	pulumi.RegisterOutputType(ActionsOrganizationPermissionsAllowedActionsConfigOutput{})
	pulumi.RegisterOutputType(ActionsOrganizationPermissionsAllowedActionsConfigPtrOutput{})
	pulumi.RegisterOutputType(ActionsOrganizationPermissionsEnabledRepositoriesConfigOutput{})
	pulumi.RegisterOutputType(ActionsOrganizationPermissionsEnabledRepositoriesConfigPtrOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryPermissionsAllowedActionsConfigOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput{})
	pulumi.RegisterOutputType(BranchProtectionRequiredPullRequestReviewOutput{})
	pulumi.RegisterOutputType(BranchProtectionRequiredPullRequestReviewArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionRequiredStatusCheckOutput{})
	pulumi.RegisterOutputType(BranchProtectionRequiredStatusCheckArrayOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredPullRequestReviewsOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredPullRequestReviewsPtrOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowancesPtrOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredStatusChecksOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RequiredStatusChecksPtrOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RestrictionsOutput{})
	pulumi.RegisterOutputType(BranchProtectionV3RestrictionsPtrOutput{})
	pulumi.RegisterOutputType(IssueLabelsLabelOutput{})
	pulumi.RegisterOutputType(IssueLabelsLabelArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetBypassActorOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetBypassActorArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsRefNameOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsRefNamePtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsRepositoryNameOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetConditionsRepositoryNamePtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesBranchNamePatternOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesBranchNamePatternPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitAuthorEmailPatternOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitAuthorEmailPatternPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitMessagePatternOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitMessagePatternPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitterEmailPatternOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesCommitterEmailPatternPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesPullRequestOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesPullRequestPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesRequiredStatusChecksOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesRequiredStatusChecksPtrOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesTagNamePatternOutput{})
	pulumi.RegisterOutputType(OrganizationRulesetRulesTagNamePatternPtrOutput{})
	pulumi.RegisterOutputType(OrganizationWebhookConfigurationOutput{})
	pulumi.RegisterOutputType(OrganizationWebhookConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ProviderAppAuthOutput{})
	pulumi.RegisterOutputType(ProviderAppAuthPtrOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorsTeamOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorsTeamArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorsUserOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorsUserArrayOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentDeploymentBranchPolicyOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentDeploymentBranchPolicyPtrOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentReviewerOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentReviewerArrayOutput{})
	pulumi.RegisterOutputType(RepositoryPagesOutput{})
	pulumi.RegisterOutputType(RepositoryPagesPtrOutput{})
	pulumi.RegisterOutputType(RepositoryPagesSourceOutput{})
	pulumi.RegisterOutputType(RepositoryPagesSourcePtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetBypassActorOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetBypassActorArrayOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetConditionsOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetConditionsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetConditionsRefNameOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetConditionsRefNamePtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesBranchNamePatternOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesBranchNamePatternPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitAuthorEmailPatternOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitAuthorEmailPatternPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitMessagePatternOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitMessagePatternPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitterEmailPatternOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesCommitterEmailPatternPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesPullRequestOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesPullRequestPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredDeploymentsOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredDeploymentsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredStatusChecksOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredStatusChecksPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesRequiredStatusChecksRequiredCheckArrayOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesTagNamePatternOutput{})
	pulumi.RegisterOutputType(RepositoryRulesetRulesTagNamePatternPtrOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisPtrOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisAdvancedSecurityOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisAdvancedSecurityPtrOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisSecretScanningOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisSecretScanningPtrOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisSecretScanningPushProtectionOutput{})
	pulumi.RegisterOutputType(RepositorySecurityAndAnalysisSecretScanningPushProtectionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryTemplateOutput{})
	pulumi.RegisterOutputType(RepositoryTemplatePtrOutput{})
	pulumi.RegisterOutputType(RepositoryWebhookConfigurationOutput{})
	pulumi.RegisterOutputType(RepositoryWebhookConfigurationPtrOutput{})
	pulumi.RegisterOutputType(TeamMembersMemberOutput{})
	pulumi.RegisterOutputType(TeamMembersMemberArrayOutput{})
	pulumi.RegisterOutputType(TeamSettingsReviewRequestDelegationOutput{})
	pulumi.RegisterOutputType(TeamSettingsReviewRequestDelegationPtrOutput{})
	pulumi.RegisterOutputType(TeamSyncGroupMappingGroupOutput{})
	pulumi.RegisterOutputType(TeamSyncGroupMappingGroupArrayOutput{})
	pulumi.RegisterOutputType(GetActionsEnvironmentSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetActionsEnvironmentSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetActionsEnvironmentVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetActionsEnvironmentVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetActionsOrganizationSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetActionsOrganizationSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetActionsOrganizationVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetActionsOrganizationVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetActionsSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetActionsSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetActionsVariablesVariableOutput{})
	pulumi.RegisterOutputType(GetActionsVariablesVariableArrayOutput{})
	pulumi.RegisterOutputType(GetBranchProtectionRulesRuleOutput{})
	pulumi.RegisterOutputType(GetBranchProtectionRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetCodespacesOrganizationSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetCodespacesOrganizationSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetCodespacesSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetCodespacesSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetCodespacesUserSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetCodespacesUserSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetCollaboratorsCollaboratorOutput{})
	pulumi.RegisterOutputType(GetCollaboratorsCollaboratorArrayOutput{})
	pulumi.RegisterOutputType(GetDependabotOrganizationSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetDependabotOrganizationSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetDependabotSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetDependabotSecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetExternalGroupsExternalGroupOutput{})
	pulumi.RegisterOutputType(GetExternalGroupsExternalGroupArrayOutput{})
	pulumi.RegisterOutputType(GetIssueLabelsLabelOutput{})
	pulumi.RegisterOutputType(GetIssueLabelsLabelArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationExternalIdentitiesIdentityOutput{})
	pulumi.RegisterOutputType(GetOrganizationExternalIdentitiesIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationIpAllowListIpAllowListOutput{})
	pulumi.RegisterOutputType(GetOrganizationIpAllowListIpAllowListArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationTeamSyncGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetOrganizationTeamSyncGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationTeamsTeamOutput{})
	pulumi.RegisterOutputType(GetOrganizationTeamsTeamArrayOutput{})
	pulumi.RegisterOutputType(GetOrganizationWebhooksWebhookOutput{})
	pulumi.RegisterOutputType(GetOrganizationWebhooksWebhookArrayOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetOutput{})
	pulumi.RegisterOutputType(GetReleaseAssetArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryAutolinkReferencesAutolinkReferenceOutput{})
	pulumi.RegisterOutputType(GetRepositoryAutolinkReferencesAutolinkReferenceArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryBranchesBranchOutput{})
	pulumi.RegisterOutputType(GetRepositoryBranchesBranchArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryDeployKeysKeyOutput{})
	pulumi.RegisterOutputType(GetRepositoryDeployKeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyOutput{})
	pulumi.RegisterOutputType(GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryEnvironmentsEnvironmentOutput{})
	pulumi.RegisterOutputType(GetRepositoryEnvironmentsEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryPageOutput{})
	pulumi.RegisterOutputType(GetRepositoryPageArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryPageSourceOutput{})
	pulumi.RegisterOutputType(GetRepositoryPageSourceArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryPullRequestsResultOutput{})
	pulumi.RegisterOutputType(GetRepositoryPullRequestsResultArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryTeamsTeamOutput{})
	pulumi.RegisterOutputType(GetRepositoryTeamsTeamArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoryTemplateOutput{})
	pulumi.RegisterOutputType(GetRepositoryWebhooksWebhookOutput{})
	pulumi.RegisterOutputType(GetRepositoryWebhooksWebhookArrayOutput{})
	pulumi.RegisterOutputType(GetTeamRepositoriesDetailedOutput{})
	pulumi.RegisterOutputType(GetTeamRepositoriesDetailedArrayOutput{})
	pulumi.RegisterOutputType(GetTreeEntryOutput{})
	pulumi.RegisterOutputType(GetTreeEntryArrayOutput{})
}
