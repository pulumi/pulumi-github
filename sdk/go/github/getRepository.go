// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Use this data source to retrieve information about a GitHub repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/v3/go/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "hashicorp/terraform"
// 		_, err := github.LookupRepository(ctx, &github.LookupRepositoryArgs{
// 			FullName: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	var rv LookupRepositoryResult
	err := ctx.Invoke("github:index/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	// Full name of the repository (in `org/name` format).
	FullName *string `pulumi:"fullName"`
	// The name of the repository.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	// Whether the repository allows merge commits.
	AllowMergeCommit bool `pulumi:"allowMergeCommit"`
	// Whether the repository allows rebase merges.
	AllowRebaseMerge bool `pulumi:"allowRebaseMerge"`
	// Whether the repository allows squash merges.
	AllowSquashMerge bool `pulumi:"allowSquashMerge"`
	// Whether the repository is archived.
	Archived bool `pulumi:"archived"`
	// The name of the default branch of the repository.
	DefaultBranch string `pulumi:"defaultBranch"`
	// A description of the repository.
	Description string  `pulumi:"description"`
	FullName    *string `pulumi:"fullName"`
	// URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.
	GitCloneUrl string `pulumi:"gitCloneUrl"`
	// Whether the repository has Downloads feature enabled.
	HasDownloads bool `pulumi:"hasDownloads"`
	// Whether the repository has GitHub Issues enabled.
	HasIssues bool `pulumi:"hasIssues"`
	// Whether the repository has the GitHub Projects enabled.
	HasProjects bool `pulumi:"hasProjects"`
	// Whether the repository has the GitHub Wiki enabled.
	HasWiki bool `pulumi:"hasWiki"`
	// URL of a page describing the project.
	HomepageUrl string `pulumi:"homepageUrl"`
	// URL to the repository on the web.
	HtmlUrl string `pulumi:"htmlUrl"`
	// URL that can be provided to `git clone` to clone the repository via HTTPS.
	HttpCloneUrl string `pulumi:"httpCloneUrl"`
	// The provider-assigned unique ID for this managed resource.
	Id   string  `pulumi:"id"`
	Name *string `pulumi:"name"`
	// GraphQL global node id for use with v4 API
	NodeId string `pulumi:"nodeId"`
	// The repository's GitHub Pages configuration.
	Pages []GetRepositoryPage `pulumi:"pages"`
	// Whether the repository is private.
	Private bool `pulumi:"private"`
	// GitHub ID for the repository
	RepoId int `pulumi:"repoId"`
	// URL that can be provided to `git clone` to clone the repository via SSH.
	SshCloneUrl string `pulumi:"sshCloneUrl"`
	// URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.
	SvnUrl string `pulumi:"svnUrl"`
	// The list of topics of the repository.
	Topics []string `pulumi:"topics"`
	// Whether the repository is public, private or internal.
	Visibility string `pulumi:"visibility"`
}
