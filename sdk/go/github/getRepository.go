// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	var rv LookupRepositoryResult
	err := ctx.Invoke("github:index/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	Description           *string `pulumi:"description"`
	FullName              *string `pulumi:"fullName"`
	HomepageUrl           *string `pulumi:"homepageUrl"`
	Name                  *string `pulumi:"name"`
	OnlyProtectedBranches *bool   `pulumi:"onlyProtectedBranches"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	AllowAutoMerge   bool    `pulumi:"allowAutoMerge"`
	AllowMergeCommit bool    `pulumi:"allowMergeCommit"`
	AllowRebaseMerge bool    `pulumi:"allowRebaseMerge"`
	AllowSquashMerge bool    `pulumi:"allowSquashMerge"`
	Archived         bool    `pulumi:"archived"`
	DefaultBranch    string  `pulumi:"defaultBranch"`
	Description      *string `pulumi:"description"`
	FullName         string  `pulumi:"fullName"`
	GitCloneUrl      string  `pulumi:"gitCloneUrl"`
	HasDownloads     bool    `pulumi:"hasDownloads"`
	HasIssues        bool    `pulumi:"hasIssues"`
	HasProjects      bool    `pulumi:"hasProjects"`
	HasWiki          bool    `pulumi:"hasWiki"`
	HomepageUrl      *string `pulumi:"homepageUrl"`
	HtmlUrl          string  `pulumi:"htmlUrl"`
	HttpCloneUrl     string  `pulumi:"httpCloneUrl"`
	// The provider-assigned unique ID for this managed resource.
	Id                       string              `pulumi:"id"`
	MergeCommitMessage       string              `pulumi:"mergeCommitMessage"`
	MergeCommitTitle         string              `pulumi:"mergeCommitTitle"`
	Name                     string              `pulumi:"name"`
	NodeId                   string              `pulumi:"nodeId"`
	OnlyProtectedBranches    *bool               `pulumi:"onlyProtectedBranches"`
	Pages                    []GetRepositoryPage `pulumi:"pages"`
	Private                  bool                `pulumi:"private"`
	RepoId                   int                 `pulumi:"repoId"`
	SquashMergeCommitMessage string              `pulumi:"squashMergeCommitMessage"`
	SquashMergeCommitTitle   string              `pulumi:"squashMergeCommitTitle"`
	SshCloneUrl              string              `pulumi:"sshCloneUrl"`
	SvnUrl                   string              `pulumi:"svnUrl"`
	Topics                   []string            `pulumi:"topics"`
	Visibility               string              `pulumi:"visibility"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResult, error) {
			args := v.(LookupRepositoryArgs)
			r, err := LookupRepository(ctx, &args, opts...)
			var s LookupRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryResultOutput)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	Description           pulumi.StringPtrInput `pulumi:"description"`
	FullName              pulumi.StringPtrInput `pulumi:"fullName"`
	HomepageUrl           pulumi.StringPtrInput `pulumi:"homepageUrl"`
	Name                  pulumi.StringPtrInput `pulumi:"name"`
	OnlyProtectedBranches pulumi.BoolPtrInput   `pulumi:"onlyProtectedBranches"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRepository.
type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) AllowAutoMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.AllowAutoMerge }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) AllowMergeCommit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.AllowMergeCommit }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) AllowRebaseMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.AllowRebaseMerge }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) AllowSquashMerge() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.AllowSquashMerge }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.Archived }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.DefaultBranch }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LookupRepositoryResultOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.FullName }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) GitCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.GitCloneUrl }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) HasDownloads() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.HasDownloads }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) HasIssues() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.HasIssues }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) HasProjects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.HasProjects }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) HasWiki() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.HasWiki }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) HomepageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryResult) *string { return v.HomepageUrl }).(pulumi.StringPtrOutput)
}

func (o LookupRepositoryResultOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) HttpCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.HttpCloneUrl }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) MergeCommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.MergeCommitMessage }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) MergeCommitTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.MergeCommitTitle }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.NodeId }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) OnlyProtectedBranches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRepositoryResult) *bool { return v.OnlyProtectedBranches }).(pulumi.BoolPtrOutput)
}

func (o LookupRepositoryResultOutput) Pages() GetRepositoryPageArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []GetRepositoryPage { return v.Pages }).(GetRepositoryPageArrayOutput)
}

func (o LookupRepositoryResultOutput) Private() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.Private }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) RepoId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.RepoId }).(pulumi.IntOutput)
}

func (o LookupRepositoryResultOutput) SquashMergeCommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SquashMergeCommitMessage }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) SquashMergeCommitTitle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SquashMergeCommitTitle }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) SshCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SshCloneUrl }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) SvnUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.SvnUrl }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRepositoryResult) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o LookupRepositoryResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Visibility }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}
