// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := github.NewActionsEnvironmentSecret(ctx, "exampleSecretActionsEnvironmentSecret", &github.ActionsEnvironmentSecretArgs{
// 			Environment:    pulumi.String("example_environment"),
// 			SecretName:     pulumi.String("example_secret_name"),
// 			PlaintextValue: pulumi.Any(_var.Some_secret_string),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = github.NewActionsEnvironmentSecret(ctx, "exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret", &github.ActionsEnvironmentSecretArgs{
// 			Environment:    pulumi.String("example_environment"),
// 			SecretName:     pulumi.String("example_secret_name"),
// 			EncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		repo, err := github.LookupRepository(ctx, &GetRepositoryArgs{
// 			FullName: pulumi.StringRef("my-org/repo"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		repoEnvironment, err := github.NewRepositoryEnvironment(ctx, "repoEnvironment", &github.RepositoryEnvironmentArgs{
// 			Repository:  pulumi.String(repo.Name),
// 			Environment: pulumi.String("example_environment"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = github.NewActionsEnvironmentSecret(ctx, "testSecret", &github.ActionsEnvironmentSecretArgs{
// 			Repository:     pulumi.String(repo.Name),
// 			Environment:    repoEnvironment.Environment,
// 			SecretName:     pulumi.String("test_secret_name"),
// 			PlaintextValue: pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an ID made up of the secret name
//
// ```sh
//  $ pulumi import github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret test_secret test_secret_name
// ```
//
//  NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` field when importing. You may need to ignore changes for the `plaintext_value` as a workaround.
type ActionsEnvironmentSecret struct {
	pulumi.CustomResourceState

	// Date of actionsEnvironmentSecret creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Encrypted value of the secret using the Github public key in Base64 format.
	EncryptedValue pulumi.StringPtrOutput `pulumi:"encryptedValue"`
	// Name of the environment.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Plaintext value of the secret to be encrypted.
	PlaintextValue pulumi.StringPtrOutput `pulumi:"plaintextValue"`
	// Name of the repository.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Name of the secret.
	SecretName pulumi.StringOutput `pulumi:"secretName"`
	// Date of actionsEnvironmentSecret update.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewActionsEnvironmentSecret registers a new resource with the given unique name, arguments, and options.
func NewActionsEnvironmentSecret(ctx *pulumi.Context,
	name string, args *ActionsEnvironmentSecretArgs, opts ...pulumi.ResourceOption) (*ActionsEnvironmentSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.SecretName == nil {
		return nil, errors.New("invalid value for required argument 'SecretName'")
	}
	var resource ActionsEnvironmentSecret
	err := ctx.RegisterResource("github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionsEnvironmentSecret gets an existing ActionsEnvironmentSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionsEnvironmentSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionsEnvironmentSecretState, opts ...pulumi.ResourceOption) (*ActionsEnvironmentSecret, error) {
	var resource ActionsEnvironmentSecret
	err := ctx.ReadResource("github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionsEnvironmentSecret resources.
type actionsEnvironmentSecretState struct {
	// Date of actionsEnvironmentSecret creation.
	CreatedAt *string `pulumi:"createdAt"`
	// Encrypted value of the secret using the Github public key in Base64 format.
	EncryptedValue *string `pulumi:"encryptedValue"`
	// Name of the environment.
	Environment *string `pulumi:"environment"`
	// Plaintext value of the secret to be encrypted.
	PlaintextValue *string `pulumi:"plaintextValue"`
	// Name of the repository.
	Repository *string `pulumi:"repository"`
	// Name of the secret.
	SecretName *string `pulumi:"secretName"`
	// Date of actionsEnvironmentSecret update.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ActionsEnvironmentSecretState struct {
	// Date of actionsEnvironmentSecret creation.
	CreatedAt pulumi.StringPtrInput
	// Encrypted value of the secret using the Github public key in Base64 format.
	EncryptedValue pulumi.StringPtrInput
	// Name of the environment.
	Environment pulumi.StringPtrInput
	// Plaintext value of the secret to be encrypted.
	PlaintextValue pulumi.StringPtrInput
	// Name of the repository.
	Repository pulumi.StringPtrInput
	// Name of the secret.
	SecretName pulumi.StringPtrInput
	// Date of actionsEnvironmentSecret update.
	UpdatedAt pulumi.StringPtrInput
}

func (ActionsEnvironmentSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsEnvironmentSecretState)(nil)).Elem()
}

type actionsEnvironmentSecretArgs struct {
	// Encrypted value of the secret using the Github public key in Base64 format.
	EncryptedValue *string `pulumi:"encryptedValue"`
	// Name of the environment.
	Environment string `pulumi:"environment"`
	// Plaintext value of the secret to be encrypted.
	PlaintextValue *string `pulumi:"plaintextValue"`
	// Name of the repository.
	Repository string `pulumi:"repository"`
	// Name of the secret.
	SecretName string `pulumi:"secretName"`
}

// The set of arguments for constructing a ActionsEnvironmentSecret resource.
type ActionsEnvironmentSecretArgs struct {
	// Encrypted value of the secret using the Github public key in Base64 format.
	EncryptedValue pulumi.StringPtrInput
	// Name of the environment.
	Environment pulumi.StringInput
	// Plaintext value of the secret to be encrypted.
	PlaintextValue pulumi.StringPtrInput
	// Name of the repository.
	Repository pulumi.StringInput
	// Name of the secret.
	SecretName pulumi.StringInput
}

func (ActionsEnvironmentSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsEnvironmentSecretArgs)(nil)).Elem()
}

type ActionsEnvironmentSecretInput interface {
	pulumi.Input

	ToActionsEnvironmentSecretOutput() ActionsEnvironmentSecretOutput
	ToActionsEnvironmentSecretOutputWithContext(ctx context.Context) ActionsEnvironmentSecretOutput
}

func (*ActionsEnvironmentSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsEnvironmentSecret)(nil)).Elem()
}

func (i *ActionsEnvironmentSecret) ToActionsEnvironmentSecretOutput() ActionsEnvironmentSecretOutput {
	return i.ToActionsEnvironmentSecretOutputWithContext(context.Background())
}

func (i *ActionsEnvironmentSecret) ToActionsEnvironmentSecretOutputWithContext(ctx context.Context) ActionsEnvironmentSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsEnvironmentSecretOutput)
}

// ActionsEnvironmentSecretArrayInput is an input type that accepts ActionsEnvironmentSecretArray and ActionsEnvironmentSecretArrayOutput values.
// You can construct a concrete instance of `ActionsEnvironmentSecretArrayInput` via:
//
//          ActionsEnvironmentSecretArray{ ActionsEnvironmentSecretArgs{...} }
type ActionsEnvironmentSecretArrayInput interface {
	pulumi.Input

	ToActionsEnvironmentSecretArrayOutput() ActionsEnvironmentSecretArrayOutput
	ToActionsEnvironmentSecretArrayOutputWithContext(context.Context) ActionsEnvironmentSecretArrayOutput
}

type ActionsEnvironmentSecretArray []ActionsEnvironmentSecretInput

func (ActionsEnvironmentSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsEnvironmentSecret)(nil)).Elem()
}

func (i ActionsEnvironmentSecretArray) ToActionsEnvironmentSecretArrayOutput() ActionsEnvironmentSecretArrayOutput {
	return i.ToActionsEnvironmentSecretArrayOutputWithContext(context.Background())
}

func (i ActionsEnvironmentSecretArray) ToActionsEnvironmentSecretArrayOutputWithContext(ctx context.Context) ActionsEnvironmentSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsEnvironmentSecretArrayOutput)
}

// ActionsEnvironmentSecretMapInput is an input type that accepts ActionsEnvironmentSecretMap and ActionsEnvironmentSecretMapOutput values.
// You can construct a concrete instance of `ActionsEnvironmentSecretMapInput` via:
//
//          ActionsEnvironmentSecretMap{ "key": ActionsEnvironmentSecretArgs{...} }
type ActionsEnvironmentSecretMapInput interface {
	pulumi.Input

	ToActionsEnvironmentSecretMapOutput() ActionsEnvironmentSecretMapOutput
	ToActionsEnvironmentSecretMapOutputWithContext(context.Context) ActionsEnvironmentSecretMapOutput
}

type ActionsEnvironmentSecretMap map[string]ActionsEnvironmentSecretInput

func (ActionsEnvironmentSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsEnvironmentSecret)(nil)).Elem()
}

func (i ActionsEnvironmentSecretMap) ToActionsEnvironmentSecretMapOutput() ActionsEnvironmentSecretMapOutput {
	return i.ToActionsEnvironmentSecretMapOutputWithContext(context.Background())
}

func (i ActionsEnvironmentSecretMap) ToActionsEnvironmentSecretMapOutputWithContext(ctx context.Context) ActionsEnvironmentSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsEnvironmentSecretMapOutput)
}

type ActionsEnvironmentSecretOutput struct{ *pulumi.OutputState }

func (ActionsEnvironmentSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsEnvironmentSecret)(nil)).Elem()
}

func (o ActionsEnvironmentSecretOutput) ToActionsEnvironmentSecretOutput() ActionsEnvironmentSecretOutput {
	return o
}

func (o ActionsEnvironmentSecretOutput) ToActionsEnvironmentSecretOutputWithContext(ctx context.Context) ActionsEnvironmentSecretOutput {
	return o
}

type ActionsEnvironmentSecretArrayOutput struct{ *pulumi.OutputState }

func (ActionsEnvironmentSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsEnvironmentSecret)(nil)).Elem()
}

func (o ActionsEnvironmentSecretArrayOutput) ToActionsEnvironmentSecretArrayOutput() ActionsEnvironmentSecretArrayOutput {
	return o
}

func (o ActionsEnvironmentSecretArrayOutput) ToActionsEnvironmentSecretArrayOutputWithContext(ctx context.Context) ActionsEnvironmentSecretArrayOutput {
	return o
}

func (o ActionsEnvironmentSecretArrayOutput) Index(i pulumi.IntInput) ActionsEnvironmentSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionsEnvironmentSecret {
		return vs[0].([]*ActionsEnvironmentSecret)[vs[1].(int)]
	}).(ActionsEnvironmentSecretOutput)
}

type ActionsEnvironmentSecretMapOutput struct{ *pulumi.OutputState }

func (ActionsEnvironmentSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsEnvironmentSecret)(nil)).Elem()
}

func (o ActionsEnvironmentSecretMapOutput) ToActionsEnvironmentSecretMapOutput() ActionsEnvironmentSecretMapOutput {
	return o
}

func (o ActionsEnvironmentSecretMapOutput) ToActionsEnvironmentSecretMapOutputWithContext(ctx context.Context) ActionsEnvironmentSecretMapOutput {
	return o
}

func (o ActionsEnvironmentSecretMapOutput) MapIndex(k pulumi.StringInput) ActionsEnvironmentSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionsEnvironmentSecret {
		return vs[0].(map[string]*ActionsEnvironmentSecret)[vs[1].(string)]
	}).(ActionsEnvironmentSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsEnvironmentSecretInput)(nil)).Elem(), &ActionsEnvironmentSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsEnvironmentSecretArrayInput)(nil)).Elem(), ActionsEnvironmentSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsEnvironmentSecretMapInput)(nil)).Elem(), ActionsEnvironmentSecretMap{})
	pulumi.RegisterOutputType(ActionsEnvironmentSecretOutput{})
	pulumi.RegisterOutputType(ActionsEnvironmentSecretArrayOutput{})
	pulumi.RegisterOutputType(ActionsEnvironmentSecretMapOutput{})
}
