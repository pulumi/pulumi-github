// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage an association between an organization role and a team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewOrganizationRoleTeam(ctx, "example", &github.OrganizationRoleTeamArgs{
//				RoleId:   pulumi.Int(1234),
//				TeamSlug: pulumi.String("example-team"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An organization role team association can be imported using the role ID and the team slug separated by a `:`.
//
// ```sh
// $ pulumi import github:index/organizationRoleTeam:OrganizationRoleTeam example "1234:example-team"
// ```
type OrganizationRoleTeam struct {
	pulumi.CustomResourceState

	// The ID of the organization role.
	RoleId pulumi.IntOutput `pulumi:"roleId"`
	// The slug of the team name.
	TeamSlug pulumi.StringOutput `pulumi:"teamSlug"`
}

// NewOrganizationRoleTeam registers a new resource with the given unique name, arguments, and options.
func NewOrganizationRoleTeam(ctx *pulumi.Context,
	name string, args *OrganizationRoleTeamArgs, opts ...pulumi.ResourceOption) (*OrganizationRoleTeam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.TeamSlug == nil {
		return nil, errors.New("invalid value for required argument 'TeamSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationRoleTeam
	err := ctx.RegisterResource("github:index/organizationRoleTeam:OrganizationRoleTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationRoleTeam gets an existing OrganizationRoleTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationRoleTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationRoleTeamState, opts ...pulumi.ResourceOption) (*OrganizationRoleTeam, error) {
	var resource OrganizationRoleTeam
	err := ctx.ReadResource("github:index/organizationRoleTeam:OrganizationRoleTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationRoleTeam resources.
type organizationRoleTeamState struct {
	// The ID of the organization role.
	RoleId *int `pulumi:"roleId"`
	// The slug of the team name.
	TeamSlug *string `pulumi:"teamSlug"`
}

type OrganizationRoleTeamState struct {
	// The ID of the organization role.
	RoleId pulumi.IntPtrInput
	// The slug of the team name.
	TeamSlug pulumi.StringPtrInput
}

func (OrganizationRoleTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleTeamState)(nil)).Elem()
}

type organizationRoleTeamArgs struct {
	// The ID of the organization role.
	RoleId int `pulumi:"roleId"`
	// The slug of the team name.
	TeamSlug string `pulumi:"teamSlug"`
}

// The set of arguments for constructing a OrganizationRoleTeam resource.
type OrganizationRoleTeamArgs struct {
	// The ID of the organization role.
	RoleId pulumi.IntInput
	// The slug of the team name.
	TeamSlug pulumi.StringInput
}

func (OrganizationRoleTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleTeamArgs)(nil)).Elem()
}

type OrganizationRoleTeamInput interface {
	pulumi.Input

	ToOrganizationRoleTeamOutput() OrganizationRoleTeamOutput
	ToOrganizationRoleTeamOutputWithContext(ctx context.Context) OrganizationRoleTeamOutput
}

func (*OrganizationRoleTeam) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleTeam)(nil)).Elem()
}

func (i *OrganizationRoleTeam) ToOrganizationRoleTeamOutput() OrganizationRoleTeamOutput {
	return i.ToOrganizationRoleTeamOutputWithContext(context.Background())
}

func (i *OrganizationRoleTeam) ToOrganizationRoleTeamOutputWithContext(ctx context.Context) OrganizationRoleTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamOutput)
}

// OrganizationRoleTeamArrayInput is an input type that accepts OrganizationRoleTeamArray and OrganizationRoleTeamArrayOutput values.
// You can construct a concrete instance of `OrganizationRoleTeamArrayInput` via:
//
//	OrganizationRoleTeamArray{ OrganizationRoleTeamArgs{...} }
type OrganizationRoleTeamArrayInput interface {
	pulumi.Input

	ToOrganizationRoleTeamArrayOutput() OrganizationRoleTeamArrayOutput
	ToOrganizationRoleTeamArrayOutputWithContext(context.Context) OrganizationRoleTeamArrayOutput
}

type OrganizationRoleTeamArray []OrganizationRoleTeamInput

func (OrganizationRoleTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleTeam)(nil)).Elem()
}

func (i OrganizationRoleTeamArray) ToOrganizationRoleTeamArrayOutput() OrganizationRoleTeamArrayOutput {
	return i.ToOrganizationRoleTeamArrayOutputWithContext(context.Background())
}

func (i OrganizationRoleTeamArray) ToOrganizationRoleTeamArrayOutputWithContext(ctx context.Context) OrganizationRoleTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamArrayOutput)
}

// OrganizationRoleTeamMapInput is an input type that accepts OrganizationRoleTeamMap and OrganizationRoleTeamMapOutput values.
// You can construct a concrete instance of `OrganizationRoleTeamMapInput` via:
//
//	OrganizationRoleTeamMap{ "key": OrganizationRoleTeamArgs{...} }
type OrganizationRoleTeamMapInput interface {
	pulumi.Input

	ToOrganizationRoleTeamMapOutput() OrganizationRoleTeamMapOutput
	ToOrganizationRoleTeamMapOutputWithContext(context.Context) OrganizationRoleTeamMapOutput
}

type OrganizationRoleTeamMap map[string]OrganizationRoleTeamInput

func (OrganizationRoleTeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleTeam)(nil)).Elem()
}

func (i OrganizationRoleTeamMap) ToOrganizationRoleTeamMapOutput() OrganizationRoleTeamMapOutput {
	return i.ToOrganizationRoleTeamMapOutputWithContext(context.Background())
}

func (i OrganizationRoleTeamMap) ToOrganizationRoleTeamMapOutputWithContext(ctx context.Context) OrganizationRoleTeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamMapOutput)
}

type OrganizationRoleTeamOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleTeam)(nil)).Elem()
}

func (o OrganizationRoleTeamOutput) ToOrganizationRoleTeamOutput() OrganizationRoleTeamOutput {
	return o
}

func (o OrganizationRoleTeamOutput) ToOrganizationRoleTeamOutputWithContext(ctx context.Context) OrganizationRoleTeamOutput {
	return o
}

// The ID of the organization role.
func (o OrganizationRoleTeamOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationRoleTeam) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

// The slug of the team name.
func (o OrganizationRoleTeamOutput) TeamSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRoleTeam) pulumi.StringOutput { return v.TeamSlug }).(pulumi.StringOutput)
}

type OrganizationRoleTeamArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleTeam)(nil)).Elem()
}

func (o OrganizationRoleTeamArrayOutput) ToOrganizationRoleTeamArrayOutput() OrganizationRoleTeamArrayOutput {
	return o
}

func (o OrganizationRoleTeamArrayOutput) ToOrganizationRoleTeamArrayOutputWithContext(ctx context.Context) OrganizationRoleTeamArrayOutput {
	return o
}

func (o OrganizationRoleTeamArrayOutput) Index(i pulumi.IntInput) OrganizationRoleTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationRoleTeam {
		return vs[0].([]*OrganizationRoleTeam)[vs[1].(int)]
	}).(OrganizationRoleTeamOutput)
}

type OrganizationRoleTeamMapOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleTeam)(nil)).Elem()
}

func (o OrganizationRoleTeamMapOutput) ToOrganizationRoleTeamMapOutput() OrganizationRoleTeamMapOutput {
	return o
}

func (o OrganizationRoleTeamMapOutput) ToOrganizationRoleTeamMapOutputWithContext(ctx context.Context) OrganizationRoleTeamMapOutput {
	return o
}

func (o OrganizationRoleTeamMapOutput) MapIndex(k pulumi.StringInput) OrganizationRoleTeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationRoleTeam {
		return vs[0].(map[string]*OrganizationRoleTeam)[vs[1].(string)]
	}).(OrganizationRoleTeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamInput)(nil)).Elem(), &OrganizationRoleTeam{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamArrayInput)(nil)).Elem(), OrganizationRoleTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamMapInput)(nil)).Elem(), OrganizationRoleTeamMap{})
	pulumi.RegisterOutputType(OrganizationRoleTeamOutput{})
	pulumi.RegisterOutputType(OrganizationRoleTeamArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRoleTeamMapOutput{})
}
