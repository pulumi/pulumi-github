// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a custom organization role.
//
// > **Note**: Custom organization roles are currently only available in GitHub Enterprise Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewOrganizationRole(ctx, "example", &github.OrganizationRoleArgs{
//				Name:     pulumi.String("example"),
//				BaseRole: pulumi.String("read"),
//				Permissions: pulumi.StringArray{
//					pulumi.String("read_organization_custom_org_role"),
//					pulumi.String("read_organization_custom_repo_role"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A custom organization role can be imported using its ID.
//
// ```sh
// $ pulumi import github:index/organizationRole:OrganizationRole example 1234
// ```
type OrganizationRole struct {
	pulumi.CustomResourceState

	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringOutput `pulumi:"baseRole"`
	// The description of the organization role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the organization role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The permissions included in this role.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// The ID of the organization role.
	RoleId pulumi.IntOutput `pulumi:"roleId"`
}

// NewOrganizationRole registers a new resource with the given unique name, arguments, and options.
func NewOrganizationRole(ctx *pulumi.Context,
	name string, args *OrganizationRoleArgs, opts ...pulumi.ResourceOption) (*OrganizationRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationRole
	err := ctx.RegisterResource("github:index/organizationRole:OrganizationRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationRole gets an existing OrganizationRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationRoleState, opts ...pulumi.ResourceOption) (*OrganizationRole, error) {
	var resource OrganizationRole
	err := ctx.ReadResource("github:index/organizationRole:OrganizationRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationRole resources.
type organizationRoleState struct {
	// The system role from which this role inherits permissions.
	BaseRole *string `pulumi:"baseRole"`
	// The description of the organization role.
	Description *string `pulumi:"description"`
	// The name of the organization role.
	Name *string `pulumi:"name"`
	// The permissions included in this role.
	Permissions []string `pulumi:"permissions"`
	// The ID of the organization role.
	RoleId *int `pulumi:"roleId"`
}

type OrganizationRoleState struct {
	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringPtrInput
	// The description of the organization role.
	Description pulumi.StringPtrInput
	// The name of the organization role.
	Name pulumi.StringPtrInput
	// The permissions included in this role.
	Permissions pulumi.StringArrayInput
	// The ID of the organization role.
	RoleId pulumi.IntPtrInput
}

func (OrganizationRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleState)(nil)).Elem()
}

type organizationRoleArgs struct {
	// The system role from which this role inherits permissions.
	BaseRole *string `pulumi:"baseRole"`
	// The description of the organization role.
	Description *string `pulumi:"description"`
	// The name of the organization role.
	Name *string `pulumi:"name"`
	// The permissions included in this role.
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a OrganizationRole resource.
type OrganizationRoleArgs struct {
	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringPtrInput
	// The description of the organization role.
	Description pulumi.StringPtrInput
	// The name of the organization role.
	Name pulumi.StringPtrInput
	// The permissions included in this role.
	Permissions pulumi.StringArrayInput
}

func (OrganizationRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleArgs)(nil)).Elem()
}

type OrganizationRoleInput interface {
	pulumi.Input

	ToOrganizationRoleOutput() OrganizationRoleOutput
	ToOrganizationRoleOutputWithContext(ctx context.Context) OrganizationRoleOutput
}

func (*OrganizationRole) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRole)(nil)).Elem()
}

func (i *OrganizationRole) ToOrganizationRoleOutput() OrganizationRoleOutput {
	return i.ToOrganizationRoleOutputWithContext(context.Background())
}

func (i *OrganizationRole) ToOrganizationRoleOutputWithContext(ctx context.Context) OrganizationRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleOutput)
}

// OrganizationRoleArrayInput is an input type that accepts OrganizationRoleArray and OrganizationRoleArrayOutput values.
// You can construct a concrete instance of `OrganizationRoleArrayInput` via:
//
//	OrganizationRoleArray{ OrganizationRoleArgs{...} }
type OrganizationRoleArrayInput interface {
	pulumi.Input

	ToOrganizationRoleArrayOutput() OrganizationRoleArrayOutput
	ToOrganizationRoleArrayOutputWithContext(context.Context) OrganizationRoleArrayOutput
}

type OrganizationRoleArray []OrganizationRoleInput

func (OrganizationRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRole)(nil)).Elem()
}

func (i OrganizationRoleArray) ToOrganizationRoleArrayOutput() OrganizationRoleArrayOutput {
	return i.ToOrganizationRoleArrayOutputWithContext(context.Background())
}

func (i OrganizationRoleArray) ToOrganizationRoleArrayOutputWithContext(ctx context.Context) OrganizationRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleArrayOutput)
}

// OrganizationRoleMapInput is an input type that accepts OrganizationRoleMap and OrganizationRoleMapOutput values.
// You can construct a concrete instance of `OrganizationRoleMapInput` via:
//
//	OrganizationRoleMap{ "key": OrganizationRoleArgs{...} }
type OrganizationRoleMapInput interface {
	pulumi.Input

	ToOrganizationRoleMapOutput() OrganizationRoleMapOutput
	ToOrganizationRoleMapOutputWithContext(context.Context) OrganizationRoleMapOutput
}

type OrganizationRoleMap map[string]OrganizationRoleInput

func (OrganizationRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRole)(nil)).Elem()
}

func (i OrganizationRoleMap) ToOrganizationRoleMapOutput() OrganizationRoleMapOutput {
	return i.ToOrganizationRoleMapOutputWithContext(context.Background())
}

func (i OrganizationRoleMap) ToOrganizationRoleMapOutputWithContext(ctx context.Context) OrganizationRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleMapOutput)
}

type OrganizationRoleOutput struct{ *pulumi.OutputState }

func (OrganizationRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRole)(nil)).Elem()
}

func (o OrganizationRoleOutput) ToOrganizationRoleOutput() OrganizationRoleOutput {
	return o
}

func (o OrganizationRoleOutput) ToOrganizationRoleOutputWithContext(ctx context.Context) OrganizationRoleOutput {
	return o
}

// The system role from which this role inherits permissions.
func (o OrganizationRoleOutput) BaseRole() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRole) pulumi.StringOutput { return v.BaseRole }).(pulumi.StringOutput)
}

// The description of the organization role.
func (o OrganizationRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the organization role.
func (o OrganizationRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The permissions included in this role.
func (o OrganizationRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The ID of the organization role.
func (o OrganizationRoleOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationRole) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

type OrganizationRoleArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRole)(nil)).Elem()
}

func (o OrganizationRoleArrayOutput) ToOrganizationRoleArrayOutput() OrganizationRoleArrayOutput {
	return o
}

func (o OrganizationRoleArrayOutput) ToOrganizationRoleArrayOutputWithContext(ctx context.Context) OrganizationRoleArrayOutput {
	return o
}

func (o OrganizationRoleArrayOutput) Index(i pulumi.IntInput) OrganizationRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationRole {
		return vs[0].([]*OrganizationRole)[vs[1].(int)]
	}).(OrganizationRoleOutput)
}

type OrganizationRoleMapOutput struct{ *pulumi.OutputState }

func (OrganizationRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRole)(nil)).Elem()
}

func (o OrganizationRoleMapOutput) ToOrganizationRoleMapOutput() OrganizationRoleMapOutput {
	return o
}

func (o OrganizationRoleMapOutput) ToOrganizationRoleMapOutputWithContext(ctx context.Context) OrganizationRoleMapOutput {
	return o
}

func (o OrganizationRoleMapOutput) MapIndex(k pulumi.StringInput) OrganizationRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationRole {
		return vs[0].(map[string]*OrganizationRole)[vs[1].(string)]
	}).(OrganizationRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleInput)(nil)).Elem(), &OrganizationRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleArrayInput)(nil)).Elem(), OrganizationRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleMapInput)(nil)).Elem(), OrganizationRoleMap{})
	pulumi.RegisterOutputType(OrganizationRoleOutput{})
	pulumi.RegisterOutputType(OrganizationRoleArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRoleMapOutput{})
}
