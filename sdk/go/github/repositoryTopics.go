// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v5/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v5/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.LookupRepository(ctx, &github.LookupRepositoryArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = github.NewRepositoryTopics(ctx, "testRepositoryTopics", &github.RepositoryTopicsArgs{
//				Repository: pulumi.Any(github_repository.Test.Name),
//				Topics: pulumi.StringArray{
//					pulumi.String("topic-1"),
//					pulumi.String("topic-2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository topics can be imported using the `name` of the repository.
//
// ```sh
//
//	$ pulumi import github:index/repositoryTopics:RepositoryTopics terraform terraform
//
// ```
type RepositoryTopics struct {
	pulumi.CustomResourceState

	// The repository name.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// A list of topics to add to the repository.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
}

// NewRepositoryTopics registers a new resource with the given unique name, arguments, and options.
func NewRepositoryTopics(ctx *pulumi.Context,
	name string, args *RepositoryTopicsArgs, opts ...pulumi.ResourceOption) (*RepositoryTopics, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Topics == nil {
		return nil, errors.New("invalid value for required argument 'Topics'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryTopics
	err := ctx.RegisterResource("github:index/repositoryTopics:RepositoryTopics", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryTopics gets an existing RepositoryTopics resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryTopics(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryTopicsState, opts ...pulumi.ResourceOption) (*RepositoryTopics, error) {
	var resource RepositoryTopics
	err := ctx.ReadResource("github:index/repositoryTopics:RepositoryTopics", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryTopics resources.
type repositoryTopicsState struct {
	// The repository name.
	Repository *string `pulumi:"repository"`
	// A list of topics to add to the repository.
	Topics []string `pulumi:"topics"`
}

type RepositoryTopicsState struct {
	// The repository name.
	Repository pulumi.StringPtrInput
	// A list of topics to add to the repository.
	Topics pulumi.StringArrayInput
}

func (RepositoryTopicsState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryTopicsState)(nil)).Elem()
}

type repositoryTopicsArgs struct {
	// The repository name.
	Repository string `pulumi:"repository"`
	// A list of topics to add to the repository.
	Topics []string `pulumi:"topics"`
}

// The set of arguments for constructing a RepositoryTopics resource.
type RepositoryTopicsArgs struct {
	// The repository name.
	Repository pulumi.StringInput
	// A list of topics to add to the repository.
	Topics pulumi.StringArrayInput
}

func (RepositoryTopicsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryTopicsArgs)(nil)).Elem()
}

type RepositoryTopicsInput interface {
	pulumi.Input

	ToRepositoryTopicsOutput() RepositoryTopicsOutput
	ToRepositoryTopicsOutputWithContext(ctx context.Context) RepositoryTopicsOutput
}

func (*RepositoryTopics) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryTopics)(nil)).Elem()
}

func (i *RepositoryTopics) ToRepositoryTopicsOutput() RepositoryTopicsOutput {
	return i.ToRepositoryTopicsOutputWithContext(context.Background())
}

func (i *RepositoryTopics) ToRepositoryTopicsOutputWithContext(ctx context.Context) RepositoryTopicsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTopicsOutput)
}

func (i *RepositoryTopics) ToOutput(ctx context.Context) pulumix.Output[*RepositoryTopics] {
	return pulumix.Output[*RepositoryTopics]{
		OutputState: i.ToRepositoryTopicsOutputWithContext(ctx).OutputState,
	}
}

// RepositoryTopicsArrayInput is an input type that accepts RepositoryTopicsArray and RepositoryTopicsArrayOutput values.
// You can construct a concrete instance of `RepositoryTopicsArrayInput` via:
//
//	RepositoryTopicsArray{ RepositoryTopicsArgs{...} }
type RepositoryTopicsArrayInput interface {
	pulumi.Input

	ToRepositoryTopicsArrayOutput() RepositoryTopicsArrayOutput
	ToRepositoryTopicsArrayOutputWithContext(context.Context) RepositoryTopicsArrayOutput
}

type RepositoryTopicsArray []RepositoryTopicsInput

func (RepositoryTopicsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryTopics)(nil)).Elem()
}

func (i RepositoryTopicsArray) ToRepositoryTopicsArrayOutput() RepositoryTopicsArrayOutput {
	return i.ToRepositoryTopicsArrayOutputWithContext(context.Background())
}

func (i RepositoryTopicsArray) ToRepositoryTopicsArrayOutputWithContext(ctx context.Context) RepositoryTopicsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTopicsArrayOutput)
}

func (i RepositoryTopicsArray) ToOutput(ctx context.Context) pulumix.Output[[]*RepositoryTopics] {
	return pulumix.Output[[]*RepositoryTopics]{
		OutputState: i.ToRepositoryTopicsArrayOutputWithContext(ctx).OutputState,
	}
}

// RepositoryTopicsMapInput is an input type that accepts RepositoryTopicsMap and RepositoryTopicsMapOutput values.
// You can construct a concrete instance of `RepositoryTopicsMapInput` via:
//
//	RepositoryTopicsMap{ "key": RepositoryTopicsArgs{...} }
type RepositoryTopicsMapInput interface {
	pulumi.Input

	ToRepositoryTopicsMapOutput() RepositoryTopicsMapOutput
	ToRepositoryTopicsMapOutputWithContext(context.Context) RepositoryTopicsMapOutput
}

type RepositoryTopicsMap map[string]RepositoryTopicsInput

func (RepositoryTopicsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryTopics)(nil)).Elem()
}

func (i RepositoryTopicsMap) ToRepositoryTopicsMapOutput() RepositoryTopicsMapOutput {
	return i.ToRepositoryTopicsMapOutputWithContext(context.Background())
}

func (i RepositoryTopicsMap) ToRepositoryTopicsMapOutputWithContext(ctx context.Context) RepositoryTopicsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryTopicsMapOutput)
}

func (i RepositoryTopicsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RepositoryTopics] {
	return pulumix.Output[map[string]*RepositoryTopics]{
		OutputState: i.ToRepositoryTopicsMapOutputWithContext(ctx).OutputState,
	}
}

type RepositoryTopicsOutput struct{ *pulumi.OutputState }

func (RepositoryTopicsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryTopics)(nil)).Elem()
}

func (o RepositoryTopicsOutput) ToRepositoryTopicsOutput() RepositoryTopicsOutput {
	return o
}

func (o RepositoryTopicsOutput) ToRepositoryTopicsOutputWithContext(ctx context.Context) RepositoryTopicsOutput {
	return o
}

func (o RepositoryTopicsOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryTopics] {
	return pulumix.Output[*RepositoryTopics]{
		OutputState: o.OutputState,
	}
}

// The repository name.
func (o RepositoryTopicsOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryTopics) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// A list of topics to add to the repository.
func (o RepositoryTopicsOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryTopics) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

type RepositoryTopicsArrayOutput struct{ *pulumi.OutputState }

func (RepositoryTopicsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryTopics)(nil)).Elem()
}

func (o RepositoryTopicsArrayOutput) ToRepositoryTopicsArrayOutput() RepositoryTopicsArrayOutput {
	return o
}

func (o RepositoryTopicsArrayOutput) ToRepositoryTopicsArrayOutputWithContext(ctx context.Context) RepositoryTopicsArrayOutput {
	return o
}

func (o RepositoryTopicsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RepositoryTopics] {
	return pulumix.Output[[]*RepositoryTopics]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryTopicsArrayOutput) Index(i pulumi.IntInput) RepositoryTopicsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryTopics {
		return vs[0].([]*RepositoryTopics)[vs[1].(int)]
	}).(RepositoryTopicsOutput)
}

type RepositoryTopicsMapOutput struct{ *pulumi.OutputState }

func (RepositoryTopicsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryTopics)(nil)).Elem()
}

func (o RepositoryTopicsMapOutput) ToRepositoryTopicsMapOutput() RepositoryTopicsMapOutput {
	return o
}

func (o RepositoryTopicsMapOutput) ToRepositoryTopicsMapOutputWithContext(ctx context.Context) RepositoryTopicsMapOutput {
	return o
}

func (o RepositoryTopicsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RepositoryTopics] {
	return pulumix.Output[map[string]*RepositoryTopics]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryTopicsMapOutput) MapIndex(k pulumi.StringInput) RepositoryTopicsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryTopics {
		return vs[0].(map[string]*RepositoryTopics)[vs[1].(string)]
	}).(RepositoryTopicsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryTopicsInput)(nil)).Elem(), &RepositoryTopics{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryTopicsArrayInput)(nil)).Elem(), RepositoryTopicsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryTopicsMapInput)(nil)).Elem(), RepositoryTopicsMap{})
	pulumi.RegisterOutputType(RepositoryTopicsOutput{})
	pulumi.RegisterOutputType(RepositoryTopicsArrayOutput{})
	pulumi.RegisterOutputType(RepositoryTopicsMapOutput{})
}
