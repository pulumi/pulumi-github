// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package orgs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage columns for GitHub projects.
type ProjectColumn struct {
	s *pulumi.ResourceState
}

// NewProjectColumn registers a new resource with the given unique name, arguments, and options.
func NewProjectColumn(ctx *pulumi.Context,
	name string, args *ProjectColumnArgs, opts ...pulumi.ResourceOpt) (*ProjectColumn, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("github:orgs/projectColumn:ProjectColumn", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectColumn{s: s}, nil
}

// GetProjectColumn gets an existing ProjectColumn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectColumn(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectColumnState, opts ...pulumi.ResourceOpt) (*ProjectColumn, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["etag"] = state.Etag
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
	}
	s, err := ctx.ReadResource("github:orgs/projectColumn:ProjectColumn", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProjectColumn{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProjectColumn) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProjectColumn) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *ProjectColumn) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The name of the column.
func (r *ProjectColumn) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The id of an existing project that the column will be created in.
func (r *ProjectColumn) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// Input properties used for looking up and filtering ProjectColumn resources.
type ProjectColumnState struct {
	Etag interface{}
	// The name of the column.
	Name interface{}
	// The id of an existing project that the column will be created in.
	ProjectId interface{}
}

// The set of arguments for constructing a ProjectColumn resource.
type ProjectColumnArgs struct {
	// The name of the column.
	Name interface{}
	// The id of an existing project that the column will be created in.
	ProjectId interface{}
}
