// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note**: This resource is not compatible with the GitHub App Installation authentication method.
//
// This resource manages relationships between app installations and repositories
// in your GitHub organization.
//
// Creating this resource installs a particular app on multiple repositories.
//
// The app installation and the repositories must all belong to the same
// organization on GitHub. Note: you can review your organization's installations
// by the following the instructions at this
// [link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).
//
// ## Import
//
// GitHub App Installation Repositories can be imported using an ID made up of `installation_id`, e.g.
//
// ```sh
//
//	$ pulumi import github:index/appInstallationRepositories:AppInstallationRepositories some_app_repos 1234567
//
// ```
type AppInstallationRepositories struct {
	pulumi.CustomResourceState

	// The GitHub app installation id.
	InstallationId pulumi.StringOutput `pulumi:"installationId"`
	// A list of repository names to install the app on.
	SelectedRepositories pulumi.StringArrayOutput `pulumi:"selectedRepositories"`
}

// NewAppInstallationRepositories registers a new resource with the given unique name, arguments, and options.
func NewAppInstallationRepositories(ctx *pulumi.Context,
	name string, args *AppInstallationRepositoriesArgs, opts ...pulumi.ResourceOption) (*AppInstallationRepositories, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstallationId == nil {
		return nil, errors.New("invalid value for required argument 'InstallationId'")
	}
	if args.SelectedRepositories == nil {
		return nil, errors.New("invalid value for required argument 'SelectedRepositories'")
	}
	var resource AppInstallationRepositories
	err := ctx.RegisterResource("github:index/appInstallationRepositories:AppInstallationRepositories", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppInstallationRepositories gets an existing AppInstallationRepositories resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppInstallationRepositories(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppInstallationRepositoriesState, opts ...pulumi.ResourceOption) (*AppInstallationRepositories, error) {
	var resource AppInstallationRepositories
	err := ctx.ReadResource("github:index/appInstallationRepositories:AppInstallationRepositories", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppInstallationRepositories resources.
type appInstallationRepositoriesState struct {
	// The GitHub app installation id.
	InstallationId *string `pulumi:"installationId"`
	// A list of repository names to install the app on.
	SelectedRepositories []string `pulumi:"selectedRepositories"`
}

type AppInstallationRepositoriesState struct {
	// The GitHub app installation id.
	InstallationId pulumi.StringPtrInput
	// A list of repository names to install the app on.
	SelectedRepositories pulumi.StringArrayInput
}

func (AppInstallationRepositoriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*appInstallationRepositoriesState)(nil)).Elem()
}

type appInstallationRepositoriesArgs struct {
	// The GitHub app installation id.
	InstallationId string `pulumi:"installationId"`
	// A list of repository names to install the app on.
	SelectedRepositories []string `pulumi:"selectedRepositories"`
}

// The set of arguments for constructing a AppInstallationRepositories resource.
type AppInstallationRepositoriesArgs struct {
	// The GitHub app installation id.
	InstallationId pulumi.StringInput
	// A list of repository names to install the app on.
	SelectedRepositories pulumi.StringArrayInput
}

func (AppInstallationRepositoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appInstallationRepositoriesArgs)(nil)).Elem()
}

type AppInstallationRepositoriesInput interface {
	pulumi.Input

	ToAppInstallationRepositoriesOutput() AppInstallationRepositoriesOutput
	ToAppInstallationRepositoriesOutputWithContext(ctx context.Context) AppInstallationRepositoriesOutput
}

func (*AppInstallationRepositories) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInstallationRepositories)(nil)).Elem()
}

func (i *AppInstallationRepositories) ToAppInstallationRepositoriesOutput() AppInstallationRepositoriesOutput {
	return i.ToAppInstallationRepositoriesOutputWithContext(context.Background())
}

func (i *AppInstallationRepositories) ToAppInstallationRepositoriesOutputWithContext(ctx context.Context) AppInstallationRepositoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInstallationRepositoriesOutput)
}

// AppInstallationRepositoriesArrayInput is an input type that accepts AppInstallationRepositoriesArray and AppInstallationRepositoriesArrayOutput values.
// You can construct a concrete instance of `AppInstallationRepositoriesArrayInput` via:
//
//	AppInstallationRepositoriesArray{ AppInstallationRepositoriesArgs{...} }
type AppInstallationRepositoriesArrayInput interface {
	pulumi.Input

	ToAppInstallationRepositoriesArrayOutput() AppInstallationRepositoriesArrayOutput
	ToAppInstallationRepositoriesArrayOutputWithContext(context.Context) AppInstallationRepositoriesArrayOutput
}

type AppInstallationRepositoriesArray []AppInstallationRepositoriesInput

func (AppInstallationRepositoriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppInstallationRepositories)(nil)).Elem()
}

func (i AppInstallationRepositoriesArray) ToAppInstallationRepositoriesArrayOutput() AppInstallationRepositoriesArrayOutput {
	return i.ToAppInstallationRepositoriesArrayOutputWithContext(context.Background())
}

func (i AppInstallationRepositoriesArray) ToAppInstallationRepositoriesArrayOutputWithContext(ctx context.Context) AppInstallationRepositoriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInstallationRepositoriesArrayOutput)
}

// AppInstallationRepositoriesMapInput is an input type that accepts AppInstallationRepositoriesMap and AppInstallationRepositoriesMapOutput values.
// You can construct a concrete instance of `AppInstallationRepositoriesMapInput` via:
//
//	AppInstallationRepositoriesMap{ "key": AppInstallationRepositoriesArgs{...} }
type AppInstallationRepositoriesMapInput interface {
	pulumi.Input

	ToAppInstallationRepositoriesMapOutput() AppInstallationRepositoriesMapOutput
	ToAppInstallationRepositoriesMapOutputWithContext(context.Context) AppInstallationRepositoriesMapOutput
}

type AppInstallationRepositoriesMap map[string]AppInstallationRepositoriesInput

func (AppInstallationRepositoriesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppInstallationRepositories)(nil)).Elem()
}

func (i AppInstallationRepositoriesMap) ToAppInstallationRepositoriesMapOutput() AppInstallationRepositoriesMapOutput {
	return i.ToAppInstallationRepositoriesMapOutputWithContext(context.Background())
}

func (i AppInstallationRepositoriesMap) ToAppInstallationRepositoriesMapOutputWithContext(ctx context.Context) AppInstallationRepositoriesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppInstallationRepositoriesMapOutput)
}

type AppInstallationRepositoriesOutput struct{ *pulumi.OutputState }

func (AppInstallationRepositoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppInstallationRepositories)(nil)).Elem()
}

func (o AppInstallationRepositoriesOutput) ToAppInstallationRepositoriesOutput() AppInstallationRepositoriesOutput {
	return o
}

func (o AppInstallationRepositoriesOutput) ToAppInstallationRepositoriesOutputWithContext(ctx context.Context) AppInstallationRepositoriesOutput {
	return o
}

// The GitHub app installation id.
func (o AppInstallationRepositoriesOutput) InstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppInstallationRepositories) pulumi.StringOutput { return v.InstallationId }).(pulumi.StringOutput)
}

// A list of repository names to install the app on.
func (o AppInstallationRepositoriesOutput) SelectedRepositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppInstallationRepositories) pulumi.StringArrayOutput { return v.SelectedRepositories }).(pulumi.StringArrayOutput)
}

type AppInstallationRepositoriesArrayOutput struct{ *pulumi.OutputState }

func (AppInstallationRepositoriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppInstallationRepositories)(nil)).Elem()
}

func (o AppInstallationRepositoriesArrayOutput) ToAppInstallationRepositoriesArrayOutput() AppInstallationRepositoriesArrayOutput {
	return o
}

func (o AppInstallationRepositoriesArrayOutput) ToAppInstallationRepositoriesArrayOutputWithContext(ctx context.Context) AppInstallationRepositoriesArrayOutput {
	return o
}

func (o AppInstallationRepositoriesArrayOutput) Index(i pulumi.IntInput) AppInstallationRepositoriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppInstallationRepositories {
		return vs[0].([]*AppInstallationRepositories)[vs[1].(int)]
	}).(AppInstallationRepositoriesOutput)
}

type AppInstallationRepositoriesMapOutput struct{ *pulumi.OutputState }

func (AppInstallationRepositoriesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppInstallationRepositories)(nil)).Elem()
}

func (o AppInstallationRepositoriesMapOutput) ToAppInstallationRepositoriesMapOutput() AppInstallationRepositoriesMapOutput {
	return o
}

func (o AppInstallationRepositoriesMapOutput) ToAppInstallationRepositoriesMapOutputWithContext(ctx context.Context) AppInstallationRepositoriesMapOutput {
	return o
}

func (o AppInstallationRepositoriesMapOutput) MapIndex(k pulumi.StringInput) AppInstallationRepositoriesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppInstallationRepositories {
		return vs[0].(map[string]*AppInstallationRepositories)[vs[1].(string)]
	}).(AppInstallationRepositoriesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInstallationRepositoriesInput)(nil)).Elem(), &AppInstallationRepositories{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppInstallationRepositoriesArrayInput)(nil)).Elem(), AppInstallationRepositoriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppInstallationRepositoriesMapInput)(nil)).Elem(), AppInstallationRepositoriesMap{})
	pulumi.RegisterOutputType(AppInstallationRepositoriesOutput{})
	pulumi.RegisterOutputType(AppInstallationRepositoriesArrayOutput{})
	pulumi.RegisterOutputType(AppInstallationRepositoriesMapOutput{})
}
