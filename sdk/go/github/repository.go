// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Repository struct {
	pulumi.CustomResourceState

	AllowAutoMerge   pulumi.BoolPtrOutput `pulumi:"allowAutoMerge"`
	AllowMergeCommit pulumi.BoolPtrOutput `pulumi:"allowMergeCommit"`
	AllowRebaseMerge pulumi.BoolPtrOutput `pulumi:"allowRebaseMerge"`
	AllowSquashMerge pulumi.BoolPtrOutput `pulumi:"allowSquashMerge"`
	ArchiveOnDestroy pulumi.BoolPtrOutput `pulumi:"archiveOnDestroy"`
	Archived         pulumi.BoolPtrOutput `pulumi:"archived"`
	AutoInit         pulumi.BoolPtrOutput `pulumi:"autoInit"`
	// Can only be set after initial repository creation, and only if the target branch exists
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch                       pulumi.StringOutput      `pulumi:"defaultBranch"`
	DeleteBranchOnMerge                 pulumi.BoolPtrOutput     `pulumi:"deleteBranchOnMerge"`
	Description                         pulumi.StringPtrOutput   `pulumi:"description"`
	Etag                                pulumi.StringOutput      `pulumi:"etag"`
	FullName                            pulumi.StringOutput      `pulumi:"fullName"`
	GitCloneUrl                         pulumi.StringOutput      `pulumi:"gitCloneUrl"`
	GitignoreTemplate                   pulumi.StringPtrOutput   `pulumi:"gitignoreTemplate"`
	HasDownloads                        pulumi.BoolPtrOutput     `pulumi:"hasDownloads"`
	HasIssues                           pulumi.BoolPtrOutput     `pulumi:"hasIssues"`
	HasProjects                         pulumi.BoolPtrOutput     `pulumi:"hasProjects"`
	HasWiki                             pulumi.BoolPtrOutput     `pulumi:"hasWiki"`
	HomepageUrl                         pulumi.StringPtrOutput   `pulumi:"homepageUrl"`
	HtmlUrl                             pulumi.StringOutput      `pulumi:"htmlUrl"`
	HttpCloneUrl                        pulumi.StringOutput      `pulumi:"httpCloneUrl"`
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrOutput     `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	IsTemplate                          pulumi.BoolPtrOutput     `pulumi:"isTemplate"`
	LicenseTemplate                     pulumi.StringPtrOutput   `pulumi:"licenseTemplate"`
	MergeCommitMessage                  pulumi.StringPtrOutput   `pulumi:"mergeCommitMessage"`
	MergeCommitTitle                    pulumi.StringPtrOutput   `pulumi:"mergeCommitTitle"`
	Name                                pulumi.StringOutput      `pulumi:"name"`
	NodeId                              pulumi.StringOutput      `pulumi:"nodeId"`
	Pages                               RepositoryPagesPtrOutput `pulumi:"pages"`
	// Deprecated: use visibility instead
	Private                  pulumi.BoolOutput           `pulumi:"private"`
	RepoId                   pulumi.IntOutput            `pulumi:"repoId"`
	SquashMergeCommitMessage pulumi.StringPtrOutput      `pulumi:"squashMergeCommitMessage"`
	SquashMergeCommitTitle   pulumi.StringPtrOutput      `pulumi:"squashMergeCommitTitle"`
	SshCloneUrl              pulumi.StringOutput         `pulumi:"sshCloneUrl"`
	SvnUrl                   pulumi.StringOutput         `pulumi:"svnUrl"`
	Template                 RepositoryTemplatePtrOutput `pulumi:"template"`
	Topics                   pulumi.StringArrayOutput    `pulumi:"topics"`
	Visibility               pulumi.StringOutput         `pulumi:"visibility"`
	VulnerabilityAlerts      pulumi.BoolPtrOutput        `pulumi:"vulnerabilityAlerts"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		args = &RepositoryArgs{}
	}

	var resource Repository
	err := ctx.RegisterResource("github:index/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("github:index/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	AllowAutoMerge   *bool `pulumi:"allowAutoMerge"`
	AllowMergeCommit *bool `pulumi:"allowMergeCommit"`
	AllowRebaseMerge *bool `pulumi:"allowRebaseMerge"`
	AllowSquashMerge *bool `pulumi:"allowSquashMerge"`
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	Archived         *bool `pulumi:"archived"`
	AutoInit         *bool `pulumi:"autoInit"`
	// Can only be set after initial repository creation, and only if the target branch exists
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch                       *string          `pulumi:"defaultBranch"`
	DeleteBranchOnMerge                 *bool            `pulumi:"deleteBranchOnMerge"`
	Description                         *string          `pulumi:"description"`
	Etag                                *string          `pulumi:"etag"`
	FullName                            *string          `pulumi:"fullName"`
	GitCloneUrl                         *string          `pulumi:"gitCloneUrl"`
	GitignoreTemplate                   *string          `pulumi:"gitignoreTemplate"`
	HasDownloads                        *bool            `pulumi:"hasDownloads"`
	HasIssues                           *bool            `pulumi:"hasIssues"`
	HasProjects                         *bool            `pulumi:"hasProjects"`
	HasWiki                             *bool            `pulumi:"hasWiki"`
	HomepageUrl                         *string          `pulumi:"homepageUrl"`
	HtmlUrl                             *string          `pulumi:"htmlUrl"`
	HttpCloneUrl                        *string          `pulumi:"httpCloneUrl"`
	IgnoreVulnerabilityAlertsDuringRead *bool            `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	IsTemplate                          *bool            `pulumi:"isTemplate"`
	LicenseTemplate                     *string          `pulumi:"licenseTemplate"`
	MergeCommitMessage                  *string          `pulumi:"mergeCommitMessage"`
	MergeCommitTitle                    *string          `pulumi:"mergeCommitTitle"`
	Name                                *string          `pulumi:"name"`
	NodeId                              *string          `pulumi:"nodeId"`
	Pages                               *RepositoryPages `pulumi:"pages"`
	// Deprecated: use visibility instead
	Private                  *bool               `pulumi:"private"`
	RepoId                   *int                `pulumi:"repoId"`
	SquashMergeCommitMessage *string             `pulumi:"squashMergeCommitMessage"`
	SquashMergeCommitTitle   *string             `pulumi:"squashMergeCommitTitle"`
	SshCloneUrl              *string             `pulumi:"sshCloneUrl"`
	SvnUrl                   *string             `pulumi:"svnUrl"`
	Template                 *RepositoryTemplate `pulumi:"template"`
	Topics                   []string            `pulumi:"topics"`
	Visibility               *string             `pulumi:"visibility"`
	VulnerabilityAlerts      *bool               `pulumi:"vulnerabilityAlerts"`
}

type RepositoryState struct {
	AllowAutoMerge   pulumi.BoolPtrInput
	AllowMergeCommit pulumi.BoolPtrInput
	AllowRebaseMerge pulumi.BoolPtrInput
	AllowSquashMerge pulumi.BoolPtrInput
	ArchiveOnDestroy pulumi.BoolPtrInput
	Archived         pulumi.BoolPtrInput
	AutoInit         pulumi.BoolPtrInput
	// Can only be set after initial repository creation, and only if the target branch exists
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch                       pulumi.StringPtrInput
	DeleteBranchOnMerge                 pulumi.BoolPtrInput
	Description                         pulumi.StringPtrInput
	Etag                                pulumi.StringPtrInput
	FullName                            pulumi.StringPtrInput
	GitCloneUrl                         pulumi.StringPtrInput
	GitignoreTemplate                   pulumi.StringPtrInput
	HasDownloads                        pulumi.BoolPtrInput
	HasIssues                           pulumi.BoolPtrInput
	HasProjects                         pulumi.BoolPtrInput
	HasWiki                             pulumi.BoolPtrInput
	HomepageUrl                         pulumi.StringPtrInput
	HtmlUrl                             pulumi.StringPtrInput
	HttpCloneUrl                        pulumi.StringPtrInput
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrInput
	IsTemplate                          pulumi.BoolPtrInput
	LicenseTemplate                     pulumi.StringPtrInput
	MergeCommitMessage                  pulumi.StringPtrInput
	MergeCommitTitle                    pulumi.StringPtrInput
	Name                                pulumi.StringPtrInput
	NodeId                              pulumi.StringPtrInput
	Pages                               RepositoryPagesPtrInput
	// Deprecated: use visibility instead
	Private                  pulumi.BoolPtrInput
	RepoId                   pulumi.IntPtrInput
	SquashMergeCommitMessage pulumi.StringPtrInput
	SquashMergeCommitTitle   pulumi.StringPtrInput
	SshCloneUrl              pulumi.StringPtrInput
	SvnUrl                   pulumi.StringPtrInput
	Template                 RepositoryTemplatePtrInput
	Topics                   pulumi.StringArrayInput
	Visibility               pulumi.StringPtrInput
	VulnerabilityAlerts      pulumi.BoolPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	AllowAutoMerge   *bool `pulumi:"allowAutoMerge"`
	AllowMergeCommit *bool `pulumi:"allowMergeCommit"`
	AllowRebaseMerge *bool `pulumi:"allowRebaseMerge"`
	AllowSquashMerge *bool `pulumi:"allowSquashMerge"`
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	Archived         *bool `pulumi:"archived"`
	AutoInit         *bool `pulumi:"autoInit"`
	// Can only be set after initial repository creation, and only if the target branch exists
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch                       *string          `pulumi:"defaultBranch"`
	DeleteBranchOnMerge                 *bool            `pulumi:"deleteBranchOnMerge"`
	Description                         *string          `pulumi:"description"`
	GitignoreTemplate                   *string          `pulumi:"gitignoreTemplate"`
	HasDownloads                        *bool            `pulumi:"hasDownloads"`
	HasIssues                           *bool            `pulumi:"hasIssues"`
	HasProjects                         *bool            `pulumi:"hasProjects"`
	HasWiki                             *bool            `pulumi:"hasWiki"`
	HomepageUrl                         *string          `pulumi:"homepageUrl"`
	IgnoreVulnerabilityAlertsDuringRead *bool            `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	IsTemplate                          *bool            `pulumi:"isTemplate"`
	LicenseTemplate                     *string          `pulumi:"licenseTemplate"`
	MergeCommitMessage                  *string          `pulumi:"mergeCommitMessage"`
	MergeCommitTitle                    *string          `pulumi:"mergeCommitTitle"`
	Name                                *string          `pulumi:"name"`
	Pages                               *RepositoryPages `pulumi:"pages"`
	// Deprecated: use visibility instead
	Private                  *bool               `pulumi:"private"`
	SquashMergeCommitMessage *string             `pulumi:"squashMergeCommitMessage"`
	SquashMergeCommitTitle   *string             `pulumi:"squashMergeCommitTitle"`
	Template                 *RepositoryTemplate `pulumi:"template"`
	Topics                   []string            `pulumi:"topics"`
	Visibility               *string             `pulumi:"visibility"`
	VulnerabilityAlerts      *bool               `pulumi:"vulnerabilityAlerts"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	AllowAutoMerge   pulumi.BoolPtrInput
	AllowMergeCommit pulumi.BoolPtrInput
	AllowRebaseMerge pulumi.BoolPtrInput
	AllowSquashMerge pulumi.BoolPtrInput
	ArchiveOnDestroy pulumi.BoolPtrInput
	Archived         pulumi.BoolPtrInput
	AutoInit         pulumi.BoolPtrInput
	// Can only be set after initial repository creation, and only if the target branch exists
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch                       pulumi.StringPtrInput
	DeleteBranchOnMerge                 pulumi.BoolPtrInput
	Description                         pulumi.StringPtrInput
	GitignoreTemplate                   pulumi.StringPtrInput
	HasDownloads                        pulumi.BoolPtrInput
	HasIssues                           pulumi.BoolPtrInput
	HasProjects                         pulumi.BoolPtrInput
	HasWiki                             pulumi.BoolPtrInput
	HomepageUrl                         pulumi.StringPtrInput
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrInput
	IsTemplate                          pulumi.BoolPtrInput
	LicenseTemplate                     pulumi.StringPtrInput
	MergeCommitMessage                  pulumi.StringPtrInput
	MergeCommitTitle                    pulumi.StringPtrInput
	Name                                pulumi.StringPtrInput
	Pages                               RepositoryPagesPtrInput
	// Deprecated: use visibility instead
	Private                  pulumi.BoolPtrInput
	SquashMergeCommitMessage pulumi.StringPtrInput
	SquashMergeCommitTitle   pulumi.StringPtrInput
	Template                 RepositoryTemplatePtrInput
	Topics                   pulumi.StringArrayInput
	Visibility               pulumi.StringPtrInput
	VulnerabilityAlerts      pulumi.BoolPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

func (o RepositoryOutput) AllowAutoMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowAutoMerge }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) AllowMergeCommit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowMergeCommit }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) AllowRebaseMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowRebaseMerge }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) AllowSquashMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowSquashMerge }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) ArchiveOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.ArchiveOnDestroy }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) Archived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.Archived }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) AutoInit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AutoInit }).(pulumi.BoolPtrOutput)
}

// Can only be set after initial repository creation, and only if the target branch exists
//
// Deprecated: Use the github_branch_default resource instead
func (o RepositoryOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.DefaultBranch }).(pulumi.StringOutput)
}

func (o RepositoryOutput) DeleteBranchOnMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.DeleteBranchOnMerge }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RepositoryOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.FullName }).(pulumi.StringOutput)
}

func (o RepositoryOutput) GitCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.GitCloneUrl }).(pulumi.StringOutput)
}

func (o RepositoryOutput) GitignoreTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GitignoreTemplate }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) HasDownloads() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasDownloads }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) HasIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasIssues }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) HasProjects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasProjects }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) HasWiki() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasWiki }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) HomepageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.HomepageUrl }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.HtmlUrl }).(pulumi.StringOutput)
}

func (o RepositoryOutput) HttpCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.HttpCloneUrl }).(pulumi.StringOutput)
}

func (o RepositoryOutput) IgnoreVulnerabilityAlertsDuringRead() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.IgnoreVulnerabilityAlertsDuringRead }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) IsTemplate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.IsTemplate }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) LicenseTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.LicenseTemplate }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) MergeCommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.MergeCommitMessage }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) MergeCommitTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.MergeCommitTitle }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RepositoryOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Pages() RepositoryPagesPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryPagesPtrOutput { return v.Pages }).(RepositoryPagesPtrOutput)
}

// Deprecated: use visibility instead
func (o RepositoryOutput) Private() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.Private }).(pulumi.BoolOutput)
}

func (o RepositoryOutput) RepoId() pulumi.IntOutput {
	return o.ApplyT(func(v *Repository) pulumi.IntOutput { return v.RepoId }).(pulumi.IntOutput)
}

func (o RepositoryOutput) SquashMergeCommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.SquashMergeCommitMessage }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) SquashMergeCommitTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.SquashMergeCommitTitle }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) SshCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.SshCloneUrl }).(pulumi.StringOutput)
}

func (o RepositoryOutput) SvnUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.SvnUrl }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Template() RepositoryTemplatePtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryTemplatePtrOutput { return v.Template }).(RepositoryTemplatePtrOutput)
}

func (o RepositoryOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o RepositoryOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

func (o RepositoryOutput) VulnerabilityAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.VulnerabilityAlerts }).(pulumi.BoolPtrOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
