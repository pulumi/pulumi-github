// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and manage repositories within your
// GitHub organization or personal account.
//
// > Note: When used with GitHub App authentication, even GET requests must have
// the `contents:write` permission or else the `allowMergeCommit`, `allowRebaseMerge`,
// and `allowSquashMerge` attributes will be ignored, causing confusing diffs.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewRepository(ctx, "example", &github.RepositoryArgs{
//				Description: pulumi.String("My awesome codebase"),
//				Template: &github.RepositoryTemplateArgs{
//					IncludeAllBranches: pulumi.Bool(true),
//					Owner:              pulumi.String("github"),
//					Repository:         pulumi.String("terraform-template-module"),
//				},
//				Visibility: pulumi.String("public"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### With GitHub Pages Enabled
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewRepository(ctx, "example", &github.RepositoryArgs{
//				Description: pulumi.String("My awesome web page"),
//				Pages: &github.RepositoryPagesArgs{
//					Source: &github.RepositoryPagesSourceArgs{
//						Branch: pulumi.String("master"),
//						Path:   pulumi.String("/docs"),
//					},
//				},
//				Private: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Repositories can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import github:index/repository:Repository terraform terraform
// ```
type Repository struct {
	pulumi.CustomResourceState

	// Set to `true` to allow auto-merging pull requests on the repository.
	AllowAutoMerge pulumi.BoolPtrOutput `pulumi:"allowAutoMerge"`
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit pulumi.BoolPtrOutput `pulumi:"allowMergeCommit"`
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge pulumi.BoolPtrOutput `pulumi:"allowRebaseMerge"`
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge pulumi.BoolPtrOutput `pulumi:"allowSquashMerge"`
	// Set to `true` to always suggest updating pull request branches.
	AllowUpdateBranch pulumi.BoolPtrOutput `pulumi:"allowUpdateBranch"`
	// Set to `true` to archive the repository instead of deleting on destroy.
	ArchiveOnDestroy pulumi.BoolPtrOutput `pulumi:"archiveOnDestroy"`
	// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
	Archived pulumi.BoolPtrOutput `pulumi:"archived"`
	// Set to `true` to produce an initial commit in the repository.
	AutoInit pulumi.BoolPtrOutput `pulumi:"autoInit"`
	// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`
	// Automatically delete head branch after a pull request is merged. Defaults to `false`.
	DeleteBranchOnMerge pulumi.BoolPtrOutput `pulumi:"deleteBranchOnMerge"`
	// A description of the repository.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Etag        pulumi.StringOutput    `pulumi:"etag"`
	// A string of the form "orgname/reponame".
	FullName pulumi.StringOutput `pulumi:"fullName"`
	// URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.
	GitCloneUrl pulumi.StringOutput `pulumi:"gitCloneUrl"`
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate pulumi.StringPtrOutput `pulumi:"gitignoreTemplate"`
	// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
	HasDiscussions pulumi.BoolPtrOutput `pulumi:"hasDiscussions"`
	// Set to `true` to enable the (deprecated) downloads features on the repository.
	HasDownloads pulumi.BoolPtrOutput `pulumi:"hasDownloads"`
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues pulumi.BoolPtrOutput `pulumi:"hasIssues"`
	// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects pulumi.BoolPtrOutput `pulumi:"hasProjects"`
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki pulumi.BoolPtrOutput `pulumi:"hasWiki"`
	// URL of a page describing the project.
	HomepageUrl pulumi.StringPtrOutput `pulumi:"homepageUrl"`
	// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
	HtmlUrl pulumi.StringOutput `pulumi:"htmlUrl"`
	// URL that can be provided to `git clone` to clone the repository via HTTPS.
	HttpCloneUrl pulumi.StringOutput `pulumi:"httpCloneUrl"`
	// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrOutput `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	// Set to `true` to tell GitHub that this is a template repository.
	IsTemplate pulumi.BoolPtrOutput `pulumi:"isTemplate"`
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate pulumi.StringPtrOutput `pulumi:"licenseTemplate"`
	// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitMessage pulumi.StringPtrOutput `pulumi:"mergeCommitMessage"`
	// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitTitle pulumi.StringPtrOutput `pulumi:"mergeCommitTitle"`
	// The name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// GraphQL global node id for use with v4 API
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
	Pages RepositoryPagesPtrOutput `pulumi:"pages"`
	// The primary language used in the repository.
	PrimaryLanguage pulumi.StringOutput `pulumi:"primaryLanguage"`
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	//
	// Deprecated: use visibility instead
	Private pulumi.BoolOutput `pulumi:"private"`
	// GitHub ID for the repository
	RepoId pulumi.IntOutput `pulumi:"repoId"`
	// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
	SecurityAndAnalysis RepositorySecurityAndAnalysisOutput `pulumi:"securityAndAnalysis"`
	// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitMessage pulumi.StringPtrOutput `pulumi:"squashMergeCommitMessage"`
	// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitTitle pulumi.StringPtrOutput `pulumi:"squashMergeCommitTitle"`
	// URL that can be provided to `git clone` to clone the repository via SSH.
	SshCloneUrl pulumi.StringOutput `pulumi:"sshCloneUrl"`
	// URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.
	SvnUrl pulumi.StringOutput `pulumi:"svnUrl"`
	// Use a template repository to create this resource. See Template Repositories below for details.
	Template RepositoryTemplatePtrOutput `pulumi:"template"`
	// The list of topics of the repository.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
	VulnerabilityAlerts pulumi.BoolPtrOutput `pulumi:"vulnerabilityAlerts"`
	// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
	WebCommitSignoffRequired pulumi.BoolPtrOutput `pulumi:"webCommitSignoffRequired"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		args = &RepositoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("github:index/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("github:index/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// Set to `true` to allow auto-merging pull requests on the repository.
	AllowAutoMerge *bool `pulumi:"allowAutoMerge"`
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit *bool `pulumi:"allowMergeCommit"`
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge *bool `pulumi:"allowRebaseMerge"`
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge *bool `pulumi:"allowSquashMerge"`
	// Set to `true` to always suggest updating pull request branches.
	AllowUpdateBranch *bool `pulumi:"allowUpdateBranch"`
	// Set to `true` to archive the repository instead of deleting on destroy.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
	Archived *bool `pulumi:"archived"`
	// Set to `true` to produce an initial commit in the repository.
	AutoInit *bool `pulumi:"autoInit"`
	// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Automatically delete head branch after a pull request is merged. Defaults to `false`.
	DeleteBranchOnMerge *bool `pulumi:"deleteBranchOnMerge"`
	// A description of the repository.
	Description *string `pulumi:"description"`
	Etag        *string `pulumi:"etag"`
	// A string of the form "orgname/reponame".
	FullName *string `pulumi:"fullName"`
	// URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.
	GitCloneUrl *string `pulumi:"gitCloneUrl"`
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate *string `pulumi:"gitignoreTemplate"`
	// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
	HasDiscussions *bool `pulumi:"hasDiscussions"`
	// Set to `true` to enable the (deprecated) downloads features on the repository.
	HasDownloads *bool `pulumi:"hasDownloads"`
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues *bool `pulumi:"hasIssues"`
	// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects *bool `pulumi:"hasProjects"`
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki *bool `pulumi:"hasWiki"`
	// URL of a page describing the project.
	HomepageUrl *string `pulumi:"homepageUrl"`
	// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
	HtmlUrl *string `pulumi:"htmlUrl"`
	// URL that can be provided to `git clone` to clone the repository via HTTPS.
	HttpCloneUrl *string `pulumi:"httpCloneUrl"`
	// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
	IgnoreVulnerabilityAlertsDuringRead *bool `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	// Set to `true` to tell GitHub that this is a template repository.
	IsTemplate *bool `pulumi:"isTemplate"`
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate *string `pulumi:"licenseTemplate"`
	// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitMessage *string `pulumi:"mergeCommitMessage"`
	// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitTitle *string `pulumi:"mergeCommitTitle"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// GraphQL global node id for use with v4 API
	NodeId *string `pulumi:"nodeId"`
	// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
	Pages *RepositoryPages `pulumi:"pages"`
	// The primary language used in the repository.
	PrimaryLanguage *string `pulumi:"primaryLanguage"`
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	//
	// Deprecated: use visibility instead
	Private *bool `pulumi:"private"`
	// GitHub ID for the repository
	RepoId *int `pulumi:"repoId"`
	// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
	SecurityAndAnalysis *RepositorySecurityAndAnalysis `pulumi:"securityAndAnalysis"`
	// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitMessage *string `pulumi:"squashMergeCommitMessage"`
	// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitTitle *string `pulumi:"squashMergeCommitTitle"`
	// URL that can be provided to `git clone` to clone the repository via SSH.
	SshCloneUrl *string `pulumi:"sshCloneUrl"`
	// URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.
	SvnUrl *string `pulumi:"svnUrl"`
	// Use a template repository to create this resource. See Template Repositories below for details.
	Template *RepositoryTemplate `pulumi:"template"`
	// The list of topics of the repository.
	Topics []string `pulumi:"topics"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
	Visibility *string `pulumi:"visibility"`
	// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
	VulnerabilityAlerts *bool `pulumi:"vulnerabilityAlerts"`
	// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
	WebCommitSignoffRequired *bool `pulumi:"webCommitSignoffRequired"`
}

type RepositoryState struct {
	// Set to `true` to allow auto-merging pull requests on the repository.
	AllowAutoMerge pulumi.BoolPtrInput
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit pulumi.BoolPtrInput
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge pulumi.BoolPtrInput
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge pulumi.BoolPtrInput
	// Set to `true` to always suggest updating pull request branches.
	AllowUpdateBranch pulumi.BoolPtrInput
	// Set to `true` to archive the repository instead of deleting on destroy.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
	Archived pulumi.BoolPtrInput
	// Set to `true` to produce an initial commit in the repository.
	AutoInit pulumi.BoolPtrInput
	// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch pulumi.StringPtrInput
	// Automatically delete head branch after a pull request is merged. Defaults to `false`.
	DeleteBranchOnMerge pulumi.BoolPtrInput
	// A description of the repository.
	Description pulumi.StringPtrInput
	Etag        pulumi.StringPtrInput
	// A string of the form "orgname/reponame".
	FullName pulumi.StringPtrInput
	// URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.
	GitCloneUrl pulumi.StringPtrInput
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate pulumi.StringPtrInput
	// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
	HasDiscussions pulumi.BoolPtrInput
	// Set to `true` to enable the (deprecated) downloads features on the repository.
	HasDownloads pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki pulumi.BoolPtrInput
	// URL of a page describing the project.
	HomepageUrl pulumi.StringPtrInput
	// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
	HtmlUrl pulumi.StringPtrInput
	// URL that can be provided to `git clone` to clone the repository via HTTPS.
	HttpCloneUrl pulumi.StringPtrInput
	// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrInput
	// Set to `true` to tell GitHub that this is a template repository.
	IsTemplate pulumi.BoolPtrInput
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate pulumi.StringPtrInput
	// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitMessage pulumi.StringPtrInput
	// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitTitle pulumi.StringPtrInput
	// The name of the repository.
	Name pulumi.StringPtrInput
	// GraphQL global node id for use with v4 API
	NodeId pulumi.StringPtrInput
	// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
	Pages RepositoryPagesPtrInput
	// The primary language used in the repository.
	PrimaryLanguage pulumi.StringPtrInput
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	//
	// Deprecated: use visibility instead
	Private pulumi.BoolPtrInput
	// GitHub ID for the repository
	RepoId pulumi.IntPtrInput
	// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
	SecurityAndAnalysis RepositorySecurityAndAnalysisPtrInput
	// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitMessage pulumi.StringPtrInput
	// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitTitle pulumi.StringPtrInput
	// URL that can be provided to `git clone` to clone the repository via SSH.
	SshCloneUrl pulumi.StringPtrInput
	// URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.
	SvnUrl pulumi.StringPtrInput
	// Use a template repository to create this resource. See Template Repositories below for details.
	Template RepositoryTemplatePtrInput
	// The list of topics of the repository.
	Topics pulumi.StringArrayInput
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
	Visibility pulumi.StringPtrInput
	// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
	VulnerabilityAlerts pulumi.BoolPtrInput
	// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
	WebCommitSignoffRequired pulumi.BoolPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// Set to `true` to allow auto-merging pull requests on the repository.
	AllowAutoMerge *bool `pulumi:"allowAutoMerge"`
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit *bool `pulumi:"allowMergeCommit"`
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge *bool `pulumi:"allowRebaseMerge"`
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge *bool `pulumi:"allowSquashMerge"`
	// Set to `true` to always suggest updating pull request branches.
	AllowUpdateBranch *bool `pulumi:"allowUpdateBranch"`
	// Set to `true` to archive the repository instead of deleting on destroy.
	ArchiveOnDestroy *bool `pulumi:"archiveOnDestroy"`
	// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
	Archived *bool `pulumi:"archived"`
	// Set to `true` to produce an initial commit in the repository.
	AutoInit *bool `pulumi:"autoInit"`
	// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Automatically delete head branch after a pull request is merged. Defaults to `false`.
	DeleteBranchOnMerge *bool `pulumi:"deleteBranchOnMerge"`
	// A description of the repository.
	Description *string `pulumi:"description"`
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate *string `pulumi:"gitignoreTemplate"`
	// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
	HasDiscussions *bool `pulumi:"hasDiscussions"`
	// Set to `true` to enable the (deprecated) downloads features on the repository.
	HasDownloads *bool `pulumi:"hasDownloads"`
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues *bool `pulumi:"hasIssues"`
	// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects *bool `pulumi:"hasProjects"`
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki *bool `pulumi:"hasWiki"`
	// URL of a page describing the project.
	HomepageUrl *string `pulumi:"homepageUrl"`
	// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
	IgnoreVulnerabilityAlertsDuringRead *bool `pulumi:"ignoreVulnerabilityAlertsDuringRead"`
	// Set to `true` to tell GitHub that this is a template repository.
	IsTemplate *bool `pulumi:"isTemplate"`
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate *string `pulumi:"licenseTemplate"`
	// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitMessage *string `pulumi:"mergeCommitMessage"`
	// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitTitle *string `pulumi:"mergeCommitTitle"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
	Pages *RepositoryPages `pulumi:"pages"`
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	//
	// Deprecated: use visibility instead
	Private *bool `pulumi:"private"`
	// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
	SecurityAndAnalysis *RepositorySecurityAndAnalysis `pulumi:"securityAndAnalysis"`
	// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitMessage *string `pulumi:"squashMergeCommitMessage"`
	// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitTitle *string `pulumi:"squashMergeCommitTitle"`
	// Use a template repository to create this resource. See Template Repositories below for details.
	Template *RepositoryTemplate `pulumi:"template"`
	// The list of topics of the repository.
	Topics []string `pulumi:"topics"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
	Visibility *string `pulumi:"visibility"`
	// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
	VulnerabilityAlerts *bool `pulumi:"vulnerabilityAlerts"`
	// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
	WebCommitSignoffRequired *bool `pulumi:"webCommitSignoffRequired"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Set to `true` to allow auto-merging pull requests on the repository.
	AllowAutoMerge pulumi.BoolPtrInput
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit pulumi.BoolPtrInput
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge pulumi.BoolPtrInput
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge pulumi.BoolPtrInput
	// Set to `true` to always suggest updating pull request branches.
	AllowUpdateBranch pulumi.BoolPtrInput
	// Set to `true` to archive the repository instead of deleting on destroy.
	ArchiveOnDestroy pulumi.BoolPtrInput
	// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
	Archived pulumi.BoolPtrInput
	// Set to `true` to produce an initial commit in the repository.
	AutoInit pulumi.BoolPtrInput
	// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	//
	// Deprecated: Use the github_branch_default resource instead
	DefaultBranch pulumi.StringPtrInput
	// Automatically delete head branch after a pull request is merged. Defaults to `false`.
	DeleteBranchOnMerge pulumi.BoolPtrInput
	// A description of the repository.
	Description pulumi.StringPtrInput
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate pulumi.StringPtrInput
	// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
	HasDiscussions pulumi.BoolPtrInput
	// Set to `true` to enable the (deprecated) downloads features on the repository.
	HasDownloads pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects pulumi.BoolPtrInput
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki pulumi.BoolPtrInput
	// URL of a page describing the project.
	HomepageUrl pulumi.StringPtrInput
	// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
	IgnoreVulnerabilityAlertsDuringRead pulumi.BoolPtrInput
	// Set to `true` to tell GitHub that this is a template repository.
	IsTemplate pulumi.BoolPtrInput
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate pulumi.StringPtrInput
	// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitMessage pulumi.StringPtrInput
	// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
	MergeCommitTitle pulumi.StringPtrInput
	// The name of the repository.
	Name pulumi.StringPtrInput
	// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
	Pages RepositoryPagesPtrInput
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	//
	// Deprecated: use visibility instead
	Private pulumi.BoolPtrInput
	// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
	SecurityAndAnalysis RepositorySecurityAndAnalysisPtrInput
	// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitMessage pulumi.StringPtrInput
	// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
	SquashMergeCommitTitle pulumi.StringPtrInput
	// Use a template repository to create this resource. See Template Repositories below for details.
	Template RepositoryTemplatePtrInput
	// The list of topics of the repository.
	Topics pulumi.StringArrayInput
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
	Visibility pulumi.StringPtrInput
	// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
	VulnerabilityAlerts pulumi.BoolPtrInput
	// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
	WebCommitSignoffRequired pulumi.BoolPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// Set to `true` to allow auto-merging pull requests on the repository.
func (o RepositoryOutput) AllowAutoMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowAutoMerge }).(pulumi.BoolPtrOutput)
}

// Set to `false` to disable merge commits on the repository.
func (o RepositoryOutput) AllowMergeCommit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowMergeCommit }).(pulumi.BoolPtrOutput)
}

// Set to `false` to disable rebase merges on the repository.
func (o RepositoryOutput) AllowRebaseMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowRebaseMerge }).(pulumi.BoolPtrOutput)
}

// Set to `false` to disable squash merges on the repository.
func (o RepositoryOutput) AllowSquashMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowSquashMerge }).(pulumi.BoolPtrOutput)
}

// Set to `true` to always suggest updating pull request branches.
func (o RepositoryOutput) AllowUpdateBranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AllowUpdateBranch }).(pulumi.BoolPtrOutput)
}

// Set to `true` to archive the repository instead of deleting on destroy.
func (o RepositoryOutput) ArchiveOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.ArchiveOnDestroy }).(pulumi.BoolPtrOutput)
}

// Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.
func (o RepositoryOutput) Archived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.Archived }).(pulumi.BoolPtrOutput)
}

// Set to `true` to produce an initial commit in the repository.
func (o RepositoryOutput) AutoInit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.AutoInit }).(pulumi.BoolPtrOutput)
}

// (Deprecated: Use `BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
//
// Deprecated: Use the github_branch_default resource instead
func (o RepositoryOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Automatically delete head branch after a pull request is merged. Defaults to `false`.
func (o RepositoryOutput) DeleteBranchOnMerge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.DeleteBranchOnMerge }).(pulumi.BoolPtrOutput)
}

// A description of the repository.
func (o RepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A string of the form "orgname/reponame".
func (o RepositoryOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.FullName }).(pulumi.StringOutput)
}

// URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.
func (o RepositoryOutput) GitCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.GitCloneUrl }).(pulumi.StringOutput)
}

// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
func (o RepositoryOutput) GitignoreTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.GitignoreTemplate }).(pulumi.StringPtrOutput)
}

// Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.
func (o RepositoryOutput) HasDiscussions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasDiscussions }).(pulumi.BoolPtrOutput)
}

// Set to `true` to enable the (deprecated) downloads features on the repository.
func (o RepositoryOutput) HasDownloads() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasDownloads }).(pulumi.BoolPtrOutput)
}

// Set to `true` to enable the GitHub Issues features
// on the repository.
func (o RepositoryOutput) HasIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasIssues }).(pulumi.BoolPtrOutput)
}

// Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
func (o RepositoryOutput) HasProjects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasProjects }).(pulumi.BoolPtrOutput)
}

// Set to `true` to enable the GitHub Wiki features on
// the repository.
func (o RepositoryOutput) HasWiki() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasWiki }).(pulumi.BoolPtrOutput)
}

// URL of a page describing the project.
func (o RepositoryOutput) HomepageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.HomepageUrl }).(pulumi.StringPtrOutput)
}

// The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.
func (o RepositoryOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.HtmlUrl }).(pulumi.StringOutput)
}

// URL that can be provided to `git clone` to clone the repository via HTTPS.
func (o RepositoryOutput) HttpCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.HttpCloneUrl }).(pulumi.StringOutput)
}

// Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.
func (o RepositoryOutput) IgnoreVulnerabilityAlertsDuringRead() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.IgnoreVulnerabilityAlertsDuringRead }).(pulumi.BoolPtrOutput)
}

// Set to `true` to tell GitHub that this is a template repository.
func (o RepositoryOutput) IsTemplate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.IsTemplate }).(pulumi.BoolPtrOutput)
}

// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
func (o RepositoryOutput) LicenseTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.LicenseTemplate }).(pulumi.StringPtrOutput)
}

// Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allowMergeCommit` is `true`.
func (o RepositoryOutput) MergeCommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.MergeCommitMessage }).(pulumi.StringPtrOutput)
}

// Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allowMergeCommit` is `true`.
func (o RepositoryOutput) MergeCommitTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.MergeCommitTitle }).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// GraphQL global node id for use with v4 API
func (o RepositoryOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.
func (o RepositoryOutput) Pages() RepositoryPagesPtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryPagesPtrOutput { return v.Pages }).(RepositoryPagesPtrOutput)
}

// The primary language used in the repository.
func (o RepositoryOutput) PrimaryLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.PrimaryLanguage }).(pulumi.StringOutput)
}

// Set to `true` to create a private repository.
// Repositories are created as public (e.g. open source) by default.
//
// Deprecated: use visibility instead
func (o RepositoryOutput) Private() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.Private }).(pulumi.BoolOutput)
}

// GitHub ID for the repository
func (o RepositoryOutput) RepoId() pulumi.IntOutput {
	return o.ApplyT(func(v *Repository) pulumi.IntOutput { return v.RepoId }).(pulumi.IntOutput)
}

// The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.
func (o RepositoryOutput) SecurityAndAnalysis() RepositorySecurityAndAnalysisOutput {
	return o.ApplyT(func(v *Repository) RepositorySecurityAndAnalysisOutput { return v.SecurityAndAnalysis }).(RepositorySecurityAndAnalysisOutput)
}

// Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allowSquashMerge` is `true`.
func (o RepositoryOutput) SquashMergeCommitMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.SquashMergeCommitMessage }).(pulumi.StringPtrOutput)
}

// Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allowSquashMerge` is `true`.
func (o RepositoryOutput) SquashMergeCommitTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.SquashMergeCommitTitle }).(pulumi.StringPtrOutput)
}

// URL that can be provided to `git clone` to clone the repository via SSH.
func (o RepositoryOutput) SshCloneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.SshCloneUrl }).(pulumi.StringOutput)
}

// URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.
func (o RepositoryOutput) SvnUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.SvnUrl }).(pulumi.StringOutput)
}

// Use a template repository to create this resource. See Template Repositories below for details.
func (o RepositoryOutput) Template() RepositoryTemplatePtrOutput {
	return o.ApplyT(func(v *Repository) RepositoryTemplatePtrOutput { return v.Template }).(RepositoryTemplatePtrOutput)
}

// The list of topics of the repository.
func (o RepositoryOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.
func (o RepositoryOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.
func (o RepositoryOutput) VulnerabilityAlerts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.VulnerabilityAlerts }).(pulumi.BoolPtrOutput)
}

// Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.
func (o RepositoryOutput) WebCommitSignoffRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.WebCommitSignoffRequired }).(pulumi.BoolPtrOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
