// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a custom organization repository role.
//
// > **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewOrganizationRepositoryRole(ctx, "example", &github.OrganizationRepositoryRoleArgs{
//				Name:     pulumi.String("example"),
//				BaseRole: pulumi.String("read"),
//				Permissions: pulumi.StringArray{
//					pulumi.String("add_assignee"),
//					pulumi.String("add_label"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A custom organization repository role can be imported using its ID.
//
// ```sh
// $ pulumi import github:index/organizationRepositoryRole:OrganizationRepositoryRole example 1234
// ```
type OrganizationRepositoryRole struct {
	pulumi.CustomResourceState

	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringOutput `pulumi:"baseRole"`
	// The description of the organization repository role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the organization repository role.
	Name pulumi.StringOutput `pulumi:"name"`
	// The permissions included in this role.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// The ID of the organization repository role.
	RoleId pulumi.IntOutput `pulumi:"roleId"`
}

// NewOrganizationRepositoryRole registers a new resource with the given unique name, arguments, and options.
func NewOrganizationRepositoryRole(ctx *pulumi.Context,
	name string, args *OrganizationRepositoryRoleArgs, opts ...pulumi.ResourceOption) (*OrganizationRepositoryRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseRole == nil {
		return nil, errors.New("invalid value for required argument 'BaseRole'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationRepositoryRole
	err := ctx.RegisterResource("github:index/organizationRepositoryRole:OrganizationRepositoryRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationRepositoryRole gets an existing OrganizationRepositoryRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationRepositoryRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationRepositoryRoleState, opts ...pulumi.ResourceOption) (*OrganizationRepositoryRole, error) {
	var resource OrganizationRepositoryRole
	err := ctx.ReadResource("github:index/organizationRepositoryRole:OrganizationRepositoryRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationRepositoryRole resources.
type organizationRepositoryRoleState struct {
	// The system role from which this role inherits permissions.
	BaseRole *string `pulumi:"baseRole"`
	// The description of the organization repository role.
	Description *string `pulumi:"description"`
	// The name of the organization repository role.
	Name *string `pulumi:"name"`
	// The permissions included in this role.
	Permissions []string `pulumi:"permissions"`
	// The ID of the organization repository role.
	RoleId *int `pulumi:"roleId"`
}

type OrganizationRepositoryRoleState struct {
	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringPtrInput
	// The description of the organization repository role.
	Description pulumi.StringPtrInput
	// The name of the organization repository role.
	Name pulumi.StringPtrInput
	// The permissions included in this role.
	Permissions pulumi.StringArrayInput
	// The ID of the organization repository role.
	RoleId pulumi.IntPtrInput
}

func (OrganizationRepositoryRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRepositoryRoleState)(nil)).Elem()
}

type organizationRepositoryRoleArgs struct {
	// The system role from which this role inherits permissions.
	BaseRole string `pulumi:"baseRole"`
	// The description of the organization repository role.
	Description *string `pulumi:"description"`
	// The name of the organization repository role.
	Name *string `pulumi:"name"`
	// The permissions included in this role.
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a OrganizationRepositoryRole resource.
type OrganizationRepositoryRoleArgs struct {
	// The system role from which this role inherits permissions.
	BaseRole pulumi.StringInput
	// The description of the organization repository role.
	Description pulumi.StringPtrInput
	// The name of the organization repository role.
	Name pulumi.StringPtrInput
	// The permissions included in this role.
	Permissions pulumi.StringArrayInput
}

func (OrganizationRepositoryRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRepositoryRoleArgs)(nil)).Elem()
}

type OrganizationRepositoryRoleInput interface {
	pulumi.Input

	ToOrganizationRepositoryRoleOutput() OrganizationRepositoryRoleOutput
	ToOrganizationRepositoryRoleOutputWithContext(ctx context.Context) OrganizationRepositoryRoleOutput
}

func (*OrganizationRepositoryRole) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRepositoryRole)(nil)).Elem()
}

func (i *OrganizationRepositoryRole) ToOrganizationRepositoryRoleOutput() OrganizationRepositoryRoleOutput {
	return i.ToOrganizationRepositoryRoleOutputWithContext(context.Background())
}

func (i *OrganizationRepositoryRole) ToOrganizationRepositoryRoleOutputWithContext(ctx context.Context) OrganizationRepositoryRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRepositoryRoleOutput)
}

// OrganizationRepositoryRoleArrayInput is an input type that accepts OrganizationRepositoryRoleArray and OrganizationRepositoryRoleArrayOutput values.
// You can construct a concrete instance of `OrganizationRepositoryRoleArrayInput` via:
//
//	OrganizationRepositoryRoleArray{ OrganizationRepositoryRoleArgs{...} }
type OrganizationRepositoryRoleArrayInput interface {
	pulumi.Input

	ToOrganizationRepositoryRoleArrayOutput() OrganizationRepositoryRoleArrayOutput
	ToOrganizationRepositoryRoleArrayOutputWithContext(context.Context) OrganizationRepositoryRoleArrayOutput
}

type OrganizationRepositoryRoleArray []OrganizationRepositoryRoleInput

func (OrganizationRepositoryRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRepositoryRole)(nil)).Elem()
}

func (i OrganizationRepositoryRoleArray) ToOrganizationRepositoryRoleArrayOutput() OrganizationRepositoryRoleArrayOutput {
	return i.ToOrganizationRepositoryRoleArrayOutputWithContext(context.Background())
}

func (i OrganizationRepositoryRoleArray) ToOrganizationRepositoryRoleArrayOutputWithContext(ctx context.Context) OrganizationRepositoryRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRepositoryRoleArrayOutput)
}

// OrganizationRepositoryRoleMapInput is an input type that accepts OrganizationRepositoryRoleMap and OrganizationRepositoryRoleMapOutput values.
// You can construct a concrete instance of `OrganizationRepositoryRoleMapInput` via:
//
//	OrganizationRepositoryRoleMap{ "key": OrganizationRepositoryRoleArgs{...} }
type OrganizationRepositoryRoleMapInput interface {
	pulumi.Input

	ToOrganizationRepositoryRoleMapOutput() OrganizationRepositoryRoleMapOutput
	ToOrganizationRepositoryRoleMapOutputWithContext(context.Context) OrganizationRepositoryRoleMapOutput
}

type OrganizationRepositoryRoleMap map[string]OrganizationRepositoryRoleInput

func (OrganizationRepositoryRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRepositoryRole)(nil)).Elem()
}

func (i OrganizationRepositoryRoleMap) ToOrganizationRepositoryRoleMapOutput() OrganizationRepositoryRoleMapOutput {
	return i.ToOrganizationRepositoryRoleMapOutputWithContext(context.Background())
}

func (i OrganizationRepositoryRoleMap) ToOrganizationRepositoryRoleMapOutputWithContext(ctx context.Context) OrganizationRepositoryRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRepositoryRoleMapOutput)
}

type OrganizationRepositoryRoleOutput struct{ *pulumi.OutputState }

func (OrganizationRepositoryRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRepositoryRole)(nil)).Elem()
}

func (o OrganizationRepositoryRoleOutput) ToOrganizationRepositoryRoleOutput() OrganizationRepositoryRoleOutput {
	return o
}

func (o OrganizationRepositoryRoleOutput) ToOrganizationRepositoryRoleOutputWithContext(ctx context.Context) OrganizationRepositoryRoleOutput {
	return o
}

// The system role from which this role inherits permissions.
func (o OrganizationRepositoryRoleOutput) BaseRole() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRepositoryRole) pulumi.StringOutput { return v.BaseRole }).(pulumi.StringOutput)
}

// The description of the organization repository role.
func (o OrganizationRepositoryRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationRepositoryRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the organization repository role.
func (o OrganizationRepositoryRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRepositoryRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The permissions included in this role.
func (o OrganizationRepositoryRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrganizationRepositoryRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The ID of the organization repository role.
func (o OrganizationRepositoryRoleOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationRepositoryRole) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

type OrganizationRepositoryRoleArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRepositoryRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRepositoryRole)(nil)).Elem()
}

func (o OrganizationRepositoryRoleArrayOutput) ToOrganizationRepositoryRoleArrayOutput() OrganizationRepositoryRoleArrayOutput {
	return o
}

func (o OrganizationRepositoryRoleArrayOutput) ToOrganizationRepositoryRoleArrayOutputWithContext(ctx context.Context) OrganizationRepositoryRoleArrayOutput {
	return o
}

func (o OrganizationRepositoryRoleArrayOutput) Index(i pulumi.IntInput) OrganizationRepositoryRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationRepositoryRole {
		return vs[0].([]*OrganizationRepositoryRole)[vs[1].(int)]
	}).(OrganizationRepositoryRoleOutput)
}

type OrganizationRepositoryRoleMapOutput struct{ *pulumi.OutputState }

func (OrganizationRepositoryRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRepositoryRole)(nil)).Elem()
}

func (o OrganizationRepositoryRoleMapOutput) ToOrganizationRepositoryRoleMapOutput() OrganizationRepositoryRoleMapOutput {
	return o
}

func (o OrganizationRepositoryRoleMapOutput) ToOrganizationRepositoryRoleMapOutputWithContext(ctx context.Context) OrganizationRepositoryRoleMapOutput {
	return o
}

func (o OrganizationRepositoryRoleMapOutput) MapIndex(k pulumi.StringInput) OrganizationRepositoryRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationRepositoryRole {
		return vs[0].(map[string]*OrganizationRepositoryRole)[vs[1].(string)]
	}).(OrganizationRepositoryRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRepositoryRoleInput)(nil)).Elem(), &OrganizationRepositoryRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRepositoryRoleArrayInput)(nil)).Elem(), OrganizationRepositoryRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRepositoryRoleMapInput)(nil)).Elem(), OrganizationRepositoryRoleMap{})
	pulumi.RegisterOutputType(OrganizationRepositoryRoleOutput{})
	pulumi.RegisterOutputType(OrganizationRepositoryRoleArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRepositoryRoleMapOutput{})
}
