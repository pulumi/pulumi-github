// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActionsRunnerGroup struct {
	pulumi.CustomResourceState

	AllowsPublicRepositories pulumi.BoolOutput     `pulumi:"allowsPublicRepositories"`
	Default                  pulumi.BoolOutput     `pulumi:"default"`
	Etag                     pulumi.StringOutput   `pulumi:"etag"`
	Inherited                pulumi.BoolOutput     `pulumi:"inherited"`
	Name                     pulumi.StringOutput   `pulumi:"name"`
	RunnersUrl               pulumi.StringOutput   `pulumi:"runnersUrl"`
	SelectedRepositoriesUrl  pulumi.StringOutput   `pulumi:"selectedRepositoriesUrl"`
	SelectedRepositoryIds    pulumi.IntArrayOutput `pulumi:"selectedRepositoryIds"`
	Visibility               pulumi.StringOutput   `pulumi:"visibility"`
}

// NewActionsRunnerGroup registers a new resource with the given unique name, arguments, and options.
func NewActionsRunnerGroup(ctx *pulumi.Context,
	name string, args *ActionsRunnerGroupArgs, opts ...pulumi.ResourceOption) (*ActionsRunnerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Visibility == nil {
		return nil, errors.New("invalid value for required argument 'Visibility'")
	}
	var resource ActionsRunnerGroup
	err := ctx.RegisterResource("github:index/actionsRunnerGroup:ActionsRunnerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionsRunnerGroup gets an existing ActionsRunnerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionsRunnerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionsRunnerGroupState, opts ...pulumi.ResourceOption) (*ActionsRunnerGroup, error) {
	var resource ActionsRunnerGroup
	err := ctx.ReadResource("github:index/actionsRunnerGroup:ActionsRunnerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionsRunnerGroup resources.
type actionsRunnerGroupState struct {
	AllowsPublicRepositories *bool   `pulumi:"allowsPublicRepositories"`
	Default                  *bool   `pulumi:"default"`
	Etag                     *string `pulumi:"etag"`
	Inherited                *bool   `pulumi:"inherited"`
	Name                     *string `pulumi:"name"`
	RunnersUrl               *string `pulumi:"runnersUrl"`
	SelectedRepositoriesUrl  *string `pulumi:"selectedRepositoriesUrl"`
	SelectedRepositoryIds    []int   `pulumi:"selectedRepositoryIds"`
	Visibility               *string `pulumi:"visibility"`
}

type ActionsRunnerGroupState struct {
	AllowsPublicRepositories pulumi.BoolPtrInput
	Default                  pulumi.BoolPtrInput
	Etag                     pulumi.StringPtrInput
	Inherited                pulumi.BoolPtrInput
	Name                     pulumi.StringPtrInput
	RunnersUrl               pulumi.StringPtrInput
	SelectedRepositoriesUrl  pulumi.StringPtrInput
	SelectedRepositoryIds    pulumi.IntArrayInput
	Visibility               pulumi.StringPtrInput
}

func (ActionsRunnerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRunnerGroupState)(nil)).Elem()
}

type actionsRunnerGroupArgs struct {
	Name                  *string `pulumi:"name"`
	SelectedRepositoryIds []int   `pulumi:"selectedRepositoryIds"`
	Visibility            string  `pulumi:"visibility"`
}

// The set of arguments for constructing a ActionsRunnerGroup resource.
type ActionsRunnerGroupArgs struct {
	Name                  pulumi.StringPtrInput
	SelectedRepositoryIds pulumi.IntArrayInput
	Visibility            pulumi.StringInput
}

func (ActionsRunnerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRunnerGroupArgs)(nil)).Elem()
}

type ActionsRunnerGroupInput interface {
	pulumi.Input

	ToActionsRunnerGroupOutput() ActionsRunnerGroupOutput
	ToActionsRunnerGroupOutputWithContext(ctx context.Context) ActionsRunnerGroupOutput
}

func (*ActionsRunnerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRunnerGroup)(nil)).Elem()
}

func (i *ActionsRunnerGroup) ToActionsRunnerGroupOutput() ActionsRunnerGroupOutput {
	return i.ToActionsRunnerGroupOutputWithContext(context.Background())
}

func (i *ActionsRunnerGroup) ToActionsRunnerGroupOutputWithContext(ctx context.Context) ActionsRunnerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRunnerGroupOutput)
}

// ActionsRunnerGroupArrayInput is an input type that accepts ActionsRunnerGroupArray and ActionsRunnerGroupArrayOutput values.
// You can construct a concrete instance of `ActionsRunnerGroupArrayInput` via:
//
//	ActionsRunnerGroupArray{ ActionsRunnerGroupArgs{...} }
type ActionsRunnerGroupArrayInput interface {
	pulumi.Input

	ToActionsRunnerGroupArrayOutput() ActionsRunnerGroupArrayOutput
	ToActionsRunnerGroupArrayOutputWithContext(context.Context) ActionsRunnerGroupArrayOutput
}

type ActionsRunnerGroupArray []ActionsRunnerGroupInput

func (ActionsRunnerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRunnerGroup)(nil)).Elem()
}

func (i ActionsRunnerGroupArray) ToActionsRunnerGroupArrayOutput() ActionsRunnerGroupArrayOutput {
	return i.ToActionsRunnerGroupArrayOutputWithContext(context.Background())
}

func (i ActionsRunnerGroupArray) ToActionsRunnerGroupArrayOutputWithContext(ctx context.Context) ActionsRunnerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRunnerGroupArrayOutput)
}

// ActionsRunnerGroupMapInput is an input type that accepts ActionsRunnerGroupMap and ActionsRunnerGroupMapOutput values.
// You can construct a concrete instance of `ActionsRunnerGroupMapInput` via:
//
//	ActionsRunnerGroupMap{ "key": ActionsRunnerGroupArgs{...} }
type ActionsRunnerGroupMapInput interface {
	pulumi.Input

	ToActionsRunnerGroupMapOutput() ActionsRunnerGroupMapOutput
	ToActionsRunnerGroupMapOutputWithContext(context.Context) ActionsRunnerGroupMapOutput
}

type ActionsRunnerGroupMap map[string]ActionsRunnerGroupInput

func (ActionsRunnerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRunnerGroup)(nil)).Elem()
}

func (i ActionsRunnerGroupMap) ToActionsRunnerGroupMapOutput() ActionsRunnerGroupMapOutput {
	return i.ToActionsRunnerGroupMapOutputWithContext(context.Background())
}

func (i ActionsRunnerGroupMap) ToActionsRunnerGroupMapOutputWithContext(ctx context.Context) ActionsRunnerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRunnerGroupMapOutput)
}

type ActionsRunnerGroupOutput struct{ *pulumi.OutputState }

func (ActionsRunnerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRunnerGroup)(nil)).Elem()
}

func (o ActionsRunnerGroupOutput) ToActionsRunnerGroupOutput() ActionsRunnerGroupOutput {
	return o
}

func (o ActionsRunnerGroupOutput) ToActionsRunnerGroupOutputWithContext(ctx context.Context) ActionsRunnerGroupOutput {
	return o
}

func (o ActionsRunnerGroupOutput) AllowsPublicRepositories() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.BoolOutput { return v.AllowsPublicRepositories }).(pulumi.BoolOutput)
}

func (o ActionsRunnerGroupOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

func (o ActionsRunnerGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o ActionsRunnerGroupOutput) Inherited() pulumi.BoolOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.BoolOutput { return v.Inherited }).(pulumi.BoolOutput)
}

func (o ActionsRunnerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ActionsRunnerGroupOutput) RunnersUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.StringOutput { return v.RunnersUrl }).(pulumi.StringOutput)
}

func (o ActionsRunnerGroupOutput) SelectedRepositoriesUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.StringOutput { return v.SelectedRepositoriesUrl }).(pulumi.StringOutput)
}

func (o ActionsRunnerGroupOutput) SelectedRepositoryIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.IntArrayOutput { return v.SelectedRepositoryIds }).(pulumi.IntArrayOutput)
}

func (o ActionsRunnerGroupOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRunnerGroup) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type ActionsRunnerGroupArrayOutput struct{ *pulumi.OutputState }

func (ActionsRunnerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRunnerGroup)(nil)).Elem()
}

func (o ActionsRunnerGroupArrayOutput) ToActionsRunnerGroupArrayOutput() ActionsRunnerGroupArrayOutput {
	return o
}

func (o ActionsRunnerGroupArrayOutput) ToActionsRunnerGroupArrayOutputWithContext(ctx context.Context) ActionsRunnerGroupArrayOutput {
	return o
}

func (o ActionsRunnerGroupArrayOutput) Index(i pulumi.IntInput) ActionsRunnerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionsRunnerGroup {
		return vs[0].([]*ActionsRunnerGroup)[vs[1].(int)]
	}).(ActionsRunnerGroupOutput)
}

type ActionsRunnerGroupMapOutput struct{ *pulumi.OutputState }

func (ActionsRunnerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRunnerGroup)(nil)).Elem()
}

func (o ActionsRunnerGroupMapOutput) ToActionsRunnerGroupMapOutput() ActionsRunnerGroupMapOutput {
	return o
}

func (o ActionsRunnerGroupMapOutput) ToActionsRunnerGroupMapOutputWithContext(ctx context.Context) ActionsRunnerGroupMapOutput {
	return o
}

func (o ActionsRunnerGroupMapOutput) MapIndex(k pulumi.StringInput) ActionsRunnerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionsRunnerGroup {
		return vs[0].(map[string]*ActionsRunnerGroup)[vs[1].(string)]
	}).(ActionsRunnerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRunnerGroupInput)(nil)).Elem(), &ActionsRunnerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRunnerGroupArrayInput)(nil)).Elem(), ActionsRunnerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRunnerGroupMapInput)(nil)).Elem(), ActionsRunnerGroupMap{})
	pulumi.RegisterOutputType(ActionsRunnerGroupOutput{})
	pulumi.RegisterOutputType(ActionsRunnerGroupArrayOutput{})
	pulumi.RegisterOutputType(ActionsRunnerGroupMapOutput{})
}
