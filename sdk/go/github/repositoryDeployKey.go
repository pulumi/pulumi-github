// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryDeployKey struct {
	pulumi.CustomResourceState

	Etag       pulumi.StringOutput  `pulumi:"etag"`
	Key        pulumi.StringOutput  `pulumi:"key"`
	ReadOnly   pulumi.BoolPtrOutput `pulumi:"readOnly"`
	Repository pulumi.StringOutput  `pulumi:"repository"`
	Title      pulumi.StringOutput  `pulumi:"title"`
}

// NewRepositoryDeployKey registers a new resource with the given unique name, arguments, and options.
func NewRepositoryDeployKey(ctx *pulumi.Context,
	name string, args *RepositoryDeployKeyArgs, opts ...pulumi.ResourceOption) (*RepositoryDeployKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource RepositoryDeployKey
	err := ctx.RegisterResource("github:index/repositoryDeployKey:RepositoryDeployKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryDeployKey gets an existing RepositoryDeployKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryDeployKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryDeployKeyState, opts ...pulumi.ResourceOption) (*RepositoryDeployKey, error) {
	var resource RepositoryDeployKey
	err := ctx.ReadResource("github:index/repositoryDeployKey:RepositoryDeployKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryDeployKey resources.
type repositoryDeployKeyState struct {
	Etag       *string `pulumi:"etag"`
	Key        *string `pulumi:"key"`
	ReadOnly   *bool   `pulumi:"readOnly"`
	Repository *string `pulumi:"repository"`
	Title      *string `pulumi:"title"`
}

type RepositoryDeployKeyState struct {
	Etag       pulumi.StringPtrInput
	Key        pulumi.StringPtrInput
	ReadOnly   pulumi.BoolPtrInput
	Repository pulumi.StringPtrInput
	Title      pulumi.StringPtrInput
}

func (RepositoryDeployKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryDeployKeyState)(nil)).Elem()
}

type repositoryDeployKeyArgs struct {
	Key        string `pulumi:"key"`
	ReadOnly   *bool  `pulumi:"readOnly"`
	Repository string `pulumi:"repository"`
	Title      string `pulumi:"title"`
}

// The set of arguments for constructing a RepositoryDeployKey resource.
type RepositoryDeployKeyArgs struct {
	Key        pulumi.StringInput
	ReadOnly   pulumi.BoolPtrInput
	Repository pulumi.StringInput
	Title      pulumi.StringInput
}

func (RepositoryDeployKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryDeployKeyArgs)(nil)).Elem()
}

type RepositoryDeployKeyInput interface {
	pulumi.Input

	ToRepositoryDeployKeyOutput() RepositoryDeployKeyOutput
	ToRepositoryDeployKeyOutputWithContext(ctx context.Context) RepositoryDeployKeyOutput
}

func (*RepositoryDeployKey) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDeployKey)(nil)).Elem()
}

func (i *RepositoryDeployKey) ToRepositoryDeployKeyOutput() RepositoryDeployKeyOutput {
	return i.ToRepositoryDeployKeyOutputWithContext(context.Background())
}

func (i *RepositoryDeployKey) ToRepositoryDeployKeyOutputWithContext(ctx context.Context) RepositoryDeployKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDeployKeyOutput)
}

// RepositoryDeployKeyArrayInput is an input type that accepts RepositoryDeployKeyArray and RepositoryDeployKeyArrayOutput values.
// You can construct a concrete instance of `RepositoryDeployKeyArrayInput` via:
//
//	RepositoryDeployKeyArray{ RepositoryDeployKeyArgs{...} }
type RepositoryDeployKeyArrayInput interface {
	pulumi.Input

	ToRepositoryDeployKeyArrayOutput() RepositoryDeployKeyArrayOutput
	ToRepositoryDeployKeyArrayOutputWithContext(context.Context) RepositoryDeployKeyArrayOutput
}

type RepositoryDeployKeyArray []RepositoryDeployKeyInput

func (RepositoryDeployKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryDeployKey)(nil)).Elem()
}

func (i RepositoryDeployKeyArray) ToRepositoryDeployKeyArrayOutput() RepositoryDeployKeyArrayOutput {
	return i.ToRepositoryDeployKeyArrayOutputWithContext(context.Background())
}

func (i RepositoryDeployKeyArray) ToRepositoryDeployKeyArrayOutputWithContext(ctx context.Context) RepositoryDeployKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDeployKeyArrayOutput)
}

// RepositoryDeployKeyMapInput is an input type that accepts RepositoryDeployKeyMap and RepositoryDeployKeyMapOutput values.
// You can construct a concrete instance of `RepositoryDeployKeyMapInput` via:
//
//	RepositoryDeployKeyMap{ "key": RepositoryDeployKeyArgs{...} }
type RepositoryDeployKeyMapInput interface {
	pulumi.Input

	ToRepositoryDeployKeyMapOutput() RepositoryDeployKeyMapOutput
	ToRepositoryDeployKeyMapOutputWithContext(context.Context) RepositoryDeployKeyMapOutput
}

type RepositoryDeployKeyMap map[string]RepositoryDeployKeyInput

func (RepositoryDeployKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryDeployKey)(nil)).Elem()
}

func (i RepositoryDeployKeyMap) ToRepositoryDeployKeyMapOutput() RepositoryDeployKeyMapOutput {
	return i.ToRepositoryDeployKeyMapOutputWithContext(context.Background())
}

func (i RepositoryDeployKeyMap) ToRepositoryDeployKeyMapOutputWithContext(ctx context.Context) RepositoryDeployKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryDeployKeyMapOutput)
}

type RepositoryDeployKeyOutput struct{ *pulumi.OutputState }

func (RepositoryDeployKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryDeployKey)(nil)).Elem()
}

func (o RepositoryDeployKeyOutput) ToRepositoryDeployKeyOutput() RepositoryDeployKeyOutput {
	return o
}

func (o RepositoryDeployKeyOutput) ToRepositoryDeployKeyOutputWithContext(ctx context.Context) RepositoryDeployKeyOutput {
	return o
}

func (o RepositoryDeployKeyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryDeployKey) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o RepositoryDeployKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryDeployKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o RepositoryDeployKeyOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryDeployKey) pulumi.BoolPtrOutput { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o RepositoryDeployKeyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryDeployKey) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryDeployKeyOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryDeployKey) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type RepositoryDeployKeyArrayOutput struct{ *pulumi.OutputState }

func (RepositoryDeployKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryDeployKey)(nil)).Elem()
}

func (o RepositoryDeployKeyArrayOutput) ToRepositoryDeployKeyArrayOutput() RepositoryDeployKeyArrayOutput {
	return o
}

func (o RepositoryDeployKeyArrayOutput) ToRepositoryDeployKeyArrayOutputWithContext(ctx context.Context) RepositoryDeployKeyArrayOutput {
	return o
}

func (o RepositoryDeployKeyArrayOutput) Index(i pulumi.IntInput) RepositoryDeployKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryDeployKey {
		return vs[0].([]*RepositoryDeployKey)[vs[1].(int)]
	}).(RepositoryDeployKeyOutput)
}

type RepositoryDeployKeyMapOutput struct{ *pulumi.OutputState }

func (RepositoryDeployKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryDeployKey)(nil)).Elem()
}

func (o RepositoryDeployKeyMapOutput) ToRepositoryDeployKeyMapOutput() RepositoryDeployKeyMapOutput {
	return o
}

func (o RepositoryDeployKeyMapOutput) ToRepositoryDeployKeyMapOutputWithContext(ctx context.Context) RepositoryDeployKeyMapOutput {
	return o
}

func (o RepositoryDeployKeyMapOutput) MapIndex(k pulumi.StringInput) RepositoryDeployKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryDeployKey {
		return vs[0].(map[string]*RepositoryDeployKey)[vs[1].(string)]
	}).(RepositoryDeployKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDeployKeyInput)(nil)).Elem(), &RepositoryDeployKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDeployKeyArrayInput)(nil)).Elem(), RepositoryDeployKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryDeployKeyMapInput)(nil)).Elem(), RepositoryDeployKeyMap{})
	pulumi.RegisterOutputType(RepositoryDeployKeyOutput{})
	pulumi.RegisterOutputType(RepositoryDeployKeyArrayOutput{})
	pulumi.RegisterOutputType(RepositoryDeployKeyMapOutput{})
}
