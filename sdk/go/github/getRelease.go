// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetRelease(ctx *pulumi.Context, args *GetReleaseArgs, opts ...pulumi.InvokeOption) (*GetReleaseResult, error) {
	var rv GetReleaseResult
	err := ctx.Invoke("github:index/getRelease:getRelease", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRelease.
type GetReleaseArgs struct {
	Owner      string  `pulumi:"owner"`
	ReleaseId  *int    `pulumi:"releaseId"`
	ReleaseTag *string `pulumi:"releaseTag"`
	Repository string  `pulumi:"repository"`
	RetrieveBy string  `pulumi:"retrieveBy"`
}

// A collection of values returned by getRelease.
type GetReleaseResult struct {
	AssertsUrl string `pulumi:"assertsUrl"`
	Body       string `pulumi:"body"`
	CreatedAt  string `pulumi:"createdAt"`
	Draft      bool   `pulumi:"draft"`
	HtmlUrl    string `pulumi:"htmlUrl"`
	// The provider-assigned unique ID for this managed resource.
	Id              string  `pulumi:"id"`
	Name            string  `pulumi:"name"`
	Owner           string  `pulumi:"owner"`
	Prerelease      bool    `pulumi:"prerelease"`
	PublishedAt     string  `pulumi:"publishedAt"`
	ReleaseId       *int    `pulumi:"releaseId"`
	ReleaseTag      *string `pulumi:"releaseTag"`
	Repository      string  `pulumi:"repository"`
	RetrieveBy      string  `pulumi:"retrieveBy"`
	TarballUrl      string  `pulumi:"tarballUrl"`
	TargetCommitish string  `pulumi:"targetCommitish"`
	UploadUrl       string  `pulumi:"uploadUrl"`
	Url             string  `pulumi:"url"`
	ZipballUrl      string  `pulumi:"zipballUrl"`
}

func GetReleaseOutput(ctx *pulumi.Context, args GetReleaseOutputArgs, opts ...pulumi.InvokeOption) GetReleaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReleaseResult, error) {
			args := v.(GetReleaseArgs)
			r, err := GetRelease(ctx, &args, opts...)
			var s GetReleaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReleaseResultOutput)
}

// A collection of arguments for invoking getRelease.
type GetReleaseOutputArgs struct {
	Owner      pulumi.StringInput    `pulumi:"owner"`
	ReleaseId  pulumi.IntPtrInput    `pulumi:"releaseId"`
	ReleaseTag pulumi.StringPtrInput `pulumi:"releaseTag"`
	Repository pulumi.StringInput    `pulumi:"repository"`
	RetrieveBy pulumi.StringInput    `pulumi:"retrieveBy"`
}

func (GetReleaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseArgs)(nil)).Elem()
}

// A collection of values returned by getRelease.
type GetReleaseResultOutput struct{ *pulumi.OutputState }

func (GetReleaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReleaseResult)(nil)).Elem()
}

func (o GetReleaseResultOutput) ToGetReleaseResultOutput() GetReleaseResultOutput {
	return o
}

func (o GetReleaseResultOutput) ToGetReleaseResultOutputWithContext(ctx context.Context) GetReleaseResultOutput {
	return o
}

func (o GetReleaseResultOutput) AssertsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.AssertsUrl }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Body }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Draft() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReleaseResult) bool { return v.Draft }).(pulumi.BoolOutput)
}

func (o GetReleaseResultOutput) HtmlUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.HtmlUrl }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReleaseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Owner }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Prerelease() pulumi.BoolOutput {
	return o.ApplyT(func(v GetReleaseResult) bool { return v.Prerelease }).(pulumi.BoolOutput)
}

func (o GetReleaseResultOutput) PublishedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.PublishedAt }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) ReleaseId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetReleaseResult) *int { return v.ReleaseId }).(pulumi.IntPtrOutput)
}

func (o GetReleaseResultOutput) ReleaseTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReleaseResult) *string { return v.ReleaseTag }).(pulumi.StringPtrOutput)
}

func (o GetReleaseResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Repository }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) RetrieveBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.RetrieveBy }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) TarballUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.TarballUrl }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) TargetCommitish() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.TargetCommitish }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) UploadUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.UploadUrl }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.Url }).(pulumi.StringOutput)
}

func (o GetReleaseResultOutput) ZipballUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetReleaseResult) string { return v.ZipballUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReleaseResultOutput{})
}
