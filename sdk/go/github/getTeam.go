// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTeam(ctx *pulumi.Context, args *LookupTeamArgs, opts ...pulumi.InvokeOption) (*LookupTeamResult, error) {
	var rv LookupTeamResult
	err := ctx.Invoke("github:index/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type LookupTeamArgs struct {
	MembershipType *string `pulumi:"membershipType"`
	Slug           string  `pulumi:"slug"`
}

// A collection of values returned by getTeam.
type LookupTeamResult struct {
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id             string   `pulumi:"id"`
	Members        []string `pulumi:"members"`
	MembershipType *string  `pulumi:"membershipType"`
	Name           string   `pulumi:"name"`
	NodeId         string   `pulumi:"nodeId"`
	Permission     string   `pulumi:"permission"`
	Privacy        string   `pulumi:"privacy"`
	Repositories   []string `pulumi:"repositories"`
	Slug           string   `pulumi:"slug"`
}

func LookupTeamOutput(ctx *pulumi.Context, args LookupTeamOutputArgs, opts ...pulumi.InvokeOption) LookupTeamResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTeamResult, error) {
			args := v.(LookupTeamArgs)
			r, err := LookupTeam(ctx, &args, opts...)
			var s LookupTeamResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type LookupTeamOutputArgs struct {
	MembershipType pulumi.StringPtrInput `pulumi:"membershipType"`
	Slug           pulumi.StringInput    `pulumi:"slug"`
}

func (LookupTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type LookupTeamResultOutput struct{ *pulumi.OutputState }

func (LookupTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTeamResult)(nil)).Elem()
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutput() LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) ToLookupTeamResultOutputWithContext(ctx context.Context) LookupTeamResultOutput {
	return o
}

func (o LookupTeamResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []string { return v.Members }).(pulumi.StringArrayOutput)
}

func (o LookupTeamResultOutput) MembershipType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTeamResult) *string { return v.MembershipType }).(pulumi.StringPtrOutput)
}

func (o LookupTeamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.NodeId }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Permission }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) Privacy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Privacy }).(pulumi.StringOutput)
}

func (o LookupTeamResultOutput) Repositories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTeamResult) []string { return v.Repositories }).(pulumi.StringArrayOutput)
}

func (o LookupTeamResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTeamResult) string { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTeamResultOutput{})
}
