// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages relationships between teams and organization roles
// in your GitHub organization. This works on predefined roles, and custom roles, where the latter is an Enterprise feature.
//
// Creating this resource assigns the role to a team.
//
// The organization role and team must both belong to the same organization
// on GitHub.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test_team, err := github.NewTeam(ctx, "test-team", &github.TeamArgs{
//				Name: pulumi.String("test-team"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = github.NewOrganizationRoleTeamAssignment(ctx, "test-team-role-assignment", &github.OrganizationRoleTeamAssignmentArgs{
//				TeamSlug: test_team.Slug,
//				RoleId:   pulumi.String("8132"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GitHub Team Organization Role Assignment can be imported using an ID made up of `team_slug:role_id`
//
// ```sh
// $ pulumi import github:index/organizationRoleTeamAssignment:OrganizationRoleTeamAssignment role_assignment test-team:8132
// ```
type OrganizationRoleTeamAssignment struct {
	pulumi.CustomResourceState

	// The GitHub organization role id
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// The GitHub team slug
	TeamSlug pulumi.StringOutput `pulumi:"teamSlug"`
}

// NewOrganizationRoleTeamAssignment registers a new resource with the given unique name, arguments, and options.
func NewOrganizationRoleTeamAssignment(ctx *pulumi.Context,
	name string, args *OrganizationRoleTeamAssignmentArgs, opts ...pulumi.ResourceOption) (*OrganizationRoleTeamAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.TeamSlug == nil {
		return nil, errors.New("invalid value for required argument 'TeamSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationRoleTeamAssignment
	err := ctx.RegisterResource("github:index/organizationRoleTeamAssignment:OrganizationRoleTeamAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationRoleTeamAssignment gets an existing OrganizationRoleTeamAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationRoleTeamAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationRoleTeamAssignmentState, opts ...pulumi.ResourceOption) (*OrganizationRoleTeamAssignment, error) {
	var resource OrganizationRoleTeamAssignment
	err := ctx.ReadResource("github:index/organizationRoleTeamAssignment:OrganizationRoleTeamAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationRoleTeamAssignment resources.
type organizationRoleTeamAssignmentState struct {
	// The GitHub organization role id
	RoleId *string `pulumi:"roleId"`
	// The GitHub team slug
	TeamSlug *string `pulumi:"teamSlug"`
}

type OrganizationRoleTeamAssignmentState struct {
	// The GitHub organization role id
	RoleId pulumi.StringPtrInput
	// The GitHub team slug
	TeamSlug pulumi.StringPtrInput
}

func (OrganizationRoleTeamAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleTeamAssignmentState)(nil)).Elem()
}

type organizationRoleTeamAssignmentArgs struct {
	// The GitHub organization role id
	RoleId string `pulumi:"roleId"`
	// The GitHub team slug
	TeamSlug string `pulumi:"teamSlug"`
}

// The set of arguments for constructing a OrganizationRoleTeamAssignment resource.
type OrganizationRoleTeamAssignmentArgs struct {
	// The GitHub organization role id
	RoleId pulumi.StringInput
	// The GitHub team slug
	TeamSlug pulumi.StringInput
}

func (OrganizationRoleTeamAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleTeamAssignmentArgs)(nil)).Elem()
}

type OrganizationRoleTeamAssignmentInput interface {
	pulumi.Input

	ToOrganizationRoleTeamAssignmentOutput() OrganizationRoleTeamAssignmentOutput
	ToOrganizationRoleTeamAssignmentOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentOutput
}

func (*OrganizationRoleTeamAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (i *OrganizationRoleTeamAssignment) ToOrganizationRoleTeamAssignmentOutput() OrganizationRoleTeamAssignmentOutput {
	return i.ToOrganizationRoleTeamAssignmentOutputWithContext(context.Background())
}

func (i *OrganizationRoleTeamAssignment) ToOrganizationRoleTeamAssignmentOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamAssignmentOutput)
}

// OrganizationRoleTeamAssignmentArrayInput is an input type that accepts OrganizationRoleTeamAssignmentArray and OrganizationRoleTeamAssignmentArrayOutput values.
// You can construct a concrete instance of `OrganizationRoleTeamAssignmentArrayInput` via:
//
//	OrganizationRoleTeamAssignmentArray{ OrganizationRoleTeamAssignmentArgs{...} }
type OrganizationRoleTeamAssignmentArrayInput interface {
	pulumi.Input

	ToOrganizationRoleTeamAssignmentArrayOutput() OrganizationRoleTeamAssignmentArrayOutput
	ToOrganizationRoleTeamAssignmentArrayOutputWithContext(context.Context) OrganizationRoleTeamAssignmentArrayOutput
}

type OrganizationRoleTeamAssignmentArray []OrganizationRoleTeamAssignmentInput

func (OrganizationRoleTeamAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (i OrganizationRoleTeamAssignmentArray) ToOrganizationRoleTeamAssignmentArrayOutput() OrganizationRoleTeamAssignmentArrayOutput {
	return i.ToOrganizationRoleTeamAssignmentArrayOutputWithContext(context.Background())
}

func (i OrganizationRoleTeamAssignmentArray) ToOrganizationRoleTeamAssignmentArrayOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamAssignmentArrayOutput)
}

// OrganizationRoleTeamAssignmentMapInput is an input type that accepts OrganizationRoleTeamAssignmentMap and OrganizationRoleTeamAssignmentMapOutput values.
// You can construct a concrete instance of `OrganizationRoleTeamAssignmentMapInput` via:
//
//	OrganizationRoleTeamAssignmentMap{ "key": OrganizationRoleTeamAssignmentArgs{...} }
type OrganizationRoleTeamAssignmentMapInput interface {
	pulumi.Input

	ToOrganizationRoleTeamAssignmentMapOutput() OrganizationRoleTeamAssignmentMapOutput
	ToOrganizationRoleTeamAssignmentMapOutputWithContext(context.Context) OrganizationRoleTeamAssignmentMapOutput
}

type OrganizationRoleTeamAssignmentMap map[string]OrganizationRoleTeamAssignmentInput

func (OrganizationRoleTeamAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (i OrganizationRoleTeamAssignmentMap) ToOrganizationRoleTeamAssignmentMapOutput() OrganizationRoleTeamAssignmentMapOutput {
	return i.ToOrganizationRoleTeamAssignmentMapOutputWithContext(context.Background())
}

func (i OrganizationRoleTeamAssignmentMap) ToOrganizationRoleTeamAssignmentMapOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleTeamAssignmentMapOutput)
}

type OrganizationRoleTeamAssignmentOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (o OrganizationRoleTeamAssignmentOutput) ToOrganizationRoleTeamAssignmentOutput() OrganizationRoleTeamAssignmentOutput {
	return o
}

func (o OrganizationRoleTeamAssignmentOutput) ToOrganizationRoleTeamAssignmentOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentOutput {
	return o
}

// The GitHub organization role id
func (o OrganizationRoleTeamAssignmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRoleTeamAssignment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// The GitHub team slug
func (o OrganizationRoleTeamAssignmentOutput) TeamSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRoleTeamAssignment) pulumi.StringOutput { return v.TeamSlug }).(pulumi.StringOutput)
}

type OrganizationRoleTeamAssignmentArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (o OrganizationRoleTeamAssignmentArrayOutput) ToOrganizationRoleTeamAssignmentArrayOutput() OrganizationRoleTeamAssignmentArrayOutput {
	return o
}

func (o OrganizationRoleTeamAssignmentArrayOutput) ToOrganizationRoleTeamAssignmentArrayOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentArrayOutput {
	return o
}

func (o OrganizationRoleTeamAssignmentArrayOutput) Index(i pulumi.IntInput) OrganizationRoleTeamAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationRoleTeamAssignment {
		return vs[0].([]*OrganizationRoleTeamAssignment)[vs[1].(int)]
	}).(OrganizationRoleTeamAssignmentOutput)
}

type OrganizationRoleTeamAssignmentMapOutput struct{ *pulumi.OutputState }

func (OrganizationRoleTeamAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleTeamAssignment)(nil)).Elem()
}

func (o OrganizationRoleTeamAssignmentMapOutput) ToOrganizationRoleTeamAssignmentMapOutput() OrganizationRoleTeamAssignmentMapOutput {
	return o
}

func (o OrganizationRoleTeamAssignmentMapOutput) ToOrganizationRoleTeamAssignmentMapOutputWithContext(ctx context.Context) OrganizationRoleTeamAssignmentMapOutput {
	return o
}

func (o OrganizationRoleTeamAssignmentMapOutput) MapIndex(k pulumi.StringInput) OrganizationRoleTeamAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationRoleTeamAssignment {
		return vs[0].(map[string]*OrganizationRoleTeamAssignment)[vs[1].(string)]
	}).(OrganizationRoleTeamAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamAssignmentInput)(nil)).Elem(), &OrganizationRoleTeamAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamAssignmentArrayInput)(nil)).Elem(), OrganizationRoleTeamAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleTeamAssignmentMapInput)(nil)).Elem(), OrganizationRoleTeamAssignmentMap{})
	pulumi.RegisterOutputType(OrganizationRoleTeamAssignmentOutput{})
	pulumi.RegisterOutputType(OrganizationRoleTeamAssignmentArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRoleTeamAssignmentMapOutput{})
}
