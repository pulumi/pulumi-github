// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v5/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides GitHub issue labels resource.
//
// This resource allows you to create and manage issue labels within your
// GitHub organization.
//
// > Note: IssueLabels cannot be used in conjunction with IssueLabel or they will fight over what your policy should be.
//
// This resource is authoritative. For adding a label to a repo in a non-authoritative manner, use IssueLabel instead.
//
// If you change the case of a label's name, its' color, or description, this resource will edit the existing label to match the new values. However, if you change the name of a label, this resource will create a new label with the new name and delete the old label. Beware that this will remove the label from any issues it was previously attached to.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v5/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewIssueLabels(ctx, "testRepo", &github.IssueLabelsArgs{
//				Labels: github.IssueLabelsLabelArray{
//					&github.IssueLabelsLabelArgs{
//						Color: pulumi.String("FF0000"),
//						Name:  pulumi.String("Urgent"),
//					},
//					&github.IssueLabelsLabelArgs{
//						Color: pulumi.String("FF0000"),
//						Name:  pulumi.String("Critical"),
//					},
//				},
//				Repository: pulumi.String("test-repo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GitHub Issue Labels can be imported using the repository `name`, e.g.
//
// ```sh
//
//	$ pulumi import github:index/issueLabels:IssueLabels test_repo test_repo
//
// ```
type IssueLabels struct {
	pulumi.CustomResourceState

	// List of labels
	Labels IssueLabelsLabelArrayOutput `pulumi:"labels"`
	// The GitHub repository
	Repository pulumi.StringOutput `pulumi:"repository"`
}

// NewIssueLabels registers a new resource with the given unique name, arguments, and options.
func NewIssueLabels(ctx *pulumi.Context,
	name string, args *IssueLabelsArgs, opts ...pulumi.ResourceOption) (*IssueLabels, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IssueLabels
	err := ctx.RegisterResource("github:index/issueLabels:IssueLabels", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssueLabels gets an existing IssueLabels resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssueLabels(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueLabelsState, opts ...pulumi.ResourceOption) (*IssueLabels, error) {
	var resource IssueLabels
	err := ctx.ReadResource("github:index/issueLabels:IssueLabels", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssueLabels resources.
type issueLabelsState struct {
	// List of labels
	Labels []IssueLabelsLabel `pulumi:"labels"`
	// The GitHub repository
	Repository *string `pulumi:"repository"`
}

type IssueLabelsState struct {
	// List of labels
	Labels IssueLabelsLabelArrayInput
	// The GitHub repository
	Repository pulumi.StringPtrInput
}

func (IssueLabelsState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueLabelsState)(nil)).Elem()
}

type issueLabelsArgs struct {
	// List of labels
	Labels []IssueLabelsLabel `pulumi:"labels"`
	// The GitHub repository
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a IssueLabels resource.
type IssueLabelsArgs struct {
	// List of labels
	Labels IssueLabelsLabelArrayInput
	// The GitHub repository
	Repository pulumi.StringInput
}

func (IssueLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueLabelsArgs)(nil)).Elem()
}

type IssueLabelsInput interface {
	pulumi.Input

	ToIssueLabelsOutput() IssueLabelsOutput
	ToIssueLabelsOutputWithContext(ctx context.Context) IssueLabelsOutput
}

func (*IssueLabels) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueLabels)(nil)).Elem()
}

func (i *IssueLabels) ToIssueLabelsOutput() IssueLabelsOutput {
	return i.ToIssueLabelsOutputWithContext(context.Background())
}

func (i *IssueLabels) ToIssueLabelsOutputWithContext(ctx context.Context) IssueLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelsOutput)
}

// IssueLabelsArrayInput is an input type that accepts IssueLabelsArray and IssueLabelsArrayOutput values.
// You can construct a concrete instance of `IssueLabelsArrayInput` via:
//
//	IssueLabelsArray{ IssueLabelsArgs{...} }
type IssueLabelsArrayInput interface {
	pulumi.Input

	ToIssueLabelsArrayOutput() IssueLabelsArrayOutput
	ToIssueLabelsArrayOutputWithContext(context.Context) IssueLabelsArrayOutput
}

type IssueLabelsArray []IssueLabelsInput

func (IssueLabelsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueLabels)(nil)).Elem()
}

func (i IssueLabelsArray) ToIssueLabelsArrayOutput() IssueLabelsArrayOutput {
	return i.ToIssueLabelsArrayOutputWithContext(context.Background())
}

func (i IssueLabelsArray) ToIssueLabelsArrayOutputWithContext(ctx context.Context) IssueLabelsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelsArrayOutput)
}

// IssueLabelsMapInput is an input type that accepts IssueLabelsMap and IssueLabelsMapOutput values.
// You can construct a concrete instance of `IssueLabelsMapInput` via:
//
//	IssueLabelsMap{ "key": IssueLabelsArgs{...} }
type IssueLabelsMapInput interface {
	pulumi.Input

	ToIssueLabelsMapOutput() IssueLabelsMapOutput
	ToIssueLabelsMapOutputWithContext(context.Context) IssueLabelsMapOutput
}

type IssueLabelsMap map[string]IssueLabelsInput

func (IssueLabelsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueLabels)(nil)).Elem()
}

func (i IssueLabelsMap) ToIssueLabelsMapOutput() IssueLabelsMapOutput {
	return i.ToIssueLabelsMapOutputWithContext(context.Background())
}

func (i IssueLabelsMap) ToIssueLabelsMapOutputWithContext(ctx context.Context) IssueLabelsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueLabelsMapOutput)
}

type IssueLabelsOutput struct{ *pulumi.OutputState }

func (IssueLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueLabels)(nil)).Elem()
}

func (o IssueLabelsOutput) ToIssueLabelsOutput() IssueLabelsOutput {
	return o
}

func (o IssueLabelsOutput) ToIssueLabelsOutputWithContext(ctx context.Context) IssueLabelsOutput {
	return o
}

// List of labels
func (o IssueLabelsOutput) Labels() IssueLabelsLabelArrayOutput {
	return o.ApplyT(func(v *IssueLabels) IssueLabelsLabelArrayOutput { return v.Labels }).(IssueLabelsLabelArrayOutput)
}

// The GitHub repository
func (o IssueLabelsOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueLabels) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

type IssueLabelsArrayOutput struct{ *pulumi.OutputState }

func (IssueLabelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IssueLabels)(nil)).Elem()
}

func (o IssueLabelsArrayOutput) ToIssueLabelsArrayOutput() IssueLabelsArrayOutput {
	return o
}

func (o IssueLabelsArrayOutput) ToIssueLabelsArrayOutputWithContext(ctx context.Context) IssueLabelsArrayOutput {
	return o
}

func (o IssueLabelsArrayOutput) Index(i pulumi.IntInput) IssueLabelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IssueLabels {
		return vs[0].([]*IssueLabels)[vs[1].(int)]
	}).(IssueLabelsOutput)
}

type IssueLabelsMapOutput struct{ *pulumi.OutputState }

func (IssueLabelsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IssueLabels)(nil)).Elem()
}

func (o IssueLabelsMapOutput) ToIssueLabelsMapOutput() IssueLabelsMapOutput {
	return o
}

func (o IssueLabelsMapOutput) ToIssueLabelsMapOutputWithContext(ctx context.Context) IssueLabelsMapOutput {
	return o
}

func (o IssueLabelsMapOutput) MapIndex(k pulumi.StringInput) IssueLabelsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IssueLabels {
		return vs[0].(map[string]*IssueLabels)[vs[1].(string)]
	}).(IssueLabelsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssueLabelsInput)(nil)).Elem(), &IssueLabels{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueLabelsArrayInput)(nil)).Elem(), IssueLabelsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IssueLabelsMapInput)(nil)).Elem(), IssueLabelsMap{})
	pulumi.RegisterOutputType(IssueLabelsOutput{})
	pulumi.RegisterOutputType(IssueLabelsArrayOutput{})
	pulumi.RegisterOutputType(IssueLabelsMapOutput{})
}
