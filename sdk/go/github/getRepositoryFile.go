// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source allows you to read files within a
// GitHub repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v5/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.LookupRepositoryFile(ctx, &github.LookupRepositoryFileArgs{
//				Repository: github_repository.Foo.Name,
//				Branch:     pulumi.StringRef("main"),
//				File:       ".gitignore",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepositoryFile(ctx *pulumi.Context, args *LookupRepositoryFileArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryFileResult, error) {
	var rv LookupRepositoryFileResult
	err := ctx.Invoke("github:index/getRepositoryFile:getRepositoryFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryFile.
type LookupRepositoryFileArgs struct {
	// Git branch (if omitted, the default repository branch is used, which is usually `main`)
	// The branch must already exist; it will not be created if it does not already exist.
	Branch *string `pulumi:"branch"`
	// The path of the file to manage.
	File string `pulumi:"file"`
	// The repository to read the file from. If an unqualified repo name (without an owner) is passed, the owner will be inferred from the owner of the token used to execute the plan. If a name of the type "owner/repo" (with a slash in the middle) is passed, the owner will be as specified and not the owner of the token.
	Repository string `pulumi:"repository"`
}

// A collection of values returned by getRepositoryFile.
type LookupRepositoryFileResult struct {
	Branch *string `pulumi:"branch"`
	// Committer author name.
	CommitAuthor string `pulumi:"commitAuthor"`
	// Committer email address.
	CommitEmail string `pulumi:"commitEmail"`
	// Commit message when file was last updated.
	CommitMessage string `pulumi:"commitMessage"`
	// The SHA of the commit that modified the file.
	CommitSha string `pulumi:"commitSha"`
	// The file content.
	Content string `pulumi:"content"`
	File    string `pulumi:"file"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Repository string `pulumi:"repository"`
	// The SHA blob of the file.
	Sha string `pulumi:"sha"`
}

func LookupRepositoryFileOutput(ctx *pulumi.Context, args LookupRepositoryFileOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryFileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryFileResult, error) {
			args := v.(LookupRepositoryFileArgs)
			r, err := LookupRepositoryFile(ctx, &args, opts...)
			var s LookupRepositoryFileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryFileResultOutput)
}

// A collection of arguments for invoking getRepositoryFile.
type LookupRepositoryFileOutputArgs struct {
	// Git branch (if omitted, the default repository branch is used, which is usually `main`)
	// The branch must already exist; it will not be created if it does not already exist.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The path of the file to manage.
	File pulumi.StringInput `pulumi:"file"`
	// The repository to read the file from. If an unqualified repo name (without an owner) is passed, the owner will be inferred from the owner of the token used to execute the plan. If a name of the type "owner/repo" (with a slash in the middle) is passed, the owner will be as specified and not the owner of the token.
	Repository pulumi.StringInput `pulumi:"repository"`
}

func (LookupRepositoryFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryFileArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryFile.
type LookupRepositoryFileResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryFileResult)(nil)).Elem()
}

func (o LookupRepositoryFileResultOutput) ToLookupRepositoryFileResultOutput() LookupRepositoryFileResultOutput {
	return o
}

func (o LookupRepositoryFileResultOutput) ToLookupRepositoryFileResultOutputWithContext(ctx context.Context) LookupRepositoryFileResultOutput {
	return o
}

func (o LookupRepositoryFileResultOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Committer author name.
func (o LookupRepositoryFileResultOutput) CommitAuthor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.CommitAuthor }).(pulumi.StringOutput)
}

// Committer email address.
func (o LookupRepositoryFileResultOutput) CommitEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.CommitEmail }).(pulumi.StringOutput)
}

// Commit message when file was last updated.
func (o LookupRepositoryFileResultOutput) CommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.CommitMessage }).(pulumi.StringOutput)
}

// The SHA of the commit that modified the file.
func (o LookupRepositoryFileResultOutput) CommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.CommitSha }).(pulumi.StringOutput)
}

// The file content.
func (o LookupRepositoryFileResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Content }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.File }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryFileResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Repository }).(pulumi.StringOutput)
}

// The SHA blob of the file.
func (o LookupRepositoryFileResultOutput) Sha() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryFileResult) string { return v.Sha }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryFileResultOutput{})
}
