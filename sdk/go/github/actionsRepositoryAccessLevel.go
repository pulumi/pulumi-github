// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v5/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to set the access level of a non-public repositories actions and reusable workflows for use in other repositories.
// You must have admin access to a repository to use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v5/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := github.NewRepository(ctx, "example", &github.RepositoryArgs{
//				Visibility: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = github.NewActionsRepositoryAccessLevel(ctx, "test", &github.ActionsRepositoryAccessLevelArgs{
//				AccessLevel: pulumi.String("user"),
//				Repository:  example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # This resource can be imported using the name of the GitHub repository
//
// ```sh
//
//	$ pulumi import github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel test <github_repository_name>
//
// ```
type ActionsRepositoryAccessLevel struct {
	pulumi.CustomResourceState

	// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
	AccessLevel pulumi.StringOutput `pulumi:"accessLevel"`
	// The GitHub repository
	Repository pulumi.StringOutput `pulumi:"repository"`
}

// NewActionsRepositoryAccessLevel registers a new resource with the given unique name, arguments, and options.
func NewActionsRepositoryAccessLevel(ctx *pulumi.Context,
	name string, args *ActionsRepositoryAccessLevelArgs, opts ...pulumi.ResourceOption) (*ActionsRepositoryAccessLevel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessLevel == nil {
		return nil, errors.New("invalid value for required argument 'AccessLevel'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionsRepositoryAccessLevel
	err := ctx.RegisterResource("github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionsRepositoryAccessLevel gets an existing ActionsRepositoryAccessLevel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionsRepositoryAccessLevel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionsRepositoryAccessLevelState, opts ...pulumi.ResourceOption) (*ActionsRepositoryAccessLevel, error) {
	var resource ActionsRepositoryAccessLevel
	err := ctx.ReadResource("github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionsRepositoryAccessLevel resources.
type actionsRepositoryAccessLevelState struct {
	// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
	AccessLevel *string `pulumi:"accessLevel"`
	// The GitHub repository
	Repository *string `pulumi:"repository"`
}

type ActionsRepositoryAccessLevelState struct {
	// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
	AccessLevel pulumi.StringPtrInput
	// The GitHub repository
	Repository pulumi.StringPtrInput
}

func (ActionsRepositoryAccessLevelState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRepositoryAccessLevelState)(nil)).Elem()
}

type actionsRepositoryAccessLevelArgs struct {
	// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
	AccessLevel string `pulumi:"accessLevel"`
	// The GitHub repository
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a ActionsRepositoryAccessLevel resource.
type ActionsRepositoryAccessLevelArgs struct {
	// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
	AccessLevel pulumi.StringInput
	// The GitHub repository
	Repository pulumi.StringInput
}

func (ActionsRepositoryAccessLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRepositoryAccessLevelArgs)(nil)).Elem()
}

type ActionsRepositoryAccessLevelInput interface {
	pulumi.Input

	ToActionsRepositoryAccessLevelOutput() ActionsRepositoryAccessLevelOutput
	ToActionsRepositoryAccessLevelOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelOutput
}

func (*ActionsRepositoryAccessLevel) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (i *ActionsRepositoryAccessLevel) ToActionsRepositoryAccessLevelOutput() ActionsRepositoryAccessLevelOutput {
	return i.ToActionsRepositoryAccessLevelOutputWithContext(context.Background())
}

func (i *ActionsRepositoryAccessLevel) ToActionsRepositoryAccessLevelOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryAccessLevelOutput)
}

// ActionsRepositoryAccessLevelArrayInput is an input type that accepts ActionsRepositoryAccessLevelArray and ActionsRepositoryAccessLevelArrayOutput values.
// You can construct a concrete instance of `ActionsRepositoryAccessLevelArrayInput` via:
//
//	ActionsRepositoryAccessLevelArray{ ActionsRepositoryAccessLevelArgs{...} }
type ActionsRepositoryAccessLevelArrayInput interface {
	pulumi.Input

	ToActionsRepositoryAccessLevelArrayOutput() ActionsRepositoryAccessLevelArrayOutput
	ToActionsRepositoryAccessLevelArrayOutputWithContext(context.Context) ActionsRepositoryAccessLevelArrayOutput
}

type ActionsRepositoryAccessLevelArray []ActionsRepositoryAccessLevelInput

func (ActionsRepositoryAccessLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (i ActionsRepositoryAccessLevelArray) ToActionsRepositoryAccessLevelArrayOutput() ActionsRepositoryAccessLevelArrayOutput {
	return i.ToActionsRepositoryAccessLevelArrayOutputWithContext(context.Background())
}

func (i ActionsRepositoryAccessLevelArray) ToActionsRepositoryAccessLevelArrayOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryAccessLevelArrayOutput)
}

// ActionsRepositoryAccessLevelMapInput is an input type that accepts ActionsRepositoryAccessLevelMap and ActionsRepositoryAccessLevelMapOutput values.
// You can construct a concrete instance of `ActionsRepositoryAccessLevelMapInput` via:
//
//	ActionsRepositoryAccessLevelMap{ "key": ActionsRepositoryAccessLevelArgs{...} }
type ActionsRepositoryAccessLevelMapInput interface {
	pulumi.Input

	ToActionsRepositoryAccessLevelMapOutput() ActionsRepositoryAccessLevelMapOutput
	ToActionsRepositoryAccessLevelMapOutputWithContext(context.Context) ActionsRepositoryAccessLevelMapOutput
}

type ActionsRepositoryAccessLevelMap map[string]ActionsRepositoryAccessLevelInput

func (ActionsRepositoryAccessLevelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (i ActionsRepositoryAccessLevelMap) ToActionsRepositoryAccessLevelMapOutput() ActionsRepositoryAccessLevelMapOutput {
	return i.ToActionsRepositoryAccessLevelMapOutputWithContext(context.Background())
}

func (i ActionsRepositoryAccessLevelMap) ToActionsRepositoryAccessLevelMapOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryAccessLevelMapOutput)
}

type ActionsRepositoryAccessLevelOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryAccessLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (o ActionsRepositoryAccessLevelOutput) ToActionsRepositoryAccessLevelOutput() ActionsRepositoryAccessLevelOutput {
	return o
}

func (o ActionsRepositoryAccessLevelOutput) ToActionsRepositoryAccessLevelOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelOutput {
	return o
}

// Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
func (o ActionsRepositoryAccessLevelOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRepositoryAccessLevel) pulumi.StringOutput { return v.AccessLevel }).(pulumi.StringOutput)
}

// The GitHub repository
func (o ActionsRepositoryAccessLevelOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRepositoryAccessLevel) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

type ActionsRepositoryAccessLevelArrayOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryAccessLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (o ActionsRepositoryAccessLevelArrayOutput) ToActionsRepositoryAccessLevelArrayOutput() ActionsRepositoryAccessLevelArrayOutput {
	return o
}

func (o ActionsRepositoryAccessLevelArrayOutput) ToActionsRepositoryAccessLevelArrayOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelArrayOutput {
	return o
}

func (o ActionsRepositoryAccessLevelArrayOutput) Index(i pulumi.IntInput) ActionsRepositoryAccessLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionsRepositoryAccessLevel {
		return vs[0].([]*ActionsRepositoryAccessLevel)[vs[1].(int)]
	}).(ActionsRepositoryAccessLevelOutput)
}

type ActionsRepositoryAccessLevelMapOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryAccessLevelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRepositoryAccessLevel)(nil)).Elem()
}

func (o ActionsRepositoryAccessLevelMapOutput) ToActionsRepositoryAccessLevelMapOutput() ActionsRepositoryAccessLevelMapOutput {
	return o
}

func (o ActionsRepositoryAccessLevelMapOutput) ToActionsRepositoryAccessLevelMapOutputWithContext(ctx context.Context) ActionsRepositoryAccessLevelMapOutput {
	return o
}

func (o ActionsRepositoryAccessLevelMapOutput) MapIndex(k pulumi.StringInput) ActionsRepositoryAccessLevelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionsRepositoryAccessLevel {
		return vs[0].(map[string]*ActionsRepositoryAccessLevel)[vs[1].(string)]
	}).(ActionsRepositoryAccessLevelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryAccessLevelInput)(nil)).Elem(), &ActionsRepositoryAccessLevel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryAccessLevelArrayInput)(nil)).Elem(), ActionsRepositoryAccessLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryAccessLevelMapInput)(nil)).Elem(), ActionsRepositoryAccessLevelMap{})
	pulumi.RegisterOutputType(ActionsRepositoryAccessLevelOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryAccessLevelArrayOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryAccessLevelMapOutput{})
}
