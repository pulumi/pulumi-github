// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package repos

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Protects a GitHub branch.
// 
// This resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users and teams, can also be configured.
type BranchProtection struct {
	s *pulumi.ResourceState
}

// NewBranchProtection registers a new resource with the given unique name, arguments, and options.
func NewBranchProtection(ctx *pulumi.Context,
	name string, args *BranchProtectionArgs, opts ...pulumi.ResourceOpt) (*BranchProtection, error) {
	if args == nil || args.Branch == nil {
		return nil, errors.New("missing required argument 'Branch'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["branch"] = nil
		inputs["enforceAdmins"] = nil
		inputs["repository"] = nil
		inputs["requiredPullRequestReviews"] = nil
		inputs["requiredStatusChecks"] = nil
		inputs["restrictions"] = nil
	} else {
		inputs["branch"] = args.Branch
		inputs["enforceAdmins"] = args.EnforceAdmins
		inputs["repository"] = args.Repository
		inputs["requiredPullRequestReviews"] = args.RequiredPullRequestReviews
		inputs["requiredStatusChecks"] = args.RequiredStatusChecks
		inputs["restrictions"] = args.Restrictions
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("github:repos/branchProtection:BranchProtection", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BranchProtection{s: s}, nil
}

// GetBranchProtection gets an existing BranchProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchProtection(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BranchProtectionState, opts ...pulumi.ResourceOpt) (*BranchProtection, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["branch"] = state.Branch
		inputs["enforceAdmins"] = state.EnforceAdmins
		inputs["etag"] = state.Etag
		inputs["repository"] = state.Repository
		inputs["requiredPullRequestReviews"] = state.RequiredPullRequestReviews
		inputs["requiredStatusChecks"] = state.RequiredStatusChecks
		inputs["restrictions"] = state.Restrictions
	}
	s, err := ctx.ReadResource("github:repos/branchProtection:BranchProtection", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BranchProtection{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BranchProtection) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BranchProtection) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The Git branch to protect.
func (r *BranchProtection) Branch() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["branch"])
}

// Boolean, setting this to `true` enforces status checks for repository administrators.
func (r *BranchProtection) EnforceAdmins() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enforceAdmins"])
}

func (r *BranchProtection) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The GitHub repository name.
func (r *BranchProtection) Repository() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repository"])
}

// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
func (r *BranchProtection) RequiredPullRequestReviews() *pulumi.Output {
	return r.s.State["requiredPullRequestReviews"]
}

// Enforce restrictions for required status checks. See Required Status Checks below for details.
func (r *BranchProtection) RequiredStatusChecks() *pulumi.Output {
	return r.s.State["requiredStatusChecks"]
}

// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
func (r *BranchProtection) Restrictions() *pulumi.Output {
	return r.s.State["restrictions"]
}

// Input properties used for looking up and filtering BranchProtection resources.
type BranchProtectionState struct {
	// The Git branch to protect.
	Branch interface{}
	// Boolean, setting this to `true` enforces status checks for repository administrators.
	EnforceAdmins interface{}
	Etag interface{}
	// The GitHub repository name.
	Repository interface{}
	// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
	RequiredPullRequestReviews interface{}
	// Enforce restrictions for required status checks. See Required Status Checks below for details.
	RequiredStatusChecks interface{}
	// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
	Restrictions interface{}
}

// The set of arguments for constructing a BranchProtection resource.
type BranchProtectionArgs struct {
	// The Git branch to protect.
	Branch interface{}
	// Boolean, setting this to `true` enforces status checks for repository administrators.
	EnforceAdmins interface{}
	// The GitHub repository name.
	Repository interface{}
	// Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.
	RequiredPullRequestReviews interface{}
	// Enforce restrictions for required status checks. See Required Status Checks below for details.
	RequiredStatusChecks interface{}
	// Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.
	Restrictions interface{}
}
