// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package repos

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a GitHub repository collaborator resource.
// 
// This resource allows you to add/remove collaborators from repositories in your
// organization. Collaborators can have explicit (and differing levels of) read,
// write, or administrator access to specific repositories in your organization,
// without giving the user full organization membership.
// 
// When applied, an invitation will be sent to the user to become a collaborator
// on a repository. When destroyed, either the invitation will be cancelled or the
// collaborator will be removed from the repository.
// 
// Further documentation on GitHub collaborators:
// 
// - [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)
// - [Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)
type Collaborator struct {
	s *pulumi.ResourceState
}

// NewCollaborator registers a new resource with the given unique name, arguments, and options.
func NewCollaborator(ctx *pulumi.Context,
	name string, args *CollaboratorArgs, opts ...pulumi.ResourceOpt) (*Collaborator, error) {
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["permission"] = nil
		inputs["repository"] = nil
		inputs["username"] = nil
	} else {
		inputs["permission"] = args.Permission
		inputs["repository"] = args.Repository
		inputs["username"] = args.Username
	}
	inputs["invitationId"] = nil
	s, err := ctx.RegisterResource("github:repos/collaborator:Collaborator", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Collaborator{s: s}, nil
}

// GetCollaborator gets an existing Collaborator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollaborator(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CollaboratorState, opts ...pulumi.ResourceOpt) (*Collaborator, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["invitationId"] = state.InvitationId
		inputs["permission"] = state.Permission
		inputs["repository"] = state.Repository
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("github:repos/collaborator:Collaborator", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Collaborator{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Collaborator) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Collaborator) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// ID of the invitation to be used in `github_user_invitation_accepter`
func (r *Collaborator) InvitationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["invitationId"])
}

// The permission of the outside collaborator for the repository.
// Must be one of `pull`, `push`, or `admin`. Defaults to `push`.
func (r *Collaborator) Permission() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["permission"])
}

// The GitHub repository
func (r *Collaborator) Repository() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repository"])
}

// The user to add to the repository as a collaborator.
func (r *Collaborator) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering Collaborator resources.
type CollaboratorState struct {
	// ID of the invitation to be used in `github_user_invitation_accepter`
	InvitationId interface{}
	// The permission of the outside collaborator for the repository.
	// Must be one of `pull`, `push`, or `admin`. Defaults to `push`.
	Permission interface{}
	// The GitHub repository
	Repository interface{}
	// The user to add to the repository as a collaborator.
	Username interface{}
}

// The set of arguments for constructing a Collaborator resource.
type CollaboratorArgs struct {
	// The permission of the outside collaborator for the repository.
	// Must be one of `pull`, `push`, or `admin`. Defaults to `push`.
	Permission interface{}
	// The GitHub repository
	Repository interface{}
	// The user to add to the repository as a collaborator.
	Username interface{}
}
