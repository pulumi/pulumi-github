// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package repos

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a GitHub repository deploy key resource.
// 
// A deploy key is an SSH key that is stored on your server and grants
// access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user
// account.
// 
// This resource allows you to add/remove repository deploy keys.
// 
// Further documentation on GitHub repository deploy keys:
// - [About deploy keys](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys)
type DeployKey struct {
	s *pulumi.ResourceState
}

// NewDeployKey registers a new resource with the given unique name, arguments, and options.
func NewDeployKey(ctx *pulumi.Context,
	name string, args *DeployKeyArgs, opts ...pulumi.ResourceOpt) (*DeployKey, error) {
	if args == nil || args.Key == nil {
		return nil, errors.New("missing required argument 'Key'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["key"] = nil
		inputs["readOnly"] = nil
		inputs["repository"] = nil
		inputs["title"] = nil
	} else {
		inputs["key"] = args.Key
		inputs["readOnly"] = args.ReadOnly
		inputs["repository"] = args.Repository
		inputs["title"] = args.Title
	}
	inputs["etag"] = nil
	s, err := ctx.RegisterResource("github:repos/deployKey:DeployKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeployKey{s: s}, nil
}

// GetDeployKey gets an existing DeployKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeployKeyState, opts ...pulumi.ResourceOpt) (*DeployKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["etag"] = state.Etag
		inputs["key"] = state.Key
		inputs["readOnly"] = state.ReadOnly
		inputs["repository"] = state.Repository
		inputs["title"] = state.Title
	}
	s, err := ctx.ReadResource("github:repos/deployKey:DeployKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DeployKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DeployKey) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DeployKey) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *DeployKey) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// A ssh key.
func (r *DeployKey) Key() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["key"])
}

// A boolean qualifying the key to be either read only or read/write.
func (r *DeployKey) ReadOnly() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["readOnly"])
}

// Name of the GitHub repository.
func (r *DeployKey) Repository() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["repository"])
}

// A title.
func (r *DeployKey) Title() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["title"])
}

// Input properties used for looking up and filtering DeployKey resources.
type DeployKeyState struct {
	Etag interface{}
	// A ssh key.
	Key interface{}
	// A boolean qualifying the key to be either read only or read/write.
	ReadOnly interface{}
	// Name of the GitHub repository.
	Repository interface{}
	// A title.
	Title interface{}
}

// The set of arguments for constructing a DeployKey resource.
type DeployKeyArgs struct {
	// A ssh key.
	Key interface{}
	// A boolean qualifying the key to be either read only or read/write.
	ReadOnly interface{}
	// Name of the GitHub repository.
	Repository interface{}
	// A title.
	Title interface{}
}
