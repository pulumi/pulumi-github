// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package repos

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// This resource allows you to create and manage repositories within your
// GitHub organization.
// 
// This resource cannot currently be used to manage *personal* repositories,
// outside of organizations.
type Repository struct {
	s *pulumi.ResourceState
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowMergeCommit"] = nil
		inputs["allowRebaseMerge"] = nil
		inputs["allowSquashMerge"] = nil
		inputs["archived"] = nil
		inputs["autoInit"] = nil
		inputs["defaultBranch"] = nil
		inputs["description"] = nil
		inputs["gitignoreTemplate"] = nil
		inputs["hasDownloads"] = nil
		inputs["hasIssues"] = nil
		inputs["hasProjects"] = nil
		inputs["hasWiki"] = nil
		inputs["homepageUrl"] = nil
		inputs["licenseTemplate"] = nil
		inputs["name"] = nil
		inputs["private"] = nil
		inputs["topics"] = nil
	} else {
		inputs["allowMergeCommit"] = args.AllowMergeCommit
		inputs["allowRebaseMerge"] = args.AllowRebaseMerge
		inputs["allowSquashMerge"] = args.AllowSquashMerge
		inputs["archived"] = args.Archived
		inputs["autoInit"] = args.AutoInit
		inputs["defaultBranch"] = args.DefaultBranch
		inputs["description"] = args.Description
		inputs["gitignoreTemplate"] = args.GitignoreTemplate
		inputs["hasDownloads"] = args.HasDownloads
		inputs["hasIssues"] = args.HasIssues
		inputs["hasProjects"] = args.HasProjects
		inputs["hasWiki"] = args.HasWiki
		inputs["homepageUrl"] = args.HomepageUrl
		inputs["licenseTemplate"] = args.LicenseTemplate
		inputs["name"] = args.Name
		inputs["private"] = args.Private
		inputs["topics"] = args.Topics
	}
	inputs["etag"] = nil
	inputs["fullName"] = nil
	inputs["gitCloneUrl"] = nil
	inputs["htmlUrl"] = nil
	inputs["httpCloneUrl"] = nil
	inputs["sshCloneUrl"] = nil
	inputs["svnUrl"] = nil
	s, err := ctx.RegisterResource("github:repos/repository:Repository", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repository{s: s}, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepositoryState, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowMergeCommit"] = state.AllowMergeCommit
		inputs["allowRebaseMerge"] = state.AllowRebaseMerge
		inputs["allowSquashMerge"] = state.AllowSquashMerge
		inputs["archived"] = state.Archived
		inputs["autoInit"] = state.AutoInit
		inputs["defaultBranch"] = state.DefaultBranch
		inputs["description"] = state.Description
		inputs["etag"] = state.Etag
		inputs["fullName"] = state.FullName
		inputs["gitCloneUrl"] = state.GitCloneUrl
		inputs["gitignoreTemplate"] = state.GitignoreTemplate
		inputs["hasDownloads"] = state.HasDownloads
		inputs["hasIssues"] = state.HasIssues
		inputs["hasProjects"] = state.HasProjects
		inputs["hasWiki"] = state.HasWiki
		inputs["homepageUrl"] = state.HomepageUrl
		inputs["htmlUrl"] = state.HtmlUrl
		inputs["httpCloneUrl"] = state.HttpCloneUrl
		inputs["licenseTemplate"] = state.LicenseTemplate
		inputs["name"] = state.Name
		inputs["private"] = state.Private
		inputs["sshCloneUrl"] = state.SshCloneUrl
		inputs["svnUrl"] = state.SvnUrl
		inputs["topics"] = state.Topics
	}
	s, err := ctx.ReadResource("github:repos/repository:Repository", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Repository{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Repository) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Repository) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Set to `false` to disable merge commits on the repository.
func (r *Repository) AllowMergeCommit() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowMergeCommit"])
}

// Set to `false` to disable rebase merges on the repository.
func (r *Repository) AllowRebaseMerge() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowRebaseMerge"])
}

// Set to `false` to disable squash merges on the repository.
func (r *Repository) AllowSquashMerge() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allowSquashMerge"])
}

// Specifies if the repository should be archived. Defaults to `false`.
func (r *Repository) Archived() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["archived"])
}

// Set to `true` to produce an initial commit in the repository.
func (r *Repository) AutoInit() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoInit"])
}

// The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
func (r *Repository) DefaultBranch() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultBranch"])
}

// A description of the repository.
func (r *Repository) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Repository) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// A string of the form "orgname/reponame".
func (r *Repository) FullName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fullName"])
}

// URL that can be provided to `git clone` to clone the
// repository anonymously via the git protocol.
func (r *Repository) GitCloneUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gitCloneUrl"])
}

// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
func (r *Repository) GitignoreTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gitignoreTemplate"])
}

// Set to `true` to enable the (deprecated)
// downloads features on the repository.
func (r *Repository) HasDownloads() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hasDownloads"])
}

// Set to `true` to enable the GitHub Issues features
// on the repository.
func (r *Repository) HasIssues() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hasIssues"])
}

// Set to `true` to enable the GitHub Projects features on the repository. Per the github [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
func (r *Repository) HasProjects() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hasProjects"])
}

// Set to `true` to enable the GitHub Wiki features on
// the repository.
func (r *Repository) HasWiki() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["hasWiki"])
}

// URL of a page describing the project.
func (r *Repository) HomepageUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["homepageUrl"])
}

// URL to the repository on the web.
func (r *Repository) HtmlUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["htmlUrl"])
}

// URL that can be provided to `git clone` to clone the
// repository via HTTPS.
func (r *Repository) HttpCloneUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["httpCloneUrl"])
}

// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
func (r *Repository) LicenseTemplate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["licenseTemplate"])
}

// The name of the repository.
func (r *Repository) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Set to `true` to create a private repository.
// Repositories are created as public (e.g. open source) by default.
func (r *Repository) Private() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["private"])
}

// URL that can be provided to `git clone` to clone the
// repository via SSH.
func (r *Repository) SshCloneUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sshCloneUrl"])
}

// URL that can be provided to `svn checkout` to check out
// the repository via GitHub's Subversion protocol emulation.
func (r *Repository) SvnUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["svnUrl"])
}

// The list of topics of the repository.
func (r *Repository) Topics() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["topics"])
}

// Input properties used for looking up and filtering Repository resources.
type RepositoryState struct {
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit interface{}
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge interface{}
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge interface{}
	// Specifies if the repository should be archived. Defaults to `false`.
	Archived interface{}
	// Set to `true` to produce an initial commit in the repository.
	AutoInit interface{}
	// The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	DefaultBranch interface{}
	// A description of the repository.
	Description interface{}
	Etag interface{}
	// A string of the form "orgname/reponame".
	FullName interface{}
	// URL that can be provided to `git clone` to clone the
	// repository anonymously via the git protocol.
	GitCloneUrl interface{}
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate interface{}
	// Set to `true` to enable the (deprecated)
	// downloads features on the repository.
	HasDownloads interface{}
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues interface{}
	// Set to `true` to enable the GitHub Projects features on the repository. Per the github [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects interface{}
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki interface{}
	// URL of a page describing the project.
	HomepageUrl interface{}
	// URL to the repository on the web.
	HtmlUrl interface{}
	// URL that can be provided to `git clone` to clone the
	// repository via HTTPS.
	HttpCloneUrl interface{}
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate interface{}
	// The name of the repository.
	Name interface{}
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	Private interface{}
	// URL that can be provided to `git clone` to clone the
	// repository via SSH.
	SshCloneUrl interface{}
	// URL that can be provided to `svn checkout` to check out
	// the repository via GitHub's Subversion protocol emulation.
	SvnUrl interface{}
	// The list of topics of the repository.
	Topics interface{}
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Set to `false` to disable merge commits on the repository.
	AllowMergeCommit interface{}
	// Set to `false` to disable rebase merges on the repository.
	AllowRebaseMerge interface{}
	// Set to `false` to disable squash merges on the repository.
	AllowSquashMerge interface{}
	// Specifies if the repository should be archived. Defaults to `false`.
	Archived interface{}
	// Set to `true` to produce an initial commit in the repository.
	AutoInit interface{}
	// The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,
	// and after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the
	// initial repository creation and create the target branch inside of the repository prior to setting this attribute.
	DefaultBranch interface{}
	// A description of the repository.
	Description interface{}
	// Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, "Haskell".
	GitignoreTemplate interface{}
	// Set to `true` to enable the (deprecated)
	// downloads features on the repository.
	HasDownloads interface{}
	// Set to `true` to enable the GitHub Issues features
	// on the repository.
	HasIssues interface{}
	// Set to `true` to enable the GitHub Projects features on the repository. Per the github [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.
	HasProjects interface{}
	// Set to `true` to enable the GitHub Wiki features on
	// the repository.
	HasWiki interface{}
	// URL of a page describing the project.
	HomepageUrl interface{}
	// Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, "mit" or "mpl-2.0".
	LicenseTemplate interface{}
	// The name of the repository.
	Name interface{}
	// Set to `true` to create a private repository.
	// Repositories are created as public (e.g. open source) by default.
	Private interface{}
	// The list of topics of the repository.
	Topics interface{}
}
