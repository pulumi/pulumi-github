// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryCollaborator struct {
	pulumi.CustomResourceState

	InvitationId              pulumi.StringOutput    `pulumi:"invitationId"`
	Permission                pulumi.StringPtrOutput `pulumi:"permission"`
	PermissionDiffSuppression pulumi.BoolPtrOutput   `pulumi:"permissionDiffSuppression"`
	Repository                pulumi.StringOutput    `pulumi:"repository"`
	Username                  pulumi.StringOutput    `pulumi:"username"`
}

// NewRepositoryCollaborator registers a new resource with the given unique name, arguments, and options.
func NewRepositoryCollaborator(ctx *pulumi.Context,
	name string, args *RepositoryCollaboratorArgs, opts ...pulumi.ResourceOption) (*RepositoryCollaborator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource RepositoryCollaborator
	err := ctx.RegisterResource("github:index/repositoryCollaborator:RepositoryCollaborator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryCollaborator gets an existing RepositoryCollaborator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryCollaborator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryCollaboratorState, opts ...pulumi.ResourceOption) (*RepositoryCollaborator, error) {
	var resource RepositoryCollaborator
	err := ctx.ReadResource("github:index/repositoryCollaborator:RepositoryCollaborator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryCollaborator resources.
type repositoryCollaboratorState struct {
	InvitationId              *string `pulumi:"invitationId"`
	Permission                *string `pulumi:"permission"`
	PermissionDiffSuppression *bool   `pulumi:"permissionDiffSuppression"`
	Repository                *string `pulumi:"repository"`
	Username                  *string `pulumi:"username"`
}

type RepositoryCollaboratorState struct {
	InvitationId              pulumi.StringPtrInput
	Permission                pulumi.StringPtrInput
	PermissionDiffSuppression pulumi.BoolPtrInput
	Repository                pulumi.StringPtrInput
	Username                  pulumi.StringPtrInput
}

func (RepositoryCollaboratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCollaboratorState)(nil)).Elem()
}

type repositoryCollaboratorArgs struct {
	Permission                *string `pulumi:"permission"`
	PermissionDiffSuppression *bool   `pulumi:"permissionDiffSuppression"`
	Repository                string  `pulumi:"repository"`
	Username                  string  `pulumi:"username"`
}

// The set of arguments for constructing a RepositoryCollaborator resource.
type RepositoryCollaboratorArgs struct {
	Permission                pulumi.StringPtrInput
	PermissionDiffSuppression pulumi.BoolPtrInput
	Repository                pulumi.StringInput
	Username                  pulumi.StringInput
}

func (RepositoryCollaboratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryCollaboratorArgs)(nil)).Elem()
}

type RepositoryCollaboratorInput interface {
	pulumi.Input

	ToRepositoryCollaboratorOutput() RepositoryCollaboratorOutput
	ToRepositoryCollaboratorOutputWithContext(ctx context.Context) RepositoryCollaboratorOutput
}

func (*RepositoryCollaborator) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCollaborator)(nil)).Elem()
}

func (i *RepositoryCollaborator) ToRepositoryCollaboratorOutput() RepositoryCollaboratorOutput {
	return i.ToRepositoryCollaboratorOutputWithContext(context.Background())
}

func (i *RepositoryCollaborator) ToRepositoryCollaboratorOutputWithContext(ctx context.Context) RepositoryCollaboratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorOutput)
}

// RepositoryCollaboratorArrayInput is an input type that accepts RepositoryCollaboratorArray and RepositoryCollaboratorArrayOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorArrayInput` via:
//
//	RepositoryCollaboratorArray{ RepositoryCollaboratorArgs{...} }
type RepositoryCollaboratorArrayInput interface {
	pulumi.Input

	ToRepositoryCollaboratorArrayOutput() RepositoryCollaboratorArrayOutput
	ToRepositoryCollaboratorArrayOutputWithContext(context.Context) RepositoryCollaboratorArrayOutput
}

type RepositoryCollaboratorArray []RepositoryCollaboratorInput

func (RepositoryCollaboratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCollaborator)(nil)).Elem()
}

func (i RepositoryCollaboratorArray) ToRepositoryCollaboratorArrayOutput() RepositoryCollaboratorArrayOutput {
	return i.ToRepositoryCollaboratorArrayOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorArray) ToRepositoryCollaboratorArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorArrayOutput)
}

// RepositoryCollaboratorMapInput is an input type that accepts RepositoryCollaboratorMap and RepositoryCollaboratorMapOutput values.
// You can construct a concrete instance of `RepositoryCollaboratorMapInput` via:
//
//	RepositoryCollaboratorMap{ "key": RepositoryCollaboratorArgs{...} }
type RepositoryCollaboratorMapInput interface {
	pulumi.Input

	ToRepositoryCollaboratorMapOutput() RepositoryCollaboratorMapOutput
	ToRepositoryCollaboratorMapOutputWithContext(context.Context) RepositoryCollaboratorMapOutput
}

type RepositoryCollaboratorMap map[string]RepositoryCollaboratorInput

func (RepositoryCollaboratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCollaborator)(nil)).Elem()
}

func (i RepositoryCollaboratorMap) ToRepositoryCollaboratorMapOutput() RepositoryCollaboratorMapOutput {
	return i.ToRepositoryCollaboratorMapOutputWithContext(context.Background())
}

func (i RepositoryCollaboratorMap) ToRepositoryCollaboratorMapOutputWithContext(ctx context.Context) RepositoryCollaboratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCollaboratorMapOutput)
}

type RepositoryCollaboratorOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCollaborator)(nil)).Elem()
}

func (o RepositoryCollaboratorOutput) ToRepositoryCollaboratorOutput() RepositoryCollaboratorOutput {
	return o
}

func (o RepositoryCollaboratorOutput) ToRepositoryCollaboratorOutputWithContext(ctx context.Context) RepositoryCollaboratorOutput {
	return o
}

func (o RepositoryCollaboratorOutput) InvitationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCollaborator) pulumi.StringOutput { return v.InvitationId }).(pulumi.StringOutput)
}

func (o RepositoryCollaboratorOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCollaborator) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

func (o RepositoryCollaboratorOutput) PermissionDiffSuppression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryCollaborator) pulumi.BoolPtrOutput { return v.PermissionDiffSuppression }).(pulumi.BoolPtrOutput)
}

func (o RepositoryCollaboratorOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCollaborator) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryCollaboratorOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryCollaborator) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type RepositoryCollaboratorArrayOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryCollaborator)(nil)).Elem()
}

func (o RepositoryCollaboratorArrayOutput) ToRepositoryCollaboratorArrayOutput() RepositoryCollaboratorArrayOutput {
	return o
}

func (o RepositoryCollaboratorArrayOutput) ToRepositoryCollaboratorArrayOutputWithContext(ctx context.Context) RepositoryCollaboratorArrayOutput {
	return o
}

func (o RepositoryCollaboratorArrayOutput) Index(i pulumi.IntInput) RepositoryCollaboratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryCollaborator {
		return vs[0].([]*RepositoryCollaborator)[vs[1].(int)]
	}).(RepositoryCollaboratorOutput)
}

type RepositoryCollaboratorMapOutput struct{ *pulumi.OutputState }

func (RepositoryCollaboratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryCollaborator)(nil)).Elem()
}

func (o RepositoryCollaboratorMapOutput) ToRepositoryCollaboratorMapOutput() RepositoryCollaboratorMapOutput {
	return o
}

func (o RepositoryCollaboratorMapOutput) ToRepositoryCollaboratorMapOutputWithContext(ctx context.Context) RepositoryCollaboratorMapOutput {
	return o
}

func (o RepositoryCollaboratorMapOutput) MapIndex(k pulumi.StringInput) RepositoryCollaboratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryCollaborator {
		return vs[0].(map[string]*RepositoryCollaborator)[vs[1].(string)]
	}).(RepositoryCollaboratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorInput)(nil)).Elem(), &RepositoryCollaborator{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorArrayInput)(nil)).Elem(), RepositoryCollaboratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCollaboratorMapInput)(nil)).Elem(), RepositoryCollaboratorMap{})
	pulumi.RegisterOutputType(RepositoryCollaboratorOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorArrayOutput{})
	pulumi.RegisterOutputType(RepositoryCollaboratorMapOutput{})
}
