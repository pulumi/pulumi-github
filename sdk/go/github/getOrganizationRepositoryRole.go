// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Lookup a custom organization repository role.
//
// > **Note**: Custom organization repository roles are currently only available in GitHub Enterprise Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.LookupOrganizationRepositoryRole(ctx, &github.LookupOrganizationRepositoryRoleArgs{
//				RoleId: 1234,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOrganizationRepositoryRole(ctx *pulumi.Context, args *LookupOrganizationRepositoryRoleArgs, opts ...pulumi.InvokeOption) (*LookupOrganizationRepositoryRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrganizationRepositoryRoleResult
	err := ctx.Invoke("github:index/getOrganizationRepositoryRole:getOrganizationRepositoryRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOrganizationRepositoryRole.
type LookupOrganizationRepositoryRoleArgs struct {
	// The ID of the organization repository role.
	RoleId int `pulumi:"roleId"`
}

// A collection of values returned by getOrganizationRepositoryRole.
type LookupOrganizationRepositoryRoleResult struct {
	// The system role from which this role inherits permissions.
	BaseRole string `pulumi:"baseRole"`
	// The description of the organization repository role.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the organization repository role.
	Name string `pulumi:"name"`
	// The permissions included in this role.
	Permissions []string `pulumi:"permissions"`
	// The ID of the organization repository role.
	RoleId int `pulumi:"roleId"`
}

func LookupOrganizationRepositoryRoleOutput(ctx *pulumi.Context, args LookupOrganizationRepositoryRoleOutputArgs, opts ...pulumi.InvokeOption) LookupOrganizationRepositoryRoleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOrganizationRepositoryRoleResultOutput, error) {
			args := v.(LookupOrganizationRepositoryRoleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("github:index/getOrganizationRepositoryRole:getOrganizationRepositoryRole", args, LookupOrganizationRepositoryRoleResultOutput{}, options).(LookupOrganizationRepositoryRoleResultOutput), nil
		}).(LookupOrganizationRepositoryRoleResultOutput)
}

// A collection of arguments for invoking getOrganizationRepositoryRole.
type LookupOrganizationRepositoryRoleOutputArgs struct {
	// The ID of the organization repository role.
	RoleId pulumi.IntInput `pulumi:"roleId"`
}

func (LookupOrganizationRepositoryRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationRepositoryRoleArgs)(nil)).Elem()
}

// A collection of values returned by getOrganizationRepositoryRole.
type LookupOrganizationRepositoryRoleResultOutput struct{ *pulumi.OutputState }

func (LookupOrganizationRepositoryRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationRepositoryRoleResult)(nil)).Elem()
}

func (o LookupOrganizationRepositoryRoleResultOutput) ToLookupOrganizationRepositoryRoleResultOutput() LookupOrganizationRepositoryRoleResultOutput {
	return o
}

func (o LookupOrganizationRepositoryRoleResultOutput) ToLookupOrganizationRepositoryRoleResultOutputWithContext(ctx context.Context) LookupOrganizationRepositoryRoleResultOutput {
	return o
}

// The system role from which this role inherits permissions.
func (o LookupOrganizationRepositoryRoleResultOutput) BaseRole() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) string { return v.BaseRole }).(pulumi.StringOutput)
}

// The description of the organization repository role.
func (o LookupOrganizationRepositoryRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupOrganizationRepositoryRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the organization repository role.
func (o LookupOrganizationRepositoryRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The permissions included in this role.
func (o LookupOrganizationRepositoryRoleResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The ID of the organization repository role.
func (o LookupOrganizationRepositoryRoleResultOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOrganizationRepositoryRoleResult) int { return v.RoleId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrganizationRepositoryRoleResultOutput{})
}
