// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RepositoryPullRequest struct {
	pulumi.CustomResourceState

	BaseRef        pulumi.StringOutput    `pulumi:"baseRef"`
	BaseRepository pulumi.StringOutput    `pulumi:"baseRepository"`
	BaseSha        pulumi.StringOutput    `pulumi:"baseSha"`
	Body           pulumi.StringPtrOutput `pulumi:"body"`
	Draft          pulumi.BoolOutput      `pulumi:"draft"`
	HeadRef        pulumi.StringOutput    `pulumi:"headRef"`
	HeadSha        pulumi.StringOutput    `pulumi:"headSha"`
	// List of names of labels on the PR
	Labels              pulumi.StringArrayOutput `pulumi:"labels"`
	MaintainerCanModify pulumi.BoolPtrOutput     `pulumi:"maintainerCanModify"`
	Number              pulumi.IntOutput         `pulumi:"number"`
	OpenedAt            pulumi.IntOutput         `pulumi:"openedAt"`
	// Username of the PR creator
	OpenedBy  pulumi.StringOutput    `pulumi:"openedBy"`
	Owner     pulumi.StringPtrOutput `pulumi:"owner"`
	State     pulumi.StringOutput    `pulumi:"state"`
	Title     pulumi.StringOutput    `pulumi:"title"`
	UpdatedAt pulumi.IntOutput       `pulumi:"updatedAt"`
}

// NewRepositoryPullRequest registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPullRequest(ctx *pulumi.Context,
	name string, args *RepositoryPullRequestArgs, opts ...pulumi.ResourceOption) (*RepositoryPullRequest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BaseRef == nil {
		return nil, errors.New("invalid value for required argument 'BaseRef'")
	}
	if args.BaseRepository == nil {
		return nil, errors.New("invalid value for required argument 'BaseRepository'")
	}
	if args.HeadRef == nil {
		return nil, errors.New("invalid value for required argument 'HeadRef'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource RepositoryPullRequest
	err := ctx.RegisterResource("github:index/repositoryPullRequest:RepositoryPullRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryPullRequest gets an existing RepositoryPullRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPullRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryPullRequestState, opts ...pulumi.ResourceOption) (*RepositoryPullRequest, error) {
	var resource RepositoryPullRequest
	err := ctx.ReadResource("github:index/repositoryPullRequest:RepositoryPullRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryPullRequest resources.
type repositoryPullRequestState struct {
	BaseRef        *string `pulumi:"baseRef"`
	BaseRepository *string `pulumi:"baseRepository"`
	BaseSha        *string `pulumi:"baseSha"`
	Body           *string `pulumi:"body"`
	Draft          *bool   `pulumi:"draft"`
	HeadRef        *string `pulumi:"headRef"`
	HeadSha        *string `pulumi:"headSha"`
	// List of names of labels on the PR
	Labels              []string `pulumi:"labels"`
	MaintainerCanModify *bool    `pulumi:"maintainerCanModify"`
	Number              *int     `pulumi:"number"`
	OpenedAt            *int     `pulumi:"openedAt"`
	// Username of the PR creator
	OpenedBy  *string `pulumi:"openedBy"`
	Owner     *string `pulumi:"owner"`
	State     *string `pulumi:"state"`
	Title     *string `pulumi:"title"`
	UpdatedAt *int    `pulumi:"updatedAt"`
}

type RepositoryPullRequestState struct {
	BaseRef        pulumi.StringPtrInput
	BaseRepository pulumi.StringPtrInput
	BaseSha        pulumi.StringPtrInput
	Body           pulumi.StringPtrInput
	Draft          pulumi.BoolPtrInput
	HeadRef        pulumi.StringPtrInput
	HeadSha        pulumi.StringPtrInput
	// List of names of labels on the PR
	Labels              pulumi.StringArrayInput
	MaintainerCanModify pulumi.BoolPtrInput
	Number              pulumi.IntPtrInput
	OpenedAt            pulumi.IntPtrInput
	// Username of the PR creator
	OpenedBy  pulumi.StringPtrInput
	Owner     pulumi.StringPtrInput
	State     pulumi.StringPtrInput
	Title     pulumi.StringPtrInput
	UpdatedAt pulumi.IntPtrInput
}

func (RepositoryPullRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPullRequestState)(nil)).Elem()
}

type repositoryPullRequestArgs struct {
	BaseRef             string  `pulumi:"baseRef"`
	BaseRepository      string  `pulumi:"baseRepository"`
	Body                *string `pulumi:"body"`
	HeadRef             string  `pulumi:"headRef"`
	MaintainerCanModify *bool   `pulumi:"maintainerCanModify"`
	Owner               *string `pulumi:"owner"`
	Title               string  `pulumi:"title"`
}

// The set of arguments for constructing a RepositoryPullRequest resource.
type RepositoryPullRequestArgs struct {
	BaseRef             pulumi.StringInput
	BaseRepository      pulumi.StringInput
	Body                pulumi.StringPtrInput
	HeadRef             pulumi.StringInput
	MaintainerCanModify pulumi.BoolPtrInput
	Owner               pulumi.StringPtrInput
	Title               pulumi.StringInput
}

func (RepositoryPullRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPullRequestArgs)(nil)).Elem()
}

type RepositoryPullRequestInput interface {
	pulumi.Input

	ToRepositoryPullRequestOutput() RepositoryPullRequestOutput
	ToRepositoryPullRequestOutputWithContext(ctx context.Context) RepositoryPullRequestOutput
}

func (*RepositoryPullRequest) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPullRequest)(nil)).Elem()
}

func (i *RepositoryPullRequest) ToRepositoryPullRequestOutput() RepositoryPullRequestOutput {
	return i.ToRepositoryPullRequestOutputWithContext(context.Background())
}

func (i *RepositoryPullRequest) ToRepositoryPullRequestOutputWithContext(ctx context.Context) RepositoryPullRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPullRequestOutput)
}

// RepositoryPullRequestArrayInput is an input type that accepts RepositoryPullRequestArray and RepositoryPullRequestArrayOutput values.
// You can construct a concrete instance of `RepositoryPullRequestArrayInput` via:
//
//	RepositoryPullRequestArray{ RepositoryPullRequestArgs{...} }
type RepositoryPullRequestArrayInput interface {
	pulumi.Input

	ToRepositoryPullRequestArrayOutput() RepositoryPullRequestArrayOutput
	ToRepositoryPullRequestArrayOutputWithContext(context.Context) RepositoryPullRequestArrayOutput
}

type RepositoryPullRequestArray []RepositoryPullRequestInput

func (RepositoryPullRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryPullRequest)(nil)).Elem()
}

func (i RepositoryPullRequestArray) ToRepositoryPullRequestArrayOutput() RepositoryPullRequestArrayOutput {
	return i.ToRepositoryPullRequestArrayOutputWithContext(context.Background())
}

func (i RepositoryPullRequestArray) ToRepositoryPullRequestArrayOutputWithContext(ctx context.Context) RepositoryPullRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPullRequestArrayOutput)
}

// RepositoryPullRequestMapInput is an input type that accepts RepositoryPullRequestMap and RepositoryPullRequestMapOutput values.
// You can construct a concrete instance of `RepositoryPullRequestMapInput` via:
//
//	RepositoryPullRequestMap{ "key": RepositoryPullRequestArgs{...} }
type RepositoryPullRequestMapInput interface {
	pulumi.Input

	ToRepositoryPullRequestMapOutput() RepositoryPullRequestMapOutput
	ToRepositoryPullRequestMapOutputWithContext(context.Context) RepositoryPullRequestMapOutput
}

type RepositoryPullRequestMap map[string]RepositoryPullRequestInput

func (RepositoryPullRequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryPullRequest)(nil)).Elem()
}

func (i RepositoryPullRequestMap) ToRepositoryPullRequestMapOutput() RepositoryPullRequestMapOutput {
	return i.ToRepositoryPullRequestMapOutputWithContext(context.Background())
}

func (i RepositoryPullRequestMap) ToRepositoryPullRequestMapOutputWithContext(ctx context.Context) RepositoryPullRequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPullRequestMapOutput)
}

type RepositoryPullRequestOutput struct{ *pulumi.OutputState }

func (RepositoryPullRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryPullRequest)(nil)).Elem()
}

func (o RepositoryPullRequestOutput) ToRepositoryPullRequestOutput() RepositoryPullRequestOutput {
	return o
}

func (o RepositoryPullRequestOutput) ToRepositoryPullRequestOutputWithContext(ctx context.Context) RepositoryPullRequestOutput {
	return o
}

func (o RepositoryPullRequestOutput) BaseRef() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.BaseRef }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) BaseRepository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.BaseRepository }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) BaseSha() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.BaseSha }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

func (o RepositoryPullRequestOutput) Draft() pulumi.BoolOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.BoolOutput { return v.Draft }).(pulumi.BoolOutput)
}

func (o RepositoryPullRequestOutput) HeadRef() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.HeadRef }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) HeadSha() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.HeadSha }).(pulumi.StringOutput)
}

// List of names of labels on the PR
func (o RepositoryPullRequestOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o RepositoryPullRequestOutput) MaintainerCanModify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.BoolPtrOutput { return v.MaintainerCanModify }).(pulumi.BoolPtrOutput)
}

func (o RepositoryPullRequestOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

func (o RepositoryPullRequestOutput) OpenedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.IntOutput { return v.OpenedAt }).(pulumi.IntOutput)
}

// Username of the PR creator
func (o RepositoryPullRequestOutput) OpenedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.OpenedBy }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringPtrOutput { return v.Owner }).(pulumi.StringPtrOutput)
}

func (o RepositoryPullRequestOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

func (o RepositoryPullRequestOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *RepositoryPullRequest) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type RepositoryPullRequestArrayOutput struct{ *pulumi.OutputState }

func (RepositoryPullRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryPullRequest)(nil)).Elem()
}

func (o RepositoryPullRequestArrayOutput) ToRepositoryPullRequestArrayOutput() RepositoryPullRequestArrayOutput {
	return o
}

func (o RepositoryPullRequestArrayOutput) ToRepositoryPullRequestArrayOutputWithContext(ctx context.Context) RepositoryPullRequestArrayOutput {
	return o
}

func (o RepositoryPullRequestArrayOutput) Index(i pulumi.IntInput) RepositoryPullRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryPullRequest {
		return vs[0].([]*RepositoryPullRequest)[vs[1].(int)]
	}).(RepositoryPullRequestOutput)
}

type RepositoryPullRequestMapOutput struct{ *pulumi.OutputState }

func (RepositoryPullRequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryPullRequest)(nil)).Elem()
}

func (o RepositoryPullRequestMapOutput) ToRepositoryPullRequestMapOutput() RepositoryPullRequestMapOutput {
	return o
}

func (o RepositoryPullRequestMapOutput) ToRepositoryPullRequestMapOutputWithContext(ctx context.Context) RepositoryPullRequestMapOutput {
	return o
}

func (o RepositoryPullRequestMapOutput) MapIndex(k pulumi.StringInput) RepositoryPullRequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryPullRequest {
		return vs[0].(map[string]*RepositoryPullRequest)[vs[1].(string)]
	}).(RepositoryPullRequestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPullRequestInput)(nil)).Elem(), &RepositoryPullRequest{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPullRequestArrayInput)(nil)).Elem(), RepositoryPullRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryPullRequestMapInput)(nil)).Elem(), RepositoryPullRequestMap{})
	pulumi.RegisterOutputType(RepositoryPullRequestOutput{})
	pulumi.RegisterOutputType(RepositoryPullRequestArrayOutput{})
	pulumi.RegisterOutputType(RepositoryPullRequestMapOutput{})
}
