// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a GitHub branch default resource.
//
// This resource allows you to set the default branch for a given repository.
//
// Note that use of this resource is incompatible with the `defaultBranch` option of the `Repository` resource.  Using both will result in plans always showing a diff.
//
// ## Example Usage
//
// Basic usage:
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := github.NewRepository(ctx, "example", &github.RepositoryArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("My awesome codebase"),
//				AutoInit:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			development, err := github.NewBranch(ctx, "development", &github.BranchArgs{
//				Repository: example.Name,
//				Branch:     pulumi.String("development"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = github.NewBranchDefault(ctx, "default", &github.BranchDefaultArgs{
//				Repository: example.Name,
//				Branch:     development.Branch,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// Renaming to a branch that doesn't exist:
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := github.NewRepository(ctx, "example", &github.RepositoryArgs{
//				Name:        pulumi.String("example"),
//				Description: pulumi.String("My awesome codebase"),
//				AutoInit:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = github.NewBranchDefault(ctx, "default", &github.BranchDefaultArgs{
//				Repository: example.Name,
//				Branch:     pulumi.String("development"),
//				Rename:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// GitHub Branch Defaults can be imported using an ID made up of `repository`, e.g.
//
// ```sh
// $ pulumi import github:index/branchDefault:BranchDefault branch_default my-repo
// ```
type BranchDefault struct {
	pulumi.CustomResourceState

	// The branch (e.g. `main`)
	Branch pulumi.StringOutput `pulumi:"branch"`
	Etag   pulumi.StringOutput `pulumi:"etag"`
	// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
	Rename pulumi.BoolPtrOutput `pulumi:"rename"`
	// The GitHub repository
	Repository pulumi.StringOutput `pulumi:"repository"`
}

// NewBranchDefault registers a new resource with the given unique name, arguments, and options.
func NewBranchDefault(ctx *pulumi.Context,
	name string, args *BranchDefaultArgs, opts ...pulumi.ResourceOption) (*BranchDefault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BranchDefault
	err := ctx.RegisterResource("github:index/branchDefault:BranchDefault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranchDefault gets an existing BranchDefault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchDefault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchDefaultState, opts ...pulumi.ResourceOption) (*BranchDefault, error) {
	var resource BranchDefault
	err := ctx.ReadResource("github:index/branchDefault:BranchDefault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BranchDefault resources.
type branchDefaultState struct {
	// The branch (e.g. `main`)
	Branch *string `pulumi:"branch"`
	Etag   *string `pulumi:"etag"`
	// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
	Rename *bool `pulumi:"rename"`
	// The GitHub repository
	Repository *string `pulumi:"repository"`
}

type BranchDefaultState struct {
	// The branch (e.g. `main`)
	Branch pulumi.StringPtrInput
	Etag   pulumi.StringPtrInput
	// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
	Rename pulumi.BoolPtrInput
	// The GitHub repository
	Repository pulumi.StringPtrInput
}

func (BranchDefaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchDefaultState)(nil)).Elem()
}

type branchDefaultArgs struct {
	// The branch (e.g. `main`)
	Branch string `pulumi:"branch"`
	// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
	Rename *bool `pulumi:"rename"`
	// The GitHub repository
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a BranchDefault resource.
type BranchDefaultArgs struct {
	// The branch (e.g. `main`)
	Branch pulumi.StringInput
	// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
	Rename pulumi.BoolPtrInput
	// The GitHub repository
	Repository pulumi.StringInput
}

func (BranchDefaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchDefaultArgs)(nil)).Elem()
}

type BranchDefaultInput interface {
	pulumi.Input

	ToBranchDefaultOutput() BranchDefaultOutput
	ToBranchDefaultOutputWithContext(ctx context.Context) BranchDefaultOutput
}

func (*BranchDefault) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchDefault)(nil)).Elem()
}

func (i *BranchDefault) ToBranchDefaultOutput() BranchDefaultOutput {
	return i.ToBranchDefaultOutputWithContext(context.Background())
}

func (i *BranchDefault) ToBranchDefaultOutputWithContext(ctx context.Context) BranchDefaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchDefaultOutput)
}

// BranchDefaultArrayInput is an input type that accepts BranchDefaultArray and BranchDefaultArrayOutput values.
// You can construct a concrete instance of `BranchDefaultArrayInput` via:
//
//	BranchDefaultArray{ BranchDefaultArgs{...} }
type BranchDefaultArrayInput interface {
	pulumi.Input

	ToBranchDefaultArrayOutput() BranchDefaultArrayOutput
	ToBranchDefaultArrayOutputWithContext(context.Context) BranchDefaultArrayOutput
}

type BranchDefaultArray []BranchDefaultInput

func (BranchDefaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchDefault)(nil)).Elem()
}

func (i BranchDefaultArray) ToBranchDefaultArrayOutput() BranchDefaultArrayOutput {
	return i.ToBranchDefaultArrayOutputWithContext(context.Background())
}

func (i BranchDefaultArray) ToBranchDefaultArrayOutputWithContext(ctx context.Context) BranchDefaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchDefaultArrayOutput)
}

// BranchDefaultMapInput is an input type that accepts BranchDefaultMap and BranchDefaultMapOutput values.
// You can construct a concrete instance of `BranchDefaultMapInput` via:
//
//	BranchDefaultMap{ "key": BranchDefaultArgs{...} }
type BranchDefaultMapInput interface {
	pulumi.Input

	ToBranchDefaultMapOutput() BranchDefaultMapOutput
	ToBranchDefaultMapOutputWithContext(context.Context) BranchDefaultMapOutput
}

type BranchDefaultMap map[string]BranchDefaultInput

func (BranchDefaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchDefault)(nil)).Elem()
}

func (i BranchDefaultMap) ToBranchDefaultMapOutput() BranchDefaultMapOutput {
	return i.ToBranchDefaultMapOutputWithContext(context.Background())
}

func (i BranchDefaultMap) ToBranchDefaultMapOutputWithContext(ctx context.Context) BranchDefaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchDefaultMapOutput)
}

type BranchDefaultOutput struct{ *pulumi.OutputState }

func (BranchDefaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchDefault)(nil)).Elem()
}

func (o BranchDefaultOutput) ToBranchDefaultOutput() BranchDefaultOutput {
	return o
}

func (o BranchDefaultOutput) ToBranchDefaultOutputWithContext(ctx context.Context) BranchDefaultOutput {
	return o
}

// The branch (e.g. `main`)
func (o BranchDefaultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchDefault) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

func (o BranchDefaultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchDefault) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.
func (o BranchDefaultOutput) Rename() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchDefault) pulumi.BoolPtrOutput { return v.Rename }).(pulumi.BoolPtrOutput)
}

// The GitHub repository
func (o BranchDefaultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchDefault) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

type BranchDefaultArrayOutput struct{ *pulumi.OutputState }

func (BranchDefaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchDefault)(nil)).Elem()
}

func (o BranchDefaultArrayOutput) ToBranchDefaultArrayOutput() BranchDefaultArrayOutput {
	return o
}

func (o BranchDefaultArrayOutput) ToBranchDefaultArrayOutputWithContext(ctx context.Context) BranchDefaultArrayOutput {
	return o
}

func (o BranchDefaultArrayOutput) Index(i pulumi.IntInput) BranchDefaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BranchDefault {
		return vs[0].([]*BranchDefault)[vs[1].(int)]
	}).(BranchDefaultOutput)
}

type BranchDefaultMapOutput struct{ *pulumi.OutputState }

func (BranchDefaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchDefault)(nil)).Elem()
}

func (o BranchDefaultMapOutput) ToBranchDefaultMapOutput() BranchDefaultMapOutput {
	return o
}

func (o BranchDefaultMapOutput) ToBranchDefaultMapOutputWithContext(ctx context.Context) BranchDefaultMapOutput {
	return o
}

func (o BranchDefaultMapOutput) MapIndex(k pulumi.StringInput) BranchDefaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BranchDefault {
		return vs[0].(map[string]*BranchDefault)[vs[1].(string)]
	}).(BranchDefaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchDefaultInput)(nil)).Elem(), &BranchDefault{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchDefaultArrayInput)(nil)).Elem(), BranchDefaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchDefaultMapInput)(nil)).Elem(), BranchDefaultMap{})
	pulumi.RegisterOutputType(BranchDefaultOutput{})
	pulumi.RegisterOutputType(BranchDefaultArrayOutput{})
	pulumi.RegisterOutputType(BranchDefaultMapOutput{})
}
