// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.LookupRepositoryPullRequests(ctx, &github.LookupRepositoryPullRequestsArgs{
//				BaseRepository: "example-repository",
//				BaseRef:        pulumi.StringRef("main"),
//				SortBy:         pulumi.StringRef("updated"),
//				SortDirection:  pulumi.StringRef("desc"),
//				State:          pulumi.StringRef("open"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRepositoryPullRequests(ctx *pulumi.Context, args *LookupRepositoryPullRequestsArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryPullRequestsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRepositoryPullRequestsResult
	err := ctx.Invoke("github:index/getRepositoryPullRequests:getRepositoryPullRequests", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryPullRequests.
type LookupRepositoryPullRequestsArgs struct {
	// If set, filters Pull Requests by base branch name.
	BaseRef *string `pulumi:"baseRef"`
	// Name of the base repository to retrieve the Pull Requests from.
	BaseRepository string `pulumi:"baseRepository"`
	// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
	HeadRef *string `pulumi:"headRef"`
	// Owner of the repository. If not provided, the provider's default owner is used.
	Owner *string `pulumi:"owner"`
	// If set, indicates what to sort results by. Can be either "created", "updated", "popularity" (comment count) or "long-running" (age, filtering by pulls updated in the last month). Default: "created".
	SortBy *string `pulumi:"sortBy"`
	// If set, controls the direction of the sort. Can be either "asc" or "desc". Default: "asc".
	SortDirection *string `pulumi:"sortDirection"`
	// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
	State *string `pulumi:"state"`
}

// A collection of values returned by getRepositoryPullRequests.
type LookupRepositoryPullRequestsResult struct {
	// Name of the ref (branch) of the Pull Request base.
	BaseRef        *string `pulumi:"baseRef"`
	BaseRepository string  `pulumi:"baseRepository"`
	// Value of the Pull Request `HEAD` reference.
	HeadRef *string `pulumi:"headRef"`
	// The provider-assigned unique ID for this managed resource.
	Id    string  `pulumi:"id"`
	Owner *string `pulumi:"owner"`
	// Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:
	Results       []GetRepositoryPullRequestsResult `pulumi:"results"`
	SortBy        *string                           `pulumi:"sortBy"`
	SortDirection *string                           `pulumi:"sortDirection"`
	// the current Pull Request state - can be "open", "closed" or "merged".
	State *string `pulumi:"state"`
}

func LookupRepositoryPullRequestsOutput(ctx *pulumi.Context, args LookupRepositoryPullRequestsOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryPullRequestsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryPullRequestsResult, error) {
			args := v.(LookupRepositoryPullRequestsArgs)
			r, err := LookupRepositoryPullRequests(ctx, &args, opts...)
			var s LookupRepositoryPullRequestsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryPullRequestsResultOutput)
}

// A collection of arguments for invoking getRepositoryPullRequests.
type LookupRepositoryPullRequestsOutputArgs struct {
	// If set, filters Pull Requests by base branch name.
	BaseRef pulumi.StringPtrInput `pulumi:"baseRef"`
	// Name of the base repository to retrieve the Pull Requests from.
	BaseRepository pulumi.StringInput `pulumi:"baseRepository"`
	// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
	HeadRef pulumi.StringPtrInput `pulumi:"headRef"`
	// Owner of the repository. If not provided, the provider's default owner is used.
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// If set, indicates what to sort results by. Can be either "created", "updated", "popularity" (comment count) or "long-running" (age, filtering by pulls updated in the last month). Default: "created".
	SortBy pulumi.StringPtrInput `pulumi:"sortBy"`
	// If set, controls the direction of the sort. Can be either "asc" or "desc". Default: "asc".
	SortDirection pulumi.StringPtrInput `pulumi:"sortDirection"`
	// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (LookupRepositoryPullRequestsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryPullRequestsArgs)(nil)).Elem()
}

// A collection of values returned by getRepositoryPullRequests.
type LookupRepositoryPullRequestsResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryPullRequestsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryPullRequestsResult)(nil)).Elem()
}

func (o LookupRepositoryPullRequestsResultOutput) ToLookupRepositoryPullRequestsResultOutput() LookupRepositoryPullRequestsResultOutput {
	return o
}

func (o LookupRepositoryPullRequestsResultOutput) ToLookupRepositoryPullRequestsResultOutputWithContext(ctx context.Context) LookupRepositoryPullRequestsResultOutput {
	return o
}

// Name of the ref (branch) of the Pull Request base.
func (o LookupRepositoryPullRequestsResultOutput) BaseRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.BaseRef }).(pulumi.StringPtrOutput)
}

func (o LookupRepositoryPullRequestsResultOutput) BaseRepository() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) string { return v.BaseRepository }).(pulumi.StringOutput)
}

// Value of the Pull Request `HEAD` reference.
func (o LookupRepositoryPullRequestsResultOutput) HeadRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.HeadRef }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryPullRequestsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryPullRequestsResultOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:
func (o LookupRepositoryPullRequestsResultOutput) Results() GetRepositoryPullRequestsResultArrayOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) []GetRepositoryPullRequestsResult { return v.Results }).(GetRepositoryPullRequestsResultArrayOutput)
}

func (o LookupRepositoryPullRequestsResultOutput) SortBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.SortBy }).(pulumi.StringPtrOutput)
}

func (o LookupRepositoryPullRequestsResultOutput) SortDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.SortDirection }).(pulumi.StringPtrOutput)
}

// the current Pull Request state - can be "open", "closed" or "merged".
func (o LookupRepositoryPullRequestsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRepositoryPullRequestsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryPullRequestsResultOutput{})
}
