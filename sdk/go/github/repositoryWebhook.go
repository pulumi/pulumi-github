// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage webhooks for repositories within your
// GitHub organization or personal account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/go/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		repo, err := github.NewRepository(ctx, "repo", &github.RepositoryArgs{
// 			Description: pulumi.String("Terraform acceptance tests"),
// 			HomepageUrl: pulumi.String("http://example.com/"),
// 			Private:     pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = github.NewRepositoryWebhook(ctx, "foo", &github.RepositoryWebhookArgs{
// 			Active: pulumi.Bool(false),
// 			Configuration: &github.RepositoryWebhookConfigurationArgs{
// 				ContentType: pulumi.String("form"),
// 				InsecureSsl: pulumi.Bool(false),
// 				Url:         pulumi.String("https://google.de/"),
// 			},
// 			Events: pulumi.StringArray{
// 				pulumi.String("issues"),
// 			},
// 			Repository: repo.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RepositoryWebhook struct {
	pulumi.CustomResourceState

	// Indicate of the webhook should receive events. Defaults to `true`.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// key/value pair of configuration for this webhook. Available keys are `url`, `contentType`, `secret` and `insecureSsl`. `secret` is [the shared secret, see API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Configuration RepositoryWebhookConfigurationPtrOutput `pulumi:"configuration"`
	Etag          pulumi.StringOutput                     `pulumi:"etag"`
	// A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// The repository of the webhook.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// URL of the webhook
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewRepositoryWebhook registers a new resource with the given unique name, arguments, and options.
func NewRepositoryWebhook(ctx *pulumi.Context,
	name string, args *RepositoryWebhookArgs, opts ...pulumi.ResourceOption) (*RepositoryWebhook, error) {
	if args == nil || args.Events == nil {
		return nil, errors.New("missing required argument 'Events'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	if args == nil {
		args = &RepositoryWebhookArgs{}
	}
	var resource RepositoryWebhook
	err := ctx.RegisterResource("github:index/repositoryWebhook:RepositoryWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryWebhook gets an existing RepositoryWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryWebhookState, opts ...pulumi.ResourceOption) (*RepositoryWebhook, error) {
	var resource RepositoryWebhook
	err := ctx.ReadResource("github:index/repositoryWebhook:RepositoryWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryWebhook resources.
type repositoryWebhookState struct {
	// Indicate of the webhook should receive events. Defaults to `true`.
	Active *bool `pulumi:"active"`
	// key/value pair of configuration for this webhook. Available keys are `url`, `contentType`, `secret` and `insecureSsl`. `secret` is [the shared secret, see API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Configuration *RepositoryWebhookConfiguration `pulumi:"configuration"`
	Etag          *string                         `pulumi:"etag"`
	// A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).
	Events []string `pulumi:"events"`
	// The repository of the webhook.
	Repository *string `pulumi:"repository"`
	// URL of the webhook
	Url *string `pulumi:"url"`
}

type RepositoryWebhookState struct {
	// Indicate of the webhook should receive events. Defaults to `true`.
	Active pulumi.BoolPtrInput
	// key/value pair of configuration for this webhook. Available keys are `url`, `contentType`, `secret` and `insecureSsl`. `secret` is [the shared secret, see API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Configuration RepositoryWebhookConfigurationPtrInput
	Etag          pulumi.StringPtrInput
	// A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).
	Events pulumi.StringArrayInput
	// The repository of the webhook.
	Repository pulumi.StringPtrInput
	// URL of the webhook
	Url pulumi.StringPtrInput
}

func (RepositoryWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryWebhookState)(nil)).Elem()
}

type repositoryWebhookArgs struct {
	// Indicate of the webhook should receive events. Defaults to `true`.
	Active *bool `pulumi:"active"`
	// key/value pair of configuration for this webhook. Available keys are `url`, `contentType`, `secret` and `insecureSsl`. `secret` is [the shared secret, see API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Configuration *RepositoryWebhookConfiguration `pulumi:"configuration"`
	// A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).
	Events []string `pulumi:"events"`
	// The repository of the webhook.
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryWebhook resource.
type RepositoryWebhookArgs struct {
	// Indicate of the webhook should receive events. Defaults to `true`.
	Active pulumi.BoolPtrInput
	// key/value pair of configuration for this webhook. Available keys are `url`, `contentType`, `secret` and `insecureSsl`. `secret` is [the shared secret, see API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).
	Configuration RepositoryWebhookConfigurationPtrInput
	// A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).
	Events pulumi.StringArrayInput
	// The repository of the webhook.
	Repository pulumi.StringInput
}

func (RepositoryWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryWebhookArgs)(nil)).Elem()
}
