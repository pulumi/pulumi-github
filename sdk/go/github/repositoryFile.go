// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage files within a
// GitHub repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/go/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := github.NewRepositoryFile(ctx, "gitignore", &github.RepositoryFileArgs{
// 			Content:    pulumi.String("**/*.tfstate"),
// 			File:       pulumi.String(".gitignore"),
// 			Repository: pulumi.String("example"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type RepositoryFile struct {
	pulumi.CustomResourceState

	// Git branch (defaults to `master`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// Committer author name to use.
	CommitAuthor pulumi.StringOutput `pulumi:"commitAuthor"`
	// Committer email address to use.
	CommitEmail pulumi.StringOutput `pulumi:"commitEmail"`
	// Commit message when adding or updating the managed file.
	CommitMessage pulumi.StringOutput `pulumi:"commitMessage"`
	// The file content.
	Content pulumi.StringOutput `pulumi:"content"`
	// The path of the file to manage.
	File pulumi.StringOutput `pulumi:"file"`
	// The repository name
	Repository pulumi.StringOutput `pulumi:"repository"`
	// The SHA blob of the file.
	Sha pulumi.StringOutput `pulumi:"sha"`
}

// NewRepositoryFile registers a new resource with the given unique name, arguments, and options.
func NewRepositoryFile(ctx *pulumi.Context,
	name string, args *RepositoryFileArgs, opts ...pulumi.ResourceOption) (*RepositoryFile, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil || args.File == nil {
		return nil, errors.New("missing required argument 'File'")
	}
	if args == nil || args.Repository == nil {
		return nil, errors.New("missing required argument 'Repository'")
	}
	if args == nil {
		args = &RepositoryFileArgs{}
	}
	var resource RepositoryFile
	err := ctx.RegisterResource("github:index/repositoryFile:RepositoryFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryFile gets an existing RepositoryFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryFileState, opts ...pulumi.ResourceOption) (*RepositoryFile, error) {
	var resource RepositoryFile
	err := ctx.ReadResource("github:index/repositoryFile:RepositoryFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryFile resources.
type repositoryFileState struct {
	// Git branch (defaults to `master`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch *string `pulumi:"branch"`
	// Committer author name to use.
	CommitAuthor *string `pulumi:"commitAuthor"`
	// Committer email address to use.
	CommitEmail *string `pulumi:"commitEmail"`
	// Commit message when adding or updating the managed file.
	CommitMessage *string `pulumi:"commitMessage"`
	// The file content.
	Content *string `pulumi:"content"`
	// The path of the file to manage.
	File *string `pulumi:"file"`
	// The repository name
	Repository *string `pulumi:"repository"`
	// The SHA blob of the file.
	Sha *string `pulumi:"sha"`
}

type RepositoryFileState struct {
	// Git branch (defaults to `master`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch pulumi.StringPtrInput
	// Committer author name to use.
	CommitAuthor pulumi.StringPtrInput
	// Committer email address to use.
	CommitEmail pulumi.StringPtrInput
	// Commit message when adding or updating the managed file.
	CommitMessage pulumi.StringPtrInput
	// The file content.
	Content pulumi.StringPtrInput
	// The path of the file to manage.
	File pulumi.StringPtrInput
	// The repository name
	Repository pulumi.StringPtrInput
	// The SHA blob of the file.
	Sha pulumi.StringPtrInput
}

func (RepositoryFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryFileState)(nil)).Elem()
}

type repositoryFileArgs struct {
	// Git branch (defaults to `master`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch *string `pulumi:"branch"`
	// Committer author name to use.
	CommitAuthor *string `pulumi:"commitAuthor"`
	// Committer email address to use.
	CommitEmail *string `pulumi:"commitEmail"`
	// Commit message when adding or updating the managed file.
	CommitMessage *string `pulumi:"commitMessage"`
	// The file content.
	Content string `pulumi:"content"`
	// The path of the file to manage.
	File string `pulumi:"file"`
	// The repository name
	Repository string `pulumi:"repository"`
}

// The set of arguments for constructing a RepositoryFile resource.
type RepositoryFileArgs struct {
	// Git branch (defaults to `master`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch pulumi.StringPtrInput
	// Committer author name to use.
	CommitAuthor pulumi.StringPtrInput
	// Committer email address to use.
	CommitEmail pulumi.StringPtrInput
	// Commit message when adding or updating the managed file.
	CommitMessage pulumi.StringPtrInput
	// The file content.
	Content pulumi.StringInput
	// The path of the file to manage.
	File pulumi.StringInput
	// The repository name
	Repository pulumi.StringInput
}

func (RepositoryFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryFileArgs)(nil)).Elem()
}
