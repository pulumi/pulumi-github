// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage an association between an organization role and a user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := github.NewOrganizationRoleUser(ctx, "example", &github.OrganizationRoleUserArgs{
//				RoleId: pulumi.Int(1234),
//				Login:  pulumi.String("example-user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An organization role user association can be imported using the role ID and the user login separated by a `:`.
//
// ```sh
// $ pulumi import github:index/organizationRoleUser:OrganizationRoleUser example "1234:example-user"
// ```
type OrganizationRoleUser struct {
	pulumi.CustomResourceState

	// The login for the GitHub user account.
	Login pulumi.StringOutput `pulumi:"login"`
	// The ID of the organization role.
	RoleId pulumi.IntOutput `pulumi:"roleId"`
}

// NewOrganizationRoleUser registers a new resource with the given unique name, arguments, and options.
func NewOrganizationRoleUser(ctx *pulumi.Context,
	name string, args *OrganizationRoleUserArgs, opts ...pulumi.ResourceOption) (*OrganizationRoleUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationRoleUser
	err := ctx.RegisterResource("github:index/organizationRoleUser:OrganizationRoleUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationRoleUser gets an existing OrganizationRoleUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationRoleUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationRoleUserState, opts ...pulumi.ResourceOption) (*OrganizationRoleUser, error) {
	var resource OrganizationRoleUser
	err := ctx.ReadResource("github:index/organizationRoleUser:OrganizationRoleUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationRoleUser resources.
type organizationRoleUserState struct {
	// The login for the GitHub user account.
	Login *string `pulumi:"login"`
	// The ID of the organization role.
	RoleId *int `pulumi:"roleId"`
}

type OrganizationRoleUserState struct {
	// The login for the GitHub user account.
	Login pulumi.StringPtrInput
	// The ID of the organization role.
	RoleId pulumi.IntPtrInput
}

func (OrganizationRoleUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleUserState)(nil)).Elem()
}

type organizationRoleUserArgs struct {
	// The login for the GitHub user account.
	Login string `pulumi:"login"`
	// The ID of the organization role.
	RoleId int `pulumi:"roleId"`
}

// The set of arguments for constructing a OrganizationRoleUser resource.
type OrganizationRoleUserArgs struct {
	// The login for the GitHub user account.
	Login pulumi.StringInput
	// The ID of the organization role.
	RoleId pulumi.IntInput
}

func (OrganizationRoleUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationRoleUserArgs)(nil)).Elem()
}

type OrganizationRoleUserInput interface {
	pulumi.Input

	ToOrganizationRoleUserOutput() OrganizationRoleUserOutput
	ToOrganizationRoleUserOutputWithContext(ctx context.Context) OrganizationRoleUserOutput
}

func (*OrganizationRoleUser) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleUser)(nil)).Elem()
}

func (i *OrganizationRoleUser) ToOrganizationRoleUserOutput() OrganizationRoleUserOutput {
	return i.ToOrganizationRoleUserOutputWithContext(context.Background())
}

func (i *OrganizationRoleUser) ToOrganizationRoleUserOutputWithContext(ctx context.Context) OrganizationRoleUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleUserOutput)
}

// OrganizationRoleUserArrayInput is an input type that accepts OrganizationRoleUserArray and OrganizationRoleUserArrayOutput values.
// You can construct a concrete instance of `OrganizationRoleUserArrayInput` via:
//
//	OrganizationRoleUserArray{ OrganizationRoleUserArgs{...} }
type OrganizationRoleUserArrayInput interface {
	pulumi.Input

	ToOrganizationRoleUserArrayOutput() OrganizationRoleUserArrayOutput
	ToOrganizationRoleUserArrayOutputWithContext(context.Context) OrganizationRoleUserArrayOutput
}

type OrganizationRoleUserArray []OrganizationRoleUserInput

func (OrganizationRoleUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleUser)(nil)).Elem()
}

func (i OrganizationRoleUserArray) ToOrganizationRoleUserArrayOutput() OrganizationRoleUserArrayOutput {
	return i.ToOrganizationRoleUserArrayOutputWithContext(context.Background())
}

func (i OrganizationRoleUserArray) ToOrganizationRoleUserArrayOutputWithContext(ctx context.Context) OrganizationRoleUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleUserArrayOutput)
}

// OrganizationRoleUserMapInput is an input type that accepts OrganizationRoleUserMap and OrganizationRoleUserMapOutput values.
// You can construct a concrete instance of `OrganizationRoleUserMapInput` via:
//
//	OrganizationRoleUserMap{ "key": OrganizationRoleUserArgs{...} }
type OrganizationRoleUserMapInput interface {
	pulumi.Input

	ToOrganizationRoleUserMapOutput() OrganizationRoleUserMapOutput
	ToOrganizationRoleUserMapOutputWithContext(context.Context) OrganizationRoleUserMapOutput
}

type OrganizationRoleUserMap map[string]OrganizationRoleUserInput

func (OrganizationRoleUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleUser)(nil)).Elem()
}

func (i OrganizationRoleUserMap) ToOrganizationRoleUserMapOutput() OrganizationRoleUserMapOutput {
	return i.ToOrganizationRoleUserMapOutputWithContext(context.Background())
}

func (i OrganizationRoleUserMap) ToOrganizationRoleUserMapOutputWithContext(ctx context.Context) OrganizationRoleUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationRoleUserMapOutput)
}

type OrganizationRoleUserOutput struct{ *pulumi.OutputState }

func (OrganizationRoleUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationRoleUser)(nil)).Elem()
}

func (o OrganizationRoleUserOutput) ToOrganizationRoleUserOutput() OrganizationRoleUserOutput {
	return o
}

func (o OrganizationRoleUserOutput) ToOrganizationRoleUserOutputWithContext(ctx context.Context) OrganizationRoleUserOutput {
	return o
}

// The login for the GitHub user account.
func (o OrganizationRoleUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationRoleUser) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The ID of the organization role.
func (o OrganizationRoleUserOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *OrganizationRoleUser) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

type OrganizationRoleUserArrayOutput struct{ *pulumi.OutputState }

func (OrganizationRoleUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationRoleUser)(nil)).Elem()
}

func (o OrganizationRoleUserArrayOutput) ToOrganizationRoleUserArrayOutput() OrganizationRoleUserArrayOutput {
	return o
}

func (o OrganizationRoleUserArrayOutput) ToOrganizationRoleUserArrayOutputWithContext(ctx context.Context) OrganizationRoleUserArrayOutput {
	return o
}

func (o OrganizationRoleUserArrayOutput) Index(i pulumi.IntInput) OrganizationRoleUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationRoleUser {
		return vs[0].([]*OrganizationRoleUser)[vs[1].(int)]
	}).(OrganizationRoleUserOutput)
}

type OrganizationRoleUserMapOutput struct{ *pulumi.OutputState }

func (OrganizationRoleUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationRoleUser)(nil)).Elem()
}

func (o OrganizationRoleUserMapOutput) ToOrganizationRoleUserMapOutput() OrganizationRoleUserMapOutput {
	return o
}

func (o OrganizationRoleUserMapOutput) ToOrganizationRoleUserMapOutputWithContext(ctx context.Context) OrganizationRoleUserMapOutput {
	return o
}

func (o OrganizationRoleUserMapOutput) MapIndex(k pulumi.StringInput) OrganizationRoleUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationRoleUser {
		return vs[0].(map[string]*OrganizationRoleUser)[vs[1].(string)]
	}).(OrganizationRoleUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleUserInput)(nil)).Elem(), &OrganizationRoleUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleUserArrayInput)(nil)).Elem(), OrganizationRoleUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationRoleUserMapInput)(nil)).Elem(), OrganizationRoleUserMap{})
	pulumi.RegisterOutputType(OrganizationRoleUserOutput{})
	pulumi.RegisterOutputType(OrganizationRoleUserArrayOutput{})
	pulumi.RegisterOutputType(OrganizationRoleUserMapOutput{})
}
