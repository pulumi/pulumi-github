// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// This resource allows you to create and manage projects for GitHub organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/go/github"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := github.NewOrganizationProject(ctx, "project", &github.OrganizationProjectArgs{
// 			Body: pulumi.String("This is a organization project."),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type OrganizationProject struct {
	pulumi.CustomResourceState

	// The body of the project.
	Body pulumi.StringPtrOutput `pulumi:"body"`
	Etag pulumi.StringOutput    `pulumi:"etag"`
	// The name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// URL of the project
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewOrganizationProject registers a new resource with the given unique name, arguments, and options.
func NewOrganizationProject(ctx *pulumi.Context,
	name string, args *OrganizationProjectArgs, opts ...pulumi.ResourceOption) (*OrganizationProject, error) {
	if args == nil {
		args = &OrganizationProjectArgs{}
	}
	var resource OrganizationProject
	err := ctx.RegisterResource("github:index/organizationProject:OrganizationProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationProject gets an existing OrganizationProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationProjectState, opts ...pulumi.ResourceOption) (*OrganizationProject, error) {
	var resource OrganizationProject
	err := ctx.ReadResource("github:index/organizationProject:OrganizationProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationProject resources.
type organizationProjectState struct {
	// The body of the project.
	Body *string `pulumi:"body"`
	Etag *string `pulumi:"etag"`
	// The name of the project.
	Name *string `pulumi:"name"`
	// URL of the project
	Url *string `pulumi:"url"`
}

type OrganizationProjectState struct {
	// The body of the project.
	Body pulumi.StringPtrInput
	Etag pulumi.StringPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
	// URL of the project
	Url pulumi.StringPtrInput
}

func (OrganizationProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationProjectState)(nil)).Elem()
}

type organizationProjectArgs struct {
	// The body of the project.
	Body *string `pulumi:"body"`
	// The name of the project.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a OrganizationProject resource.
type OrganizationProjectArgs struct {
	// The body of the project.
	Body pulumi.StringPtrInput
	// The name of the project.
	Name pulumi.StringPtrInput
}

func (OrganizationProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationProjectArgs)(nil)).Elem()
}
