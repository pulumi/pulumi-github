// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-github/sdk/v6/go/github/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and manage GitHub Actions runner groups within your GitHub enterprise.
// You must have admin access to an enterprise to use this resource.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-github/sdk/v6/go/github"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			enterprise, err := github.GetEnterprise(ctx, &github.GetEnterpriseArgs{
//				Slug: "my-enterprise",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			enterpriseOrganization, err := github.NewEnterpriseOrganization(ctx, "enterpriseOrganization", &github.EnterpriseOrganizationArgs{
//				EnterpriseId: pulumi.String(enterprise.Id),
//				BillingEmail: pulumi.String("octocat@octo.cat"),
//				AdminLogins: pulumi.StringArray{
//					pulumi.String("octocat"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = github.NewEnterpriseActionsRunnerGroup(ctx, "example", &github.EnterpriseActionsRunnerGroupArgs{
//				EnterpriseSlug:           pulumi.String(enterprise.Slug),
//				AllowsPublicRepositories: pulumi.Bool(true),
//				Visibility:               pulumi.String("selected"),
//				SelectedOrganizationIds: pulumi.IntArray{
//					enterpriseOrganization.DatabaseId,
//				},
//				RestrictedToWorkflows: pulumi.Bool(true),
//				SelectedWorkflows: pulumi.StringArray{
//					pulumi.String("my-organization/my-repo/.github/workflows/cool-workflow.yaml@refs/tags/v1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// This resource can be imported using the enterprise slug and the ID of the runner group:
//
// ```sh
// $ pulumi import github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup test enterprise-slug/42
// ```
type EnterpriseActionsRunnerGroup struct {
	pulumi.CustomResourceState

	// Whether public repositories can be added to the runner group. Defaults to false.
	AllowsPublicRepositories pulumi.BoolPtrOutput `pulumi:"allowsPublicRepositories"`
	// Whether this is the default runner group
	Default pulumi.BoolOutput `pulumi:"default"`
	// The slug of the enterprise.
	EnterpriseSlug pulumi.StringOutput `pulumi:"enterpriseSlug"`
	// An etag representing the runner group object
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Name of the runner group
	Name pulumi.StringOutput `pulumi:"name"`
	// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
	RestrictedToWorkflows pulumi.BoolPtrOutput `pulumi:"restrictedToWorkflows"`
	// The GitHub API URL for the runner group's runners
	RunnersUrl pulumi.StringOutput `pulumi:"runnersUrl"`
	// IDs of the organizations which should be added to the runner group
	SelectedOrganizationIds pulumi.IntArrayOutput `pulumi:"selectedOrganizationIds"`
	// The GitHub API URL for the runner group's selected organizations
	SelectedOrganizationsUrl pulumi.StringOutput `pulumi:"selectedOrganizationsUrl"`
	// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
	SelectedWorkflows pulumi.StringArrayOutput `pulumi:"selectedWorkflows"`
	// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewEnterpriseActionsRunnerGroup registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseActionsRunnerGroup(ctx *pulumi.Context,
	name string, args *EnterpriseActionsRunnerGroupArgs, opts ...pulumi.ResourceOption) (*EnterpriseActionsRunnerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnterpriseSlug == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseSlug'")
	}
	if args.Visibility == nil {
		return nil, errors.New("invalid value for required argument 'Visibility'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnterpriseActionsRunnerGroup
	err := ctx.RegisterResource("github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseActionsRunnerGroup gets an existing EnterpriseActionsRunnerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseActionsRunnerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseActionsRunnerGroupState, opts ...pulumi.ResourceOption) (*EnterpriseActionsRunnerGroup, error) {
	var resource EnterpriseActionsRunnerGroup
	err := ctx.ReadResource("github:index/enterpriseActionsRunnerGroup:EnterpriseActionsRunnerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseActionsRunnerGroup resources.
type enterpriseActionsRunnerGroupState struct {
	// Whether public repositories can be added to the runner group. Defaults to false.
	AllowsPublicRepositories *bool `pulumi:"allowsPublicRepositories"`
	// Whether this is the default runner group
	Default *bool `pulumi:"default"`
	// The slug of the enterprise.
	EnterpriseSlug *string `pulumi:"enterpriseSlug"`
	// An etag representing the runner group object
	Etag *string `pulumi:"etag"`
	// Name of the runner group
	Name *string `pulumi:"name"`
	// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
	RestrictedToWorkflows *bool `pulumi:"restrictedToWorkflows"`
	// The GitHub API URL for the runner group's runners
	RunnersUrl *string `pulumi:"runnersUrl"`
	// IDs of the organizations which should be added to the runner group
	SelectedOrganizationIds []int `pulumi:"selectedOrganizationIds"`
	// The GitHub API URL for the runner group's selected organizations
	SelectedOrganizationsUrl *string `pulumi:"selectedOrganizationsUrl"`
	// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
	SelectedWorkflows []string `pulumi:"selectedWorkflows"`
	// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
	Visibility *string `pulumi:"visibility"`
}

type EnterpriseActionsRunnerGroupState struct {
	// Whether public repositories can be added to the runner group. Defaults to false.
	AllowsPublicRepositories pulumi.BoolPtrInput
	// Whether this is the default runner group
	Default pulumi.BoolPtrInput
	// The slug of the enterprise.
	EnterpriseSlug pulumi.StringPtrInput
	// An etag representing the runner group object
	Etag pulumi.StringPtrInput
	// Name of the runner group
	Name pulumi.StringPtrInput
	// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
	RestrictedToWorkflows pulumi.BoolPtrInput
	// The GitHub API URL for the runner group's runners
	RunnersUrl pulumi.StringPtrInput
	// IDs of the organizations which should be added to the runner group
	SelectedOrganizationIds pulumi.IntArrayInput
	// The GitHub API URL for the runner group's selected organizations
	SelectedOrganizationsUrl pulumi.StringPtrInput
	// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
	SelectedWorkflows pulumi.StringArrayInput
	// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
	Visibility pulumi.StringPtrInput
}

func (EnterpriseActionsRunnerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseActionsRunnerGroupState)(nil)).Elem()
}

type enterpriseActionsRunnerGroupArgs struct {
	// Whether public repositories can be added to the runner group. Defaults to false.
	AllowsPublicRepositories *bool `pulumi:"allowsPublicRepositories"`
	// The slug of the enterprise.
	EnterpriseSlug string `pulumi:"enterpriseSlug"`
	// Name of the runner group
	Name *string `pulumi:"name"`
	// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
	RestrictedToWorkflows *bool `pulumi:"restrictedToWorkflows"`
	// IDs of the organizations which should be added to the runner group
	SelectedOrganizationIds []int `pulumi:"selectedOrganizationIds"`
	// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
	SelectedWorkflows []string `pulumi:"selectedWorkflows"`
	// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
	Visibility string `pulumi:"visibility"`
}

// The set of arguments for constructing a EnterpriseActionsRunnerGroup resource.
type EnterpriseActionsRunnerGroupArgs struct {
	// Whether public repositories can be added to the runner group. Defaults to false.
	AllowsPublicRepositories pulumi.BoolPtrInput
	// The slug of the enterprise.
	EnterpriseSlug pulumi.StringInput
	// Name of the runner group
	Name pulumi.StringPtrInput
	// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
	RestrictedToWorkflows pulumi.BoolPtrInput
	// IDs of the organizations which should be added to the runner group
	SelectedOrganizationIds pulumi.IntArrayInput
	// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
	SelectedWorkflows pulumi.StringArrayInput
	// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
	Visibility pulumi.StringInput
}

func (EnterpriseActionsRunnerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseActionsRunnerGroupArgs)(nil)).Elem()
}

type EnterpriseActionsRunnerGroupInput interface {
	pulumi.Input

	ToEnterpriseActionsRunnerGroupOutput() EnterpriseActionsRunnerGroupOutput
	ToEnterpriseActionsRunnerGroupOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupOutput
}

func (*EnterpriseActionsRunnerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (i *EnterpriseActionsRunnerGroup) ToEnterpriseActionsRunnerGroupOutput() EnterpriseActionsRunnerGroupOutput {
	return i.ToEnterpriseActionsRunnerGroupOutputWithContext(context.Background())
}

func (i *EnterpriseActionsRunnerGroup) ToEnterpriseActionsRunnerGroupOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseActionsRunnerGroupOutput)
}

// EnterpriseActionsRunnerGroupArrayInput is an input type that accepts EnterpriseActionsRunnerGroupArray and EnterpriseActionsRunnerGroupArrayOutput values.
// You can construct a concrete instance of `EnterpriseActionsRunnerGroupArrayInput` via:
//
//	EnterpriseActionsRunnerGroupArray{ EnterpriseActionsRunnerGroupArgs{...} }
type EnterpriseActionsRunnerGroupArrayInput interface {
	pulumi.Input

	ToEnterpriseActionsRunnerGroupArrayOutput() EnterpriseActionsRunnerGroupArrayOutput
	ToEnterpriseActionsRunnerGroupArrayOutputWithContext(context.Context) EnterpriseActionsRunnerGroupArrayOutput
}

type EnterpriseActionsRunnerGroupArray []EnterpriseActionsRunnerGroupInput

func (EnterpriseActionsRunnerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (i EnterpriseActionsRunnerGroupArray) ToEnterpriseActionsRunnerGroupArrayOutput() EnterpriseActionsRunnerGroupArrayOutput {
	return i.ToEnterpriseActionsRunnerGroupArrayOutputWithContext(context.Background())
}

func (i EnterpriseActionsRunnerGroupArray) ToEnterpriseActionsRunnerGroupArrayOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseActionsRunnerGroupArrayOutput)
}

// EnterpriseActionsRunnerGroupMapInput is an input type that accepts EnterpriseActionsRunnerGroupMap and EnterpriseActionsRunnerGroupMapOutput values.
// You can construct a concrete instance of `EnterpriseActionsRunnerGroupMapInput` via:
//
//	EnterpriseActionsRunnerGroupMap{ "key": EnterpriseActionsRunnerGroupArgs{...} }
type EnterpriseActionsRunnerGroupMapInput interface {
	pulumi.Input

	ToEnterpriseActionsRunnerGroupMapOutput() EnterpriseActionsRunnerGroupMapOutput
	ToEnterpriseActionsRunnerGroupMapOutputWithContext(context.Context) EnterpriseActionsRunnerGroupMapOutput
}

type EnterpriseActionsRunnerGroupMap map[string]EnterpriseActionsRunnerGroupInput

func (EnterpriseActionsRunnerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (i EnterpriseActionsRunnerGroupMap) ToEnterpriseActionsRunnerGroupMapOutput() EnterpriseActionsRunnerGroupMapOutput {
	return i.ToEnterpriseActionsRunnerGroupMapOutputWithContext(context.Background())
}

func (i EnterpriseActionsRunnerGroupMap) ToEnterpriseActionsRunnerGroupMapOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseActionsRunnerGroupMapOutput)
}

type EnterpriseActionsRunnerGroupOutput struct{ *pulumi.OutputState }

func (EnterpriseActionsRunnerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (o EnterpriseActionsRunnerGroupOutput) ToEnterpriseActionsRunnerGroupOutput() EnterpriseActionsRunnerGroupOutput {
	return o
}

func (o EnterpriseActionsRunnerGroupOutput) ToEnterpriseActionsRunnerGroupOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupOutput {
	return o
}

// Whether public repositories can be added to the runner group. Defaults to false.
func (o EnterpriseActionsRunnerGroupOutput) AllowsPublicRepositories() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.BoolPtrOutput { return v.AllowsPublicRepositories }).(pulumi.BoolPtrOutput)
}

// Whether this is the default runner group
func (o EnterpriseActionsRunnerGroupOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// The slug of the enterprise.
func (o EnterpriseActionsRunnerGroupOutput) EnterpriseSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.EnterpriseSlug }).(pulumi.StringOutput)
}

// An etag representing the runner group object
func (o EnterpriseActionsRunnerGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Name of the runner group
func (o EnterpriseActionsRunnerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If true, the runner group will be restricted to running only the workflows specified in the selectedWorkflows array. Defaults to false.
func (o EnterpriseActionsRunnerGroupOutput) RestrictedToWorkflows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.BoolPtrOutput { return v.RestrictedToWorkflows }).(pulumi.BoolPtrOutput)
}

// The GitHub API URL for the runner group's runners
func (o EnterpriseActionsRunnerGroupOutput) RunnersUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.RunnersUrl }).(pulumi.StringOutput)
}

// IDs of the organizations which should be added to the runner group
func (o EnterpriseActionsRunnerGroupOutput) SelectedOrganizationIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.IntArrayOutput { return v.SelectedOrganizationIds }).(pulumi.IntArrayOutput)
}

// The GitHub API URL for the runner group's selected organizations
func (o EnterpriseActionsRunnerGroupOutput) SelectedOrganizationsUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.SelectedOrganizationsUrl }).(pulumi.StringOutput)
}

// List of workflows the runner group should be allowed to run. This setting will be ignored unless restrictedToWorkflows is set to true.
func (o EnterpriseActionsRunnerGroupOutput) SelectedWorkflows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringArrayOutput { return v.SelectedWorkflows }).(pulumi.StringArrayOutput)
}

// Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
func (o EnterpriseActionsRunnerGroupOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseActionsRunnerGroup) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type EnterpriseActionsRunnerGroupArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseActionsRunnerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (o EnterpriseActionsRunnerGroupArrayOutput) ToEnterpriseActionsRunnerGroupArrayOutput() EnterpriseActionsRunnerGroupArrayOutput {
	return o
}

func (o EnterpriseActionsRunnerGroupArrayOutput) ToEnterpriseActionsRunnerGroupArrayOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupArrayOutput {
	return o
}

func (o EnterpriseActionsRunnerGroupArrayOutput) Index(i pulumi.IntInput) EnterpriseActionsRunnerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseActionsRunnerGroup {
		return vs[0].([]*EnterpriseActionsRunnerGroup)[vs[1].(int)]
	}).(EnterpriseActionsRunnerGroupOutput)
}

type EnterpriseActionsRunnerGroupMapOutput struct{ *pulumi.OutputState }

func (EnterpriseActionsRunnerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseActionsRunnerGroup)(nil)).Elem()
}

func (o EnterpriseActionsRunnerGroupMapOutput) ToEnterpriseActionsRunnerGroupMapOutput() EnterpriseActionsRunnerGroupMapOutput {
	return o
}

func (o EnterpriseActionsRunnerGroupMapOutput) ToEnterpriseActionsRunnerGroupMapOutputWithContext(ctx context.Context) EnterpriseActionsRunnerGroupMapOutput {
	return o
}

func (o EnterpriseActionsRunnerGroupMapOutput) MapIndex(k pulumi.StringInput) EnterpriseActionsRunnerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseActionsRunnerGroup {
		return vs[0].(map[string]*EnterpriseActionsRunnerGroup)[vs[1].(string)]
	}).(EnterpriseActionsRunnerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseActionsRunnerGroupInput)(nil)).Elem(), &EnterpriseActionsRunnerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseActionsRunnerGroupArrayInput)(nil)).Elem(), EnterpriseActionsRunnerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseActionsRunnerGroupMapInput)(nil)).Elem(), EnterpriseActionsRunnerGroupMap{})
	pulumi.RegisterOutputType(EnterpriseActionsRunnerGroupOutput{})
	pulumi.RegisterOutputType(EnterpriseActionsRunnerGroupArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseActionsRunnerGroupMapOutput{})
}
