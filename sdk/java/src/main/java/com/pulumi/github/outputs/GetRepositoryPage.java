// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.github.outputs.GetRepositoryPageSource;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoryPage {
    private String buildType;
    private String cname;
    private Boolean custom404;
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    private String htmlUrl;
    private List<GetRepositoryPageSource> sources;
    private String status;
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    private String url;

    private GetRepositoryPage() {}
    public String buildType() {
        return this.buildType;
    }
    public String cname() {
        return this.cname;
    }
    public Boolean custom404() {
        return this.custom404;
    }
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    public String htmlUrl() {
        return this.htmlUrl;
    }
    public List<GetRepositoryPageSource> sources() {
        return this.sources;
    }
    public String status() {
        return this.status;
    }
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryPage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String buildType;
        private String cname;
        private Boolean custom404;
        private String htmlUrl;
        private List<GetRepositoryPageSource> sources;
        private String status;
        private String url;
        public Builder() {}
        public Builder(GetRepositoryPage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.buildType = defaults.buildType;
    	      this.cname = defaults.cname;
    	      this.custom404 = defaults.custom404;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.sources = defaults.sources;
    	      this.status = defaults.status;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder buildType(String buildType) {
            if (buildType == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "buildType");
            }
            this.buildType = buildType;
            return this;
        }
        @CustomType.Setter
        public Builder cname(String cname) {
            if (cname == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "cname");
            }
            this.cname = cname;
            return this;
        }
        @CustomType.Setter
        public Builder custom404(Boolean custom404) {
            if (custom404 == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "custom404");
            }
            this.custom404 = custom404;
            return this;
        }
        @CustomType.Setter
        public Builder htmlUrl(String htmlUrl) {
            if (htmlUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "htmlUrl");
            }
            this.htmlUrl = htmlUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sources(List<GetRepositoryPageSource> sources) {
            if (sources == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "sources");
            }
            this.sources = sources;
            return this;
        }
        public Builder sources(GetRepositoryPageSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetRepositoryPage", "url");
            }
            this.url = url;
            return this;
        }
        public GetRepositoryPage build() {
            final var _resultValue = new GetRepositoryPage();
            _resultValue.buildType = buildType;
            _resultValue.cname = cname;
            _resultValue.custom404 = custom404;
            _resultValue.htmlUrl = htmlUrl;
            _resultValue.sources = sources;
            _resultValue.status = status;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
