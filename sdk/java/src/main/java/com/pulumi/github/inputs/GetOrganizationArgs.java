// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrganizationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOrganizationArgs Empty = new GetOrganizationArgs();

    /**
     * Whether or not to include archived repos in the `repositories` list. Defaults to `false`.
     * 
     */
    @Import(name="ignoreArchivedRepos")
    private @Nullable Output<Boolean> ignoreArchivedRepos;

    /**
     * @return Whether or not to include archived repos in the `repositories` list. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreArchivedRepos() {
        return Optional.ofNullable(this.ignoreArchivedRepos);
    }

    /**
     * The name of the organization.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the organization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Exclude the repos, members and other attributes from the returned result. Defaults to `false`.
     * 
     */
    @Import(name="summaryOnly")
    private @Nullable Output<Boolean> summaryOnly;

    /**
     * @return Exclude the repos, members and other attributes from the returned result. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> summaryOnly() {
        return Optional.ofNullable(this.summaryOnly);
    }

    private GetOrganizationArgs() {}

    private GetOrganizationArgs(GetOrganizationArgs $) {
        this.ignoreArchivedRepos = $.ignoreArchivedRepos;
        this.name = $.name;
        this.summaryOnly = $.summaryOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrganizationArgs $;

        public Builder() {
            $ = new GetOrganizationArgs();
        }

        public Builder(GetOrganizationArgs defaults) {
            $ = new GetOrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ignoreArchivedRepos Whether or not to include archived repos in the `repositories` list. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreArchivedRepos(@Nullable Output<Boolean> ignoreArchivedRepos) {
            $.ignoreArchivedRepos = ignoreArchivedRepos;
            return this;
        }

        /**
         * @param ignoreArchivedRepos Whether or not to include archived repos in the `repositories` list. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreArchivedRepos(Boolean ignoreArchivedRepos) {
            return ignoreArchivedRepos(Output.of(ignoreArchivedRepos));
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param summaryOnly Exclude the repos, members and other attributes from the returned result. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder summaryOnly(@Nullable Output<Boolean> summaryOnly) {
            $.summaryOnly = summaryOnly;
            return this;
        }

        /**
         * @param summaryOnly Exclude the repos, members and other attributes from the returned result. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder summaryOnly(Boolean summaryOnly) {
            return summaryOnly(Output.of(summaryOnly));
        }

        public GetOrganizationArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetOrganizationArgs", "name");
            }
            return $;
        }
    }

}
