// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.github.inputs.IssueLabelsLabelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IssueLabelsArgs extends com.pulumi.resources.ResourceArgs {

    public static final IssueLabelsArgs Empty = new IssueLabelsArgs();

    /**
     * List of labels
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<IssueLabelsLabelArgs>> labels;

    /**
     * @return List of labels
     * 
     */
    public Optional<Output<List<IssueLabelsLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The GitHub repository
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The GitHub repository
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    private IssueLabelsArgs() {}

    private IssueLabelsArgs(IssueLabelsArgs $) {
        this.labels = $.labels;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IssueLabelsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IssueLabelsArgs $;

        public Builder() {
            $ = new IssueLabelsArgs();
        }

        public Builder(IssueLabelsArgs defaults) {
            $ = new IssueLabelsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labels List of labels
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<IssueLabelsLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels List of labels
         * 
         * @return builder
         * 
         */
        public Builder labels(List<IssueLabelsLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels List of labels
         * 
         * @return builder
         * 
         */
        public Builder labels(IssueLabelsLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public IssueLabelsArgs build() {
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("IssueLabelsArgs", "repository");
            }
            return $;
        }
    }

}
