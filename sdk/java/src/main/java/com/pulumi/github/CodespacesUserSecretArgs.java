// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodespacesUserSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodespacesUserSecretArgs Empty = new CodespacesUserSecretArgs();

    /**
     * Encrypted value of the secret using the GitHub public key in Base64 format.
     * 
     */
    @Import(name="encryptedValue")
    private @Nullable Output<String> encryptedValue;

    /**
     * @return Encrypted value of the secret using the GitHub public key in Base64 format.
     * 
     */
    public Optional<Output<String>> encryptedValue() {
        return Optional.ofNullable(this.encryptedValue);
    }

    /**
     * Plaintext value of the secret to be encrypted
     * 
     */
    @Import(name="plaintextValue")
    private @Nullable Output<String> plaintextValue;

    /**
     * @return Plaintext value of the secret to be encrypted
     * 
     */
    public Optional<Output<String>> plaintextValue() {
        return Optional.ofNullable(this.plaintextValue);
    }

    /**
     * Name of the secret
     * 
     */
    @Import(name="secretName", required=true)
    private Output<String> secretName;

    /**
     * @return Name of the secret
     * 
     */
    public Output<String> secretName() {
        return this.secretName;
    }

    /**
     * An array of repository ids that can access the user secret.
     * 
     */
    @Import(name="selectedRepositoryIds")
    private @Nullable Output<List<Integer>> selectedRepositoryIds;

    /**
     * @return An array of repository ids that can access the user secret.
     * 
     */
    public Optional<Output<List<Integer>>> selectedRepositoryIds() {
        return Optional.ofNullable(this.selectedRepositoryIds);
    }

    private CodespacesUserSecretArgs() {}

    private CodespacesUserSecretArgs(CodespacesUserSecretArgs $) {
        this.encryptedValue = $.encryptedValue;
        this.plaintextValue = $.plaintextValue;
        this.secretName = $.secretName;
        this.selectedRepositoryIds = $.selectedRepositoryIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodespacesUserSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodespacesUserSecretArgs $;

        public Builder() {
            $ = new CodespacesUserSecretArgs();
        }

        public Builder(CodespacesUserSecretArgs defaults) {
            $ = new CodespacesUserSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptedValue Encrypted value of the secret using the GitHub public key in Base64 format.
         * 
         * @return builder
         * 
         */
        public Builder encryptedValue(@Nullable Output<String> encryptedValue) {
            $.encryptedValue = encryptedValue;
            return this;
        }

        /**
         * @param encryptedValue Encrypted value of the secret using the GitHub public key in Base64 format.
         * 
         * @return builder
         * 
         */
        public Builder encryptedValue(String encryptedValue) {
            return encryptedValue(Output.of(encryptedValue));
        }

        /**
         * @param plaintextValue Plaintext value of the secret to be encrypted
         * 
         * @return builder
         * 
         */
        public Builder plaintextValue(@Nullable Output<String> plaintextValue) {
            $.plaintextValue = plaintextValue;
            return this;
        }

        /**
         * @param plaintextValue Plaintext value of the secret to be encrypted
         * 
         * @return builder
         * 
         */
        public Builder plaintextValue(String plaintextValue) {
            return plaintextValue(Output.of(plaintextValue));
        }

        /**
         * @param secretName Name of the secret
         * 
         * @return builder
         * 
         */
        public Builder secretName(Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName Name of the secret
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param selectedRepositoryIds An array of repository ids that can access the user secret.
         * 
         * @return builder
         * 
         */
        public Builder selectedRepositoryIds(@Nullable Output<List<Integer>> selectedRepositoryIds) {
            $.selectedRepositoryIds = selectedRepositoryIds;
            return this;
        }

        /**
         * @param selectedRepositoryIds An array of repository ids that can access the user secret.
         * 
         * @return builder
         * 
         */
        public Builder selectedRepositoryIds(List<Integer> selectedRepositoryIds) {
            return selectedRepositoryIds(Output.of(selectedRepositoryIds));
        }

        /**
         * @param selectedRepositoryIds An array of repository ids that can access the user secret.
         * 
         * @return builder
         * 
         */
        public Builder selectedRepositoryIds(Integer... selectedRepositoryIds) {
            return selectedRepositoryIds(List.of(selectedRepositoryIds));
        }

        public CodespacesUserSecretArgs build() {
            if ($.secretName == null) {
                throw new MissingRequiredPropertyException("CodespacesUserSecretArgs", "secretName");
            }
            return $;
        }
    }

}
