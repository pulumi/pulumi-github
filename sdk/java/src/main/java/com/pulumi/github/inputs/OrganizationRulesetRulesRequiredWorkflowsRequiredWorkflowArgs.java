// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs Empty = new OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs();

    /**
     * (String) The path to the YAML definition file of the workflow.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return (String) The path to the YAML definition file of the workflow.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * (String) The optional ref from which to fetch the workflow. Defaults to `master`.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return (String) The optional ref from which to fetch the workflow. Defaults to `master`.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.
     * 
     */
    @Import(name="repositoryId", required=true)
    private Output<Integer> repositoryId;

    /**
     * @return The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.
     * 
     */
    public Output<Integer> repositoryId() {
        return this.repositoryId;
    }

    private OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs() {}

    private OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs(OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs $) {
        this.path = $.path;
        this.ref = $.ref;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs $;

        public Builder() {
            $ = new OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs();
        }

        public Builder(OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs defaults) {
            $ = new OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path (String) The path to the YAML definition file of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path (String) The path to the YAML definition file of the workflow.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param ref (String) The optional ref from which to fetch the workflow. Defaults to `master`.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref (String) The optional ref from which to fetch the workflow. Defaults to `master`.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param repositoryId The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Output<Integer> repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        /**
         * @param repositoryId The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(Integer repositoryId) {
            return repositoryId(Output.of(repositoryId));
        }

        public OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs build() {
            if ($.path == null) {
                throw new MissingRequiredPropertyException("OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs", "path");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflowArgs", "repositoryId");
            }
            return $;
        }
    }

}
