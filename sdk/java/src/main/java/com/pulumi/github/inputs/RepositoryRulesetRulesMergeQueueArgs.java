// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryRulesetRulesMergeQueueArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryRulesetRulesMergeQueueArgs Empty = new RepositoryRulesetRulesMergeQueueArgs();

    /**
     * Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
     * 
     */
    @Import(name="checkResponseTimeoutMinutes")
    private @Nullable Output<Integer> checkResponseTimeoutMinutes;

    /**
     * @return Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
     * 
     */
    public Optional<Output<Integer>> checkResponseTimeoutMinutes() {
        return Optional.ofNullable(this.checkResponseTimeoutMinutes);
    }

    /**
     * When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
     * 
     */
    @Import(name="groupingStrategy")
    private @Nullable Output<String> groupingStrategy;

    /**
     * @return When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
     * 
     */
    public Optional<Output<String>> groupingStrategy() {
        return Optional.ofNullable(this.groupingStrategy);
    }

    /**
     * Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
     * 
     */
    @Import(name="maxEntriesToBuild")
    private @Nullable Output<Integer> maxEntriesToBuild;

    /**
     * @return Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
     * 
     */
    public Optional<Output<Integer>> maxEntriesToBuild() {
        return Optional.ofNullable(this.maxEntriesToBuild);
    }

    /**
     * The maximum number of PRs that will be merged together in a group. Defaults to `5`.
     * 
     */
    @Import(name="maxEntriesToMerge")
    private @Nullable Output<Integer> maxEntriesToMerge;

    /**
     * @return The maximum number of PRs that will be merged together in a group. Defaults to `5`.
     * 
     */
    public Optional<Output<Integer>> maxEntriesToMerge() {
        return Optional.ofNullable(this.maxEntriesToMerge);
    }

    /**
     * Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
     * 
     */
    @Import(name="mergeMethod")
    private @Nullable Output<String> mergeMethod;

    /**
     * @return Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
     * 
     */
    public Optional<Output<String>> mergeMethod() {
        return Optional.ofNullable(this.mergeMethod);
    }

    /**
     * The minimum number of PRs that will be merged together in a group. Defaults to `1`.
     * 
     */
    @Import(name="minEntriesToMerge")
    private @Nullable Output<Integer> minEntriesToMerge;

    /**
     * @return The minimum number of PRs that will be merged together in a group. Defaults to `1`.
     * 
     */
    public Optional<Output<Integer>> minEntriesToMerge() {
        return Optional.ofNullable(this.minEntriesToMerge);
    }

    /**
     * The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
     * 
     */
    @Import(name="minEntriesToMergeWaitMinutes")
    private @Nullable Output<Integer> minEntriesToMergeWaitMinutes;

    /**
     * @return The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
     * 
     */
    public Optional<Output<Integer>> minEntriesToMergeWaitMinutes() {
        return Optional.ofNullable(this.minEntriesToMergeWaitMinutes);
    }

    private RepositoryRulesetRulesMergeQueueArgs() {}

    private RepositoryRulesetRulesMergeQueueArgs(RepositoryRulesetRulesMergeQueueArgs $) {
        this.checkResponseTimeoutMinutes = $.checkResponseTimeoutMinutes;
        this.groupingStrategy = $.groupingStrategy;
        this.maxEntriesToBuild = $.maxEntriesToBuild;
        this.maxEntriesToMerge = $.maxEntriesToMerge;
        this.mergeMethod = $.mergeMethod;
        this.minEntriesToMerge = $.minEntriesToMerge;
        this.minEntriesToMergeWaitMinutes = $.minEntriesToMergeWaitMinutes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRulesetRulesMergeQueueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRulesetRulesMergeQueueArgs $;

        public Builder() {
            $ = new RepositoryRulesetRulesMergeQueueArgs();
        }

        public Builder(RepositoryRulesetRulesMergeQueueArgs defaults) {
            $ = new RepositoryRulesetRulesMergeQueueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkResponseTimeoutMinutes Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder checkResponseTimeoutMinutes(@Nullable Output<Integer> checkResponseTimeoutMinutes) {
            $.checkResponseTimeoutMinutes = checkResponseTimeoutMinutes;
            return this;
        }

        /**
         * @param checkResponseTimeoutMinutes Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
         * 
         * @return builder
         * 
         */
        public Builder checkResponseTimeoutMinutes(Integer checkResponseTimeoutMinutes) {
            return checkResponseTimeoutMinutes(Output.of(checkResponseTimeoutMinutes));
        }

        /**
         * @param groupingStrategy When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
         * 
         * @return builder
         * 
         */
        public Builder groupingStrategy(@Nullable Output<String> groupingStrategy) {
            $.groupingStrategy = groupingStrategy;
            return this;
        }

        /**
         * @param groupingStrategy When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
         * 
         * @return builder
         * 
         */
        public Builder groupingStrategy(String groupingStrategy) {
            return groupingStrategy(Output.of(groupingStrategy));
        }

        /**
         * @param maxEntriesToBuild Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder maxEntriesToBuild(@Nullable Output<Integer> maxEntriesToBuild) {
            $.maxEntriesToBuild = maxEntriesToBuild;
            return this;
        }

        /**
         * @param maxEntriesToBuild Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder maxEntriesToBuild(Integer maxEntriesToBuild) {
            return maxEntriesToBuild(Output.of(maxEntriesToBuild));
        }

        /**
         * @param maxEntriesToMerge The maximum number of PRs that will be merged together in a group. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder maxEntriesToMerge(@Nullable Output<Integer> maxEntriesToMerge) {
            $.maxEntriesToMerge = maxEntriesToMerge;
            return this;
        }

        /**
         * @param maxEntriesToMerge The maximum number of PRs that will be merged together in a group. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder maxEntriesToMerge(Integer maxEntriesToMerge) {
            return maxEntriesToMerge(Output.of(maxEntriesToMerge));
        }

        /**
         * @param mergeMethod Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
         * 
         * @return builder
         * 
         */
        public Builder mergeMethod(@Nullable Output<String> mergeMethod) {
            $.mergeMethod = mergeMethod;
            return this;
        }

        /**
         * @param mergeMethod Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
         * 
         * @return builder
         * 
         */
        public Builder mergeMethod(String mergeMethod) {
            return mergeMethod(Output.of(mergeMethod));
        }

        /**
         * @param minEntriesToMerge The minimum number of PRs that will be merged together in a group. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder minEntriesToMerge(@Nullable Output<Integer> minEntriesToMerge) {
            $.minEntriesToMerge = minEntriesToMerge;
            return this;
        }

        /**
         * @param minEntriesToMerge The minimum number of PRs that will be merged together in a group. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder minEntriesToMerge(Integer minEntriesToMerge) {
            return minEntriesToMerge(Output.of(minEntriesToMerge));
        }

        /**
         * @param minEntriesToMergeWaitMinutes The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder minEntriesToMergeWaitMinutes(@Nullable Output<Integer> minEntriesToMergeWaitMinutes) {
            $.minEntriesToMergeWaitMinutes = minEntriesToMergeWaitMinutes;
            return this;
        }

        /**
         * @param minEntriesToMergeWaitMinutes The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
         * 
         * @return builder
         * 
         */
        public Builder minEntriesToMergeWaitMinutes(Integer minEntriesToMergeWaitMinutes) {
            return minEntriesToMergeWaitMinutes(Output.of(minEntriesToMergeWaitMinutes));
        }

        public RepositoryRulesetRulesMergeQueueArgs build() {
            return $;
        }
    }

}
