// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryProjectArgs Empty = new RepositoryProjectArgs();

    /**
     * The body of the project.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return The body of the project.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * The name of the project.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the project.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The repository of the project.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The repository of the project.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    private RepositoryProjectArgs() {}

    private RepositoryProjectArgs(RepositoryProjectArgs $) {
        this.body = $.body;
        this.name = $.name;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryProjectArgs $;

        public Builder() {
            $ = new RepositoryProjectArgs();
        }

        public Builder(RepositoryProjectArgs defaults) {
            $ = new RepositoryProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param body The body of the project.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body The body of the project.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param name The name of the project.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the project.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param repository The repository of the project.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository of the project.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public RepositoryProjectArgs build() {
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("RepositoryProjectArgs", "repository");
            }
            return $;
        }
    }

}
