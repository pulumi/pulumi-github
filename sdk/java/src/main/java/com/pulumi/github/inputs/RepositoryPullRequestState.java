// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryPullRequestState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryPullRequestState Empty = new RepositoryPullRequestState();

    @Import(name="baseRef")
    private @Nullable Output<String> baseRef;

    public Optional<Output<String>> baseRef() {
        return Optional.ofNullable(this.baseRef);
    }

    @Import(name="baseRepository")
    private @Nullable Output<String> baseRepository;

    public Optional<Output<String>> baseRepository() {
        return Optional.ofNullable(this.baseRepository);
    }

    @Import(name="baseSha")
    private @Nullable Output<String> baseSha;

    public Optional<Output<String>> baseSha() {
        return Optional.ofNullable(this.baseSha);
    }

    @Import(name="body")
    private @Nullable Output<String> body;

    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    @Import(name="draft")
    private @Nullable Output<Boolean> draft;

    public Optional<Output<Boolean>> draft() {
        return Optional.ofNullable(this.draft);
    }

    @Import(name="headRef")
    private @Nullable Output<String> headRef;

    public Optional<Output<String>> headRef() {
        return Optional.ofNullable(this.headRef);
    }

    @Import(name="headSha")
    private @Nullable Output<String> headSha;

    public Optional<Output<String>> headSha() {
        return Optional.ofNullable(this.headSha);
    }

    /**
     * List of names of labels on the PR
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return List of names of labels on the PR
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="maintainerCanModify")
    private @Nullable Output<Boolean> maintainerCanModify;

    public Optional<Output<Boolean>> maintainerCanModify() {
        return Optional.ofNullable(this.maintainerCanModify);
    }

    @Import(name="number")
    private @Nullable Output<Integer> number;

    public Optional<Output<Integer>> number() {
        return Optional.ofNullable(this.number);
    }

    @Import(name="openedAt")
    private @Nullable Output<Integer> openedAt;

    public Optional<Output<Integer>> openedAt() {
        return Optional.ofNullable(this.openedAt);
    }

    /**
     * Username of the PR creator
     * 
     */
    @Import(name="openedBy")
    private @Nullable Output<String> openedBy;

    /**
     * @return Username of the PR creator
     * 
     */
    public Optional<Output<String>> openedBy() {
        return Optional.ofNullable(this.openedBy);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="updatedAt")
    private @Nullable Output<Integer> updatedAt;

    public Optional<Output<Integer>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private RepositoryPullRequestState() {}

    private RepositoryPullRequestState(RepositoryPullRequestState $) {
        this.baseRef = $.baseRef;
        this.baseRepository = $.baseRepository;
        this.baseSha = $.baseSha;
        this.body = $.body;
        this.draft = $.draft;
        this.headRef = $.headRef;
        this.headSha = $.headSha;
        this.labels = $.labels;
        this.maintainerCanModify = $.maintainerCanModify;
        this.number = $.number;
        this.openedAt = $.openedAt;
        this.openedBy = $.openedBy;
        this.owner = $.owner;
        this.state = $.state;
        this.title = $.title;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryPullRequestState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryPullRequestState $;

        public Builder() {
            $ = new RepositoryPullRequestState();
        }

        public Builder(RepositoryPullRequestState defaults) {
            $ = new RepositoryPullRequestState(Objects.requireNonNull(defaults));
        }

        public Builder baseRef(@Nullable Output<String> baseRef) {
            $.baseRef = baseRef;
            return this;
        }

        public Builder baseRef(String baseRef) {
            return baseRef(Output.of(baseRef));
        }

        public Builder baseRepository(@Nullable Output<String> baseRepository) {
            $.baseRepository = baseRepository;
            return this;
        }

        public Builder baseRepository(String baseRepository) {
            return baseRepository(Output.of(baseRepository));
        }

        public Builder baseSha(@Nullable Output<String> baseSha) {
            $.baseSha = baseSha;
            return this;
        }

        public Builder baseSha(String baseSha) {
            return baseSha(Output.of(baseSha));
        }

        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        public Builder body(String body) {
            return body(Output.of(body));
        }

        public Builder draft(@Nullable Output<Boolean> draft) {
            $.draft = draft;
            return this;
        }

        public Builder draft(Boolean draft) {
            return draft(Output.of(draft));
        }

        public Builder headRef(@Nullable Output<String> headRef) {
            $.headRef = headRef;
            return this;
        }

        public Builder headRef(String headRef) {
            return headRef(Output.of(headRef));
        }

        public Builder headSha(@Nullable Output<String> headSha) {
            $.headSha = headSha;
            return this;
        }

        public Builder headSha(String headSha) {
            return headSha(Output.of(headSha));
        }

        /**
         * @param labels List of names of labels on the PR
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels List of names of labels on the PR
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels List of names of labels on the PR
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        public Builder maintainerCanModify(@Nullable Output<Boolean> maintainerCanModify) {
            $.maintainerCanModify = maintainerCanModify;
            return this;
        }

        public Builder maintainerCanModify(Boolean maintainerCanModify) {
            return maintainerCanModify(Output.of(maintainerCanModify));
        }

        public Builder number(@Nullable Output<Integer> number) {
            $.number = number;
            return this;
        }

        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        public Builder openedAt(@Nullable Output<Integer> openedAt) {
            $.openedAt = openedAt;
            return this;
        }

        public Builder openedAt(Integer openedAt) {
            return openedAt(Output.of(openedAt));
        }

        /**
         * @param openedBy Username of the PR creator
         * 
         * @return builder
         * 
         */
        public Builder openedBy(@Nullable Output<String> openedBy) {
            $.openedBy = openedBy;
            return this;
        }

        /**
         * @param openedBy Username of the PR creator
         * 
         * @return builder
         * 
         */
        public Builder openedBy(String openedBy) {
            return openedBy(Output.of(openedBy));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder updatedAt(@Nullable Output<Integer> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(Integer updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public RepositoryPullRequestState build() {
            return $;
        }
    }

}
