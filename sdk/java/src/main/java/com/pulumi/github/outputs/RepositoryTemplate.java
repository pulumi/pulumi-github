// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryTemplate {
    /**
     * @return Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
     * 
     */
    private @Nullable Boolean includeAllBranches;
    /**
     * @return The GitHub organization or user the template repository is owned by.
     * 
     */
    private String owner;
    /**
     * @return The name of the template repository.
     * 
     */
    private String repository;

    private RepositoryTemplate() {}
    /**
     * @return Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).
     * 
     */
    public Optional<Boolean> includeAllBranches() {
        return Optional.ofNullable(this.includeAllBranches);
    }
    /**
     * @return The GitHub organization or user the template repository is owned by.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return The name of the template repository.
     * 
     */
    public String repository() {
        return this.repository;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean includeAllBranches;
        private String owner;
        private String repository;
        public Builder() {}
        public Builder(RepositoryTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeAllBranches = defaults.includeAllBranches;
    	      this.owner = defaults.owner;
    	      this.repository = defaults.repository;
        }

        @CustomType.Setter
        public Builder includeAllBranches(@Nullable Boolean includeAllBranches) {

            this.includeAllBranches = includeAllBranches;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("RepositoryTemplate", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("RepositoryTemplate", "repository");
            }
            this.repository = repository;
            return this;
        }
        public RepositoryTemplate build() {
            final var _resultValue = new RepositoryTemplate();
            _resultValue.includeAllBranches = includeAllBranches;
            _resultValue.owner = owner;
            _resultValue.repository = repository;
            return _resultValue;
        }
    }
}
