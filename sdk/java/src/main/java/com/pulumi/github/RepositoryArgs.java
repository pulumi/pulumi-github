// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.github.inputs.RepositoryPagesArgs;
import com.pulumi.github.inputs.RepositoryTemplateArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    @Import(name="allowAutoMerge")
    private @Nullable Output<Boolean> allowAutoMerge;

    public Optional<Output<Boolean>> allowAutoMerge() {
        return Optional.ofNullable(this.allowAutoMerge);
    }

    @Import(name="allowMergeCommit")
    private @Nullable Output<Boolean> allowMergeCommit;

    public Optional<Output<Boolean>> allowMergeCommit() {
        return Optional.ofNullable(this.allowMergeCommit);
    }

    @Import(name="allowRebaseMerge")
    private @Nullable Output<Boolean> allowRebaseMerge;

    public Optional<Output<Boolean>> allowRebaseMerge() {
        return Optional.ofNullable(this.allowRebaseMerge);
    }

    @Import(name="allowSquashMerge")
    private @Nullable Output<Boolean> allowSquashMerge;

    public Optional<Output<Boolean>> allowSquashMerge() {
        return Optional.ofNullable(this.allowSquashMerge);
    }

    @Import(name="archiveOnDestroy")
    private @Nullable Output<Boolean> archiveOnDestroy;

    public Optional<Output<Boolean>> archiveOnDestroy() {
        return Optional.ofNullable(this.archiveOnDestroy);
    }

    @Import(name="archived")
    private @Nullable Output<Boolean> archived;

    public Optional<Output<Boolean>> archived() {
        return Optional.ofNullable(this.archived);
    }

    @Import(name="autoInit")
    private @Nullable Output<Boolean> autoInit;

    public Optional<Output<Boolean>> autoInit() {
        return Optional.ofNullable(this.autoInit);
    }

    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     * 
     * @deprecated
     * Use the github_branch_default resource instead
     * 
     */
    @Deprecated /* Use the github_branch_default resource instead */
    @Import(name="defaultBranch")
    private @Nullable Output<String> defaultBranch;

    /**
     * @return Can only be set after initial repository creation, and only if the target branch exists
     * 
     * @deprecated
     * Use the github_branch_default resource instead
     * 
     */
    @Deprecated /* Use the github_branch_default resource instead */
    public Optional<Output<String>> defaultBranch() {
        return Optional.ofNullable(this.defaultBranch);
    }

    @Import(name="deleteBranchOnMerge")
    private @Nullable Output<Boolean> deleteBranchOnMerge;

    public Optional<Output<Boolean>> deleteBranchOnMerge() {
        return Optional.ofNullable(this.deleteBranchOnMerge);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="gitignoreTemplate")
    private @Nullable Output<String> gitignoreTemplate;

    public Optional<Output<String>> gitignoreTemplate() {
        return Optional.ofNullable(this.gitignoreTemplate);
    }

    @Import(name="hasDownloads")
    private @Nullable Output<Boolean> hasDownloads;

    public Optional<Output<Boolean>> hasDownloads() {
        return Optional.ofNullable(this.hasDownloads);
    }

    @Import(name="hasIssues")
    private @Nullable Output<Boolean> hasIssues;

    public Optional<Output<Boolean>> hasIssues() {
        return Optional.ofNullable(this.hasIssues);
    }

    @Import(name="hasProjects")
    private @Nullable Output<Boolean> hasProjects;

    public Optional<Output<Boolean>> hasProjects() {
        return Optional.ofNullable(this.hasProjects);
    }

    @Import(name="hasWiki")
    private @Nullable Output<Boolean> hasWiki;

    public Optional<Output<Boolean>> hasWiki() {
        return Optional.ofNullable(this.hasWiki);
    }

    @Import(name="homepageUrl")
    private @Nullable Output<String> homepageUrl;

    public Optional<Output<String>> homepageUrl() {
        return Optional.ofNullable(this.homepageUrl);
    }

    @Import(name="ignoreVulnerabilityAlertsDuringRead")
    private @Nullable Output<Boolean> ignoreVulnerabilityAlertsDuringRead;

    public Optional<Output<Boolean>> ignoreVulnerabilityAlertsDuringRead() {
        return Optional.ofNullable(this.ignoreVulnerabilityAlertsDuringRead);
    }

    @Import(name="isTemplate")
    private @Nullable Output<Boolean> isTemplate;

    public Optional<Output<Boolean>> isTemplate() {
        return Optional.ofNullable(this.isTemplate);
    }

    @Import(name="licenseTemplate")
    private @Nullable Output<String> licenseTemplate;

    public Optional<Output<String>> licenseTemplate() {
        return Optional.ofNullable(this.licenseTemplate);
    }

    @Import(name="mergeCommitMessage")
    private @Nullable Output<String> mergeCommitMessage;

    public Optional<Output<String>> mergeCommitMessage() {
        return Optional.ofNullable(this.mergeCommitMessage);
    }

    @Import(name="mergeCommitTitle")
    private @Nullable Output<String> mergeCommitTitle;

    public Optional<Output<String>> mergeCommitTitle() {
        return Optional.ofNullable(this.mergeCommitTitle);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="pages")
    private @Nullable Output<RepositoryPagesArgs> pages;

    public Optional<Output<RepositoryPagesArgs>> pages() {
        return Optional.ofNullable(this.pages);
    }

    /**
     * @deprecated
     * use visibility instead
     * 
     */
    @Deprecated /* use visibility instead */
    @Import(name="private")
    private @Nullable Output<Boolean> private_;

    /**
     * @deprecated
     * use visibility instead
     * 
     */
    @Deprecated /* use visibility instead */
    public Optional<Output<Boolean>> private_() {
        return Optional.ofNullable(this.private_);
    }

    @Import(name="squashMergeCommitMessage")
    private @Nullable Output<String> squashMergeCommitMessage;

    public Optional<Output<String>> squashMergeCommitMessage() {
        return Optional.ofNullable(this.squashMergeCommitMessage);
    }

    @Import(name="squashMergeCommitTitle")
    private @Nullable Output<String> squashMergeCommitTitle;

    public Optional<Output<String>> squashMergeCommitTitle() {
        return Optional.ofNullable(this.squashMergeCommitTitle);
    }

    @Import(name="template")
    private @Nullable Output<RepositoryTemplateArgs> template;

    public Optional<Output<RepositoryTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    @Import(name="topics")
    private @Nullable Output<List<String>> topics;

    public Optional<Output<List<String>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    @Import(name="vulnerabilityAlerts")
    private @Nullable Output<Boolean> vulnerabilityAlerts;

    public Optional<Output<Boolean>> vulnerabilityAlerts() {
        return Optional.ofNullable(this.vulnerabilityAlerts);
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.allowAutoMerge = $.allowAutoMerge;
        this.allowMergeCommit = $.allowMergeCommit;
        this.allowRebaseMerge = $.allowRebaseMerge;
        this.allowSquashMerge = $.allowSquashMerge;
        this.archiveOnDestroy = $.archiveOnDestroy;
        this.archived = $.archived;
        this.autoInit = $.autoInit;
        this.defaultBranch = $.defaultBranch;
        this.deleteBranchOnMerge = $.deleteBranchOnMerge;
        this.description = $.description;
        this.gitignoreTemplate = $.gitignoreTemplate;
        this.hasDownloads = $.hasDownloads;
        this.hasIssues = $.hasIssues;
        this.hasProjects = $.hasProjects;
        this.hasWiki = $.hasWiki;
        this.homepageUrl = $.homepageUrl;
        this.ignoreVulnerabilityAlertsDuringRead = $.ignoreVulnerabilityAlertsDuringRead;
        this.isTemplate = $.isTemplate;
        this.licenseTemplate = $.licenseTemplate;
        this.mergeCommitMessage = $.mergeCommitMessage;
        this.mergeCommitTitle = $.mergeCommitTitle;
        this.name = $.name;
        this.pages = $.pages;
        this.private_ = $.private_;
        this.squashMergeCommitMessage = $.squashMergeCommitMessage;
        this.squashMergeCommitTitle = $.squashMergeCommitTitle;
        this.template = $.template;
        this.topics = $.topics;
        this.visibility = $.visibility;
        this.vulnerabilityAlerts = $.vulnerabilityAlerts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowAutoMerge(@Nullable Output<Boolean> allowAutoMerge) {
            $.allowAutoMerge = allowAutoMerge;
            return this;
        }

        public Builder allowAutoMerge(Boolean allowAutoMerge) {
            return allowAutoMerge(Output.of(allowAutoMerge));
        }

        public Builder allowMergeCommit(@Nullable Output<Boolean> allowMergeCommit) {
            $.allowMergeCommit = allowMergeCommit;
            return this;
        }

        public Builder allowMergeCommit(Boolean allowMergeCommit) {
            return allowMergeCommit(Output.of(allowMergeCommit));
        }

        public Builder allowRebaseMerge(@Nullable Output<Boolean> allowRebaseMerge) {
            $.allowRebaseMerge = allowRebaseMerge;
            return this;
        }

        public Builder allowRebaseMerge(Boolean allowRebaseMerge) {
            return allowRebaseMerge(Output.of(allowRebaseMerge));
        }

        public Builder allowSquashMerge(@Nullable Output<Boolean> allowSquashMerge) {
            $.allowSquashMerge = allowSquashMerge;
            return this;
        }

        public Builder allowSquashMerge(Boolean allowSquashMerge) {
            return allowSquashMerge(Output.of(allowSquashMerge));
        }

        public Builder archiveOnDestroy(@Nullable Output<Boolean> archiveOnDestroy) {
            $.archiveOnDestroy = archiveOnDestroy;
            return this;
        }

        public Builder archiveOnDestroy(Boolean archiveOnDestroy) {
            return archiveOnDestroy(Output.of(archiveOnDestroy));
        }

        public Builder archived(@Nullable Output<Boolean> archived) {
            $.archived = archived;
            return this;
        }

        public Builder archived(Boolean archived) {
            return archived(Output.of(archived));
        }

        public Builder autoInit(@Nullable Output<Boolean> autoInit) {
            $.autoInit = autoInit;
            return this;
        }

        public Builder autoInit(Boolean autoInit) {
            return autoInit(Output.of(autoInit));
        }

        /**
         * @param defaultBranch Can only be set after initial repository creation, and only if the target branch exists
         * 
         * @return builder
         * 
         * @deprecated
         * Use the github_branch_default resource instead
         * 
         */
        @Deprecated /* Use the github_branch_default resource instead */
        public Builder defaultBranch(@Nullable Output<String> defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param defaultBranch Can only be set after initial repository creation, and only if the target branch exists
         * 
         * @return builder
         * 
         * @deprecated
         * Use the github_branch_default resource instead
         * 
         */
        @Deprecated /* Use the github_branch_default resource instead */
        public Builder defaultBranch(String defaultBranch) {
            return defaultBranch(Output.of(defaultBranch));
        }

        public Builder deleteBranchOnMerge(@Nullable Output<Boolean> deleteBranchOnMerge) {
            $.deleteBranchOnMerge = deleteBranchOnMerge;
            return this;
        }

        public Builder deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
            return deleteBranchOnMerge(Output.of(deleteBranchOnMerge));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder gitignoreTemplate(@Nullable Output<String> gitignoreTemplate) {
            $.gitignoreTemplate = gitignoreTemplate;
            return this;
        }

        public Builder gitignoreTemplate(String gitignoreTemplate) {
            return gitignoreTemplate(Output.of(gitignoreTemplate));
        }

        public Builder hasDownloads(@Nullable Output<Boolean> hasDownloads) {
            $.hasDownloads = hasDownloads;
            return this;
        }

        public Builder hasDownloads(Boolean hasDownloads) {
            return hasDownloads(Output.of(hasDownloads));
        }

        public Builder hasIssues(@Nullable Output<Boolean> hasIssues) {
            $.hasIssues = hasIssues;
            return this;
        }

        public Builder hasIssues(Boolean hasIssues) {
            return hasIssues(Output.of(hasIssues));
        }

        public Builder hasProjects(@Nullable Output<Boolean> hasProjects) {
            $.hasProjects = hasProjects;
            return this;
        }

        public Builder hasProjects(Boolean hasProjects) {
            return hasProjects(Output.of(hasProjects));
        }

        public Builder hasWiki(@Nullable Output<Boolean> hasWiki) {
            $.hasWiki = hasWiki;
            return this;
        }

        public Builder hasWiki(Boolean hasWiki) {
            return hasWiki(Output.of(hasWiki));
        }

        public Builder homepageUrl(@Nullable Output<String> homepageUrl) {
            $.homepageUrl = homepageUrl;
            return this;
        }

        public Builder homepageUrl(String homepageUrl) {
            return homepageUrl(Output.of(homepageUrl));
        }

        public Builder ignoreVulnerabilityAlertsDuringRead(@Nullable Output<Boolean> ignoreVulnerabilityAlertsDuringRead) {
            $.ignoreVulnerabilityAlertsDuringRead = ignoreVulnerabilityAlertsDuringRead;
            return this;
        }

        public Builder ignoreVulnerabilityAlertsDuringRead(Boolean ignoreVulnerabilityAlertsDuringRead) {
            return ignoreVulnerabilityAlertsDuringRead(Output.of(ignoreVulnerabilityAlertsDuringRead));
        }

        public Builder isTemplate(@Nullable Output<Boolean> isTemplate) {
            $.isTemplate = isTemplate;
            return this;
        }

        public Builder isTemplate(Boolean isTemplate) {
            return isTemplate(Output.of(isTemplate));
        }

        public Builder licenseTemplate(@Nullable Output<String> licenseTemplate) {
            $.licenseTemplate = licenseTemplate;
            return this;
        }

        public Builder licenseTemplate(String licenseTemplate) {
            return licenseTemplate(Output.of(licenseTemplate));
        }

        public Builder mergeCommitMessage(@Nullable Output<String> mergeCommitMessage) {
            $.mergeCommitMessage = mergeCommitMessage;
            return this;
        }

        public Builder mergeCommitMessage(String mergeCommitMessage) {
            return mergeCommitMessage(Output.of(mergeCommitMessage));
        }

        public Builder mergeCommitTitle(@Nullable Output<String> mergeCommitTitle) {
            $.mergeCommitTitle = mergeCommitTitle;
            return this;
        }

        public Builder mergeCommitTitle(String mergeCommitTitle) {
            return mergeCommitTitle(Output.of(mergeCommitTitle));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pages(@Nullable Output<RepositoryPagesArgs> pages) {
            $.pages = pages;
            return this;
        }

        public Builder pages(RepositoryPagesArgs pages) {
            return pages(Output.of(pages));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use visibility instead
         * 
         */
        @Deprecated /* use visibility instead */
        public Builder private_(@Nullable Output<Boolean> private_) {
            $.private_ = private_;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * use visibility instead
         * 
         */
        @Deprecated /* use visibility instead */
        public Builder private_(Boolean private_) {
            return private_(Output.of(private_));
        }

        public Builder squashMergeCommitMessage(@Nullable Output<String> squashMergeCommitMessage) {
            $.squashMergeCommitMessage = squashMergeCommitMessage;
            return this;
        }

        public Builder squashMergeCommitMessage(String squashMergeCommitMessage) {
            return squashMergeCommitMessage(Output.of(squashMergeCommitMessage));
        }

        public Builder squashMergeCommitTitle(@Nullable Output<String> squashMergeCommitTitle) {
            $.squashMergeCommitTitle = squashMergeCommitTitle;
            return this;
        }

        public Builder squashMergeCommitTitle(String squashMergeCommitTitle) {
            return squashMergeCommitTitle(Output.of(squashMergeCommitTitle));
        }

        public Builder template(@Nullable Output<RepositoryTemplateArgs> template) {
            $.template = template;
            return this;
        }

        public Builder template(RepositoryTemplateArgs template) {
            return template(Output.of(template));
        }

        public Builder topics(@Nullable Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public Builder vulnerabilityAlerts(@Nullable Output<Boolean> vulnerabilityAlerts) {
            $.vulnerabilityAlerts = vulnerabilityAlerts;
            return this;
        }

        public Builder vulnerabilityAlerts(Boolean vulnerabilityAlerts) {
            return vulnerabilityAlerts(Output.of(vulnerabilityAlerts));
        }

        public RepositoryArgs build() {
            return $;
        }
    }

}
