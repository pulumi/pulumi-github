// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ActionsRepositoryAccessLevelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActionsRepositoryAccessLevelArgs Empty = new ActionsRepositoryAccessLevelArgs();

    /**
     * Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
     * 
     */
    @Import(name="accessLevel", required=true)
    private Output<String> accessLevel;

    /**
     * @return Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
     * 
     */
    public Output<String> accessLevel() {
        return this.accessLevel;
    }

    /**
     * The GitHub repository
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The GitHub repository
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    private ActionsRepositoryAccessLevelArgs() {}

    private ActionsRepositoryAccessLevelArgs(ActionsRepositoryAccessLevelArgs $) {
        this.accessLevel = $.accessLevel;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActionsRepositoryAccessLevelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActionsRepositoryAccessLevelArgs $;

        public Builder() {
            $ = new ActionsRepositoryAccessLevelArgs();
        }

        public Builder(ActionsRepositoryAccessLevelArgs defaults) {
            $ = new ActionsRepositoryAccessLevelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLevel Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(Output<String> accessLevel) {
            $.accessLevel = accessLevel;
            return this;
        }

        /**
         * @param accessLevel Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.
         * 
         * @return builder
         * 
         */
        public Builder accessLevel(String accessLevel) {
            return accessLevel(Output.of(accessLevel));
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public ActionsRepositoryAccessLevelArgs build() {
            if ($.accessLevel == null) {
                throw new MissingRequiredPropertyException("ActionsRepositoryAccessLevelArgs", "accessLevel");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("ActionsRepositoryAccessLevelArgs", "repository");
            }
            return $;
        }
    }

}
