// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationRulesetConditionsRepositoryNameArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRulesetConditionsRepositoryNameArgs Empty = new OrganizationRulesetConditionsRepositoryNameArgs();

    /**
     * (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     * 
     */
    @Import(name="excludes", required=true)
    private Output<List<String>> excludes;

    /**
     * @return (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     * 
     */
    public Output<List<String>> excludes() {
        return this.excludes;
    }

    /**
     * (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
     * 
     */
    @Import(name="inlcudes", required=true)
    private Output<List<String>> inlcudes;

    /**
     * @return (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
     * 
     */
    public Output<List<String>> inlcudes() {
        return this.inlcudes;
    }

    @Import(name="protected")
    private @Nullable Output<Boolean> protected_;

    public Optional<Output<Boolean>> protected_() {
        return Optional.ofNullable(this.protected_);
    }

    private OrganizationRulesetConditionsRepositoryNameArgs() {}

    private OrganizationRulesetConditionsRepositoryNameArgs(OrganizationRulesetConditionsRepositoryNameArgs $) {
        this.excludes = $.excludes;
        this.inlcudes = $.inlcudes;
        this.protected_ = $.protected_;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRulesetConditionsRepositoryNameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRulesetConditionsRepositoryNameArgs $;

        public Builder() {
            $ = new OrganizationRulesetConditionsRepositoryNameArgs();
        }

        public Builder(OrganizationRulesetConditionsRepositoryNameArgs defaults) {
            $ = new OrganizationRulesetConditionsRepositoryNameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(Output<List<String>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<String> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param inlcudes (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
         * 
         * @return builder
         * 
         */
        public Builder inlcudes(Output<List<String>> inlcudes) {
            $.inlcudes = inlcudes;
            return this;
        }

        /**
         * @param inlcudes (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
         * 
         * @return builder
         * 
         */
        public Builder inlcudes(List<String> inlcudes) {
            return inlcudes(Output.of(inlcudes));
        }

        /**
         * @param inlcudes (List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
         * 
         * @return builder
         * 
         */
        public Builder inlcudes(String... inlcudes) {
            return inlcudes(List.of(inlcudes));
        }

        public Builder protected_(@Nullable Output<Boolean> protected_) {
            $.protected_ = protected_;
            return this;
        }

        public Builder protected_(Boolean protected_) {
            return protected_(Output.of(protected_));
        }

        public OrganizationRulesetConditionsRepositoryNameArgs build() {
            $.excludes = Objects.requireNonNull($.excludes, "expected parameter 'excludes' to be non-null");
            $.inlcudes = Objects.requireNonNull($.inlcudes, "expected parameter 'inlcudes' to be non-null");
            return $;
        }
    }

}
