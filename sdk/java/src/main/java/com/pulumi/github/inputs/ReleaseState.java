// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseState extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseState Empty = new ReleaseState();

    /**
     * URL that can be provided to API calls displaying the attached assets to this release.
     * 
     */
    @Import(name="assetsUrl")
    private @Nullable Output<String> assetsUrl;

    /**
     * @return URL that can be provided to API calls displaying the attached assets to this release.
     * 
     */
    public Optional<Output<String>> assetsUrl() {
        return Optional.ofNullable(this.assetsUrl);
    }

    /**
     * Text describing the contents of the tag.
     * 
     */
    @Import(name="body")
    private @Nullable Output<String> body;

    /**
     * @return Text describing the contents of the tag.
     * 
     */
    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * This is the date of the commit used for the release, and not the date when the release was drafted or published.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return This is the date of the commit used for the release, and not the date when the release was drafted or published.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
     * 
     */
    @Import(name="discussionCategoryName")
    private @Nullable Output<String> discussionCategoryName;

    /**
     * @return If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
     * 
     */
    public Optional<Output<String>> discussionCategoryName() {
        return Optional.ofNullable(this.discussionCategoryName);
    }

    /**
     * Set to `false` to create a published release.
     * 
     */
    @Import(name="draft")
    private @Nullable Output<Boolean> draft;

    /**
     * @return Set to `false` to create a published release.
     * 
     */
    public Optional<Output<Boolean>> draft() {
        return Optional.ofNullable(this.draft);
    }

    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
     * 
     */
    @Import(name="generateReleaseNotes")
    private @Nullable Output<Boolean> generateReleaseNotes;

    /**
     * @return Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
     * 
     */
    public Optional<Output<Boolean>> generateReleaseNotes() {
        return Optional.ofNullable(this.generateReleaseNotes);
    }

    /**
     * URL of the release in GitHub.
     * 
     */
    @Import(name="htmlUrl")
    private @Nullable Output<String> htmlUrl;

    /**
     * @return URL of the release in GitHub.
     * 
     */
    public Optional<Output<String>> htmlUrl() {
        return Optional.ofNullable(this.htmlUrl);
    }

    /**
     * The name of the release.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the release.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * GraphQL global node id for use with v4 API
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return GraphQL global node id for use with v4 API
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * Set to `false` to identify the release as a full release.
     * 
     */
    @Import(name="prerelease")
    private @Nullable Output<Boolean> prerelease;

    /**
     * @return Set to `false` to identify the release as a full release.
     * 
     */
    public Optional<Output<Boolean>> prerelease() {
        return Optional.ofNullable(this.prerelease);
    }

    /**
     * This is the date when the release was published. This will be empty if the release is a draft.
     * 
     */
    @Import(name="publishedAt")
    private @Nullable Output<String> publishedAt;

    /**
     * @return This is the date when the release was published. This will be empty if the release is a draft.
     * 
     */
    public Optional<Output<String>> publishedAt() {
        return Optional.ofNullable(this.publishedAt);
    }

    /**
     * The ID of the release.
     * 
     */
    @Import(name="releaseId")
    private @Nullable Output<Integer> releaseId;

    /**
     * @return The ID of the release.
     * 
     */
    public Optional<Output<Integer>> releaseId() {
        return Optional.ofNullable(this.releaseId);
    }

    /**
     * The name of the repository.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The name of the repository.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * The name of the tag.
     * 
     */
    @Import(name="tagName")
    private @Nullable Output<String> tagName;

    /**
     * @return The name of the tag.
     * 
     */
    public Optional<Output<String>> tagName() {
        return Optional.ofNullable(this.tagName);
    }

    /**
     * URL that can be provided to API calls to fetch the release TAR archive.
     * 
     */
    @Import(name="tarballUrl")
    private @Nullable Output<String> tarballUrl;

    /**
     * @return URL that can be provided to API calls to fetch the release TAR archive.
     * 
     */
    public Optional<Output<String>> tarballUrl() {
        return Optional.ofNullable(this.tarballUrl);
    }

    /**
     * The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
     * 
     */
    @Import(name="targetCommitish")
    private @Nullable Output<String> targetCommitish;

    /**
     * @return The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
     * 
     */
    public Optional<Output<String>> targetCommitish() {
        return Optional.ofNullable(this.targetCommitish);
    }

    /**
     * URL that can be provided to API calls to upload assets.
     * 
     */
    @Import(name="uploadUrl")
    private @Nullable Output<String> uploadUrl;

    /**
     * @return URL that can be provided to API calls to upload assets.
     * 
     */
    public Optional<Output<String>> uploadUrl() {
        return Optional.ofNullable(this.uploadUrl);
    }

    /**
     * URL that can be provided to API calls that reference this release.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL that can be provided to API calls that reference this release.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * URL that can be provided to API calls to fetch the release ZIP archive.
     * 
     */
    @Import(name="zipballUrl")
    private @Nullable Output<String> zipballUrl;

    /**
     * @return URL that can be provided to API calls to fetch the release ZIP archive.
     * 
     */
    public Optional<Output<String>> zipballUrl() {
        return Optional.ofNullable(this.zipballUrl);
    }

    private ReleaseState() {}

    private ReleaseState(ReleaseState $) {
        this.assetsUrl = $.assetsUrl;
        this.body = $.body;
        this.createdAt = $.createdAt;
        this.discussionCategoryName = $.discussionCategoryName;
        this.draft = $.draft;
        this.etag = $.etag;
        this.generateReleaseNotes = $.generateReleaseNotes;
        this.htmlUrl = $.htmlUrl;
        this.name = $.name;
        this.nodeId = $.nodeId;
        this.prerelease = $.prerelease;
        this.publishedAt = $.publishedAt;
        this.releaseId = $.releaseId;
        this.repository = $.repository;
        this.tagName = $.tagName;
        this.tarballUrl = $.tarballUrl;
        this.targetCommitish = $.targetCommitish;
        this.uploadUrl = $.uploadUrl;
        this.url = $.url;
        this.zipballUrl = $.zipballUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseState $;

        public Builder() {
            $ = new ReleaseState();
        }

        public Builder(ReleaseState defaults) {
            $ = new ReleaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetsUrl URL that can be provided to API calls displaying the attached assets to this release.
         * 
         * @return builder
         * 
         */
        public Builder assetsUrl(@Nullable Output<String> assetsUrl) {
            $.assetsUrl = assetsUrl;
            return this;
        }

        /**
         * @param assetsUrl URL that can be provided to API calls displaying the attached assets to this release.
         * 
         * @return builder
         * 
         */
        public Builder assetsUrl(String assetsUrl) {
            return assetsUrl(Output.of(assetsUrl));
        }

        /**
         * @param body Text describing the contents of the tag.
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        /**
         * @param body Text describing the contents of the tag.
         * 
         * @return builder
         * 
         */
        public Builder body(String body) {
            return body(Output.of(body));
        }

        /**
         * @param createdAt This is the date of the commit used for the release, and not the date when the release was drafted or published.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt This is the date of the commit used for the release, and not the date when the release was drafted or published.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param discussionCategoryName If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
         * 
         * @return builder
         * 
         */
        public Builder discussionCategoryName(@Nullable Output<String> discussionCategoryName) {
            $.discussionCategoryName = discussionCategoryName;
            return this;
        }

        /**
         * @param discussionCategoryName If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
         * 
         * @return builder
         * 
         */
        public Builder discussionCategoryName(String discussionCategoryName) {
            return discussionCategoryName(Output.of(discussionCategoryName));
        }

        /**
         * @param draft Set to `false` to create a published release.
         * 
         * @return builder
         * 
         */
        public Builder draft(@Nullable Output<Boolean> draft) {
            $.draft = draft;
            return this;
        }

        /**
         * @param draft Set to `false` to create a published release.
         * 
         * @return builder
         * 
         */
        public Builder draft(Boolean draft) {
            return draft(Output.of(draft));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param generateReleaseNotes Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
         * 
         * @return builder
         * 
         */
        public Builder generateReleaseNotes(@Nullable Output<Boolean> generateReleaseNotes) {
            $.generateReleaseNotes = generateReleaseNotes;
            return this;
        }

        /**
         * @param generateReleaseNotes Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
         * 
         * @return builder
         * 
         */
        public Builder generateReleaseNotes(Boolean generateReleaseNotes) {
            return generateReleaseNotes(Output.of(generateReleaseNotes));
        }

        /**
         * @param htmlUrl URL of the release in GitHub.
         * 
         * @return builder
         * 
         */
        public Builder htmlUrl(@Nullable Output<String> htmlUrl) {
            $.htmlUrl = htmlUrl;
            return this;
        }

        /**
         * @param htmlUrl URL of the release in GitHub.
         * 
         * @return builder
         * 
         */
        public Builder htmlUrl(String htmlUrl) {
            return htmlUrl(Output.of(htmlUrl));
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the release.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeId GraphQL global node id for use with v4 API
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId GraphQL global node id for use with v4 API
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param prerelease Set to `false` to identify the release as a full release.
         * 
         * @return builder
         * 
         */
        public Builder prerelease(@Nullable Output<Boolean> prerelease) {
            $.prerelease = prerelease;
            return this;
        }

        /**
         * @param prerelease Set to `false` to identify the release as a full release.
         * 
         * @return builder
         * 
         */
        public Builder prerelease(Boolean prerelease) {
            return prerelease(Output.of(prerelease));
        }

        /**
         * @param publishedAt This is the date when the release was published. This will be empty if the release is a draft.
         * 
         * @return builder
         * 
         */
        public Builder publishedAt(@Nullable Output<String> publishedAt) {
            $.publishedAt = publishedAt;
            return this;
        }

        /**
         * @param publishedAt This is the date when the release was published. This will be empty if the release is a draft.
         * 
         * @return builder
         * 
         */
        public Builder publishedAt(String publishedAt) {
            return publishedAt(Output.of(publishedAt));
        }

        /**
         * @param releaseId The ID of the release.
         * 
         * @return builder
         * 
         */
        public Builder releaseId(@Nullable Output<Integer> releaseId) {
            $.releaseId = releaseId;
            return this;
        }

        /**
         * @param releaseId The ID of the release.
         * 
         * @return builder
         * 
         */
        public Builder releaseId(Integer releaseId) {
            return releaseId(Output.of(releaseId));
        }

        /**
         * @param repository The name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param tagName The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder tagName(@Nullable Output<String> tagName) {
            $.tagName = tagName;
            return this;
        }

        /**
         * @param tagName The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder tagName(String tagName) {
            return tagName(Output.of(tagName));
        }

        /**
         * @param tarballUrl URL that can be provided to API calls to fetch the release TAR archive.
         * 
         * @return builder
         * 
         */
        public Builder tarballUrl(@Nullable Output<String> tarballUrl) {
            $.tarballUrl = tarballUrl;
            return this;
        }

        /**
         * @param tarballUrl URL that can be provided to API calls to fetch the release TAR archive.
         * 
         * @return builder
         * 
         */
        public Builder tarballUrl(String tarballUrl) {
            return tarballUrl(Output.of(tarballUrl));
        }

        /**
         * @param targetCommitish The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
         * 
         * @return builder
         * 
         */
        public Builder targetCommitish(@Nullable Output<String> targetCommitish) {
            $.targetCommitish = targetCommitish;
            return this;
        }

        /**
         * @param targetCommitish The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
         * 
         * @return builder
         * 
         */
        public Builder targetCommitish(String targetCommitish) {
            return targetCommitish(Output.of(targetCommitish));
        }

        /**
         * @param uploadUrl URL that can be provided to API calls to upload assets.
         * 
         * @return builder
         * 
         */
        public Builder uploadUrl(@Nullable Output<String> uploadUrl) {
            $.uploadUrl = uploadUrl;
            return this;
        }

        /**
         * @param uploadUrl URL that can be provided to API calls to upload assets.
         * 
         * @return builder
         * 
         */
        public Builder uploadUrl(String uploadUrl) {
            return uploadUrl(Output.of(uploadUrl));
        }

        /**
         * @param url URL that can be provided to API calls that reference this release.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL that can be provided to API calls that reference this release.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param zipballUrl URL that can be provided to API calls to fetch the release ZIP archive.
         * 
         * @return builder
         * 
         */
        public Builder zipballUrl(@Nullable Output<String> zipballUrl) {
            $.zipballUrl = zipballUrl;
            return this;
        }

        /**
         * @param zipballUrl URL that can be provided to API calls to fetch the release ZIP archive.
         * 
         * @return builder
         * 
         */
        public Builder zipballUrl(String zipballUrl) {
            return zipballUrl(Output.of(zipballUrl));
        }

        public ReleaseState build() {
            return $;
        }
    }

}
