// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryDeployKeyState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryDeployKeyState Empty = new RepositoryDeployKeyState();

    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * A SSH key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return A SSH key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A boolean qualifying the key to be either read only or read/write.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return A boolean qualifying the key to be either read only or read/write.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Name of the GitHub repository.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return Name of the GitHub repository.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * A title.
     * 
     * Changing any of the fields forces re-creating the resource.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return A title.
     * 
     * Changing any of the fields forces re-creating the resource.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private RepositoryDeployKeyState() {}

    private RepositoryDeployKeyState(RepositoryDeployKeyState $) {
        this.etag = $.etag;
        this.key = $.key;
        this.readOnly = $.readOnly;
        this.repository = $.repository;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryDeployKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryDeployKeyState $;

        public Builder() {
            $ = new RepositoryDeployKeyState();
        }

        public Builder(RepositoryDeployKeyState defaults) {
            $ = new RepositoryDeployKeyState(Objects.requireNonNull(defaults));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param key A SSH key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key A SSH key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param readOnly A boolean qualifying the key to be either read only or read/write.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly A boolean qualifying the key to be either read only or read/write.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param repository Name of the GitHub repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository Name of the GitHub repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param title A title.
         * 
         * Changing any of the fields forces re-creating the resource.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title A title.
         * 
         * Changing any of the fields forces re-creating the resource.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public RepositoryDeployKeyState build() {
            return $;
        }
    }

}
