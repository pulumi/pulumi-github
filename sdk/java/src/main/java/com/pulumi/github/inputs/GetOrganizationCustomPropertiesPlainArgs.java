// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrganizationCustomPropertiesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOrganizationCustomPropertiesPlainArgs Empty = new GetOrganizationCustomPropertiesPlainArgs();

    /**
     * List of allowed values for the custom property. Only populated when `valueType` is `singleSelect` or `multiSelect`.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable List<String> allowedValues;

    /**
     * @return List of allowed values for the custom property. Only populated when `valueType` is `singleSelect` or `multiSelect`.
     * 
     */
    public Optional<List<String>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * The default value of the custom property.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable String defaultValue;

    /**
     * @return The default value of the custom property.
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * The description of the custom property.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the custom property.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the custom property to retrieve.
     * 
     */
    @Import(name="propertyName", required=true)
    private String propertyName;

    /**
     * @return The name of the custom property to retrieve.
     * 
     */
    public String propertyName() {
        return this.propertyName;
    }

    /**
     * Whether the custom property is required.
     * 
     */
    @Import(name="required")
    private @Nullable Boolean required;

    /**
     * @return Whether the custom property is required.
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`.
     * 
     */
    @Import(name="valueType")
    private @Nullable String valueType;

    /**
     * @return The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`.
     * 
     */
    public Optional<String> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    private GetOrganizationCustomPropertiesPlainArgs() {}

    private GetOrganizationCustomPropertiesPlainArgs(GetOrganizationCustomPropertiesPlainArgs $) {
        this.allowedValues = $.allowedValues;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.propertyName = $.propertyName;
        this.required = $.required;
        this.valueType = $.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrganizationCustomPropertiesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrganizationCustomPropertiesPlainArgs $;

        public Builder() {
            $ = new GetOrganizationCustomPropertiesPlainArgs();
        }

        public Builder(GetOrganizationCustomPropertiesPlainArgs defaults) {
            $ = new GetOrganizationCustomPropertiesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedValues List of allowed values for the custom property. Only populated when `valueType` is `singleSelect` or `multiSelect`.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(@Nullable List<String> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        /**
         * @param allowedValues List of allowed values for the custom property. Only populated when `valueType` is `singleSelect` or `multiSelect`.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(String... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }

        /**
         * @param defaultValue The default value of the custom property.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable String defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param description The description of the custom property.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param propertyName The name of the custom property to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder propertyName(String propertyName) {
            $.propertyName = propertyName;
            return this;
        }

        /**
         * @param required Whether the custom property is required.
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Boolean required) {
            $.required = required;
            return this;
        }

        /**
         * @param valueType The type of the custom property. Can be one of `string`, `singleSelect`, `multiSelect`, or `trueFalse`.
         * 
         * @return builder
         * 
         */
        public Builder valueType(@Nullable String valueType) {
            $.valueType = valueType;
            return this;
        }

        public GetOrganizationCustomPropertiesPlainArgs build() {
            if ($.propertyName == null) {
                throw new MissingRequiredPropertyException("GetOrganizationCustomPropertiesPlainArgs", "propertyName");
            }
            return $;
        }
    }

}
