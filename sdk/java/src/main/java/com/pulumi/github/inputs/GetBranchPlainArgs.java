// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetBranchPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBranchPlainArgs Empty = new GetBranchPlainArgs();

    /**
     * The repository branch to retrieve.
     * 
     */
    @Import(name="branch", required=true)
    private String branch;

    /**
     * @return The repository branch to retrieve.
     * 
     */
    public String branch() {
        return this.branch;
    }

    /**
     * The GitHub repository name.
     * 
     */
    @Import(name="repository", required=true)
    private String repository;

    /**
     * @return The GitHub repository name.
     * 
     */
    public String repository() {
        return this.repository;
    }

    private GetBranchPlainArgs() {}

    private GetBranchPlainArgs(GetBranchPlainArgs $) {
        this.branch = $.branch;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBranchPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBranchPlainArgs $;

        public Builder() {
            $ = new GetBranchPlainArgs();
        }

        public Builder(GetBranchPlainArgs defaults) {
            $ = new GetBranchPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The repository branch to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param repository The GitHub repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            $.repository = repository;
            return this;
        }

        public GetBranchPlainArgs build() {
            if ($.branch == null) {
                throw new MissingRequiredPropertyException("GetBranchPlainArgs", "branch");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("GetBranchPlainArgs", "repository");
            }
            return $;
        }
    }

}
