// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.RepositoryArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.RepositoryState;
import com.pulumi.github.outputs.RepositoryPages;
import com.pulumi.github.outputs.RepositoryTemplate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="github:index/repository:Repository")
public class Repository extends com.pulumi.resources.CustomResource {
    @Export(name="allowAutoMerge", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowAutoMerge;

    public Output<Optional<Boolean>> allowAutoMerge() {
        return Codegen.optional(this.allowAutoMerge);
    }
    @Export(name="allowMergeCommit", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowMergeCommit;

    public Output<Optional<Boolean>> allowMergeCommit() {
        return Codegen.optional(this.allowMergeCommit);
    }
    @Export(name="allowRebaseMerge", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowRebaseMerge;

    public Output<Optional<Boolean>> allowRebaseMerge() {
        return Codegen.optional(this.allowRebaseMerge);
    }
    @Export(name="allowSquashMerge", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowSquashMerge;

    public Output<Optional<Boolean>> allowSquashMerge() {
        return Codegen.optional(this.allowSquashMerge);
    }
    @Export(name="archiveOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> archiveOnDestroy;

    public Output<Optional<Boolean>> archiveOnDestroy() {
        return Codegen.optional(this.archiveOnDestroy);
    }
    @Export(name="archived", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> archived;

    public Output<Optional<Boolean>> archived() {
        return Codegen.optional(this.archived);
    }
    @Export(name="autoInit", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> autoInit;

    public Output<Optional<Boolean>> autoInit() {
        return Codegen.optional(this.autoInit);
    }
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     * 
     * @deprecated
     * Use the github_branch_default resource instead
     * 
     */
    @Deprecated /* Use the github_branch_default resource instead */
    @Export(name="defaultBranch", type=String.class, parameters={})
    private Output<String> defaultBranch;

    /**
     * @return Can only be set after initial repository creation, and only if the target branch exists
     * 
     */
    public Output<String> defaultBranch() {
        return this.defaultBranch;
    }
    @Export(name="deleteBranchOnMerge", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deleteBranchOnMerge;

    public Output<Optional<Boolean>> deleteBranchOnMerge() {
        return Codegen.optional(this.deleteBranchOnMerge);
    }
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    public Output<String> etag() {
        return this.etag;
    }
    @Export(name="fullName", type=String.class, parameters={})
    private Output<String> fullName;

    public Output<String> fullName() {
        return this.fullName;
    }
    @Export(name="gitCloneUrl", type=String.class, parameters={})
    private Output<String> gitCloneUrl;

    public Output<String> gitCloneUrl() {
        return this.gitCloneUrl;
    }
    @Export(name="gitignoreTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> gitignoreTemplate;

    public Output<Optional<String>> gitignoreTemplate() {
        return Codegen.optional(this.gitignoreTemplate);
    }
    @Export(name="hasDownloads", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> hasDownloads;

    public Output<Optional<Boolean>> hasDownloads() {
        return Codegen.optional(this.hasDownloads);
    }
    @Export(name="hasIssues", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> hasIssues;

    public Output<Optional<Boolean>> hasIssues() {
        return Codegen.optional(this.hasIssues);
    }
    @Export(name="hasProjects", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> hasProjects;

    public Output<Optional<Boolean>> hasProjects() {
        return Codegen.optional(this.hasProjects);
    }
    @Export(name="hasWiki", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> hasWiki;

    public Output<Optional<Boolean>> hasWiki() {
        return Codegen.optional(this.hasWiki);
    }
    @Export(name="homepageUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> homepageUrl;

    public Output<Optional<String>> homepageUrl() {
        return Codegen.optional(this.homepageUrl);
    }
    @Export(name="htmlUrl", type=String.class, parameters={})
    private Output<String> htmlUrl;

    public Output<String> htmlUrl() {
        return this.htmlUrl;
    }
    @Export(name="httpCloneUrl", type=String.class, parameters={})
    private Output<String> httpCloneUrl;

    public Output<String> httpCloneUrl() {
        return this.httpCloneUrl;
    }
    @Export(name="ignoreVulnerabilityAlertsDuringRead", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> ignoreVulnerabilityAlertsDuringRead;

    public Output<Optional<Boolean>> ignoreVulnerabilityAlertsDuringRead() {
        return Codegen.optional(this.ignoreVulnerabilityAlertsDuringRead);
    }
    @Export(name="isTemplate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isTemplate;

    public Output<Optional<Boolean>> isTemplate() {
        return Codegen.optional(this.isTemplate);
    }
    @Export(name="licenseTemplate", type=String.class, parameters={})
    private Output</* @Nullable */ String> licenseTemplate;

    public Output<Optional<String>> licenseTemplate() {
        return Codegen.optional(this.licenseTemplate);
    }
    @Export(name="mergeCommitMessage", type=String.class, parameters={})
    private Output</* @Nullable */ String> mergeCommitMessage;

    public Output<Optional<String>> mergeCommitMessage() {
        return Codegen.optional(this.mergeCommitMessage);
    }
    @Export(name="mergeCommitTitle", type=String.class, parameters={})
    private Output</* @Nullable */ String> mergeCommitTitle;

    public Output<Optional<String>> mergeCommitTitle() {
        return Codegen.optional(this.mergeCommitTitle);
    }
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="nodeId", type=String.class, parameters={})
    private Output<String> nodeId;

    public Output<String> nodeId() {
        return this.nodeId;
    }
    @Export(name="pages", type=RepositoryPages.class, parameters={})
    private Output</* @Nullable */ RepositoryPages> pages;

    public Output<Optional<RepositoryPages>> pages() {
        return Codegen.optional(this.pages);
    }
    /**
     * @deprecated
     * use visibility instead
     * 
     */
    @Deprecated /* use visibility instead */
    @Export(name="private", type=Boolean.class, parameters={})
    private Output<Boolean> private_;

    public Output<Boolean> private_() {
        return this.private_;
    }
    @Export(name="repoId", type=Integer.class, parameters={})
    private Output<Integer> repoId;

    public Output<Integer> repoId() {
        return this.repoId;
    }
    @Export(name="squashMergeCommitMessage", type=String.class, parameters={})
    private Output</* @Nullable */ String> squashMergeCommitMessage;

    public Output<Optional<String>> squashMergeCommitMessage() {
        return Codegen.optional(this.squashMergeCommitMessage);
    }
    @Export(name="squashMergeCommitTitle", type=String.class, parameters={})
    private Output</* @Nullable */ String> squashMergeCommitTitle;

    public Output<Optional<String>> squashMergeCommitTitle() {
        return Codegen.optional(this.squashMergeCommitTitle);
    }
    @Export(name="sshCloneUrl", type=String.class, parameters={})
    private Output<String> sshCloneUrl;

    public Output<String> sshCloneUrl() {
        return this.sshCloneUrl;
    }
    @Export(name="svnUrl", type=String.class, parameters={})
    private Output<String> svnUrl;

    public Output<String> svnUrl() {
        return this.svnUrl;
    }
    @Export(name="template", type=RepositoryTemplate.class, parameters={})
    private Output</* @Nullable */ RepositoryTemplate> template;

    public Output<Optional<RepositoryTemplate>> template() {
        return Codegen.optional(this.template);
    }
    @Export(name="topics", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> topics;

    public Output<Optional<List<String>>> topics() {
        return Codegen.optional(this.topics);
    }
    @Export(name="visibility", type=String.class, parameters={})
    private Output<String> visibility;

    public Output<String> visibility() {
        return this.visibility;
    }
    @Export(name="vulnerabilityAlerts", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> vulnerabilityAlerts;

    public Output<Optional<Boolean>> vulnerabilityAlerts() {
        return Codegen.optional(this.vulnerabilityAlerts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Repository(String name) {
        this(name, RepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Repository(String name, @Nullable RepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Repository(String name, @Nullable RepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repository:Repository", name, args == null ? RepositoryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Repository(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repository:Repository", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Repository get(String name, Output<String> id, @Nullable RepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Repository(name, id, state, options);
    }
}
