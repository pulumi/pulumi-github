// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBranchResult {
    private String branch;
    /**
     * @return An etag representing the Branch object.
     * 
     */
    private String etag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A string representing a branch reference, in the form of `refs/heads/&lt;branch&gt;`.
     * 
     */
    private String ref;
    private String repository;
    /**
     * @return A string storing the reference&#39;s `HEAD` commit&#39;s SHA1.
     * 
     */
    private String sha;

    private GetBranchResult() {}
    public String branch() {
        return this.branch;
    }
    /**
     * @return An etag representing the Branch object.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A string representing a branch reference, in the form of `refs/heads/&lt;branch&gt;`.
     * 
     */
    public String ref() {
        return this.ref;
    }
    public String repository() {
        return this.repository;
    }
    /**
     * @return A string storing the reference&#39;s `HEAD` commit&#39;s SHA1.
     * 
     */
    public String sha() {
        return this.sha;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBranchResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String branch;
        private String etag;
        private String id;
        private String ref;
        private String repository;
        private String sha;
        public Builder() {}
        public Builder(GetBranchResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.ref = defaults.ref;
    	      this.repository = defaults.repository;
    	      this.sha = defaults.sha;
        }

        @CustomType.Setter
        public Builder branch(String branch) {
            if (branch == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "branch");
            }
            this.branch = branch;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder sha(String sha) {
            if (sha == null) {
              throw new MissingRequiredPropertyException("GetBranchResult", "sha");
            }
            this.sha = sha;
            return this;
        }
        public GetBranchResult build() {
            final var _resultValue = new GetBranchResult();
            _resultValue.branch = branch;
            _resultValue.etag = etag;
            _resultValue.id = id;
            _resultValue.ref = ref;
            _resultValue.repository = repository;
            _resultValue.sha = sha;
            return _resultValue;
        }
    }
}
