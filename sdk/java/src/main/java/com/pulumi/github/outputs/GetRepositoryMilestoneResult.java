// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRepositoryMilestoneResult {
    /**
     * @return Description of the milestone.
     * 
     */
    private String description;
    /**
     * @return The milestone due date (in ISO-8601 `yyyy-mm-dd` format).
     * 
     */
    private String dueDate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Integer number;
    private String owner;
    private String repository;
    /**
     * @return State of the milestone.
     * 
     */
    private String state;
    /**
     * @return Title of the milestone.
     * 
     */
    private String title;

    private GetRepositoryMilestoneResult() {}
    /**
     * @return Description of the milestone.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The milestone due date (in ISO-8601 `yyyy-mm-dd` format).
     * 
     */
    public String dueDate() {
        return this.dueDate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Integer number() {
        return this.number;
    }
    public String owner() {
        return this.owner;
    }
    public String repository() {
        return this.repository;
    }
    /**
     * @return State of the milestone.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Title of the milestone.
     * 
     */
    public String title() {
        return this.title;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryMilestoneResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String dueDate;
        private String id;
        private Integer number;
        private String owner;
        private String repository;
        private String state;
        private String title;
        public Builder() {}
        public Builder(GetRepositoryMilestoneResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.dueDate = defaults.dueDate;
    	      this.id = defaults.id;
    	      this.number = defaults.number;
    	      this.owner = defaults.owner;
    	      this.repository = defaults.repository;
    	      this.state = defaults.state;
    	      this.title = defaults.title;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dueDate(String dueDate) {
            if (dueDate == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "dueDate");
            }
            this.dueDate = dueDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder repository(String repository) {
            if (repository == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "repository");
            }
            this.repository = repository;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("GetRepositoryMilestoneResult", "title");
            }
            this.title = title;
            return this;
        }
        public GetRepositoryMilestoneResult build() {
            final var _resultValue = new GetRepositoryMilestoneResult();
            _resultValue.description = description;
            _resultValue.dueDate = dueDate;
            _resultValue.id = id;
            _resultValue.number = number;
            _resultValue.owner = owner;
            _resultValue.repository = repository;
            _resultValue.state = state;
            _resultValue.title = title;
            return _resultValue;
        }
    }
}
