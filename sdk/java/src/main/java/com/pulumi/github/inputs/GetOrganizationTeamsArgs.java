// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetOrganizationTeamsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOrganizationTeamsArgs Empty = new GetOrganizationTeamsArgs();

    /**
     * (Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.
     * 
     */
    @Import(name="resultsPerPage")
    private @Nullable Output<Integer> resultsPerPage;

    /**
     * @return (Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.
     * 
     */
    public Optional<Output<Integer>> resultsPerPage() {
        return Optional.ofNullable(this.resultsPerPage);
    }

    /**
     * (Optional) Only return teams that are at the organization&#39;s root, i.e. no nested teams. Defaults to `false`.
     * 
     */
    @Import(name="rootTeamsOnly")
    private @Nullable Output<Boolean> rootTeamsOnly;

    /**
     * @return (Optional) Only return teams that are at the organization&#39;s root, i.e. no nested teams. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> rootTeamsOnly() {
        return Optional.ofNullable(this.rootTeamsOnly);
    }

    /**
     * (Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.
     * 
     */
    @Import(name="summaryOnly")
    private @Nullable Output<Boolean> summaryOnly;

    /**
     * @return (Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> summaryOnly() {
        return Optional.ofNullable(this.summaryOnly);
    }

    private GetOrganizationTeamsArgs() {}

    private GetOrganizationTeamsArgs(GetOrganizationTeamsArgs $) {
        this.resultsPerPage = $.resultsPerPage;
        this.rootTeamsOnly = $.rootTeamsOnly;
        this.summaryOnly = $.summaryOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOrganizationTeamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOrganizationTeamsArgs $;

        public Builder() {
            $ = new GetOrganizationTeamsArgs();
        }

        public Builder(GetOrganizationTeamsArgs defaults) {
            $ = new GetOrganizationTeamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resultsPerPage (Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder resultsPerPage(@Nullable Output<Integer> resultsPerPage) {
            $.resultsPerPage = resultsPerPage;
            return this;
        }

        /**
         * @param resultsPerPage (Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder resultsPerPage(Integer resultsPerPage) {
            return resultsPerPage(Output.of(resultsPerPage));
        }

        /**
         * @param rootTeamsOnly (Optional) Only return teams that are at the organization&#39;s root, i.e. no nested teams. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder rootTeamsOnly(@Nullable Output<Boolean> rootTeamsOnly) {
            $.rootTeamsOnly = rootTeamsOnly;
            return this;
        }

        /**
         * @param rootTeamsOnly (Optional) Only return teams that are at the organization&#39;s root, i.e. no nested teams. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder rootTeamsOnly(Boolean rootTeamsOnly) {
            return rootTeamsOnly(Output.of(rootTeamsOnly));
        }

        /**
         * @param summaryOnly (Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder summaryOnly(@Nullable Output<Boolean> summaryOnly) {
            $.summaryOnly = summaryOnly;
            return this;
        }

        /**
         * @param summaryOnly (Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder summaryOnly(Boolean summaryOnly) {
            return summaryOnly(Output.of(summaryOnly));
        }

        public GetOrganizationTeamsArgs build() {
            return $;
        }
    }

}
