// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.github.outputs.RepositoryRulesetRulesRequiredStatusChecksRequiredCheck;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryRulesetRulesRequiredStatusChecks {
    /**
     * @return Status checks that are required. Several can be defined.
     * 
     */
    private List<RepositoryRulesetRulesRequiredStatusChecksRequiredCheck> requiredChecks;
    /**
     * @return Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
     * 
     */
    private @Nullable Boolean strictRequiredStatusChecksPolicy;

    private RepositoryRulesetRulesRequiredStatusChecks() {}
    /**
     * @return Status checks that are required. Several can be defined.
     * 
     */
    public List<RepositoryRulesetRulesRequiredStatusChecksRequiredCheck> requiredChecks() {
        return this.requiredChecks;
    }
    /**
     * @return Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.
     * 
     */
    public Optional<Boolean> strictRequiredStatusChecksPolicy() {
        return Optional.ofNullable(this.strictRequiredStatusChecksPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryRulesetRulesRequiredStatusChecks defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<RepositoryRulesetRulesRequiredStatusChecksRequiredCheck> requiredChecks;
        private @Nullable Boolean strictRequiredStatusChecksPolicy;
        public Builder() {}
        public Builder(RepositoryRulesetRulesRequiredStatusChecks defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.requiredChecks = defaults.requiredChecks;
    	      this.strictRequiredStatusChecksPolicy = defaults.strictRequiredStatusChecksPolicy;
        }

        @CustomType.Setter
        public Builder requiredChecks(List<RepositoryRulesetRulesRequiredStatusChecksRequiredCheck> requiredChecks) {
            if (requiredChecks == null) {
              throw new MissingRequiredPropertyException("RepositoryRulesetRulesRequiredStatusChecks", "requiredChecks");
            }
            this.requiredChecks = requiredChecks;
            return this;
        }
        public Builder requiredChecks(RepositoryRulesetRulesRequiredStatusChecksRequiredCheck... requiredChecks) {
            return requiredChecks(List.of(requiredChecks));
        }
        @CustomType.Setter
        public Builder strictRequiredStatusChecksPolicy(@Nullable Boolean strictRequiredStatusChecksPolicy) {

            this.strictRequiredStatusChecksPolicy = strictRequiredStatusChecksPolicy;
            return this;
        }
        public RepositoryRulesetRulesRequiredStatusChecks build() {
            final var _resultValue = new RepositoryRulesetRulesRequiredStatusChecks();
            _resultValue.requiredChecks = requiredChecks;
            _resultValue.strictRequiredStatusChecksPolicy = strictRequiredStatusChecksPolicy;
            return _resultValue;
        }
    }
}
