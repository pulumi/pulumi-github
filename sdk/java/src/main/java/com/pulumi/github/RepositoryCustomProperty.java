// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.RepositoryCustomPropertyArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.RepositoryCustomPropertyState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and manage a specific custom property for a GitHub repository.
 * 
 * ## Example Usage
 * 
 * &gt; Note that this assumes there already is a custom property defined on the org level called `my-cool-property` of type `string`
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.Repository;
 * import com.pulumi.github.RepositoryArgs;
 * import com.pulumi.github.RepositoryCustomProperty;
 * import com.pulumi.github.RepositoryCustomPropertyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Repository("example", RepositoryArgs.builder()
 *             .name("example")
 *             .description("My awesome codebase")
 *             .build());
 * 
 *         var string = new RepositoryCustomProperty("string", RepositoryCustomPropertyArgs.builder()
 *             .repository(example.name())
 *             .propertyName("my-cool-property")
 *             .propertyType("string")
 *             .propertyValues("test")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * GitHub Repository Custom Property can be imported using an ID made up of a comibnation of the names of the organization, repository, custom property separated by a `:` character, e.g.
 * 
 * ```sh
 * $ pulumi import github:index/repositoryCustomProperty:RepositoryCustomProperty example &lt;organization-name&gt;:&lt;repo-name&gt;:&lt;custom-property-name&gt;
 * ```
 * 
 */
@ResourceType(type="github:index/repositoryCustomProperty:RepositoryCustomProperty")
public class RepositoryCustomProperty extends com.pulumi.resources.CustomResource {
    /**
     * Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
     * 
     */
    @Export(name="propertyName", refs={String.class}, tree="[0]")
    private Output<String> propertyName;

    /**
     * @return Name of the custom property. Note that a pre-requisiste for this resource is that a custom property of this name has already been defined on the organization level
     * 
     */
    public Output<String> propertyName() {
        return this.propertyName;
    }
    /**
     * Type of the custom property. Can be one of `singleSelect`, `multiSelect`, `string`, or `trueFalse`
     * 
     */
    @Export(name="propertyType", refs={String.class}, tree="[0]")
    private Output<String> propertyType;

    /**
     * @return Type of the custom property. Can be one of `singleSelect`, `multiSelect`, `string`, or `trueFalse`
     * 
     */
    public Output<String> propertyType() {
        return this.propertyType;
    }
    /**
     * Value of the custom property in the form of an array. Properties of type `singleSelect`, `string`, and `trueFalse` are represented as a string array of length 1
     * 
     */
    @Export(name="propertyValues", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> propertyValues;

    /**
     * @return Value of the custom property in the form of an array. Properties of type `singleSelect`, `string`, and `trueFalse` are represented as a string array of length 1
     * 
     */
    public Output<List<String>> propertyValues() {
        return this.propertyValues;
    }
    /**
     * The repository of the environment.
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return The repository of the environment.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RepositoryCustomProperty(java.lang.String name) {
        this(name, RepositoryCustomPropertyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RepositoryCustomProperty(java.lang.String name, RepositoryCustomPropertyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RepositoryCustomProperty(java.lang.String name, RepositoryCustomPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryCustomProperty:RepositoryCustomProperty", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RepositoryCustomProperty(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryCustomPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryCustomProperty:RepositoryCustomProperty", name, state, makeResourceOptions(options, id), false);
    }

    private static RepositoryCustomPropertyArgs makeArgs(RepositoryCustomPropertyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepositoryCustomPropertyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RepositoryCustomProperty get(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryCustomPropertyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RepositoryCustomProperty(name, id, state, options);
    }
}
