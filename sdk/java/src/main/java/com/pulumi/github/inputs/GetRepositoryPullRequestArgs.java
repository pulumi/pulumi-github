// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryPullRequestArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryPullRequestArgs Empty = new GetRepositoryPullRequestArgs();

    /**
     * Name of the base repository to retrieve the Pull Request from.
     * 
     */
    @Import(name="baseRepository", required=true)
    private Output<String> baseRepository;

    /**
     * @return Name of the base repository to retrieve the Pull Request from.
     * 
     */
    public Output<String> baseRepository() {
        return this.baseRepository;
    }

    /**
     * The number of the Pull Request within the repository.
     * 
     */
    @Import(name="number", required=true)
    private Output<Integer> number;

    /**
     * @return The number of the Pull Request within the repository.
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }

    /**
     * Owner of the repository. If not provided, the provider&#39;s default owner is used.
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Owner of the repository. If not provided, the provider&#39;s default owner is used.
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    private GetRepositoryPullRequestArgs() {}

    private GetRepositoryPullRequestArgs(GetRepositoryPullRequestArgs $) {
        this.baseRepository = $.baseRepository;
        this.number = $.number;
        this.owner = $.owner;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryPullRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryPullRequestArgs $;

        public Builder() {
            $ = new GetRepositoryPullRequestArgs();
        }

        public Builder(GetRepositoryPullRequestArgs defaults) {
            $ = new GetRepositoryPullRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseRepository Name of the base repository to retrieve the Pull Request from.
         * 
         * @return builder
         * 
         */
        public Builder baseRepository(Output<String> baseRepository) {
            $.baseRepository = baseRepository;
            return this;
        }

        /**
         * @param baseRepository Name of the base repository to retrieve the Pull Request from.
         * 
         * @return builder
         * 
         */
        public Builder baseRepository(String baseRepository) {
            return baseRepository(Output.of(baseRepository));
        }

        /**
         * @param number The number of the Pull Request within the repository.
         * 
         * @return builder
         * 
         */
        public Builder number(Output<Integer> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number The number of the Pull Request within the repository.
         * 
         * @return builder
         * 
         */
        public Builder number(Integer number) {
            return number(Output.of(number));
        }

        /**
         * @param owner Owner of the repository. If not provided, the provider&#39;s default owner is used.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Owner of the repository. If not provided, the provider&#39;s default owner is used.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public GetRepositoryPullRequestArgs build() {
            if ($.baseRepository == null) {
                throw new MissingRequiredPropertyException("GetRepositoryPullRequestArgs", "baseRepository");
            }
            if ($.number == null) {
                throw new MissingRequiredPropertyException("GetRepositoryPullRequestArgs", "number");
            }
            return $;
        }
    }

}
