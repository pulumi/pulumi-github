// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisAdvancedSecurityArgs;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisSecretScanningArgs;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositorySecurityAndAnalysisArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositorySecurityAndAnalysisArgs Empty = new RepositorySecurityAndAnalysisArgs();

    /**
     * The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository&#39;s visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
     * 
     */
    @Import(name="advancedSecurity")
    private @Nullable Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs> advancedSecurity;

    /**
     * @return The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository&#39;s visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
     * 
     */
    public Optional<Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs>> advancedSecurity() {
        return Optional.ofNullable(this.advancedSecurity);
    }

    /**
     * The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
     * 
     */
    @Import(name="secretScanning")
    private @Nullable Output<RepositorySecurityAndAnalysisSecretScanningArgs> secretScanning;

    /**
     * @return The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
     * 
     */
    public Optional<Output<RepositorySecurityAndAnalysisSecretScanningArgs>> secretScanning() {
        return Optional.ofNullable(this.secretScanning);
    }

    /**
     * The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
     * 
     */
    @Import(name="secretScanningPushProtection")
    private @Nullable Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs> secretScanningPushProtection;

    /**
     * @return The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
     * 
     */
    public Optional<Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs>> secretScanningPushProtection() {
        return Optional.ofNullable(this.secretScanningPushProtection);
    }

    private RepositorySecurityAndAnalysisArgs() {}

    private RepositorySecurityAndAnalysisArgs(RepositorySecurityAndAnalysisArgs $) {
        this.advancedSecurity = $.advancedSecurity;
        this.secretScanning = $.secretScanning;
        this.secretScanningPushProtection = $.secretScanningPushProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositorySecurityAndAnalysisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositorySecurityAndAnalysisArgs $;

        public Builder() {
            $ = new RepositorySecurityAndAnalysisArgs();
        }

        public Builder(RepositorySecurityAndAnalysisArgs defaults) {
            $ = new RepositorySecurityAndAnalysisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedSecurity The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository&#39;s visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
         * 
         * @return builder
         * 
         */
        public Builder advancedSecurity(@Nullable Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs> advancedSecurity) {
            $.advancedSecurity = advancedSecurity;
            return this;
        }

        /**
         * @param advancedSecurity The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository&#39;s visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.
         * 
         * @return builder
         * 
         */
        public Builder advancedSecurity(RepositorySecurityAndAnalysisAdvancedSecurityArgs advancedSecurity) {
            return advancedSecurity(Output.of(advancedSecurity));
        }

        /**
         * @param secretScanning The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanning(@Nullable Output<RepositorySecurityAndAnalysisSecretScanningArgs> secretScanning) {
            $.secretScanning = secretScanning;
            return this;
        }

        /**
         * @param secretScanning The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanning(RepositorySecurityAndAnalysisSecretScanningArgs secretScanning) {
            return secretScanning(Output.of(secretScanning));
        }

        /**
         * @param secretScanningPushProtection The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanningPushProtection(@Nullable Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs> secretScanningPushProtection) {
            $.secretScanningPushProtection = secretScanningPushProtection;
            return this;
        }

        /**
         * @param secretScanningPushProtection The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanningPushProtection(RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs secretScanningPushProtection) {
            return secretScanningPushProtection(Output.of(secretScanningPushProtection));
        }

        public RepositorySecurityAndAnalysisArgs build() {
            return $;
        }
    }

}
