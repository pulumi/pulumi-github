// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetIpRangesResult {
    /**
     * @return An array of IP addresses in CIDR format specifying the addresses that incoming requests from GitHub actions will originate from.
     * 
     */
    private List<String> actions;
    /**
     * @return A subset of the `actions` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> actionsIpv4s;
    /**
     * @return A subset of the `actions` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> actionsIpv6s;
    /**
     * @return A subset of the `api` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> apiIpv4s;
    /**
     * @return A subset of the `api` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> apiIpv6s;
    /**
     * @return An Array of IP addresses in CIDR format for the GitHub API.
     * 
     */
    private List<String> apis;
    /**
     * @return A subset of the `dependabot` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> dependabotIpv4s;
    /**
     * @return A subset of the `dependabot` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> dependabotIpv6s;
    /**
     * @return An array of IP addresses in CIDR format specifying the A records for dependabot.
     * 
     */
    private List<String> dependabots;
    /**
     * @return A subset of the `git` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> gitIpv4s;
    /**
     * @return A subset of the `git` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> gitIpv6s;
    /**
     * @return An Array of IP addresses in CIDR format specifying the Git servers.
     * 
     */
    private List<String> gits;
    /**
     * @return An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.
     * 
     */
    private List<String> hooks;
    /**
     * @return A subset of the `hooks` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> hooksIpv4s;
    /**
     * @return A subset of the `hooks` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> hooksIpv6s;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A subset of the `importer` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> importerIpv4s;
    /**
     * @return A subset of the `importer` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> importerIpv6s;
    /**
     * @return An Array of IP addresses in CIDR format specifying the A records for GitHub Importer.
     * 
     */
    private List<String> importers;
    /**
     * @return An Array of IP addresses in CIDR format specifying the A records for GitHub Pages.
     * 
     */
    private List<String> pages;
    /**
     * @return A subset of the `pages` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> pagesIpv4s;
    /**
     * @return A subset of the `pages` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> pagesIpv6s;
    /**
     * @return A subset of the `web` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    private List<String> webIpv4s;
    /**
     * @return A subset of the `web` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    private List<String> webIpv6s;
    /**
     * @return An Array of IP addresses in CIDR format for GitHub Web.
     * 
     */
    private List<String> webs;

    private GetIpRangesResult() {}
    /**
     * @return An array of IP addresses in CIDR format specifying the addresses that incoming requests from GitHub actions will originate from.
     * 
     */
    public List<String> actions() {
        return this.actions;
    }
    /**
     * @return A subset of the `actions` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> actionsIpv4s() {
        return this.actionsIpv4s;
    }
    /**
     * @return A subset of the `actions` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> actionsIpv6s() {
        return this.actionsIpv6s;
    }
    /**
     * @return A subset of the `api` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> apiIpv4s() {
        return this.apiIpv4s;
    }
    /**
     * @return A subset of the `api` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> apiIpv6s() {
        return this.apiIpv6s;
    }
    /**
     * @return An Array of IP addresses in CIDR format for the GitHub API.
     * 
     */
    public List<String> apis() {
        return this.apis;
    }
    /**
     * @return A subset of the `dependabot` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> dependabotIpv4s() {
        return this.dependabotIpv4s;
    }
    /**
     * @return A subset of the `dependabot` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> dependabotIpv6s() {
        return this.dependabotIpv6s;
    }
    /**
     * @return An array of IP addresses in CIDR format specifying the A records for dependabot.
     * 
     */
    public List<String> dependabots() {
        return this.dependabots;
    }
    /**
     * @return A subset of the `git` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> gitIpv4s() {
        return this.gitIpv4s;
    }
    /**
     * @return A subset of the `git` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> gitIpv6s() {
        return this.gitIpv6s;
    }
    /**
     * @return An Array of IP addresses in CIDR format specifying the Git servers.
     * 
     */
    public List<String> gits() {
        return this.gits;
    }
    /**
     * @return An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.
     * 
     */
    public List<String> hooks() {
        return this.hooks;
    }
    /**
     * @return A subset of the `hooks` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> hooksIpv4s() {
        return this.hooksIpv4s;
    }
    /**
     * @return A subset of the `hooks` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> hooksIpv6s() {
        return this.hooksIpv6s;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A subset of the `importer` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> importerIpv4s() {
        return this.importerIpv4s;
    }
    /**
     * @return A subset of the `importer` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> importerIpv6s() {
        return this.importerIpv6s;
    }
    /**
     * @return An Array of IP addresses in CIDR format specifying the A records for GitHub Importer.
     * 
     */
    public List<String> importers() {
        return this.importers;
    }
    /**
     * @return An Array of IP addresses in CIDR format specifying the A records for GitHub Pages.
     * 
     */
    public List<String> pages() {
        return this.pages;
    }
    /**
     * @return A subset of the `pages` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> pagesIpv4s() {
        return this.pagesIpv4s;
    }
    /**
     * @return A subset of the `pages` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> pagesIpv6s() {
        return this.pagesIpv6s;
    }
    /**
     * @return A subset of the `web` array that contains IP addresses in IPv4 CIDR format.
     * 
     */
    public List<String> webIpv4s() {
        return this.webIpv4s;
    }
    /**
     * @return A subset of the `web` array that contains IP addresses in IPv6 CIDR format.
     * 
     */
    public List<String> webIpv6s() {
        return this.webIpv6s;
    }
    /**
     * @return An Array of IP addresses in CIDR format for GitHub Web.
     * 
     */
    public List<String> webs() {
        return this.webs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIpRangesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> actions;
        private List<String> actionsIpv4s;
        private List<String> actionsIpv6s;
        private List<String> apiIpv4s;
        private List<String> apiIpv6s;
        private List<String> apis;
        private List<String> dependabotIpv4s;
        private List<String> dependabotIpv6s;
        private List<String> dependabots;
        private List<String> gitIpv4s;
        private List<String> gitIpv6s;
        private List<String> gits;
        private List<String> hooks;
        private List<String> hooksIpv4s;
        private List<String> hooksIpv6s;
        private String id;
        private List<String> importerIpv4s;
        private List<String> importerIpv6s;
        private List<String> importers;
        private List<String> pages;
        private List<String> pagesIpv4s;
        private List<String> pagesIpv6s;
        private List<String> webIpv4s;
        private List<String> webIpv6s;
        private List<String> webs;
        public Builder() {}
        public Builder(GetIpRangesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.actionsIpv4s = defaults.actionsIpv4s;
    	      this.actionsIpv6s = defaults.actionsIpv6s;
    	      this.apiIpv4s = defaults.apiIpv4s;
    	      this.apiIpv6s = defaults.apiIpv6s;
    	      this.apis = defaults.apis;
    	      this.dependabotIpv4s = defaults.dependabotIpv4s;
    	      this.dependabotIpv6s = defaults.dependabotIpv6s;
    	      this.dependabots = defaults.dependabots;
    	      this.gitIpv4s = defaults.gitIpv4s;
    	      this.gitIpv6s = defaults.gitIpv6s;
    	      this.gits = defaults.gits;
    	      this.hooks = defaults.hooks;
    	      this.hooksIpv4s = defaults.hooksIpv4s;
    	      this.hooksIpv6s = defaults.hooksIpv6s;
    	      this.id = defaults.id;
    	      this.importerIpv4s = defaults.importerIpv4s;
    	      this.importerIpv6s = defaults.importerIpv6s;
    	      this.importers = defaults.importers;
    	      this.pages = defaults.pages;
    	      this.pagesIpv4s = defaults.pagesIpv4s;
    	      this.pagesIpv6s = defaults.pagesIpv6s;
    	      this.webIpv4s = defaults.webIpv4s;
    	      this.webIpv6s = defaults.webIpv6s;
    	      this.webs = defaults.webs;
        }

        @CustomType.Setter
        public Builder actions(List<String> actions) {
            if (actions == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "actions");
            }
            this.actions = actions;
            return this;
        }
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }
        @CustomType.Setter
        public Builder actionsIpv4s(List<String> actionsIpv4s) {
            if (actionsIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "actionsIpv4s");
            }
            this.actionsIpv4s = actionsIpv4s;
            return this;
        }
        public Builder actionsIpv4s(String... actionsIpv4s) {
            return actionsIpv4s(List.of(actionsIpv4s));
        }
        @CustomType.Setter
        public Builder actionsIpv6s(List<String> actionsIpv6s) {
            if (actionsIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "actionsIpv6s");
            }
            this.actionsIpv6s = actionsIpv6s;
            return this;
        }
        public Builder actionsIpv6s(String... actionsIpv6s) {
            return actionsIpv6s(List.of(actionsIpv6s));
        }
        @CustomType.Setter
        public Builder apiIpv4s(List<String> apiIpv4s) {
            if (apiIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "apiIpv4s");
            }
            this.apiIpv4s = apiIpv4s;
            return this;
        }
        public Builder apiIpv4s(String... apiIpv4s) {
            return apiIpv4s(List.of(apiIpv4s));
        }
        @CustomType.Setter
        public Builder apiIpv6s(List<String> apiIpv6s) {
            if (apiIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "apiIpv6s");
            }
            this.apiIpv6s = apiIpv6s;
            return this;
        }
        public Builder apiIpv6s(String... apiIpv6s) {
            return apiIpv6s(List.of(apiIpv6s));
        }
        @CustomType.Setter
        public Builder apis(List<String> apis) {
            if (apis == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "apis");
            }
            this.apis = apis;
            return this;
        }
        public Builder apis(String... apis) {
            return apis(List.of(apis));
        }
        @CustomType.Setter
        public Builder dependabotIpv4s(List<String> dependabotIpv4s) {
            if (dependabotIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "dependabotIpv4s");
            }
            this.dependabotIpv4s = dependabotIpv4s;
            return this;
        }
        public Builder dependabotIpv4s(String... dependabotIpv4s) {
            return dependabotIpv4s(List.of(dependabotIpv4s));
        }
        @CustomType.Setter
        public Builder dependabotIpv6s(List<String> dependabotIpv6s) {
            if (dependabotIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "dependabotIpv6s");
            }
            this.dependabotIpv6s = dependabotIpv6s;
            return this;
        }
        public Builder dependabotIpv6s(String... dependabotIpv6s) {
            return dependabotIpv6s(List.of(dependabotIpv6s));
        }
        @CustomType.Setter
        public Builder dependabots(List<String> dependabots) {
            if (dependabots == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "dependabots");
            }
            this.dependabots = dependabots;
            return this;
        }
        public Builder dependabots(String... dependabots) {
            return dependabots(List.of(dependabots));
        }
        @CustomType.Setter
        public Builder gitIpv4s(List<String> gitIpv4s) {
            if (gitIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "gitIpv4s");
            }
            this.gitIpv4s = gitIpv4s;
            return this;
        }
        public Builder gitIpv4s(String... gitIpv4s) {
            return gitIpv4s(List.of(gitIpv4s));
        }
        @CustomType.Setter
        public Builder gitIpv6s(List<String> gitIpv6s) {
            if (gitIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "gitIpv6s");
            }
            this.gitIpv6s = gitIpv6s;
            return this;
        }
        public Builder gitIpv6s(String... gitIpv6s) {
            return gitIpv6s(List.of(gitIpv6s));
        }
        @CustomType.Setter
        public Builder gits(List<String> gits) {
            if (gits == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "gits");
            }
            this.gits = gits;
            return this;
        }
        public Builder gits(String... gits) {
            return gits(List.of(gits));
        }
        @CustomType.Setter
        public Builder hooks(List<String> hooks) {
            if (hooks == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "hooks");
            }
            this.hooks = hooks;
            return this;
        }
        public Builder hooks(String... hooks) {
            return hooks(List.of(hooks));
        }
        @CustomType.Setter
        public Builder hooksIpv4s(List<String> hooksIpv4s) {
            if (hooksIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "hooksIpv4s");
            }
            this.hooksIpv4s = hooksIpv4s;
            return this;
        }
        public Builder hooksIpv4s(String... hooksIpv4s) {
            return hooksIpv4s(List.of(hooksIpv4s));
        }
        @CustomType.Setter
        public Builder hooksIpv6s(List<String> hooksIpv6s) {
            if (hooksIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "hooksIpv6s");
            }
            this.hooksIpv6s = hooksIpv6s;
            return this;
        }
        public Builder hooksIpv6s(String... hooksIpv6s) {
            return hooksIpv6s(List.of(hooksIpv6s));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder importerIpv4s(List<String> importerIpv4s) {
            if (importerIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "importerIpv4s");
            }
            this.importerIpv4s = importerIpv4s;
            return this;
        }
        public Builder importerIpv4s(String... importerIpv4s) {
            return importerIpv4s(List.of(importerIpv4s));
        }
        @CustomType.Setter
        public Builder importerIpv6s(List<String> importerIpv6s) {
            if (importerIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "importerIpv6s");
            }
            this.importerIpv6s = importerIpv6s;
            return this;
        }
        public Builder importerIpv6s(String... importerIpv6s) {
            return importerIpv6s(List.of(importerIpv6s));
        }
        @CustomType.Setter
        public Builder importers(List<String> importers) {
            if (importers == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "importers");
            }
            this.importers = importers;
            return this;
        }
        public Builder importers(String... importers) {
            return importers(List.of(importers));
        }
        @CustomType.Setter
        public Builder pages(List<String> pages) {
            if (pages == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "pages");
            }
            this.pages = pages;
            return this;
        }
        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }
        @CustomType.Setter
        public Builder pagesIpv4s(List<String> pagesIpv4s) {
            if (pagesIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "pagesIpv4s");
            }
            this.pagesIpv4s = pagesIpv4s;
            return this;
        }
        public Builder pagesIpv4s(String... pagesIpv4s) {
            return pagesIpv4s(List.of(pagesIpv4s));
        }
        @CustomType.Setter
        public Builder pagesIpv6s(List<String> pagesIpv6s) {
            if (pagesIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "pagesIpv6s");
            }
            this.pagesIpv6s = pagesIpv6s;
            return this;
        }
        public Builder pagesIpv6s(String... pagesIpv6s) {
            return pagesIpv6s(List.of(pagesIpv6s));
        }
        @CustomType.Setter
        public Builder webIpv4s(List<String> webIpv4s) {
            if (webIpv4s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "webIpv4s");
            }
            this.webIpv4s = webIpv4s;
            return this;
        }
        public Builder webIpv4s(String... webIpv4s) {
            return webIpv4s(List.of(webIpv4s));
        }
        @CustomType.Setter
        public Builder webIpv6s(List<String> webIpv6s) {
            if (webIpv6s == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "webIpv6s");
            }
            this.webIpv6s = webIpv6s;
            return this;
        }
        public Builder webIpv6s(String... webIpv6s) {
            return webIpv6s(List.of(webIpv6s));
        }
        @CustomType.Setter
        public Builder webs(List<String> webs) {
            if (webs == null) {
              throw new MissingRequiredPropertyException("GetIpRangesResult", "webs");
            }
            this.webs = webs;
            return this;
        }
        public Builder webs(String... webs) {
            return webs(List.of(webs));
        }
        public GetIpRangesResult build() {
            final var _resultValue = new GetIpRangesResult();
            _resultValue.actions = actions;
            _resultValue.actionsIpv4s = actionsIpv4s;
            _resultValue.actionsIpv6s = actionsIpv6s;
            _resultValue.apiIpv4s = apiIpv4s;
            _resultValue.apiIpv6s = apiIpv6s;
            _resultValue.apis = apis;
            _resultValue.dependabotIpv4s = dependabotIpv4s;
            _resultValue.dependabotIpv6s = dependabotIpv6s;
            _resultValue.dependabots = dependabots;
            _resultValue.gitIpv4s = gitIpv4s;
            _resultValue.gitIpv6s = gitIpv6s;
            _resultValue.gits = gits;
            _resultValue.hooks = hooks;
            _resultValue.hooksIpv4s = hooksIpv4s;
            _resultValue.hooksIpv6s = hooksIpv6s;
            _resultValue.id = id;
            _resultValue.importerIpv4s = importerIpv4s;
            _resultValue.importerIpv6s = importerIpv6s;
            _resultValue.importers = importers;
            _resultValue.pages = pages;
            _resultValue.pagesIpv4s = pagesIpv4s;
            _resultValue.pagesIpv6s = pagesIpv6s;
            _resultValue.webIpv4s = webIpv4s;
            _resultValue.webIpv6s = webIpv6s;
            _resultValue.webs = webs;
            return _resultValue;
        }
    }
}
