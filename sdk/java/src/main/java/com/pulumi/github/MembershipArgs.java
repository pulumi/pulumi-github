// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final MembershipArgs Empty = new MembershipArgs();

    /**
     * Defaults to `false`. If set to true,
     * when this resource is destroyed, the member will not be removed
     * from the organization. Instead, the member&#39;s role will be
     * downgraded to &#39;member&#39;.
     * 
     */
    @Import(name="downgradeOnDestroy")
    private @Nullable Output<Boolean> downgradeOnDestroy;

    /**
     * @return Defaults to `false`. If set to true,
     * when this resource is destroyed, the member will not be removed
     * from the organization. Instead, the member&#39;s role will be
     * downgraded to &#39;member&#39;.
     * 
     */
    public Optional<Output<Boolean>> downgradeOnDestroy() {
        return Optional.ofNullable(this.downgradeOnDestroy);
    }

    /**
     * The role of the user within the organization.
     * Must be one of `member` or `admin`. Defaults to `member`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the user within the organization.
     * Must be one of `member` or `admin`. Defaults to `member`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The user to add to the organization.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The user to add to the organization.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private MembershipArgs() {}

    private MembershipArgs(MembershipArgs $) {
        this.downgradeOnDestroy = $.downgradeOnDestroy;
        this.role = $.role;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MembershipArgs $;

        public Builder() {
            $ = new MembershipArgs();
        }

        public Builder(MembershipArgs defaults) {
            $ = new MembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param downgradeOnDestroy Defaults to `false`. If set to true,
         * when this resource is destroyed, the member will not be removed
         * from the organization. Instead, the member&#39;s role will be
         * downgraded to &#39;member&#39;.
         * 
         * @return builder
         * 
         */
        public Builder downgradeOnDestroy(@Nullable Output<Boolean> downgradeOnDestroy) {
            $.downgradeOnDestroy = downgradeOnDestroy;
            return this;
        }

        /**
         * @param downgradeOnDestroy Defaults to `false`. If set to true,
         * when this resource is destroyed, the member will not be removed
         * from the organization. Instead, the member&#39;s role will be
         * downgraded to &#39;member&#39;.
         * 
         * @return builder
         * 
         */
        public Builder downgradeOnDestroy(Boolean downgradeOnDestroy) {
            return downgradeOnDestroy(Output.of(downgradeOnDestroy));
        }

        /**
         * @param role The role of the user within the organization.
         * Must be one of `member` or `admin`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the user within the organization.
         * Must be one of `member` or `admin`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param username The user to add to the organization.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user to add to the organization.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public MembershipArgs build() {
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
