// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryPagesSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryPagesSourceArgs Empty = new RepositoryPagesSourceArgs();

    /**
     * The repository branch used to publish the site&#39;s source files. (i.e. `main` or `gh-pages`.
     * 
     */
    @Import(name="branch", required=true)
    private Output<String> branch;

    /**
     * @return The repository branch used to publish the site&#39;s source files. (i.e. `main` or `gh-pages`.
     * 
     */
    public Output<String> branch() {
        return this.branch;
    }

    /**
     * The repository directory from which the site publishes (Default: `/`).
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The repository directory from which the site publishes (Default: `/`).
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    private RepositoryPagesSourceArgs() {}

    private RepositoryPagesSourceArgs(RepositoryPagesSourceArgs $) {
        this.branch = $.branch;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryPagesSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryPagesSourceArgs $;

        public Builder() {
            $ = new RepositoryPagesSourceArgs();
        }

        public Builder(RepositoryPagesSourceArgs defaults) {
            $ = new RepositoryPagesSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The repository branch used to publish the site&#39;s source files. (i.e. `main` or `gh-pages`.
         * 
         * @return builder
         * 
         */
        public Builder branch(Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The repository branch used to publish the site&#39;s source files. (i.e. `main` or `gh-pages`.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param path The repository directory from which the site publishes (Default: `/`).
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The repository directory from which the site publishes (Default: `/`).
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public RepositoryPagesSourceArgs build() {
            if ($.branch == null) {
                throw new MissingRequiredPropertyException("RepositoryPagesSourceArgs", "branch");
            }
            return $;
        }
    }

}
