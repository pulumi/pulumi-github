// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCollaboratorsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCollaboratorsPlainArgs Empty = new GetCollaboratorsPlainArgs();

    /**
     * Filter collaborators returned by their affiliation. Can be one of: `outside`, `direct`, `all`.  Defaults to `all`.
     * 
     */
    @Import(name="affiliation")
    private @Nullable String affiliation;

    /**
     * @return Filter collaborators returned by their affiliation. Can be one of: `outside`, `direct`, `all`.  Defaults to `all`.
     * 
     */
    public Optional<String> affiliation() {
        return Optional.ofNullable(this.affiliation);
    }

    /**
     * The organization that owns the repository.
     * 
     */
    @Import(name="owner", required=true)
    private String owner;

    /**
     * @return The organization that owns the repository.
     * 
     */
    public String owner() {
        return this.owner;
    }

    /**
     * The name of the repository.
     * 
     */
    @Import(name="repository", required=true)
    private String repository;

    /**
     * @return The name of the repository.
     * 
     */
    public String repository() {
        return this.repository;
    }

    private GetCollaboratorsPlainArgs() {}

    private GetCollaboratorsPlainArgs(GetCollaboratorsPlainArgs $) {
        this.affiliation = $.affiliation;
        this.owner = $.owner;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCollaboratorsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCollaboratorsPlainArgs $;

        public Builder() {
            $ = new GetCollaboratorsPlainArgs();
        }

        public Builder(GetCollaboratorsPlainArgs defaults) {
            $ = new GetCollaboratorsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param affiliation Filter collaborators returned by their affiliation. Can be one of: `outside`, `direct`, `all`.  Defaults to `all`.
         * 
         * @return builder
         * 
         */
        public Builder affiliation(@Nullable String affiliation) {
            $.affiliation = affiliation;
            return this;
        }

        /**
         * @param owner The organization that owns the repository.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param repository The name of the repository.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            $.repository = repository;
            return this;
        }

        public GetCollaboratorsPlainArgs build() {
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("GetCollaboratorsPlainArgs", "owner");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("GetCollaboratorsPlainArgs", "repository");
            }
            return $;
        }
    }

}
