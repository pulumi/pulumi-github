// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrganizationResult {
    /**
     * @return Whether advanced security is enabled for new repositories.
     * 
     */
    private Boolean advancedSecurityEnabledForNewRepositories;
    /**
     * @return Default permission level members have for organization repositories.
     * 
     */
    private String defaultRepositoryPermission;
    /**
     * @return Whether Dependabot alerts is automatically enabled for new repositories.
     * 
     */
    private Boolean dependabotAlertsEnabledForNewRepositories;
    /**
     * @return Whether Dependabot security updates is automatically enabled for new repositories.
     * 
     */
    private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
    /**
     * @return Whether dependency graph is automatically enabled for new repositories.
     * 
     */
    private Boolean dependencyGraphEnabledForNewRepositories;
    /**
     * @return The organization account description
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean ignoreArchivedRepos;
    /**
     * @return The members login
     * 
     */
    private String login;
    /**
     * @return **Deprecated**: use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login` which will give you the same value, expect this field to be removed in next major version
     * 
     * @deprecated
     * Use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login`. Expect this field to be removed in next major version.
     * 
     */
    @Deprecated /* Use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login`. Expect this field to be removed in next major version. */
    private List<String> members;
    /**
     * @return The type of repository allowed to be created by members of the organization. Can be one of `ALL`, `PUBLIC`, `PRIVATE`, `NONE`.
     * 
     */
    private String membersAllowedRepositoryCreationType;
    /**
     * @return Whether organization members can create internal repositories.
     * 
     */
    private Boolean membersCanCreateInternalRepositories;
    /**
     * @return Whether organization members can create pages sites.
     * 
     */
    private Boolean membersCanCreatePages;
    /**
     * @return Whether organization members can create private pages sites.
     * 
     */
    private Boolean membersCanCreatePrivatePages;
    /**
     * @return Whether organization members can create private repositories.
     * 
     */
    private Boolean membersCanCreatePrivateRepositories;
    /**
     * @return Whether organization members can create public pages sites.
     * 
     */
    private Boolean membersCanCreatePublicPages;
    /**
     * @return Whether organization members can create public repositories.
     * 
     */
    private Boolean membersCanCreatePublicRepositories;
    /**
     * @return Whether non-admin organization members can create repositories.
     * 
     */
    private Boolean membersCanCreateRepositories;
    /**
     * @return Whether organization members can create private repository forks.
     * 
     */
    private Boolean membersCanForkPrivateRepositories;
    /**
     * @return The organization&#39;s public profile name
     * 
     */
    private String name;
    /**
     * @return GraphQL global node ID for use with the v4 API
     * 
     */
    private String nodeId;
    /**
     * @return The organization&#39;s name as used in URLs and the API
     * 
     */
    private String orgname;
    /**
     * @return The organization account plan name
     * 
     */
    private String plan;
    /**
     * @return (`list`) A list of the full names of the repositories in the organization formatted as `owner/name` strings
     * 
     */
    private List<String> repositories;
    /**
     * @return Whether secret scanning is automatically enabled for new repositories.
     * 
     */
    private Boolean secretScanningEnabledForNewRepositories;
    /**
     * @return Whether secret scanning push protection is automatically enabled for new repositories.
     * 
     */
    private Boolean secretScanningPushProtectionEnabledForNewRepositories;
    /**
     * @return Whether two-factor authentication is required for all members of the organization.
     * 
     */
    private Boolean twoFactorRequirementEnabled;
    /**
     * @return (`list`) A list with the members of the organization with following fields:
     * 
     */
    private List<Map<String,String>> users;
    /**
     * @return Whether organization members must sign all commits.
     * 
     */
    private Boolean webCommitSignoffRequired;

    private GetOrganizationResult() {}
    /**
     * @return Whether advanced security is enabled for new repositories.
     * 
     */
    public Boolean advancedSecurityEnabledForNewRepositories() {
        return this.advancedSecurityEnabledForNewRepositories;
    }
    /**
     * @return Default permission level members have for organization repositories.
     * 
     */
    public String defaultRepositoryPermission() {
        return this.defaultRepositoryPermission;
    }
    /**
     * @return Whether Dependabot alerts is automatically enabled for new repositories.
     * 
     */
    public Boolean dependabotAlertsEnabledForNewRepositories() {
        return this.dependabotAlertsEnabledForNewRepositories;
    }
    /**
     * @return Whether Dependabot security updates is automatically enabled for new repositories.
     * 
     */
    public Boolean dependabotSecurityUpdatesEnabledForNewRepositories() {
        return this.dependabotSecurityUpdatesEnabledForNewRepositories;
    }
    /**
     * @return Whether dependency graph is automatically enabled for new repositories.
     * 
     */
    public Boolean dependencyGraphEnabledForNewRepositories() {
        return this.dependencyGraphEnabledForNewRepositories;
    }
    /**
     * @return The organization account description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> ignoreArchivedRepos() {
        return Optional.ofNullable(this.ignoreArchivedRepos);
    }
    /**
     * @return The members login
     * 
     */
    public String login() {
        return this.login;
    }
    /**
     * @return **Deprecated**: use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login` which will give you the same value, expect this field to be removed in next major version
     * 
     * @deprecated
     * Use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login`. Expect this field to be removed in next major version.
     * 
     */
    @Deprecated /* Use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login`. Expect this field to be removed in next major version. */
    public List<String> members() {
        return this.members;
    }
    /**
     * @return The type of repository allowed to be created by members of the organization. Can be one of `ALL`, `PUBLIC`, `PRIVATE`, `NONE`.
     * 
     */
    public String membersAllowedRepositoryCreationType() {
        return this.membersAllowedRepositoryCreationType;
    }
    /**
     * @return Whether organization members can create internal repositories.
     * 
     */
    public Boolean membersCanCreateInternalRepositories() {
        return this.membersCanCreateInternalRepositories;
    }
    /**
     * @return Whether organization members can create pages sites.
     * 
     */
    public Boolean membersCanCreatePages() {
        return this.membersCanCreatePages;
    }
    /**
     * @return Whether organization members can create private pages sites.
     * 
     */
    public Boolean membersCanCreatePrivatePages() {
        return this.membersCanCreatePrivatePages;
    }
    /**
     * @return Whether organization members can create private repositories.
     * 
     */
    public Boolean membersCanCreatePrivateRepositories() {
        return this.membersCanCreatePrivateRepositories;
    }
    /**
     * @return Whether organization members can create public pages sites.
     * 
     */
    public Boolean membersCanCreatePublicPages() {
        return this.membersCanCreatePublicPages;
    }
    /**
     * @return Whether organization members can create public repositories.
     * 
     */
    public Boolean membersCanCreatePublicRepositories() {
        return this.membersCanCreatePublicRepositories;
    }
    /**
     * @return Whether non-admin organization members can create repositories.
     * 
     */
    public Boolean membersCanCreateRepositories() {
        return this.membersCanCreateRepositories;
    }
    /**
     * @return Whether organization members can create private repository forks.
     * 
     */
    public Boolean membersCanForkPrivateRepositories() {
        return this.membersCanForkPrivateRepositories;
    }
    /**
     * @return The organization&#39;s public profile name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return GraphQL global node ID for use with the v4 API
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return The organization&#39;s name as used in URLs and the API
     * 
     */
    public String orgname() {
        return this.orgname;
    }
    /**
     * @return The organization account plan name
     * 
     */
    public String plan() {
        return this.plan;
    }
    /**
     * @return (`list`) A list of the full names of the repositories in the organization formatted as `owner/name` strings
     * 
     */
    public List<String> repositories() {
        return this.repositories;
    }
    /**
     * @return Whether secret scanning is automatically enabled for new repositories.
     * 
     */
    public Boolean secretScanningEnabledForNewRepositories() {
        return this.secretScanningEnabledForNewRepositories;
    }
    /**
     * @return Whether secret scanning push protection is automatically enabled for new repositories.
     * 
     */
    public Boolean secretScanningPushProtectionEnabledForNewRepositories() {
        return this.secretScanningPushProtectionEnabledForNewRepositories;
    }
    /**
     * @return Whether two-factor authentication is required for all members of the organization.
     * 
     */
    public Boolean twoFactorRequirementEnabled() {
        return this.twoFactorRequirementEnabled;
    }
    /**
     * @return (`list`) A list with the members of the organization with following fields:
     * 
     */
    public List<Map<String,String>> users() {
        return this.users;
    }
    /**
     * @return Whether organization members must sign all commits.
     * 
     */
    public Boolean webCommitSignoffRequired() {
        return this.webCommitSignoffRequired;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean advancedSecurityEnabledForNewRepositories;
        private String defaultRepositoryPermission;
        private Boolean dependabotAlertsEnabledForNewRepositories;
        private Boolean dependabotSecurityUpdatesEnabledForNewRepositories;
        private Boolean dependencyGraphEnabledForNewRepositories;
        private String description;
        private String id;
        private @Nullable Boolean ignoreArchivedRepos;
        private String login;
        private List<String> members;
        private String membersAllowedRepositoryCreationType;
        private Boolean membersCanCreateInternalRepositories;
        private Boolean membersCanCreatePages;
        private Boolean membersCanCreatePrivatePages;
        private Boolean membersCanCreatePrivateRepositories;
        private Boolean membersCanCreatePublicPages;
        private Boolean membersCanCreatePublicRepositories;
        private Boolean membersCanCreateRepositories;
        private Boolean membersCanForkPrivateRepositories;
        private String name;
        private String nodeId;
        private String orgname;
        private String plan;
        private List<String> repositories;
        private Boolean secretScanningEnabledForNewRepositories;
        private Boolean secretScanningPushProtectionEnabledForNewRepositories;
        private Boolean twoFactorRequirementEnabled;
        private List<Map<String,String>> users;
        private Boolean webCommitSignoffRequired;
        public Builder() {}
        public Builder(GetOrganizationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedSecurityEnabledForNewRepositories = defaults.advancedSecurityEnabledForNewRepositories;
    	      this.defaultRepositoryPermission = defaults.defaultRepositoryPermission;
    	      this.dependabotAlertsEnabledForNewRepositories = defaults.dependabotAlertsEnabledForNewRepositories;
    	      this.dependabotSecurityUpdatesEnabledForNewRepositories = defaults.dependabotSecurityUpdatesEnabledForNewRepositories;
    	      this.dependencyGraphEnabledForNewRepositories = defaults.dependencyGraphEnabledForNewRepositories;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.ignoreArchivedRepos = defaults.ignoreArchivedRepos;
    	      this.login = defaults.login;
    	      this.members = defaults.members;
    	      this.membersAllowedRepositoryCreationType = defaults.membersAllowedRepositoryCreationType;
    	      this.membersCanCreateInternalRepositories = defaults.membersCanCreateInternalRepositories;
    	      this.membersCanCreatePages = defaults.membersCanCreatePages;
    	      this.membersCanCreatePrivatePages = defaults.membersCanCreatePrivatePages;
    	      this.membersCanCreatePrivateRepositories = defaults.membersCanCreatePrivateRepositories;
    	      this.membersCanCreatePublicPages = defaults.membersCanCreatePublicPages;
    	      this.membersCanCreatePublicRepositories = defaults.membersCanCreatePublicRepositories;
    	      this.membersCanCreateRepositories = defaults.membersCanCreateRepositories;
    	      this.membersCanForkPrivateRepositories = defaults.membersCanForkPrivateRepositories;
    	      this.name = defaults.name;
    	      this.nodeId = defaults.nodeId;
    	      this.orgname = defaults.orgname;
    	      this.plan = defaults.plan;
    	      this.repositories = defaults.repositories;
    	      this.secretScanningEnabledForNewRepositories = defaults.secretScanningEnabledForNewRepositories;
    	      this.secretScanningPushProtectionEnabledForNewRepositories = defaults.secretScanningPushProtectionEnabledForNewRepositories;
    	      this.twoFactorRequirementEnabled = defaults.twoFactorRequirementEnabled;
    	      this.users = defaults.users;
    	      this.webCommitSignoffRequired = defaults.webCommitSignoffRequired;
        }

        @CustomType.Setter
        public Builder advancedSecurityEnabledForNewRepositories(Boolean advancedSecurityEnabledForNewRepositories) {
            if (advancedSecurityEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "advancedSecurityEnabledForNewRepositories");
            }
            this.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRepositoryPermission(String defaultRepositoryPermission) {
            if (defaultRepositoryPermission == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "defaultRepositoryPermission");
            }
            this.defaultRepositoryPermission = defaultRepositoryPermission;
            return this;
        }
        @CustomType.Setter
        public Builder dependabotAlertsEnabledForNewRepositories(Boolean dependabotAlertsEnabledForNewRepositories) {
            if (dependabotAlertsEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "dependabotAlertsEnabledForNewRepositories");
            }
            this.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder dependabotSecurityUpdatesEnabledForNewRepositories(Boolean dependabotSecurityUpdatesEnabledForNewRepositories) {
            if (dependabotSecurityUpdatesEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "dependabotSecurityUpdatesEnabledForNewRepositories");
            }
            this.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder dependencyGraphEnabledForNewRepositories(Boolean dependencyGraphEnabledForNewRepositories) {
            if (dependencyGraphEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "dependencyGraphEnabledForNewRepositories");
            }
            this.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreArchivedRepos(@Nullable Boolean ignoreArchivedRepos) {

            this.ignoreArchivedRepos = ignoreArchivedRepos;
            return this;
        }
        @CustomType.Setter
        public Builder login(String login) {
            if (login == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "login");
            }
            this.login = login;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder membersAllowedRepositoryCreationType(String membersAllowedRepositoryCreationType) {
            if (membersAllowedRepositoryCreationType == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersAllowedRepositoryCreationType");
            }
            this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
            if (membersCanCreateInternalRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreateInternalRepositories");
            }
            this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreatePages(Boolean membersCanCreatePages) {
            if (membersCanCreatePages == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreatePages");
            }
            this.membersCanCreatePages = membersCanCreatePages;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
            if (membersCanCreatePrivatePages == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreatePrivatePages");
            }
            this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
            if (membersCanCreatePrivateRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreatePrivateRepositories");
            }
            this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
            if (membersCanCreatePublicPages == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreatePublicPages");
            }
            this.membersCanCreatePublicPages = membersCanCreatePublicPages;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
            if (membersCanCreatePublicRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreatePublicRepositories");
            }
            this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
            if (membersCanCreateRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanCreateRepositories");
            }
            this.membersCanCreateRepositories = membersCanCreateRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder membersCanForkPrivateRepositories(Boolean membersCanForkPrivateRepositories) {
            if (membersCanForkPrivateRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "membersCanForkPrivateRepositories");
            }
            this.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            if (nodeId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "nodeId");
            }
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder orgname(String orgname) {
            if (orgname == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "orgname");
            }
            this.orgname = orgname;
            return this;
        }
        @CustomType.Setter
        public Builder plan(String plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder repositories(List<String> repositories) {
            if (repositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "repositories");
            }
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder secretScanningEnabledForNewRepositories(Boolean secretScanningEnabledForNewRepositories) {
            if (secretScanningEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "secretScanningEnabledForNewRepositories");
            }
            this.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder secretScanningPushProtectionEnabledForNewRepositories(Boolean secretScanningPushProtectionEnabledForNewRepositories) {
            if (secretScanningPushProtectionEnabledForNewRepositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "secretScanningPushProtectionEnabledForNewRepositories");
            }
            this.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorRequirementEnabled(Boolean twoFactorRequirementEnabled) {
            if (twoFactorRequirementEnabled == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "twoFactorRequirementEnabled");
            }
            this.twoFactorRequirementEnabled = twoFactorRequirementEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<Map<String,String>> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "users");
            }
            this.users = users;
            return this;
        }
        @CustomType.Setter
        public Builder webCommitSignoffRequired(Boolean webCommitSignoffRequired) {
            if (webCommitSignoffRequired == null) {
              throw new MissingRequiredPropertyException("GetOrganizationResult", "webCommitSignoffRequired");
            }
            this.webCommitSignoffRequired = webCommitSignoffRequired;
            return this;
        }
        public GetOrganizationResult build() {
            final var _resultValue = new GetOrganizationResult();
            _resultValue.advancedSecurityEnabledForNewRepositories = advancedSecurityEnabledForNewRepositories;
            _resultValue.defaultRepositoryPermission = defaultRepositoryPermission;
            _resultValue.dependabotAlertsEnabledForNewRepositories = dependabotAlertsEnabledForNewRepositories;
            _resultValue.dependabotSecurityUpdatesEnabledForNewRepositories = dependabotSecurityUpdatesEnabledForNewRepositories;
            _resultValue.dependencyGraphEnabledForNewRepositories = dependencyGraphEnabledForNewRepositories;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.ignoreArchivedRepos = ignoreArchivedRepos;
            _resultValue.login = login;
            _resultValue.members = members;
            _resultValue.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
            _resultValue.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
            _resultValue.membersCanCreatePages = membersCanCreatePages;
            _resultValue.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
            _resultValue.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
            _resultValue.membersCanCreatePublicPages = membersCanCreatePublicPages;
            _resultValue.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
            _resultValue.membersCanCreateRepositories = membersCanCreateRepositories;
            _resultValue.membersCanForkPrivateRepositories = membersCanForkPrivateRepositories;
            _resultValue.name = name;
            _resultValue.nodeId = nodeId;
            _resultValue.orgname = orgname;
            _resultValue.plan = plan;
            _resultValue.repositories = repositories;
            _resultValue.secretScanningEnabledForNewRepositories = secretScanningEnabledForNewRepositories;
            _resultValue.secretScanningPushProtectionEnabledForNewRepositories = secretScanningPushProtectionEnabledForNewRepositories;
            _resultValue.twoFactorRequirementEnabled = twoFactorRequirementEnabled;
            _resultValue.users = users;
            _resultValue.webCommitSignoffRequired = webCommitSignoffRequired;
            return _resultValue;
        }
    }
}
