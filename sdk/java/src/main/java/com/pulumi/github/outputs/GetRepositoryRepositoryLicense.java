// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.github.outputs.GetRepositoryRepositoryLicenseLicense;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoryRepositoryLicense {
    /**
     * @return Content of the license file, encoded by encoding scheme mentioned below.
     * 
     */
    private String content;
    /**
     * @return The URL to download the raw content of the license file.
     * 
     */
    private String downloadUrl;
    /**
     * @return The encoding used for the content (e.g., &#34;base64&#34;).
     * 
     */
    private String encoding;
    /**
     * @return The URL to access information about the license file as a Git blob.
     * 
     */
    private String gitUrl;
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    private String htmlUrl;
    /**
     * @return `license` block consists of the fields documented below.
     * 
     */
    private List<GetRepositoryRepositoryLicenseLicense> licenses;
    /**
     * @return The name of the repository.
     * 
     */
    private String name;
    /**
     * @return The path to the license file within the repository.
     * 
     */
    private String path;
    /**
     * @return The SHA hash of the license file.
     * 
     */
    private String sha;
    /**
     * @return The size of the license file in bytes.
     * 
     */
    private Integer size;
    /**
     * @return The type of the content, (e.g., &#34;file&#34;).
     * 
     */
    private String type;
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    private String url;

    private GetRepositoryRepositoryLicense() {}
    /**
     * @return Content of the license file, encoded by encoding scheme mentioned below.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return The URL to download the raw content of the license file.
     * 
     */
    public String downloadUrl() {
        return this.downloadUrl;
    }
    /**
     * @return The encoding used for the content (e.g., &#34;base64&#34;).
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return The URL to access information about the license file as a Git blob.
     * 
     */
    public String gitUrl() {
        return this.gitUrl;
    }
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    public String htmlUrl() {
        return this.htmlUrl;
    }
    /**
     * @return `license` block consists of the fields documented below.
     * 
     */
    public List<GetRepositoryRepositoryLicenseLicense> licenses() {
        return this.licenses;
    }
    /**
     * @return The name of the repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The path to the license file within the repository.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return The SHA hash of the license file.
     * 
     */
    public String sha() {
        return this.sha;
    }
    /**
     * @return The size of the license file in bytes.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The type of the content, (e.g., &#34;file&#34;).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryRepositoryLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String content;
        private String downloadUrl;
        private String encoding;
        private String gitUrl;
        private String htmlUrl;
        private List<GetRepositoryRepositoryLicenseLicense> licenses;
        private String name;
        private String path;
        private String sha;
        private Integer size;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetRepositoryRepositoryLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.downloadUrl = defaults.downloadUrl;
    	      this.encoding = defaults.encoding;
    	      this.gitUrl = defaults.gitUrl;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.sha = defaults.sha;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder downloadUrl(String downloadUrl) {
            if (downloadUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "downloadUrl");
            }
            this.downloadUrl = downloadUrl;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            if (encoding == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "encoding");
            }
            this.encoding = encoding;
            return this;
        }
        @CustomType.Setter
        public Builder gitUrl(String gitUrl) {
            if (gitUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "gitUrl");
            }
            this.gitUrl = gitUrl;
            return this;
        }
        @CustomType.Setter
        public Builder htmlUrl(String htmlUrl) {
            if (htmlUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "htmlUrl");
            }
            this.htmlUrl = htmlUrl;
            return this;
        }
        @CustomType.Setter
        public Builder licenses(List<GetRepositoryRepositoryLicenseLicense> licenses) {
            if (licenses == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "licenses");
            }
            this.licenses = licenses;
            return this;
        }
        public Builder licenses(GetRepositoryRepositoryLicenseLicense... licenses) {
            return licenses(List.of(licenses));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder sha(String sha) {
            if (sha == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "sha");
            }
            this.sha = sha;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicense", "url");
            }
            this.url = url;
            return this;
        }
        public GetRepositoryRepositoryLicense build() {
            final var _resultValue = new GetRepositoryRepositoryLicense();
            _resultValue.content = content;
            _resultValue.downloadUrl = downloadUrl;
            _resultValue.encoding = encoding;
            _resultValue.gitUrl = gitUrl;
            _resultValue.htmlUrl = htmlUrl;
            _resultValue.licenses = licenses;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.sha = sha;
            _resultValue.size = size;
            _resultValue.type = type;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
