// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamMembershipArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamMembershipArgs Empty = new TeamMembershipArgs();

    /**
     * The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The GitHub team id or the GitHub team slug
     * 
     */
    @Import(name="teamId", required=true)
    private Output<String> teamId;

    /**
     * @return The GitHub team id or the GitHub team slug
     * 
     */
    public Output<String> teamId() {
        return this.teamId;
    }

    /**
     * The user to add to the team.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The user to add to the team.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private TeamMembershipArgs() {}

    private TeamMembershipArgs(TeamMembershipArgs $) {
        this.role = $.role;
        this.teamId = $.teamId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamMembershipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamMembershipArgs $;

        public Builder() {
            $ = new TeamMembershipArgs();
        }

        public Builder(TeamMembershipArgs defaults) {
            $ = new TeamMembershipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param role The role of the user within the team.
         * Must be one of `member` or `maintainer`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the user within the team.
         * Must be one of `member` or `maintainer`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param teamId The GitHub team id or the GitHub team slug
         * 
         * @return builder
         * 
         */
        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The GitHub team id or the GitHub team slug
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param username The user to add to the team.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user to add to the team.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public TeamMembershipArgs build() {
            if ($.teamId == null) {
                throw new MissingRequiredPropertyException("TeamMembershipArgs", "teamId");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("TeamMembershipArgs", "username");
            }
            return $;
        }
    }

}
