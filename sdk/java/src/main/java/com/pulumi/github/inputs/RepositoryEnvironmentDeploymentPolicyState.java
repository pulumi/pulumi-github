// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryEnvironmentDeploymentPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryEnvironmentDeploymentPolicyState Empty = new RepositoryEnvironmentDeploymentPolicyState();

    /**
     * The name pattern that branches must match in order to deploy to the environment.
     * 
     */
    @Import(name="branchPattern")
    private @Nullable Output<String> branchPattern;

    /**
     * @return The name pattern that branches must match in order to deploy to the environment.
     * 
     */
    public Optional<Output<String>> branchPattern() {
        return Optional.ofNullable(this.branchPattern);
    }

    /**
     * The name of the environment.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The name of the environment.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * The repository of the environment.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The repository of the environment.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    private RepositoryEnvironmentDeploymentPolicyState() {}

    private RepositoryEnvironmentDeploymentPolicyState(RepositoryEnvironmentDeploymentPolicyState $) {
        this.branchPattern = $.branchPattern;
        this.environment = $.environment;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryEnvironmentDeploymentPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryEnvironmentDeploymentPolicyState $;

        public Builder() {
            $ = new RepositoryEnvironmentDeploymentPolicyState();
        }

        public Builder(RepositoryEnvironmentDeploymentPolicyState defaults) {
            $ = new RepositoryEnvironmentDeploymentPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchPattern The name pattern that branches must match in order to deploy to the environment.
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(@Nullable Output<String> branchPattern) {
            $.branchPattern = branchPattern;
            return this;
        }

        /**
         * @param branchPattern The name pattern that branches must match in order to deploy to the environment.
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(String branchPattern) {
            return branchPattern(Output.of(branchPattern));
        }

        /**
         * @param environment The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param repository The repository of the environment.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository of the environment.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public RepositoryEnvironmentDeploymentPolicyState build() {
            return $;
        }
    }

}
