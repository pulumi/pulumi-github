// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.github.inputs.OrganizationRulesetBypassActorArgs;
import com.pulumi.github.inputs.OrganizationRulesetConditionsArgs;
import com.pulumi.github.inputs.OrganizationRulesetRulesArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationRulesetState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRulesetState Empty = new OrganizationRulesetState();

    /**
     * (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
     * 
     */
    @Import(name="bypassActors")
    private @Nullable Output<List<OrganizationRulesetBypassActorArgs>> bypassActors;

    /**
     * @return (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
     * 
     */
    public Optional<Output<List<OrganizationRulesetBypassActorArgs>>> bypassActors() {
        return Optional.ofNullable(this.bypassActors);
    }

    /**
     * (Block List, Max: 1) Parameters for an organization ruleset ref name condition. (see below for nested schema)
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<OrganizationRulesetConditionsArgs> conditions;

    /**
     * @return (Block List, Max: 1) Parameters for an organization ruleset ref name condition. (see below for nested schema)
     * 
     */
    public Optional<Output<OrganizationRulesetConditionsArgs>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
     * 
     */
    @Import(name="enforcement")
    private @Nullable Output<String> enforcement;

    /**
     * @return (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
     * 
     */
    public Optional<Output<String>> enforcement() {
        return Optional.ofNullable(this.enforcement);
    }

    /**
     * (String)
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return (String)
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * (String) The name of the ruleset.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (String) The name of the ruleset.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (String) GraphQL global node id for use with v4 API.
     * 
     */
    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    /**
     * @return (String) GraphQL global node id for use with v4 API.
     * 
     */
    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    /**
     * (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
     * 
     */
    @Import(name="rules")
    private @Nullable Output<OrganizationRulesetRulesArgs> rules;

    /**
     * @return (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
     * 
     */
    public Optional<Output<OrganizationRulesetRulesArgs>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * (Number) GitHub ID for the ruleset.
     * 
     */
    @Import(name="rulesetId")
    private @Nullable Output<Integer> rulesetId;

    /**
     * @return (Number) GitHub ID for the ruleset.
     * 
     */
    public Optional<Output<Integer>> rulesetId() {
        return Optional.ofNullable(this.rulesetId);
    }

    /**
     * (String) Possible values are `branch` and `tag`.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return (String) Possible values are `branch` and `tag`.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    private OrganizationRulesetState() {}

    private OrganizationRulesetState(OrganizationRulesetState $) {
        this.bypassActors = $.bypassActors;
        this.conditions = $.conditions;
        this.enforcement = $.enforcement;
        this.etag = $.etag;
        this.name = $.name;
        this.nodeId = $.nodeId;
        this.rules = $.rules;
        this.rulesetId = $.rulesetId;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRulesetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRulesetState $;

        public Builder() {
            $ = new OrganizationRulesetState();
        }

        public Builder(OrganizationRulesetState defaults) {
            $ = new OrganizationRulesetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassActors (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder bypassActors(@Nullable Output<List<OrganizationRulesetBypassActorArgs>> bypassActors) {
            $.bypassActors = bypassActors;
            return this;
        }

        /**
         * @param bypassActors (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder bypassActors(List<OrganizationRulesetBypassActorArgs> bypassActors) {
            return bypassActors(Output.of(bypassActors));
        }

        /**
         * @param bypassActors (Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder bypassActors(OrganizationRulesetBypassActorArgs... bypassActors) {
            return bypassActors(List.of(bypassActors));
        }

        /**
         * @param conditions (Block List, Max: 1) Parameters for an organization ruleset ref name condition. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<OrganizationRulesetConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions (Block List, Max: 1) Parameters for an organization ruleset ref name condition. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder conditions(OrganizationRulesetConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param enforcement (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
         * 
         * @return builder
         * 
         */
        public Builder enforcement(@Nullable Output<String> enforcement) {
            $.enforcement = enforcement;
            return this;
        }

        /**
         * @param enforcement (String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.
         * 
         * @return builder
         * 
         */
        public Builder enforcement(String enforcement) {
            return enforcement(Output.of(enforcement));
        }

        /**
         * @param etag (String)
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag (String)
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param name (String) The name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (String) The name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeId (String) GraphQL global node id for use with v4 API.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeId (String) GraphQL global node id for use with v4 API.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        /**
         * @param rules (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<OrganizationRulesetRulesArgs> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules (Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)
         * 
         * @return builder
         * 
         */
        public Builder rules(OrganizationRulesetRulesArgs rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rulesetId (Number) GitHub ID for the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rulesetId(@Nullable Output<Integer> rulesetId) {
            $.rulesetId = rulesetId;
            return this;
        }

        /**
         * @param rulesetId (Number) GitHub ID for the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder rulesetId(Integer rulesetId) {
            return rulesetId(Output.of(rulesetId));
        }

        /**
         * @param target (String) Possible values are `branch` and `tag`.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target (String) Possible values are `branch` and `tag`.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        public OrganizationRulesetState build() {
            return $;
        }
    }

}
