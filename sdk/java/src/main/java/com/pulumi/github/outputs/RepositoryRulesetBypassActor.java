// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryRulesetBypassActor {
    /**
     * @return The ID of the actor that can bypass a ruleset. If `actorType` is `Integration`, `actorId` is a GitHub App ID. App ID can be obtained by following instructions from the [Get an App API docs](https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28#get-an-app)
     * 
     */
    private @Nullable Integer actorId;
    /**
     * @return The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`, `DeployKey`.
     * 
     */
    private String actorType;
    /**
     * @return (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`, `exempt`.
     * 
     * &gt; Note: at the time of writing this, the following actor types correspond to the following actor IDs:
     * 
     * * `OrganizationAdmin` &gt; `1`
     * * `RepositoryRole` (This is the actor type, the following are the base repository roles and their associated IDs.)
     * 
     */
    private String bypassMode;

    private RepositoryRulesetBypassActor() {}
    /**
     * @return The ID of the actor that can bypass a ruleset. If `actorType` is `Integration`, `actorId` is a GitHub App ID. App ID can be obtained by following instructions from the [Get an App API docs](https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28#get-an-app)
     * 
     */
    public Optional<Integer> actorId() {
        return Optional.ofNullable(this.actorId);
    }
    /**
     * @return The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`, `DeployKey`.
     * 
     */
    public String actorType() {
        return this.actorType;
    }
    /**
     * @return (String) When the specified actor can bypass the ruleset. pullRequest means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pullRequest`, `exempt`.
     * 
     * &gt; Note: at the time of writing this, the following actor types correspond to the following actor IDs:
     * 
     * * `OrganizationAdmin` &gt; `1`
     * * `RepositoryRole` (This is the actor type, the following are the base repository roles and their associated IDs.)
     * 
     */
    public String bypassMode() {
        return this.bypassMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryRulesetBypassActor defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer actorId;
        private String actorType;
        private String bypassMode;
        public Builder() {}
        public Builder(RepositoryRulesetBypassActor defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actorId = defaults.actorId;
    	      this.actorType = defaults.actorType;
    	      this.bypassMode = defaults.bypassMode;
        }

        @CustomType.Setter
        public Builder actorId(@Nullable Integer actorId) {

            this.actorId = actorId;
            return this;
        }
        @CustomType.Setter
        public Builder actorType(String actorType) {
            if (actorType == null) {
              throw new MissingRequiredPropertyException("RepositoryRulesetBypassActor", "actorType");
            }
            this.actorType = actorType;
            return this;
        }
        @CustomType.Setter
        public Builder bypassMode(String bypassMode) {
            if (bypassMode == null) {
              throw new MissingRequiredPropertyException("RepositoryRulesetBypassActor", "bypassMode");
            }
            this.bypassMode = bypassMode;
            return this;
        }
        public RepositoryRulesetBypassActor build() {
            final var _resultValue = new RepositoryRulesetBypassActor();
            _resultValue.actorId = actorId;
            _resultValue.actorType = actorType;
            _resultValue.bypassMode = bypassMode;
            return _resultValue;
        }
    }
}
