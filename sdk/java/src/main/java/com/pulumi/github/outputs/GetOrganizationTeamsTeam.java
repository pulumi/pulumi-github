// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetOrganizationTeamsTeam {
    /**
     * @return the team&#39;s description.
     * 
     */
    private String description;
    /**
     * @return the ID of the team.
     * 
     */
    private Integer id;
    /**
     * @return List of team members. Not returned if `summary_only = true`
     * 
     */
    private List<String> members;
    /**
     * @return the team&#39;s full name.
     * 
     */
    private String name;
    /**
     * @return the Node ID of the team.
     * 
     */
    private String nodeId;
    /**
     * @return the parent team.
     * 
     */
    private Map<String,String> parent;
    /**
     * @return the team&#39;s privacy type.
     * 
     */
    private String privacy;
    /**
     * @return List of team repositories. Not returned if `summary_only = true`
     * 
     */
    private List<String> repositories;
    /**
     * @return the slug of the team.
     * 
     */
    private String slug;

    private GetOrganizationTeamsTeam() {}
    /**
     * @return the team&#39;s description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return the ID of the team.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return List of team members. Not returned if `summary_only = true`
     * 
     */
    public List<String> members() {
        return this.members;
    }
    /**
     * @return the team&#39;s full name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return the Node ID of the team.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return the parent team.
     * 
     */
    public Map<String,String> parent() {
        return this.parent;
    }
    /**
     * @return the team&#39;s privacy type.
     * 
     */
    public String privacy() {
        return this.privacy;
    }
    /**
     * @return List of team repositories. Not returned if `summary_only = true`
     * 
     */
    public List<String> repositories() {
        return this.repositories;
    }
    /**
     * @return the slug of the team.
     * 
     */
    public String slug() {
        return this.slug;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationTeamsTeam defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Integer id;
        private List<String> members;
        private String name;
        private String nodeId;
        private Map<String,String> parent;
        private String privacy;
        private List<String> repositories;
        private String slug;
        public Builder() {}
        public Builder(GetOrganizationTeamsTeam defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.members = defaults.members;
    	      this.name = defaults.name;
    	      this.nodeId = defaults.nodeId;
    	      this.parent = defaults.parent;
    	      this.privacy = defaults.privacy;
    	      this.repositories = defaults.repositories;
    	      this.slug = defaults.slug;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<String> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(String... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            if (nodeId == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "nodeId");
            }
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder parent(Map<String,String> parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder privacy(String privacy) {
            if (privacy == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "privacy");
            }
            this.privacy = privacy;
            return this;
        }
        @CustomType.Setter
        public Builder repositories(List<String> repositories) {
            if (repositories == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "repositories");
            }
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder slug(String slug) {
            if (slug == null) {
              throw new MissingRequiredPropertyException("GetOrganizationTeamsTeam", "slug");
            }
            this.slug = slug;
            return this;
        }
        public GetOrganizationTeamsTeam build() {
            final var _resultValue = new GetOrganizationTeamsTeam();
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.members = members;
            _resultValue.name = name;
            _resultValue.nodeId = nodeId;
            _resultValue.parent = parent;
            _resultValue.privacy = privacy;
            _resultValue.repositories = repositories;
            _resultValue.slug = slug;
            return _resultValue;
        }
    }
}
