// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryPullRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryPullRequestArgs Empty = new RepositoryPullRequestArgs();

    @Import(name="baseRef", required=true)
    private Output<String> baseRef;

    public Output<String> baseRef() {
        return this.baseRef;
    }

    @Import(name="baseRepository", required=true)
    private Output<String> baseRepository;

    public Output<String> baseRepository() {
        return this.baseRepository;
    }

    @Import(name="body")
    private @Nullable Output<String> body;

    public Optional<Output<String>> body() {
        return Optional.ofNullable(this.body);
    }

    @Import(name="headRef", required=true)
    private Output<String> headRef;

    public Output<String> headRef() {
        return this.headRef;
    }

    @Import(name="maintainerCanModify")
    private @Nullable Output<Boolean> maintainerCanModify;

    public Optional<Output<Boolean>> maintainerCanModify() {
        return Optional.ofNullable(this.maintainerCanModify);
    }

    @Import(name="owner")
    private @Nullable Output<String> owner;

    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    private RepositoryPullRequestArgs() {}

    private RepositoryPullRequestArgs(RepositoryPullRequestArgs $) {
        this.baseRef = $.baseRef;
        this.baseRepository = $.baseRepository;
        this.body = $.body;
        this.headRef = $.headRef;
        this.maintainerCanModify = $.maintainerCanModify;
        this.owner = $.owner;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryPullRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryPullRequestArgs $;

        public Builder() {
            $ = new RepositoryPullRequestArgs();
        }

        public Builder(RepositoryPullRequestArgs defaults) {
            $ = new RepositoryPullRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder baseRef(Output<String> baseRef) {
            $.baseRef = baseRef;
            return this;
        }

        public Builder baseRef(String baseRef) {
            return baseRef(Output.of(baseRef));
        }

        public Builder baseRepository(Output<String> baseRepository) {
            $.baseRepository = baseRepository;
            return this;
        }

        public Builder baseRepository(String baseRepository) {
            return baseRepository(Output.of(baseRepository));
        }

        public Builder body(@Nullable Output<String> body) {
            $.body = body;
            return this;
        }

        public Builder body(String body) {
            return body(Output.of(body));
        }

        public Builder headRef(Output<String> headRef) {
            $.headRef = headRef;
            return this;
        }

        public Builder headRef(String headRef) {
            return headRef(Output.of(headRef));
        }

        public Builder maintainerCanModify(@Nullable Output<Boolean> maintainerCanModify) {
            $.maintainerCanModify = maintainerCanModify;
            return this;
        }

        public Builder maintainerCanModify(Boolean maintainerCanModify) {
            return maintainerCanModify(Output.of(maintainerCanModify));
        }

        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public RepositoryPullRequestArgs build() {
            $.baseRef = Objects.requireNonNull($.baseRef, "expected parameter 'baseRef' to be non-null");
            $.baseRepository = Objects.requireNonNull($.baseRepository, "expected parameter 'baseRepository' to be non-null");
            $.headRef = Objects.requireNonNull($.headRef, "expected parameter 'headRef' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            return $;
        }
    }

}
