// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.config.inputs.AppAuth;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("github");
/**
 * The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`
 * and `app_auth` are not set.
 * 
 */
    public Optional<AppAuth> appAuth() {
        return Codegen.objectProp("appAuth", AppAuth.class).config(config).get();
    }
/**
 * The GitHub Base API URL
 * 
 */
    public Optional<String> baseUrl() {
        return Codegen.stringProp("baseUrl").config(config).env("GITHUB_BASE_URL").def("https://api.github.com/").get();
    }
/**
 * Enable `insecure` mode for testing purposes
 * 
 */
    public Optional<Boolean> insecure() {
        return Codegen.booleanProp("insecure").config(config).get();
    }
/**
 * Number of times to retry a request after receiving an error status codeDefaults to 3
 * 
 */
    public Optional<Integer> maxRetries() {
        return Codegen.integerProp("maxRetries").config(config).get();
    }
/**
 * The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.
 * 
 */
    public Optional<String> organization() {
        return Codegen.stringProp("organization").config(config).get();
    }
/**
 * The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.
 * 
 */
    public Optional<String> owner() {
        return Codegen.stringProp("owner").config(config).get();
    }
/**
 * Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github
 * Enterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we
 * enforce the respect of github.com&#39;s best practices to avoid hitting abuse rate limitsDefaults to false if not set
 * 
 */
    public Optional<Boolean> parallelRequests() {
        return Codegen.booleanProp("parallelRequests").config(config).get();
    }
/**
 * Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.
 * 
 */
    public Optional<Integer> readDelayMs() {
        return Codegen.integerProp("readDelayMs").config(config).get();
    }
/**
 * Amount of time in milliseconds to sleep in between requests to GitHub API after an error response. Defaults to 1000ms or
 * 1s if not set, the max_retries must be set to greater than zero.
 * 
 */
    public Optional<Integer> retryDelayMs() {
        return Codegen.integerProp("retryDelayMs").config(config).get();
    }
/**
 * Allow the provider to retry after receiving an error status code, the max_retries should be set for this to workDefaults
 * to [500, 502, 503, 504]
 * 
 */
    public Optional<List<Integer>> retryableErrors() {
        return Codegen.objectProp("retryableErrors", TypeShape.<List<Integer>>builder(List.class).addParameter(Integer.class).build()).config(config).get();
    }
/**
 * The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.
 * 
 */
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).env("GITHUB_TOKEN").get();
    }
/**
 * Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.
 * 
 */
    public Optional<Integer> writeDelayMs() {
        return Codegen.integerProp("writeDelayMs").config(config).get();
    }
}
