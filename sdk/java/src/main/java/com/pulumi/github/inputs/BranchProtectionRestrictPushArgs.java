// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchProtectionRestrictPushArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchProtectionRestrictPushArgs Empty = new BranchProtectionRestrictPushArgs();

    /**
     * Boolean, setting this to `false` allows people, teams, or apps to create new branches matching this rule. Defaults to `true`.
     * 
     */
    @Import(name="blocksCreations")
    private @Nullable Output<Boolean> blocksCreations;

    /**
     * @return Boolean, setting this to `false` allows people, teams, or apps to create new branches matching this rule. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> blocksCreations() {
        return Optional.ofNullable(this.blocksCreations);
    }

    /**
     * A list of actor Names/IDs that may push to the branch. Actor names must either begin with a &#34;/&#34; for users or the organization name followed by a &#34;/&#34; for teams. Organization administrators, repository administrators, and users with the Maintain role on the repository can always push when all other requirements have passed.
     * 
     */
    @Import(name="pushAllowances")
    private @Nullable Output<List<String>> pushAllowances;

    /**
     * @return A list of actor Names/IDs that may push to the branch. Actor names must either begin with a &#34;/&#34; for users or the organization name followed by a &#34;/&#34; for teams. Organization administrators, repository administrators, and users with the Maintain role on the repository can always push when all other requirements have passed.
     * 
     */
    public Optional<Output<List<String>>> pushAllowances() {
        return Optional.ofNullable(this.pushAllowances);
    }

    private BranchProtectionRestrictPushArgs() {}

    private BranchProtectionRestrictPushArgs(BranchProtectionRestrictPushArgs $) {
        this.blocksCreations = $.blocksCreations;
        this.pushAllowances = $.pushAllowances;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchProtectionRestrictPushArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchProtectionRestrictPushArgs $;

        public Builder() {
            $ = new BranchProtectionRestrictPushArgs();
        }

        public Builder(BranchProtectionRestrictPushArgs defaults) {
            $ = new BranchProtectionRestrictPushArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blocksCreations Boolean, setting this to `false` allows people, teams, or apps to create new branches matching this rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder blocksCreations(@Nullable Output<Boolean> blocksCreations) {
            $.blocksCreations = blocksCreations;
            return this;
        }

        /**
         * @param blocksCreations Boolean, setting this to `false` allows people, teams, or apps to create new branches matching this rule. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder blocksCreations(Boolean blocksCreations) {
            return blocksCreations(Output.of(blocksCreations));
        }

        /**
         * @param pushAllowances A list of actor Names/IDs that may push to the branch. Actor names must either begin with a &#34;/&#34; for users or the organization name followed by a &#34;/&#34; for teams. Organization administrators, repository administrators, and users with the Maintain role on the repository can always push when all other requirements have passed.
         * 
         * @return builder
         * 
         */
        public Builder pushAllowances(@Nullable Output<List<String>> pushAllowances) {
            $.pushAllowances = pushAllowances;
            return this;
        }

        /**
         * @param pushAllowances A list of actor Names/IDs that may push to the branch. Actor names must either begin with a &#34;/&#34; for users or the organization name followed by a &#34;/&#34; for teams. Organization administrators, repository administrators, and users with the Maintain role on the repository can always push when all other requirements have passed.
         * 
         * @return builder
         * 
         */
        public Builder pushAllowances(List<String> pushAllowances) {
            return pushAllowances(Output.of(pushAllowances));
        }

        /**
         * @param pushAllowances A list of actor Names/IDs that may push to the branch. Actor names must either begin with a &#34;/&#34; for users or the organization name followed by a &#34;/&#34; for teams. Organization administrators, repository administrators, and users with the Maintain role on the repository can always push when all other requirements have passed.
         * 
         * @return builder
         * 
         */
        public Builder pushAllowances(String... pushAllowances) {
            return pushAllowances(List.of(pushAllowances));
        }

        public BranchProtectionRestrictPushArgs build() {
            return $;
        }
    }

}
