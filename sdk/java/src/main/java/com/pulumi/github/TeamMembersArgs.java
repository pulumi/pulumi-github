// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.github.inputs.TeamMembersMemberArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class TeamMembersArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamMembersArgs Empty = new TeamMembersArgs();

    /**
     * List of team members. See Members below for details.
     * 
     */
    @Import(name="members", required=true)
    private Output<List<TeamMembersMemberArgs>> members;

    /**
     * @return List of team members. See Members below for details.
     * 
     */
    public Output<List<TeamMembersMemberArgs>> members() {
        return this.members;
    }

    /**
     * The team id or the team slug
     * 
     * &gt; **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
     * 
     */
    @Import(name="teamId", required=true)
    private Output<String> teamId;

    /**
     * @return The team id or the team slug
     * 
     * &gt; **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
     * 
     */
    public Output<String> teamId() {
        return this.teamId;
    }

    private TeamMembersArgs() {}

    private TeamMembersArgs(TeamMembersArgs $) {
        this.members = $.members;
        this.teamId = $.teamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamMembersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamMembersArgs $;

        public Builder() {
            $ = new TeamMembersArgs();
        }

        public Builder(TeamMembersArgs defaults) {
            $ = new TeamMembersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param members List of team members. See Members below for details.
         * 
         * @return builder
         * 
         */
        public Builder members(Output<List<TeamMembersMemberArgs>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members List of team members. See Members below for details.
         * 
         * @return builder
         * 
         */
        public Builder members(List<TeamMembersMemberArgs> members) {
            return members(Output.of(members));
        }

        /**
         * @param members List of team members. See Members below for details.
         * 
         * @return builder
         * 
         */
        public Builder members(TeamMembersMemberArgs... members) {
            return members(List.of(members));
        }

        /**
         * @param teamId The team id or the team slug
         * 
         * &gt; **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
         * 
         * @return builder
         * 
         */
        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The team id or the team slug
         * 
         * &gt; **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public TeamMembersArgs build() {
            if ($.members == null) {
                throw new MissingRequiredPropertyException("TeamMembersArgs", "members");
            }
            if ($.teamId == null) {
                throw new MissingRequiredPropertyException("TeamMembersArgs", "teamId");
            }
            return $;
        }
    }

}
