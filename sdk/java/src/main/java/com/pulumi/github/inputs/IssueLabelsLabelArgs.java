// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IssueLabelsLabelArgs extends com.pulumi.resources.ResourceArgs {

    public static final IssueLabelsLabelArgs Empty = new IssueLabelsLabelArgs();

    /**
     * A 6 character hex code, **without the leading #**, identifying the color of the label.
     * 
     */
    @Import(name="color", required=true)
    private Output<String> color;

    /**
     * @return A 6 character hex code, **without the leading #**, identifying the color of the label.
     * 
     */
    public Output<String> color() {
        return this.color;
    }

    /**
     * A short description of the label.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A short description of the label.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the label.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the label.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The URL to the issue label
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL to the issue label
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private IssueLabelsLabelArgs() {}

    private IssueLabelsLabelArgs(IssueLabelsLabelArgs $) {
        this.color = $.color;
        this.description = $.description;
        this.name = $.name;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IssueLabelsLabelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IssueLabelsLabelArgs $;

        public Builder() {
            $ = new IssueLabelsLabelArgs();
        }

        public Builder(IssueLabelsLabelArgs defaults) {
            $ = new IssueLabelsLabelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color A 6 character hex code, **without the leading #**, identifying the color of the label.
         * 
         * @return builder
         * 
         */
        public Builder color(Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color A 6 character hex code, **without the leading #**, identifying the color of the label.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param description A short description of the label.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A short description of the label.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the label.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the label.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param url The URL to the issue label
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL to the issue label
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public IssueLabelsLabelArgs build() {
            if ($.color == null) {
                throw new MissingRequiredPropertyException("IssueLabelsLabelArgs", "color");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("IssueLabelsLabelArgs", "name");
            }
            return $;
        }
    }

}
