// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamMembersMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamMembersMemberArgs Empty = new TeamMembersMemberArgs();

    /**
     * The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role of the user within the team.
     * Must be one of `member` or `maintainer`. Defaults to `member`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The user to add to the team.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The user to add to the team.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private TeamMembersMemberArgs() {}

    private TeamMembersMemberArgs(TeamMembersMemberArgs $) {
        this.role = $.role;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamMembersMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamMembersMemberArgs $;

        public Builder() {
            $ = new TeamMembersMemberArgs();
        }

        public Builder(TeamMembersMemberArgs defaults) {
            $ = new TeamMembersMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param role The role of the user within the team.
         * Must be one of `member` or `maintainer`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role of the user within the team.
         * Must be one of `member` or `maintainer`. Defaults to `member`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param username The user to add to the team.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The user to add to the team.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public TeamMembersMemberArgs build() {
            if ($.username == null) {
                throw new MissingRequiredPropertyException("TeamMembersMemberArgs", "username");
            }
            return $;
        }
    }

}
