// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return the user&#39;s avatar URL.
     * 
     */
    private String avatarUrl;
    /**
     * @return the user&#39;s bio.
     * 
     */
    private String bio;
    /**
     * @return the user&#39;s blog location.
     * 
     */
    private String blog;
    /**
     * @return the user&#39;s company name.
     * 
     */
    private String company;
    /**
     * @return the creation date.
     * 
     */
    private String createdAt;
    /**
     * @return the user&#39;s email.
     * 
     */
    private String email;
    /**
     * @return the number of followers.
     * 
     */
    private Integer followers;
    /**
     * @return the number of following users.
     * 
     */
    private Integer following;
    /**
     * @return list of user&#39;s GPG keys.
     * 
     */
    private List<String> gpgKeys;
    /**
     * @return the user&#39;s gravatar ID.
     * 
     */
    private String gravatarId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return the user&#39;s location.
     * 
     */
    private String location;
    /**
     * @return the user&#39;s login.
     * 
     */
    private String login;
    /**
     * @return the user&#39;s full name.
     * 
     */
    private String name;
    /**
     * @return the Node ID of the user.
     * 
     */
    private String nodeId;
    /**
     * @return the number of public gists.
     * 
     */
    private Integer publicGists;
    /**
     * @return the number of public repositories.
     * 
     */
    private Integer publicRepos;
    /**
     * @return whether the user is a GitHub admin.
     * 
     */
    private Boolean siteAdmin;
    /**
     * @return list of user&#39;s SSH keys.
     * 
     */
    private List<String> sshKeys;
    /**
     * @return the suspended date if the user is suspended.
     * 
     */
    private String suspendedAt;
    /**
     * @return the update date.
     * 
     */
    private String updatedAt;
    private String username;

    private GetUserResult() {}
    /**
     * @return the user&#39;s avatar URL.
     * 
     */
    public String avatarUrl() {
        return this.avatarUrl;
    }
    /**
     * @return the user&#39;s bio.
     * 
     */
    public String bio() {
        return this.bio;
    }
    /**
     * @return the user&#39;s blog location.
     * 
     */
    public String blog() {
        return this.blog;
    }
    /**
     * @return the user&#39;s company name.
     * 
     */
    public String company() {
        return this.company;
    }
    /**
     * @return the creation date.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return the user&#39;s email.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return the number of followers.
     * 
     */
    public Integer followers() {
        return this.followers;
    }
    /**
     * @return the number of following users.
     * 
     */
    public Integer following() {
        return this.following;
    }
    /**
     * @return list of user&#39;s GPG keys.
     * 
     */
    public List<String> gpgKeys() {
        return this.gpgKeys;
    }
    /**
     * @return the user&#39;s gravatar ID.
     * 
     */
    public String gravatarId() {
        return this.gravatarId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return the user&#39;s location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return the user&#39;s login.
     * 
     */
    public String login() {
        return this.login;
    }
    /**
     * @return the user&#39;s full name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return the Node ID of the user.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }
    /**
     * @return the number of public gists.
     * 
     */
    public Integer publicGists() {
        return this.publicGists;
    }
    /**
     * @return the number of public repositories.
     * 
     */
    public Integer publicRepos() {
        return this.publicRepos;
    }
    /**
     * @return whether the user is a GitHub admin.
     * 
     */
    public Boolean siteAdmin() {
        return this.siteAdmin;
    }
    /**
     * @return list of user&#39;s SSH keys.
     * 
     */
    public List<String> sshKeys() {
        return this.sshKeys;
    }
    /**
     * @return the suspended date if the user is suspended.
     * 
     */
    public String suspendedAt() {
        return this.suspendedAt;
    }
    /**
     * @return the update date.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String avatarUrl;
        private String bio;
        private String blog;
        private String company;
        private String createdAt;
        private String email;
        private Integer followers;
        private Integer following;
        private List<String> gpgKeys;
        private String gravatarId;
        private String id;
        private String location;
        private String login;
        private String name;
        private String nodeId;
        private Integer publicGists;
        private Integer publicRepos;
        private Boolean siteAdmin;
        private List<String> sshKeys;
        private String suspendedAt;
        private String updatedAt;
        private String username;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.avatarUrl = defaults.avatarUrl;
    	      this.bio = defaults.bio;
    	      this.blog = defaults.blog;
    	      this.company = defaults.company;
    	      this.createdAt = defaults.createdAt;
    	      this.email = defaults.email;
    	      this.followers = defaults.followers;
    	      this.following = defaults.following;
    	      this.gpgKeys = defaults.gpgKeys;
    	      this.gravatarId = defaults.gravatarId;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.login = defaults.login;
    	      this.name = defaults.name;
    	      this.nodeId = defaults.nodeId;
    	      this.publicGists = defaults.publicGists;
    	      this.publicRepos = defaults.publicRepos;
    	      this.siteAdmin = defaults.siteAdmin;
    	      this.sshKeys = defaults.sshKeys;
    	      this.suspendedAt = defaults.suspendedAt;
    	      this.updatedAt = defaults.updatedAt;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder avatarUrl(String avatarUrl) {
            if (avatarUrl == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "avatarUrl");
            }
            this.avatarUrl = avatarUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bio(String bio) {
            if (bio == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "bio");
            }
            this.bio = bio;
            return this;
        }
        @CustomType.Setter
        public Builder blog(String blog) {
            if (blog == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "blog");
            }
            this.blog = blog;
            return this;
        }
        @CustomType.Setter
        public Builder company(String company) {
            if (company == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "company");
            }
            this.company = company;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder followers(Integer followers) {
            if (followers == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "followers");
            }
            this.followers = followers;
            return this;
        }
        @CustomType.Setter
        public Builder following(Integer following) {
            if (following == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "following");
            }
            this.following = following;
            return this;
        }
        @CustomType.Setter
        public Builder gpgKeys(List<String> gpgKeys) {
            if (gpgKeys == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "gpgKeys");
            }
            this.gpgKeys = gpgKeys;
            return this;
        }
        public Builder gpgKeys(String... gpgKeys) {
            return gpgKeys(List.of(gpgKeys));
        }
        @CustomType.Setter
        public Builder gravatarId(String gravatarId) {
            if (gravatarId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "gravatarId");
            }
            this.gravatarId = gravatarId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder login(String login) {
            if (login == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "login");
            }
            this.login = login;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeId(String nodeId) {
            if (nodeId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "nodeId");
            }
            this.nodeId = nodeId;
            return this;
        }
        @CustomType.Setter
        public Builder publicGists(Integer publicGists) {
            if (publicGists == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "publicGists");
            }
            this.publicGists = publicGists;
            return this;
        }
        @CustomType.Setter
        public Builder publicRepos(Integer publicRepos) {
            if (publicRepos == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "publicRepos");
            }
            this.publicRepos = publicRepos;
            return this;
        }
        @CustomType.Setter
        public Builder siteAdmin(Boolean siteAdmin) {
            if (siteAdmin == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "siteAdmin");
            }
            this.siteAdmin = siteAdmin;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeys(List<String> sshKeys) {
            if (sshKeys == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "sshKeys");
            }
            this.sshKeys = sshKeys;
            return this;
        }
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }
        @CustomType.Setter
        public Builder suspendedAt(String suspendedAt) {
            if (suspendedAt == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "suspendedAt");
            }
            this.suspendedAt = suspendedAt;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.avatarUrl = avatarUrl;
            _resultValue.bio = bio;
            _resultValue.blog = blog;
            _resultValue.company = company;
            _resultValue.createdAt = createdAt;
            _resultValue.email = email;
            _resultValue.followers = followers;
            _resultValue.following = following;
            _resultValue.gpgKeys = gpgKeys;
            _resultValue.gravatarId = gravatarId;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.login = login;
            _resultValue.name = name;
            _resultValue.nodeId = nodeId;
            _resultValue.publicGists = publicGists;
            _resultValue.publicRepos = publicRepos;
            _resultValue.siteAdmin = siteAdmin;
            _resultValue.sshKeys = sshKeys;
            _resultValue.suspendedAt = suspendedAt;
            _resultValue.updatedAt = updatedAt;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
