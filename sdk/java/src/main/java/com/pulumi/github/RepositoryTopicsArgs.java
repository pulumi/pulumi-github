// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RepositoryTopicsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryTopicsArgs Empty = new RepositoryTopicsArgs();

    /**
     * The repository name.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The repository name.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    /**
     * A list of topics to add to the repository.
     * 
     */
    @Import(name="topics", required=true)
    private Output<List<String>> topics;

    /**
     * @return A list of topics to add to the repository.
     * 
     */
    public Output<List<String>> topics() {
        return this.topics;
    }

    private RepositoryTopicsArgs() {}

    private RepositoryTopicsArgs(RepositoryTopicsArgs $) {
        this.repository = $.repository;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryTopicsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryTopicsArgs $;

        public Builder() {
            $ = new RepositoryTopicsArgs();
        }

        public Builder(RepositoryTopicsArgs defaults) {
            $ = new RepositoryTopicsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repository The repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public RepositoryTopicsArgs build() {
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("RepositoryTopicsArgs", "repository");
            }
            if ($.topics == null) {
                throw new MissingRequiredPropertyException("RepositoryTopicsArgs", "topics");
            }
            return $;
        }
    }

}
