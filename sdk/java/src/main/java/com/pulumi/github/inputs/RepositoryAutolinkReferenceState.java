// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryAutolinkReferenceState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryAutolinkReferenceState Empty = new RepositoryAutolinkReferenceState();

    @Import(name="etag")
    private @Nullable Output<String> etag;

    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit
     * 
     */
    @Import(name="keyPrefix")
    private @Nullable Output<String> keyPrefix;

    /**
     * @return This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit
     * 
     */
    public Optional<Output<String>> keyPrefix() {
        return Optional.ofNullable(this.keyPrefix);
    }

    /**
     * The repository name
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The repository name
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * The template of the target URL used for the links; must be a valid URL and contain `&lt;num&gt;` for the reference number
     * 
     */
    @Import(name="targetUrlTemplate")
    private @Nullable Output<String> targetUrlTemplate;

    /**
     * @return The template of the target URL used for the links; must be a valid URL and contain `&lt;num&gt;` for the reference number
     * 
     */
    public Optional<Output<String>> targetUrlTemplate() {
        return Optional.ofNullable(this.targetUrlTemplate);
    }

    private RepositoryAutolinkReferenceState() {}

    private RepositoryAutolinkReferenceState(RepositoryAutolinkReferenceState $) {
        this.etag = $.etag;
        this.keyPrefix = $.keyPrefix;
        this.repository = $.repository;
        this.targetUrlTemplate = $.targetUrlTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryAutolinkReferenceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryAutolinkReferenceState $;

        public Builder() {
            $ = new RepositoryAutolinkReferenceState();
        }

        public Builder(RepositoryAutolinkReferenceState defaults) {
            $ = new RepositoryAutolinkReferenceState(Objects.requireNonNull(defaults));
        }

        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param keyPrefix This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(@Nullable Output<String> keyPrefix) {
            $.keyPrefix = keyPrefix;
            return this;
        }

        /**
         * @param keyPrefix This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit
         * 
         * @return builder
         * 
         */
        public Builder keyPrefix(String keyPrefix) {
            return keyPrefix(Output.of(keyPrefix));
        }

        /**
         * @param repository The repository name
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository name
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param targetUrlTemplate The template of the target URL used for the links; must be a valid URL and contain `&lt;num&gt;` for the reference number
         * 
         * @return builder
         * 
         */
        public Builder targetUrlTemplate(@Nullable Output<String> targetUrlTemplate) {
            $.targetUrlTemplate = targetUrlTemplate;
            return this;
        }

        /**
         * @param targetUrlTemplate The template of the target URL used for the links; must be a valid URL and contain `&lt;num&gt;` for the reference number
         * 
         * @return builder
         * 
         */
        public Builder targetUrlTemplate(String targetUrlTemplate) {
            return targetUrlTemplate(Output.of(targetUrlTemplate));
        }

        public RepositoryAutolinkReferenceState build() {
            return $;
        }
    }

}
