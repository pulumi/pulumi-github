// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;
import com.pulumi.github.inputs.GetActionsEnvironmentSecretsPlainArgs;
import com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;
import com.pulumi.github.inputs.GetActionsEnvironmentVariablesPlainArgs;
import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
import com.pulumi.github.inputs.GetActionsPublicKeyPlainArgs;
import com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;
import com.pulumi.github.inputs.GetActionsRegistrationTokenPlainArgs;
import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;
import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplatePlainArgs;
import com.pulumi.github.inputs.GetActionsSecretsArgs;
import com.pulumi.github.inputs.GetActionsSecretsPlainArgs;
import com.pulumi.github.inputs.GetActionsVariablesArgs;
import com.pulumi.github.inputs.GetActionsVariablesPlainArgs;
import com.pulumi.github.inputs.GetBranchArgs;
import com.pulumi.github.inputs.GetBranchPlainArgs;
import com.pulumi.github.inputs.GetBranchProtectionRulesArgs;
import com.pulumi.github.inputs.GetBranchProtectionRulesPlainArgs;
import com.pulumi.github.inputs.GetCollaboratorsArgs;
import com.pulumi.github.inputs.GetCollaboratorsPlainArgs;
import com.pulumi.github.inputs.GetDependabotPublicKeyArgs;
import com.pulumi.github.inputs.GetDependabotPublicKeyPlainArgs;
import com.pulumi.github.inputs.GetDependabotSecretsArgs;
import com.pulumi.github.inputs.GetDependabotSecretsPlainArgs;
import com.pulumi.github.inputs.GetEnterpriseArgs;
import com.pulumi.github.inputs.GetEnterprisePlainArgs;
import com.pulumi.github.inputs.GetGithubAppArgs;
import com.pulumi.github.inputs.GetGithubAppPlainArgs;
import com.pulumi.github.inputs.GetIssueLabelsArgs;
import com.pulumi.github.inputs.GetIssueLabelsPlainArgs;
import com.pulumi.github.inputs.GetMembershipArgs;
import com.pulumi.github.inputs.GetMembershipPlainArgs;
import com.pulumi.github.inputs.GetOrganizationArgs;
import com.pulumi.github.inputs.GetOrganizationPlainArgs;
import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
import com.pulumi.github.inputs.GetOrganizationTeamsPlainArgs;
import com.pulumi.github.inputs.GetRefArgs;
import com.pulumi.github.inputs.GetRefPlainArgs;
import com.pulumi.github.inputs.GetReleaseArgs;
import com.pulumi.github.inputs.GetReleasePlainArgs;
import com.pulumi.github.inputs.GetRepositoriesArgs;
import com.pulumi.github.inputs.GetRepositoriesPlainArgs;
import com.pulumi.github.inputs.GetRepositoryArgs;
import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;
import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesPlainArgs;
import com.pulumi.github.inputs.GetRepositoryBranchesArgs;
import com.pulumi.github.inputs.GetRepositoryBranchesPlainArgs;
import com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;
import com.pulumi.github.inputs.GetRepositoryDeployKeysPlainArgs;
import com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;
import com.pulumi.github.inputs.GetRepositoryEnvironmentsPlainArgs;
import com.pulumi.github.inputs.GetRepositoryFileArgs;
import com.pulumi.github.inputs.GetRepositoryFilePlainArgs;
import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
import com.pulumi.github.inputs.GetRepositoryMilestonePlainArgs;
import com.pulumi.github.inputs.GetRepositoryPlainArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestPlainArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestsPlainArgs;
import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
import com.pulumi.github.inputs.GetRepositoryTeamsPlainArgs;
import com.pulumi.github.inputs.GetRepositoryWebhooksArgs;
import com.pulumi.github.inputs.GetRepositoryWebhooksPlainArgs;
import com.pulumi.github.inputs.GetRestApiArgs;
import com.pulumi.github.inputs.GetRestApiPlainArgs;
import com.pulumi.github.inputs.GetTeamArgs;
import com.pulumi.github.inputs.GetTeamPlainArgs;
import com.pulumi.github.inputs.GetTreeArgs;
import com.pulumi.github.inputs.GetTreePlainArgs;
import com.pulumi.github.inputs.GetUserArgs;
import com.pulumi.github.inputs.GetUserPlainArgs;
import com.pulumi.github.inputs.GetUsersArgs;
import com.pulumi.github.inputs.GetUsersPlainArgs;
import com.pulumi.github.outputs.GetActionsEnvironmentSecretsResult;
import com.pulumi.github.outputs.GetActionsEnvironmentVariablesResult;
import com.pulumi.github.outputs.GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult;
import com.pulumi.github.outputs.GetActionsOrganizationPublicKeyResult;
import com.pulumi.github.outputs.GetActionsOrganizationRegistrationTokenResult;
import com.pulumi.github.outputs.GetActionsOrganizationSecretsResult;
import com.pulumi.github.outputs.GetActionsOrganizationVariablesResult;
import com.pulumi.github.outputs.GetActionsPublicKeyResult;
import com.pulumi.github.outputs.GetActionsRegistrationTokenResult;
import com.pulumi.github.outputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult;
import com.pulumi.github.outputs.GetActionsSecretsResult;
import com.pulumi.github.outputs.GetActionsVariablesResult;
import com.pulumi.github.outputs.GetBranchProtectionRulesResult;
import com.pulumi.github.outputs.GetBranchResult;
import com.pulumi.github.outputs.GetCollaboratorsResult;
import com.pulumi.github.outputs.GetDependabotOrganizationPublicKeyResult;
import com.pulumi.github.outputs.GetDependabotOrganizationSecretsResult;
import com.pulumi.github.outputs.GetDependabotPublicKeyResult;
import com.pulumi.github.outputs.GetDependabotSecretsResult;
import com.pulumi.github.outputs.GetEnterpriseResult;
import com.pulumi.github.outputs.GetExternalGroupsResult;
import com.pulumi.github.outputs.GetGithubAppResult;
import com.pulumi.github.outputs.GetIpRangesResult;
import com.pulumi.github.outputs.GetIssueLabelsResult;
import com.pulumi.github.outputs.GetMembershipResult;
import com.pulumi.github.outputs.GetOrganizationIpAllowListResult;
import com.pulumi.github.outputs.GetOrganizationResult;
import com.pulumi.github.outputs.GetOrganizationTeamSyncGroupsResult;
import com.pulumi.github.outputs.GetOrganizationTeamsResult;
import com.pulumi.github.outputs.GetOrganizationWebhooksResult;
import com.pulumi.github.outputs.GetRefResult;
import com.pulumi.github.outputs.GetReleaseResult;
import com.pulumi.github.outputs.GetRepositoriesResult;
import com.pulumi.github.outputs.GetRepositoryAutolinkReferencesResult;
import com.pulumi.github.outputs.GetRepositoryBranchesResult;
import com.pulumi.github.outputs.GetRepositoryDeployKeysResult;
import com.pulumi.github.outputs.GetRepositoryEnvironmentsResult;
import com.pulumi.github.outputs.GetRepositoryFileResult;
import com.pulumi.github.outputs.GetRepositoryMilestoneResult;
import com.pulumi.github.outputs.GetRepositoryPullRequestResult;
import com.pulumi.github.outputs.GetRepositoryPullRequestsInvokeResult;
import com.pulumi.github.outputs.GetRepositoryResult;
import com.pulumi.github.outputs.GetRepositoryTeamsResult;
import com.pulumi.github.outputs.GetRepositoryWebhooksResult;
import com.pulumi.github.outputs.GetRestApiResult;
import com.pulumi.github.outputs.GetSshKeysResult;
import com.pulumi.github.outputs.GetTeamResult;
import com.pulumi.github.outputs.GetTreeResult;
import com.pulumi.github.outputs.GetUserResult;
import com.pulumi.github.outputs.GetUsersResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class GithubFunctions {
    /**
     * Use this data source to retrieve the list of secrets of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsEnvironmentSecretsResult> getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs args) {
        return getActionsEnvironmentSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsEnvironmentSecretsResult> getActionsEnvironmentSecretsPlain(GetActionsEnvironmentSecretsPlainArgs args) {
        return getActionsEnvironmentSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsEnvironmentSecretsResult> getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsEnvironmentSecrets:getActionsEnvironmentSecrets", TypeShape.of(GetActionsEnvironmentSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of secrets of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsEnvironmentSecretsResult> getActionsEnvironmentSecretsPlain(GetActionsEnvironmentSecretsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsEnvironmentSecrets:getActionsEnvironmentSecrets", TypeShape.of(GetActionsEnvironmentSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsEnvironmentVariablesResult> getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs args) {
        return getActionsEnvironmentVariables(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsEnvironmentVariablesResult> getActionsEnvironmentVariablesPlain(GetActionsEnvironmentVariablesPlainArgs args) {
        return getActionsEnvironmentVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsEnvironmentVariablesResult> getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsEnvironmentVariables:getActionsEnvironmentVariables", TypeShape.of(GetActionsEnvironmentVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables of the repository environment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs.builder()
     *             .environment(&#34;exampleEnvironment&#34;)
     *             .name(&#34;exampleRepo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsEnvironmentVariablesResult> getActionsEnvironmentVariablesPlain(GetActionsEnvironmentVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsEnvironmentVariables:getActionsEnvironmentVariables", TypeShape.of(GetActionsEnvironmentVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplate() {
        return getActionsOrganizationOidcSubjectClaimCustomizationTemplate(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplatePlain() {
        return getActionsOrganizationOidcSubjectClaimCustomizationTemplatePlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplate(InvokeArgs args) {
        return getActionsOrganizationOidcSubjectClaimCustomizationTemplate(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplatePlain(InvokeArgs args) {
        return getActionsOrganizationOidcSubjectClaimCustomizationTemplatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplate(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsOrganizationOidcSubjectClaimCustomizationTemplate:getActionsOrganizationOidcSubjectClaimCustomizationTemplate", TypeShape.of(GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for an organization
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult> getActionsOrganizationOidcSubjectClaimCustomizationTemplatePlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsOrganizationOidcSubjectClaimCustomizationTemplate:getActionsOrganizationOidcSubjectClaimCustomizationTemplate", TypeShape.of(GetActionsOrganizationOidcSubjectClaimCustomizationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKey() {
        return getActionsOrganizationPublicKey(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKeyPlain() {
        return getActionsOrganizationPublicKeyPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKey(InvokeArgs args) {
        return getActionsOrganizationPublicKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKeyPlain(InvokeArgs args) {
        return getActionsOrganizationPublicKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKey(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsOrganizationPublicKey:getActionsOrganizationPublicKey", TypeShape.of(GetActionsOrganizationPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationPublicKeyResult> getActionsOrganizationPublicKeyPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsOrganizationPublicKey:getActionsOrganizationPublicKey", TypeShape.of(GetActionsOrganizationPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationToken() {
        return getActionsOrganizationRegistrationToken(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationTokenPlain() {
        return getActionsOrganizationRegistrationTokenPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationToken(InvokeArgs args) {
        return getActionsOrganizationRegistrationToken(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationTokenPlain(InvokeArgs args) {
        return getActionsOrganizationRegistrationTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationToken(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsOrganizationRegistrationToken:getActionsOrganizationRegistrationToken", TypeShape.of(GetActionsOrganizationRegistrationTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationRegistrationToken();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationRegistrationTokenResult> getActionsOrganizationRegistrationTokenPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsOrganizationRegistrationToken:getActionsOrganizationRegistrationToken", TypeShape.of(GetActionsOrganizationRegistrationTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationSecretsResult> getActionsOrganizationSecrets() {
        return getActionsOrganizationSecrets(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationSecretsResult> getActionsOrganizationSecretsPlain() {
        return getActionsOrganizationSecretsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationSecretsResult> getActionsOrganizationSecrets(InvokeArgs args) {
        return getActionsOrganizationSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationSecretsResult> getActionsOrganizationSecretsPlain(InvokeArgs args) {
        return getActionsOrganizationSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationSecretsResult> getActionsOrganizationSecrets(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsOrganizationSecrets:getActionsOrganizationSecrets", TypeShape.of(GetActionsOrganizationSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationSecretsResult> getActionsOrganizationSecretsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsOrganizationSecrets:getActionsOrganizationSecrets", TypeShape.of(GetActionsOrganizationSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationVariablesResult> getActionsOrganizationVariables() {
        return getActionsOrganizationVariables(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationVariablesResult> getActionsOrganizationVariablesPlain() {
        return getActionsOrganizationVariablesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationVariablesResult> getActionsOrganizationVariables(InvokeArgs args) {
        return getActionsOrganizationVariables(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationVariablesResult> getActionsOrganizationVariablesPlain(InvokeArgs args) {
        return getActionsOrganizationVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsOrganizationVariablesResult> getActionsOrganizationVariables(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsOrganizationVariables:getActionsOrganizationVariables", TypeShape.of(GetActionsOrganizationVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsOrganizationVariables();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsOrganizationVariablesResult> getActionsOrganizationVariablesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsOrganizationVariables:getActionsOrganizationVariables", TypeShape.of(GetActionsOrganizationVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsPublicKeyResult> getActionsPublicKey(GetActionsPublicKeyArgs args) {
        return getActionsPublicKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsPublicKeyResult> getActionsPublicKeyPlain(GetActionsPublicKeyPlainArgs args) {
        return getActionsPublicKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsPublicKeyResult> getActionsPublicKey(GetActionsPublicKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsPublicKey:getActionsPublicKey", TypeShape.of(GetActionsPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsPublicKeyResult> getActionsPublicKeyPlain(GetActionsPublicKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsPublicKey:getActionsPublicKey", TypeShape.of(GetActionsPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a GitHub Actions repository registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRegistrationToken(GetActionsRegistrationTokenArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsRegistrationTokenResult> getActionsRegistrationToken(GetActionsRegistrationTokenArgs args) {
        return getActionsRegistrationToken(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions repository registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRegistrationToken(GetActionsRegistrationTokenArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsRegistrationTokenResult> getActionsRegistrationTokenPlain(GetActionsRegistrationTokenPlainArgs args) {
        return getActionsRegistrationTokenPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a GitHub Actions repository registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRegistrationToken(GetActionsRegistrationTokenArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsRegistrationTokenResult> getActionsRegistrationToken(GetActionsRegistrationTokenArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsRegistrationToken:getActionsRegistrationToken", TypeShape.of(GetActionsRegistrationTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a GitHub Actions repository registration token. This token can then be used to register a self-hosted runner.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRegistrationToken(GetActionsRegistrationTokenArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsRegistrationTokenResult> getActionsRegistrationTokenPlain(GetActionsRegistrationTokenPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsRegistrationToken:getActionsRegistrationToken", TypeShape.of(GetActionsRegistrationTokenResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for a repository
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()
     *             .name(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult> getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs args) {
        return getActionsRepositoryOidcSubjectClaimCustomizationTemplate(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for a repository
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()
     *             .name(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult> getActionsRepositoryOidcSubjectClaimCustomizationTemplatePlain(GetActionsRepositoryOidcSubjectClaimCustomizationTemplatePlainArgs args) {
        return getActionsRepositoryOidcSubjectClaimCustomizationTemplatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for a repository
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()
     *             .name(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult> getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsRepositoryOidcSubjectClaimCustomizationTemplate:getActionsRepositoryOidcSubjectClaimCustomizationTemplate", TypeShape.of(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the OpenID Connect subject claim customization template for a repository
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()
     *             .name(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult> getActionsRepositoryOidcSubjectClaimCustomizationTemplatePlain(GetActionsRepositoryOidcSubjectClaimCustomizationTemplatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsRepositoryOidcSubjectClaimCustomizationTemplate:getActionsRepositoryOidcSubjectClaimCustomizationTemplate", TypeShape.of(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsSecretsResult> getActionsSecrets() {
        return getActionsSecrets(GetActionsSecretsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsSecretsResult> getActionsSecretsPlain() {
        return getActionsSecretsPlain(GetActionsSecretsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsSecretsResult> getActionsSecrets(GetActionsSecretsArgs args) {
        return getActionsSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsSecretsResult> getActionsSecretsPlain(GetActionsSecretsPlainArgs args) {
        return getActionsSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsSecretsResult> getActionsSecrets(GetActionsSecretsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsSecrets:getActionsSecrets", TypeShape.of(GetActionsSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsSecretsResult> getActionsSecretsPlain(GetActionsSecretsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsSecrets:getActionsSecrets", TypeShape.of(GetActionsSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsVariablesResult> getActionsVariables() {
        return getActionsVariables(GetActionsVariablesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsVariablesResult> getActionsVariablesPlain() {
        return getActionsVariablesPlain(GetActionsVariablesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsVariablesResult> getActionsVariables(GetActionsVariablesArgs args) {
        return getActionsVariables(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsVariablesResult> getActionsVariablesPlain(GetActionsVariablesPlainArgs args) {
        return getActionsVariablesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsVariablesResult> getActionsVariables(GetActionsVariablesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsVariables:getActionsVariables", TypeShape.of(GetActionsVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of variables for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsVariablesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsVariablesResult> getActionsVariablesPlain(GetActionsVariablesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsVariables:getActionsVariables", TypeShape.of(GetActionsVariablesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args) {
        return getBranch(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args) {
        return getBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a list of repository branch protection rules.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchProtectionRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getBranchProtectionRules(GetBranchProtectionRulesArgs.builder()
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchProtectionRulesResult> getBranchProtectionRules(GetBranchProtectionRulesArgs args) {
        return getBranchProtectionRules(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a list of repository branch protection rules.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchProtectionRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getBranchProtectionRules(GetBranchProtectionRulesArgs.builder()
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchProtectionRulesResult> getBranchProtectionRulesPlain(GetBranchProtectionRulesPlainArgs args) {
        return getBranchProtectionRulesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a list of repository branch protection rules.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchProtectionRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getBranchProtectionRules(GetBranchProtectionRulesArgs.builder()
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchProtectionRulesResult> getBranchProtectionRules(GetBranchProtectionRulesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getBranchProtectionRules:getBranchProtectionRules", TypeShape.of(GetBranchProtectionRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a list of repository branch protection rules.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchProtectionRulesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getBranchProtectionRules(GetBranchProtectionRulesArgs.builder()
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchProtectionRulesResult> getBranchProtectionRulesPlain(GetBranchProtectionRulesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getBranchProtectionRules:getBranchProtectionRules", TypeShape.of(GetBranchProtectionRulesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCollaboratorsResult> getCollaborators(GetCollaboratorsArgs args) {
        return getCollaborators(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCollaboratorsResult> getCollaboratorsPlain(GetCollaboratorsPlainArgs args) {
        return getCollaboratorsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCollaboratorsResult> getCollaborators(GetCollaboratorsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getCollaborators:getCollaborators", TypeShape.of(GetCollaboratorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCollaboratorsResult> getCollaboratorsPlain(GetCollaboratorsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getCollaborators:getCollaborators", TypeShape.of(GetCollaboratorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKey() {
        return getDependabotOrganizationPublicKey(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKeyPlain() {
        return getDependabotOrganizationPublicKeyPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKey(InvokeArgs args) {
        return getDependabotOrganizationPublicKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKeyPlain(InvokeArgs args) {
        return getDependabotOrganizationPublicKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKey(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getDependabotOrganizationPublicKey:getDependabotOrganizationPublicKey", TypeShape.of(GetDependabotOrganizationPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to an organization to retrieve it&#39;s Dependabot public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationPublicKey();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationPublicKeyResult> getDependabotOrganizationPublicKeyPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getDependabotOrganizationPublicKey:getDependabotOrganizationPublicKey", TypeShape.of(GetDependabotOrganizationPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecrets() {
        return getDependabotOrganizationSecrets(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecretsPlain() {
        return getDependabotOrganizationSecretsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecrets(InvokeArgs args) {
        return getDependabotOrganizationSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecretsPlain(InvokeArgs args) {
        return getDependabotOrganizationSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecrets(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getDependabotOrganizationSecrets:getDependabotOrganizationSecrets", TypeShape.of(GetDependabotOrganizationSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets of the organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotOrganizationSecrets();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotOrganizationSecretsResult> getDependabotOrganizationSecretsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getDependabotOrganizationSecrets:getDependabotOrganizationSecrets", TypeShape.of(GetDependabotOrganizationSecretsResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetDependabotPublicKeyResult> getDependabotPublicKey(GetDependabotPublicKeyArgs args) {
        return getDependabotPublicKey(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetDependabotPublicKeyResult> getDependabotPublicKeyPlain(GetDependabotPublicKeyPlainArgs args) {
        return getDependabotPublicKeyPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetDependabotPublicKeyResult> getDependabotPublicKey(GetDependabotPublicKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getDependabotPublicKey:getDependabotPublicKey", TypeShape.of(GetDependabotPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetDependabotPublicKeyResult> getDependabotPublicKeyPlain(GetDependabotPublicKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getDependabotPublicKey:getDependabotPublicKey", TypeShape.of(GetDependabotPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotSecretsResult> getDependabotSecrets() {
        return getDependabotSecrets(GetDependabotSecretsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotSecretsResult> getDependabotSecretsPlain() {
        return getDependabotSecretsPlain(GetDependabotSecretsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotSecretsResult> getDependabotSecrets(GetDependabotSecretsArgs args) {
        return getDependabotSecrets(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotSecretsResult> getDependabotSecretsPlain(GetDependabotSecretsPlainArgs args) {
        return getDependabotSecretsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDependabotSecretsResult> getDependabotSecrets(GetDependabotSecretsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getDependabotSecrets:getDependabotSecrets", TypeShape.of(GetDependabotSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of dependabot secrets for a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetDependabotSecretsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDependabotSecretsResult> getDependabotSecretsPlain(GetDependabotSecretsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getDependabotSecrets:getDependabotSecrets", TypeShape.of(GetDependabotSecretsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub enterprise.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetEnterpriseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getEnterprise(GetEnterpriseArgs.builder()
     *             .slug(&#34;example-co&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetEnterpriseResult> getEnterprise(GetEnterpriseArgs args) {
        return getEnterprise(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub enterprise.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetEnterpriseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getEnterprise(GetEnterpriseArgs.builder()
     *             .slug(&#34;example-co&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetEnterpriseResult> getEnterprisePlain(GetEnterprisePlainArgs args) {
        return getEnterprisePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub enterprise.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetEnterpriseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getEnterprise(GetEnterpriseArgs.builder()
     *             .slug(&#34;example-co&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetEnterpriseResult> getEnterprise(GetEnterpriseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getEnterprise:getEnterprise", TypeShape.of(GetEnterpriseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub enterprise.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetEnterpriseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getEnterprise(GetEnterpriseArgs.builder()
     *             .slug(&#34;example-co&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetEnterpriseResult> getEnterprisePlain(GetEnterprisePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getEnterprise:getEnterprise", TypeShape.of(GetEnterpriseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetExternalGroupsResult> getExternalGroups() {
        return getExternalGroups(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetExternalGroupsResult> getExternalGroupsPlain() {
        return getExternalGroupsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetExternalGroupsResult> getExternalGroups(InvokeArgs args) {
        return getExternalGroups(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetExternalGroupsResult> getExternalGroupsPlain(InvokeArgs args) {
        return getExternalGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetExternalGroupsResult> getExternalGroups(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getExternalGroups:getExternalGroups", TypeShape.of(GetExternalGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve external groups belonging to an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleExternalGroups = GithubFunctions.getExternalGroups();
     * 
     *         final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -&gt; getExternalGroupsResult);
     * 
     *         ctx.export(&#34;groups&#34;, localGroups);
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetExternalGroupsResult> getExternalGroupsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getExternalGroups:getExternalGroups", TypeShape.of(GetExternalGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about an app.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetGithubAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = GithubFunctions.getGithubApp(GetGithubAppArgs.builder()
     *             .slug(&#34;foobar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGithubAppResult> getGithubApp(GetGithubAppArgs args) {
        return getGithubApp(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about an app.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetGithubAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = GithubFunctions.getGithubApp(GetGithubAppArgs.builder()
     *             .slug(&#34;foobar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGithubAppResult> getGithubAppPlain(GetGithubAppPlainArgs args) {
        return getGithubAppPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about an app.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetGithubAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = GithubFunctions.getGithubApp(GetGithubAppArgs.builder()
     *             .slug(&#34;foobar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetGithubAppResult> getGithubApp(GetGithubAppArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getGithubApp:getGithubApp", TypeShape.of(GetGithubAppResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about an app.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetGithubAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foobar = GithubFunctions.getGithubApp(GetGithubAppArgs.builder()
     *             .slug(&#34;foobar&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetGithubAppResult> getGithubAppPlain(GetGithubAppPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getGithubApp:getGithubApp", TypeShape.of(GetGithubAppResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges() {
        return getIpRanges(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain() {
        return getIpRangesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges(InvokeArgs args) {
        return getIpRanges(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain(InvokeArgs args) {
        return getIpRangesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getIpRanges:getIpRanges", TypeShape.of(GetIpRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getIpRanges();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getIpRanges:getIpRanges", TypeShape.of(GetIpRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the labels for a given repository.
     * 
     */
    public static Output<GetIssueLabelsResult> getIssueLabels(GetIssueLabelsArgs args) {
        return getIssueLabels(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the labels for a given repository.
     * 
     */
    public static CompletableFuture<GetIssueLabelsResult> getIssueLabelsPlain(GetIssueLabelsPlainArgs args) {
        return getIssueLabelsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the labels for a given repository.
     * 
     */
    public static Output<GetIssueLabelsResult> getIssueLabels(GetIssueLabelsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getIssueLabels:getIssueLabels", TypeShape.of(GetIssueLabelsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the labels for a given repository.
     * 
     */
    public static CompletableFuture<GetIssueLabelsResult> getIssueLabelsPlain(GetIssueLabelsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getIssueLabels:getIssueLabels", TypeShape.of(GetIssueLabelsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMembershipResult> getMembership(GetMembershipArgs args) {
        return getMembership(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMembershipResult> getMembershipPlain(GetMembershipPlainArgs args) {
        return getMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMembershipResult> getMembership(GetMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getMembership:getMembership", TypeShape.of(GetMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMembershipResult> getMembershipPlain(GetMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getMembership:getMembership", TypeShape.of(GetMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationIpAllowListResult> getOrganizationIpAllowList() {
        return getOrganizationIpAllowList(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationIpAllowListResult> getOrganizationIpAllowListPlain() {
        return getOrganizationIpAllowListPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationIpAllowListResult> getOrganizationIpAllowList(InvokeArgs args) {
        return getOrganizationIpAllowList(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationIpAllowListResult> getOrganizationIpAllowListPlain(InvokeArgs args) {
        return getOrganizationIpAllowListPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationIpAllowListResult> getOrganizationIpAllowList(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationIpAllowList:getOrganizationIpAllowList", TypeShape.of(GetOrganizationIpAllowListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about the IP allow list of an organization.
     * The allow list for IP addresses will block access to private resources via the web, API,
     * and Git from any IP addresses that are not on the allow list.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationIpAllowList();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationIpAllowListResult> getOrganizationIpAllowListPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationIpAllowList:getOrganizationIpAllowList", TypeShape.of(GetOrganizationIpAllowListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups() {
        return getOrganizationTeamSyncGroups(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain() {
        return getOrganizationTeamSyncGroupsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups(InvokeArgs args) {
        return getOrganizationTeamSyncGroups(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain(InvokeArgs args) {
        return getOrganizationTeamSyncGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups", TypeShape.of(GetOrganizationTeamSyncGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganizationTeamSyncGroups();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups", TypeShape.of(GetOrganizationTeamSyncGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams() {
        return getOrganizationTeams(GetOrganizationTeamsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain() {
        return getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams(GetOrganizationTeamsArgs args) {
        return getOrganizationTeams(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs args) {
        return getOrganizationTeamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams(GetOrganizationTeamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationTeams:getOrganizationTeams", TypeShape.of(GetOrganizationTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationTeams:getOrganizationTeams", TypeShape.of(GetOrganizationTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationWebhooksResult> getOrganizationWebhooks() {
        return getOrganizationWebhooks(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationWebhooksResult> getOrganizationWebhooksPlain() {
        return getOrganizationWebhooksPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationWebhooksResult> getOrganizationWebhooks(InvokeArgs args) {
        return getOrganizationWebhooks(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationWebhooksResult> getOrganizationWebhooksPlain(InvokeArgs args) {
        return getOrganizationWebhooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationWebhooksResult> getOrganizationWebhooks(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationWebhooks:getOrganizationWebhooks", TypeShape.of(GetOrganizationWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve all webhooks of the organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* webhooks of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationWebhooks();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationWebhooksResult> getOrganizationWebhooksPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationWebhooks:getOrganizationWebhooks", TypeShape.of(GetOrganizationWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .owner(&#34;example&#34;)
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRefResult> getRef(GetRefArgs args) {
        return getRef(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .owner(&#34;example&#34;)
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRefResult> getRefPlain(GetRefPlainArgs args) {
        return getRefPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .owner(&#34;example&#34;)
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRefResult> getRef(GetRefArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRef:getRef", TypeShape.of(GetRefResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .owner(&#34;example&#34;)
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRefResult> getRefPlain(GetRefPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRef:getRef", TypeShape.of(GetRefResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args) {
        return getRelease(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args) {
        return getReleasePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .includeRepoId(true)
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoriesResult> getRepositories(GetRepositoriesArgs args) {
        return getRepositories(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .includeRepoId(true)
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoriesResult> getRepositoriesPlain(GetRepositoriesPlainArgs args) {
        return getRepositoriesPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .includeRepoId(true)
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoriesResult> getRepositories(GetRepositoriesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositories:getRepositories", TypeShape.of(GetRepositoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .includeRepoId(true)
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoriesResult> getRepositoriesPlain(GetRepositoriesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositories:getRepositories", TypeShape.of(GetRepositoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository() {
        return getRepository(GetRepositoryArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain() {
        return getRepositoryPlain(GetRepositoryPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args) {
        return getRepository(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args) {
        return getRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve autolink references for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryAutolinkReferencesResult> getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs args) {
        return getRepositoryAutolinkReferences(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve autolink references for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryAutolinkReferencesResult> getRepositoryAutolinkReferencesPlain(GetRepositoryAutolinkReferencesPlainArgs args) {
        return getRepositoryAutolinkReferencesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve autolink references for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryAutolinkReferencesResult> getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryAutolinkReferences:getRepositoryAutolinkReferences", TypeShape.of(GetRepositoryAutolinkReferencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve autolink references for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryAutolinkReferencesResult> getRepositoryAutolinkReferencesPlain(GetRepositoryAutolinkReferencesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryAutolinkReferences:getRepositoryAutolinkReferences", TypeShape.of(GetRepositoryAutolinkReferencesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about branches in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryBranches(GetRepositoryBranchesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryBranchesResult> getRepositoryBranches(GetRepositoryBranchesArgs args) {
        return getRepositoryBranches(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about branches in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryBranches(GetRepositoryBranchesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryBranchesResult> getRepositoryBranchesPlain(GetRepositoryBranchesPlainArgs args) {
        return getRepositoryBranchesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about branches in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryBranches(GetRepositoryBranchesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryBranchesResult> getRepositoryBranches(GetRepositoryBranchesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryBranches:getRepositoryBranches", TypeShape.of(GetRepositoryBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about branches in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryBranchesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryBranches(GetRepositoryBranchesArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryBranchesResult> getRepositoryBranchesPlain(GetRepositoryBranchesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryBranches:getRepositoryBranches", TypeShape.of(GetRepositoryBranchesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve all deploy keys of a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryDeployKeys(GetRepositoryDeployKeysArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryDeployKeysResult> getRepositoryDeployKeys(GetRepositoryDeployKeysArgs args) {
        return getRepositoryDeployKeys(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all deploy keys of a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryDeployKeys(GetRepositoryDeployKeysArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryDeployKeysResult> getRepositoryDeployKeysPlain(GetRepositoryDeployKeysPlainArgs args) {
        return getRepositoryDeployKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve all deploy keys of a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryDeployKeys(GetRepositoryDeployKeysArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryDeployKeysResult> getRepositoryDeployKeys(GetRepositoryDeployKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryDeployKeys:getRepositoryDeployKeys", TypeShape.of(GetRepositoryDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve all deploy keys of a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryDeployKeys(GetRepositoryDeployKeysArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryDeployKeysResult> getRepositoryDeployKeysPlain(GetRepositoryDeployKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryDeployKeys:getRepositoryDeployKeys", TypeShape.of(GetRepositoryDeployKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about environments for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryEnvironments(GetRepositoryEnvironmentsArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryEnvironmentsResult> getRepositoryEnvironments(GetRepositoryEnvironmentsArgs args) {
        return getRepositoryEnvironments(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about environments for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryEnvironments(GetRepositoryEnvironmentsArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryEnvironmentsResult> getRepositoryEnvironmentsPlain(GetRepositoryEnvironmentsPlainArgs args) {
        return getRepositoryEnvironmentsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about environments for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryEnvironments(GetRepositoryEnvironmentsArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryEnvironmentsResult> getRepositoryEnvironments(GetRepositoryEnvironmentsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryEnvironments:getRepositoryEnvironments", TypeShape.of(GetRepositoryEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about environments for a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryEnvironments(GetRepositoryEnvironmentsArgs.builder()
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryEnvironmentsResult> getRepositoryEnvironmentsPlain(GetRepositoryEnvironmentsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryEnvironments:getRepositoryEnvironments", TypeShape.of(GetRepositoryEnvironmentsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args) {
        return getRepositoryFile(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args) {
        return getRepositoryFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryMilestoneResult> getRepositoryMilestone(GetRepositoryMilestoneArgs args) {
        return getRepositoryMilestone(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryMilestoneResult> getRepositoryMilestonePlain(GetRepositoryMilestonePlainArgs args) {
        return getRepositoryMilestonePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryMilestoneResult> getRepositoryMilestone(GetRepositoryMilestoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryMilestone:getRepositoryMilestone", TypeShape.of(GetRepositoryMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryMilestoneResult> getRepositoryMilestonePlain(GetRepositoryMilestonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryMilestone:getRepositoryMilestone", TypeShape.of(GetRepositoryMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestResult> getRepositoryPullRequest(GetRepositoryPullRequestArgs args) {
        return getRepositoryPullRequest(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestResult> getRepositoryPullRequestPlain(GetRepositoryPullRequestPlainArgs args) {
        return getRepositoryPullRequestPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestResult> getRepositoryPullRequest(GetRepositoryPullRequestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryPullRequest:getRepositoryPullRequest", TypeShape.of(GetRepositoryPullRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestResult> getRepositoryPullRequestPlain(GetRepositoryPullRequestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryPullRequest:getRepositoryPullRequest", TypeShape.of(GetRepositoryPullRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequests(GetRepositoryPullRequestsArgs args) {
        return getRepositoryPullRequests(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequestsPlain(GetRepositoryPullRequestsPlainArgs args) {
        return getRepositoryPullRequestsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequests(GetRepositoryPullRequestsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryPullRequests:getRepositoryPullRequests", TypeShape.of(GetRepositoryPullRequestsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequestsPlain(GetRepositoryPullRequestsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryPullRequests:getRepositoryPullRequests", TypeShape.of(GetRepositoryPullRequestsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryTeamsResult> getRepositoryTeams() {
        return getRepositoryTeams(GetRepositoryTeamsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryTeamsResult> getRepositoryTeamsPlain() {
        return getRepositoryTeamsPlain(GetRepositoryTeamsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryTeamsResult> getRepositoryTeams(GetRepositoryTeamsArgs args) {
        return getRepositoryTeams(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryTeamsResult> getRepositoryTeamsPlain(GetRepositoryTeamsPlainArgs args) {
        return getRepositoryTeamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryTeamsResult> getRepositoryTeams(GetRepositoryTeamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryTeams:getRepositoryTeams", TypeShape.of(GetRepositoryTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the list of teams which have access to a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryTeamsResult> getRepositoryTeamsPlain(GetRepositoryTeamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryTeams:getRepositoryTeams", TypeShape.of(GetRepositoryTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve webhooks for a given repository.
     * 
     * ## Example Usage
     * 
     * To retrieve webhooks of a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var repo = GithubFunctions.getRepositoryWebhooks(GetRepositoryWebhooksArgs.builder()
     *             .repository(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryWebhooksResult> getRepositoryWebhooks(GetRepositoryWebhooksArgs args) {
        return getRepositoryWebhooks(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve webhooks for a given repository.
     * 
     * ## Example Usage
     * 
     * To retrieve webhooks of a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var repo = GithubFunctions.getRepositoryWebhooks(GetRepositoryWebhooksArgs.builder()
     *             .repository(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryWebhooksResult> getRepositoryWebhooksPlain(GetRepositoryWebhooksPlainArgs args) {
        return getRepositoryWebhooksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve webhooks for a given repository.
     * 
     * ## Example Usage
     * 
     * To retrieve webhooks of a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var repo = GithubFunctions.getRepositoryWebhooks(GetRepositoryWebhooksArgs.builder()
     *             .repository(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryWebhooksResult> getRepositoryWebhooks(GetRepositoryWebhooksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryWebhooks:getRepositoryWebhooks", TypeShape.of(GetRepositoryWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve webhooks for a given repository.
     * 
     * ## Example Usage
     * 
     * To retrieve webhooks of a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryWebhooksArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var repo = GithubFunctions.getRepositoryWebhooks(GetRepositoryWebhooksArgs.builder()
     *             .repository(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryWebhooksResult> getRepositoryWebhooksPlain(GetRepositoryWebhooksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryWebhooks:getRepositoryWebhooks", TypeShape.of(GetRepositoryWebhooksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub resource through REST API.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRestApiArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRestApi(GetRestApiArgs.builder()
     *             .endpoint(&#34;repos/example_repo/git/refs/heads/main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRestApiResult> getRestApi(GetRestApiArgs args) {
        return getRestApi(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub resource through REST API.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRestApiArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRestApi(GetRestApiArgs.builder()
     *             .endpoint(&#34;repos/example_repo/git/refs/heads/main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRestApiResult> getRestApiPlain(GetRestApiPlainArgs args) {
        return getRestApiPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub resource through REST API.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRestApiArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRestApi(GetRestApiArgs.builder()
     *             .endpoint(&#34;repos/example_repo/git/refs/heads/main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRestApiResult> getRestApi(GetRestApiArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRestApi:getRestApi", TypeShape.of(GetRestApiResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub resource through REST API.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRestApiArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRestApi(GetRestApiArgs.builder()
     *             .endpoint(&#34;repos/example_repo/git/refs/heads/main&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRestApiResult> getRestApiPlain(GetRestApiPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRestApi:getRestApi", TypeShape.of(GetRestApiResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys() {
        return getSshKeys(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain() {
        return getSshKeysPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(InvokeArgs args) {
        return getSshKeys(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(InvokeArgs args) {
        return getSshKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s SSH keys.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getSshKeys();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args) {
        return getTeam(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args) {
        return getTeamPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTreeResult> getTree(GetTreeArgs args) {
        return getTree(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTreeResult> getTreePlain(GetTreePlainArgs args) {
        return getTreePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTreeResult> getTree(GetTreeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getTree:getTree", TypeShape.of(GetTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTreeResult> getTreePlain(GetTreePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getTree:getTree", TypeShape.of(GetTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
