// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.ReleaseArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.ReleaseState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and manage a release in a specific
 * GitHub repository.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.Repository;
 * import com.pulumi.github.RepositoryArgs;
 * import com.pulumi.github.Release;
 * import com.pulumi.github.ReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var repo = new Repository(&#34;repo&#34;, RepositoryArgs.builder()        
 *             .description(&#34;GitHub repo managed by Terraform&#34;)
 *             .private_(false)
 *             .build());
 * 
 *         var example = new Release(&#34;example&#34;, ReleaseArgs.builder()        
 *             .repository(repo.name())
 *             .tagName(&#34;v1.0.0&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### On Non-Default Branch
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.Repository;
 * import com.pulumi.github.RepositoryArgs;
 * import com.pulumi.github.Branch;
 * import com.pulumi.github.BranchArgs;
 * import com.pulumi.github.Release;
 * import com.pulumi.github.ReleaseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleRepository = new Repository(&#34;exampleRepository&#34;, RepositoryArgs.builder()        
 *             .autoInit(true)
 *             .build());
 * 
 *         var exampleBranch = new Branch(&#34;exampleBranch&#34;, BranchArgs.builder()        
 *             .repository(exampleRepository.name())
 *             .branch(&#34;branch_name&#34;)
 *             .sourceBranch(exampleRepository.defaultBranch())
 *             .build());
 * 
 *         var exampleRelease = new Release(&#34;exampleRelease&#34;, ReleaseArgs.builder()        
 *             .repository(exampleRepository.name())
 *             .tagName(&#34;v1.0.0&#34;)
 *             .targetCommitish(exampleBranch.branch())
 *             .draft(false)
 *             .prerelease(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * This resource can be imported using the `name` of the repository, combined with the `id` of the release, and a `:` character for separating components, e.g.
 * 
 * ```sh
 * $ pulumi import github:index/release:Release example repo:12345678
 * ```
 * 
 */
@ResourceType(type="github:index/release:Release")
public class Release extends com.pulumi.resources.CustomResource {
    /**
     * Text describing the contents of the tag.
     * 
     */
    @Export(name="body", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> body;

    /**
     * @return Text describing the contents of the tag.
     * 
     */
    public Output<Optional<String>> body() {
        return Codegen.optional(this.body);
    }
    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
     * 
     */
    @Export(name="discussionCategoryName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> discussionCategoryName;

    /**
     * @return If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).
     * 
     */
    public Output<Optional<String>> discussionCategoryName() {
        return Codegen.optional(this.discussionCategoryName);
    }
    /**
     * Set to `false` to create a published release.
     * 
     */
    @Export(name="draft", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> draft;

    /**
     * @return Set to `false` to create a published release.
     * 
     */
    public Output<Optional<Boolean>> draft() {
        return Codegen.optional(this.draft);
    }
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
     * 
     */
    @Export(name="generateReleaseNotes", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> generateReleaseNotes;

    /**
     * @return Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.
     * 
     */
    public Output<Optional<Boolean>> generateReleaseNotes() {
        return Codegen.optional(this.generateReleaseNotes);
    }
    /**
     * The name of the release.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the release.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Set to `false` to identify the release as a full release.
     * 
     */
    @Export(name="prerelease", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> prerelease;

    /**
     * @return Set to `false` to identify the release as a full release.
     * 
     */
    public Output<Optional<Boolean>> prerelease() {
        return Codegen.optional(this.prerelease);
    }
    /**
     * The name of the repository.
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return The name of the repository.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * The name of the tag.
     * 
     */
    @Export(name="tagName", refs={String.class}, tree="[0]")
    private Output<String> tagName;

    /**
     * @return The name of the tag.
     * 
     */
    public Output<String> tagName() {
        return this.tagName;
    }
    /**
     * The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
     * 
     */
    @Export(name="targetCommitish", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetCommitish;

    /**
     * @return The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.
     * 
     */
    public Output<Optional<String>> targetCommitish() {
        return Codegen.optional(this.targetCommitish);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Release(String name) {
        this(name, ReleaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Release(String name, ReleaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Release(String name, ReleaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/release:Release", name, args == null ? ReleaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Release(String name, Output<String> id, @Nullable ReleaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/release:Release", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Release get(String name, Output<String> id, @Nullable ReleaseState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Release(name, id, state, options);
    }
}
