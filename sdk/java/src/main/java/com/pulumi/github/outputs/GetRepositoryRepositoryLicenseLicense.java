// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRepositoryRepositoryLicenseLicense {
    /**
     * @return The text of the license.
     * 
     */
    private String body;
    /**
     * @return Conditions associated with the license.
     * 
     */
    private List<String> conditions;
    /**
     * @return A description of the license.
     * 
     */
    private String description;
    /**
     * @return Indicates if the license is featured.
     * 
     */
    private Boolean featured;
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    private String htmlUrl;
    /**
     * @return Details about the implementation of the license.
     * 
     */
    private String implementation;
    /**
     * @return A key representing the license type (e.g., &#34;apache-2.0&#34;).
     * 
     */
    private String key;
    /**
     * @return Limitations associated with the license.
     * 
     */
    private List<String> limitations;
    /**
     * @return The name of the repository.
     * 
     */
    private String name;
    /**
     * @return Permissions associated with the license.
     * 
     */
    private List<String> permissions;
    /**
     * @return The SPDX identifier for the license (e.g., &#34;Apache-2.0&#34;).
     * 
     */
    private String spdxId;
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    private String url;

    private GetRepositoryRepositoryLicenseLicense() {}
    /**
     * @return The text of the license.
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return Conditions associated with the license.
     * 
     */
    public List<String> conditions() {
        return this.conditions;
    }
    /**
     * @return A description of the license.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Indicates if the license is featured.
     * 
     */
    public Boolean featured() {
        return this.featured;
    }
    /**
     * @return The URL to view the license details on GitHub.
     * 
     */
    public String htmlUrl() {
        return this.htmlUrl;
    }
    /**
     * @return Details about the implementation of the license.
     * 
     */
    public String implementation() {
        return this.implementation;
    }
    /**
     * @return A key representing the license type (e.g., &#34;apache-2.0&#34;).
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return Limitations associated with the license.
     * 
     */
    public List<String> limitations() {
        return this.limitations;
    }
    /**
     * @return The name of the repository.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Permissions associated with the license.
     * 
     */
    public List<String> permissions() {
        return this.permissions;
    }
    /**
     * @return The SPDX identifier for the license (e.g., &#34;Apache-2.0&#34;).
     * 
     */
    public String spdxId() {
        return this.spdxId;
    }
    /**
     * @return The URL to access information about the license on GitHub.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRepositoryRepositoryLicenseLicense defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String body;
        private List<String> conditions;
        private String description;
        private Boolean featured;
        private String htmlUrl;
        private String implementation;
        private String key;
        private List<String> limitations;
        private String name;
        private List<String> permissions;
        private String spdxId;
        private String url;
        public Builder() {}
        public Builder(GetRepositoryRepositoryLicenseLicense defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.conditions = defaults.conditions;
    	      this.description = defaults.description;
    	      this.featured = defaults.featured;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.implementation = defaults.implementation;
    	      this.key = defaults.key;
    	      this.limitations = defaults.limitations;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.spdxId = defaults.spdxId;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(List<String> conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(String... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featured(Boolean featured) {
            if (featured == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "featured");
            }
            this.featured = featured;
            return this;
        }
        @CustomType.Setter
        public Builder htmlUrl(String htmlUrl) {
            if (htmlUrl == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "htmlUrl");
            }
            this.htmlUrl = htmlUrl;
            return this;
        }
        @CustomType.Setter
        public Builder implementation(String implementation) {
            if (implementation == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "implementation");
            }
            this.implementation = implementation;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder limitations(List<String> limitations) {
            if (limitations == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "limitations");
            }
            this.limitations = limitations;
            return this;
        }
        public Builder limitations(String... limitations) {
            return limitations(List.of(limitations));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<String> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder spdxId(String spdxId) {
            if (spdxId == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "spdxId");
            }
            this.spdxId = spdxId;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetRepositoryRepositoryLicenseLicense", "url");
            }
            this.url = url;
            return this;
        }
        public GetRepositoryRepositoryLicenseLicense build() {
            final var _resultValue = new GetRepositoryRepositoryLicenseLicense();
            _resultValue.body = body;
            _resultValue.conditions = conditions;
            _resultValue.description = description;
            _resultValue.featured = featured;
            _resultValue.htmlUrl = htmlUrl;
            _resultValue.implementation = implementation;
            _resultValue.key = key;
            _resultValue.limitations = limitations;
            _resultValue.name = name;
            _resultValue.permissions = permissions;
            _resultValue.spdxId = spdxId;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
