// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class OrganizationRulesetConditionsRefNameArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRulesetConditionsRefNameArgs Empty = new OrganizationRulesetConditionsRefNameArgs();

    /**
     * (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     * 
     */
    @Import(name="excludes", required=true)
    private Output<List<String>> excludes;

    /**
     * @return (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     * 
     */
    public Output<List<String>> excludes() {
        return this.excludes;
    }

    /**
     * (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
     * 
     */
    @Import(name="includes", required=true)
    private Output<List<String>> includes;

    /**
     * @return (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
     * 
     */
    public Output<List<String>> includes() {
        return this.includes;
    }

    private OrganizationRulesetConditionsRefNameArgs() {}

    private OrganizationRulesetConditionsRefNameArgs(OrganizationRulesetConditionsRefNameArgs $) {
        this.excludes = $.excludes;
        this.includes = $.includes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRulesetConditionsRefNameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRulesetConditionsRefNameArgs $;

        public Builder() {
            $ = new OrganizationRulesetConditionsRefNameArgs();
        }

        public Builder(OrganizationRulesetConditionsRefNameArgs defaults) {
            $ = new OrganizationRulesetConditionsRefNameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(Output<List<String>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<String> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes (List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
         * 
         * @return builder
         * 
         */
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param includes (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
         * 
         * @return builder
         * 
         */
        public Builder includes(Output<List<String>> includes) {
            $.includes = includes;
            return this;
        }

        /**
         * @param includes (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
         * 
         * @return builder
         * 
         */
        public Builder includes(List<String> includes) {
            return includes(Output.of(includes));
        }

        /**
         * @param includes (List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
         * 
         * @return builder
         * 
         */
        public Builder includes(String... includes) {
            return includes(List.of(includes));
        }

        public OrganizationRulesetConditionsRefNameArgs build() {
            $.excludes = Objects.requireNonNull($.excludes, "expected parameter 'excludes' to be non-null");
            $.includes = Objects.requireNonNull($.includes, "expected parameter 'includes' to be non-null");
            return $;
        }
    }

}
