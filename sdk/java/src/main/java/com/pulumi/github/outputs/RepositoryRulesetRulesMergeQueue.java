// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryRulesetRulesMergeQueue {
    /**
     * @return Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
     * 
     */
    private @Nullable Integer checkResponseTimeoutMinutes;
    /**
     * @return When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
     * 
     */
    private @Nullable String groupingStrategy;
    /**
     * @return Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
     * 
     */
    private @Nullable Integer maxEntriesToBuild;
    /**
     * @return The maximum number of PRs that will be merged together in a group. Defaults to `5`.
     * 
     */
    private @Nullable Integer maxEntriesToMerge;
    /**
     * @return Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
     * 
     */
    private @Nullable String mergeMethod;
    /**
     * @return The minimum number of PRs that will be merged together in a group. Defaults to `1`.
     * 
     */
    private @Nullable Integer minEntriesToMerge;
    /**
     * @return The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
     * 
     */
    private @Nullable Integer minEntriesToMergeWaitMinutes;

    private RepositoryRulesetRulesMergeQueue() {}
    /**
     * @return Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed. Defaults to `60`.
     * 
     */
    public Optional<Integer> checkResponseTimeoutMinutes() {
        return Optional.ofNullable(this.checkResponseTimeoutMinutes);
    }
    /**
     * @return When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge. Can be one of: ALLGREEN, HEADGREEN. Defaults to `ALLGREEN`.
     * 
     */
    public Optional<String> groupingStrategy() {
        return Optional.ofNullable(this.groupingStrategy);
    }
    /**
     * @return Limit the number of queued pull requests requesting checks and workflow runs at the same time. Defaults to `5`.
     * 
     */
    public Optional<Integer> maxEntriesToBuild() {
        return Optional.ofNullable(this.maxEntriesToBuild);
    }
    /**
     * @return The maximum number of PRs that will be merged together in a group. Defaults to `5`.
     * 
     */
    public Optional<Integer> maxEntriesToMerge() {
        return Optional.ofNullable(this.maxEntriesToMerge);
    }
    /**
     * @return Method to use when merging changes from queued pull requests. Can be one of: MERGE, SQUASH, REBASE. Defaults to `MERGE`.
     * 
     */
    public Optional<String> mergeMethod() {
        return Optional.ofNullable(this.mergeMethod);
    }
    /**
     * @return The minimum number of PRs that will be merged together in a group. Defaults to `1`.
     * 
     */
    public Optional<Integer> minEntriesToMerge() {
        return Optional.ofNullable(this.minEntriesToMerge);
    }
    /**
     * @return The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged. Defaults to `5`.
     * 
     */
    public Optional<Integer> minEntriesToMergeWaitMinutes() {
        return Optional.ofNullable(this.minEntriesToMergeWaitMinutes);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryRulesetRulesMergeQueue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer checkResponseTimeoutMinutes;
        private @Nullable String groupingStrategy;
        private @Nullable Integer maxEntriesToBuild;
        private @Nullable Integer maxEntriesToMerge;
        private @Nullable String mergeMethod;
        private @Nullable Integer minEntriesToMerge;
        private @Nullable Integer minEntriesToMergeWaitMinutes;
        public Builder() {}
        public Builder(RepositoryRulesetRulesMergeQueue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkResponseTimeoutMinutes = defaults.checkResponseTimeoutMinutes;
    	      this.groupingStrategy = defaults.groupingStrategy;
    	      this.maxEntriesToBuild = defaults.maxEntriesToBuild;
    	      this.maxEntriesToMerge = defaults.maxEntriesToMerge;
    	      this.mergeMethod = defaults.mergeMethod;
    	      this.minEntriesToMerge = defaults.minEntriesToMerge;
    	      this.minEntriesToMergeWaitMinutes = defaults.minEntriesToMergeWaitMinutes;
        }

        @CustomType.Setter
        public Builder checkResponseTimeoutMinutes(@Nullable Integer checkResponseTimeoutMinutes) {

            this.checkResponseTimeoutMinutes = checkResponseTimeoutMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder groupingStrategy(@Nullable String groupingStrategy) {

            this.groupingStrategy = groupingStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder maxEntriesToBuild(@Nullable Integer maxEntriesToBuild) {

            this.maxEntriesToBuild = maxEntriesToBuild;
            return this;
        }
        @CustomType.Setter
        public Builder maxEntriesToMerge(@Nullable Integer maxEntriesToMerge) {

            this.maxEntriesToMerge = maxEntriesToMerge;
            return this;
        }
        @CustomType.Setter
        public Builder mergeMethod(@Nullable String mergeMethod) {

            this.mergeMethod = mergeMethod;
            return this;
        }
        @CustomType.Setter
        public Builder minEntriesToMerge(@Nullable Integer minEntriesToMerge) {

            this.minEntriesToMerge = minEntriesToMerge;
            return this;
        }
        @CustomType.Setter
        public Builder minEntriesToMergeWaitMinutes(@Nullable Integer minEntriesToMergeWaitMinutes) {

            this.minEntriesToMergeWaitMinutes = minEntriesToMergeWaitMinutes;
            return this;
        }
        public RepositoryRulesetRulesMergeQueue build() {
            final var _resultValue = new RepositoryRulesetRulesMergeQueue();
            _resultValue.checkResponseTimeoutMinutes = checkResponseTimeoutMinutes;
            _resultValue.groupingStrategy = groupingStrategy;
            _resultValue.maxEntriesToBuild = maxEntriesToBuild;
            _resultValue.maxEntriesToMerge = maxEntriesToMerge;
            _resultValue.mergeMethod = mergeMethod;
            _resultValue.minEntriesToMerge = minEntriesToMerge;
            _resultValue.minEntriesToMergeWaitMinutes = minEntriesToMergeWaitMinutes;
            return _resultValue;
        }
    }
}
