// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RepositoryEnvironmentDeploymentPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryEnvironmentDeploymentPolicyArgs Empty = new RepositoryEnvironmentDeploymentPolicyArgs();

    /**
     * The name pattern that branches must match in order to deploy to the environment.
     * 
     */
    @Import(name="branchPattern", required=true)
    private Output<String> branchPattern;

    /**
     * @return The name pattern that branches must match in order to deploy to the environment.
     * 
     */
    public Output<String> branchPattern() {
        return this.branchPattern;
    }

    /**
     * The name of the environment.
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return The name of the environment.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * The repository of the environment.
     * 
     */
    @Import(name="repository", required=true)
    private Output<String> repository;

    /**
     * @return The repository of the environment.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }

    private RepositoryEnvironmentDeploymentPolicyArgs() {}

    private RepositoryEnvironmentDeploymentPolicyArgs(RepositoryEnvironmentDeploymentPolicyArgs $) {
        this.branchPattern = $.branchPattern;
        this.environment = $.environment;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryEnvironmentDeploymentPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryEnvironmentDeploymentPolicyArgs $;

        public Builder() {
            $ = new RepositoryEnvironmentDeploymentPolicyArgs();
        }

        public Builder(RepositoryEnvironmentDeploymentPolicyArgs defaults) {
            $ = new RepositoryEnvironmentDeploymentPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branchPattern The name pattern that branches must match in order to deploy to the environment.
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(Output<String> branchPattern) {
            $.branchPattern = branchPattern;
            return this;
        }

        /**
         * @param branchPattern The name pattern that branches must match in order to deploy to the environment.
         * 
         * @return builder
         * 
         */
        public Builder branchPattern(String branchPattern) {
            return branchPattern(Output.of(branchPattern));
        }

        /**
         * @param environment The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The name of the environment.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param repository The repository of the environment.
         * 
         * @return builder
         * 
         */
        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository of the environment.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public RepositoryEnvironmentDeploymentPolicyArgs build() {
            if ($.branchPattern == null) {
                throw new MissingRequiredPropertyException("RepositoryEnvironmentDeploymentPolicyArgs", "branchPattern");
            }
            if ($.environment == null) {
                throw new MissingRequiredPropertyException("RepositoryEnvironmentDeploymentPolicyArgs", "environment");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("RepositoryEnvironmentDeploymentPolicyArgs", "repository");
            }
            return $;
        }
    }

}
