// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.ProjectColumnArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.ProjectColumnState;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and manage columns for GitHub projects.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.OrganizationProject;
 * import com.pulumi.github.OrganizationProjectArgs;
 * import com.pulumi.github.ProjectColumn;
 * import com.pulumi.github.ProjectColumnArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var project = new OrganizationProject("project", OrganizationProjectArgs.builder()        
 *             .name("A Organization Project")
 *             .body("This is an organization project.")
 *             .build());
 * 
 *         var column = new ProjectColumn("column", ProjectColumnArgs.builder()        
 *             .projectId(project.id())
 *             .name("a column")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="github:index/projectColumn:ProjectColumn")
public class ProjectColumn extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the column.
     * 
     */
    @Export(name="columnId", refs={Integer.class}, tree="[0]")
    private Output<Integer> columnId;

    /**
     * @return The ID of the column.
     * 
     */
    public Output<Integer> columnId() {
        return this.columnId;
    }
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The name of the column.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the column.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of an existing project that the column will be created in.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The ID of an existing project that the column will be created in.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectColumn(String name) {
        this(name, ProjectColumnArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectColumn(String name, ProjectColumnArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectColumn(String name, ProjectColumnArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/projectColumn:ProjectColumn", name, args == null ? ProjectColumnArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProjectColumn(String name, Output<String> id, @Nullable ProjectColumnState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/projectColumn:ProjectColumn", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectColumn get(String name, Output<String> id, @Nullable ProjectColumnState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectColumn(name, id, state, options);
    }
}
