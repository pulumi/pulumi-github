// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RepositoryRulesetRulesRequiredDeploymentsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryRulesetRulesRequiredDeploymentsArgs Empty = new RepositoryRulesetRulesRequiredDeploymentsArgs();

    /**
     * (List of String) The environments that must be successfully deployed to before branches can be merged.
     * 
     */
    @Import(name="requiredDeploymentEnvironments", required=true)
    private Output<List<String>> requiredDeploymentEnvironments;

    /**
     * @return (List of String) The environments that must be successfully deployed to before branches can be merged.
     * 
     */
    public Output<List<String>> requiredDeploymentEnvironments() {
        return this.requiredDeploymentEnvironments;
    }

    private RepositoryRulesetRulesRequiredDeploymentsArgs() {}

    private RepositoryRulesetRulesRequiredDeploymentsArgs(RepositoryRulesetRulesRequiredDeploymentsArgs $) {
        this.requiredDeploymentEnvironments = $.requiredDeploymentEnvironments;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRulesetRulesRequiredDeploymentsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRulesetRulesRequiredDeploymentsArgs $;

        public Builder() {
            $ = new RepositoryRulesetRulesRequiredDeploymentsArgs();
        }

        public Builder(RepositoryRulesetRulesRequiredDeploymentsArgs defaults) {
            $ = new RepositoryRulesetRulesRequiredDeploymentsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param requiredDeploymentEnvironments (List of String) The environments that must be successfully deployed to before branches can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requiredDeploymentEnvironments(Output<List<String>> requiredDeploymentEnvironments) {
            $.requiredDeploymentEnvironments = requiredDeploymentEnvironments;
            return this;
        }

        /**
         * @param requiredDeploymentEnvironments (List of String) The environments that must be successfully deployed to before branches can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requiredDeploymentEnvironments(List<String> requiredDeploymentEnvironments) {
            return requiredDeploymentEnvironments(Output.of(requiredDeploymentEnvironments));
        }

        /**
         * @param requiredDeploymentEnvironments (List of String) The environments that must be successfully deployed to before branches can be merged.
         * 
         * @return builder
         * 
         */
        public Builder requiredDeploymentEnvironments(String... requiredDeploymentEnvironments) {
            return requiredDeploymentEnvironments(List.of(requiredDeploymentEnvironments));
        }

        public RepositoryRulesetRulesRequiredDeploymentsArgs build() {
            if ($.requiredDeploymentEnvironments == null) {
                throw new MissingRequiredPropertyException("RepositoryRulesetRulesRequiredDeploymentsArgs", "requiredDeploymentEnvironments");
            }
            return $;
        }
    }

}
