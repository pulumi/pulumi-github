// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryTopicsState extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryTopicsState Empty = new RepositoryTopicsState();

    /**
     * The repository name.
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The repository name.
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * A list of topics to add to the repository.
     * 
     */
    @Import(name="topics")
    private @Nullable Output<List<String>> topics;

    /**
     * @return A list of topics to add to the repository.
     * 
     */
    public Optional<Output<List<String>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    private RepositoryTopicsState() {}

    private RepositoryTopicsState(RepositoryTopicsState $) {
        this.repository = $.repository;
        this.topics = $.topics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryTopicsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryTopicsState $;

        public Builder() {
            $ = new RepositoryTopicsState();
        }

        public Builder(RepositoryTopicsState defaults) {
            $ = new RepositoryTopicsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param repository The repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(@Nullable Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics A list of topics to add to the repository.
         * 
         * @return builder
         * 
         */
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public RepositoryTopicsState build() {
            return $;
        }
    }

}
