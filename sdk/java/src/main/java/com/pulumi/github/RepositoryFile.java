// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.RepositoryFileArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.RepositoryFileState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource allows you to create and manage files within a
 * GitHub repository.
 * 
 * ## Example Usage
 * 
 * ### Existing Branch
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.Repository;
 * import com.pulumi.github.RepositoryArgs;
 * import com.pulumi.github.RepositoryFile;
 * import com.pulumi.github.RepositoryFileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var foo = new Repository("foo", RepositoryArgs.builder()
 *             .name("tf-acc-test-%s")
 *             .autoInit(true)
 *             .build());
 * 
 *         var fooRepositoryFile = new RepositoryFile("fooRepositoryFile", RepositoryFileArgs.builder()
 *             .repository(foo.name())
 *             .branch("main")
 *             .file(".gitignore")
 *             .content("**}&#47;{@code *.tfstate")
 *             .commitMessage("Managed by Terraform")
 *             .commitAuthor("Terraform User")
 *             .commitEmail("terraform}{@literal @}{@code example.com")
 *             .overwriteOnCreate(true)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Auto Created Branch
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.github.Repository;
 * import com.pulumi.github.RepositoryArgs;
 * import com.pulumi.github.RepositoryFile;
 * import com.pulumi.github.RepositoryFileArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var foo = new Repository("foo", RepositoryArgs.builder()
 *             .name("tf-acc-test-%s")
 *             .autoInit(true)
 *             .build());
 * 
 *         var fooRepositoryFile = new RepositoryFile("fooRepositoryFile", RepositoryFileArgs.builder()
 *             .repository(foo.name())
 *             .branch("does/not/exist")
 *             .file(".gitignore")
 *             .content("**}&#47;{@code *.tfstate")
 *             .commitMessage("Managed by Terraform")
 *             .commitAuthor("Terraform User")
 *             .commitEmail("terraform}{@literal @}{@code example.com")
 *             .overwriteOnCreate(true)
 *             .autocreateBranch(true)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Repository files can be imported using a combination of the `repo` and `file`, e.g.
 * 
 * ```sh
 * $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore
 * ```
 * To import a file from a branch other than the default branch, append `:` and the branch name, e.g.
 * 
 * ```sh
 * $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore:dev
 * ```
 * 
 */
@ResourceType(type="github:index/repositoryFile:RepositoryFile")
public class RepositoryFile extends com.pulumi.resources.CustomResource {
    /**
     * Automatically create the branch if it could not be found. Defaults to false. Subsequent reads if the branch is deleted will occur from &#39;autocreate_branch_source_branch&#39;.
     * 
     */
    @Export(name="autocreateBranch", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autocreateBranch;

    /**
     * @return Automatically create the branch if it could not be found. Defaults to false. Subsequent reads if the branch is deleted will occur from &#39;autocreate_branch_source_branch&#39;.
     * 
     */
    public Output<Optional<Boolean>> autocreateBranch() {
        return Codegen.optional(this.autocreateBranch);
    }
    /**
     * The branch name to start from, if &#39;autocreate_branch&#39; is set. Defaults to &#39;main&#39;.
     * 
     */
    @Export(name="autocreateBranchSourceBranch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> autocreateBranchSourceBranch;

    /**
     * @return The branch name to start from, if &#39;autocreate_branch&#39; is set. Defaults to &#39;main&#39;.
     * 
     */
    public Output<Optional<String>> autocreateBranchSourceBranch() {
        return Codegen.optional(this.autocreateBranchSourceBranch);
    }
    /**
     * The commit hash to start from, if &#39;autocreate_branch&#39; is set. Defaults to the tip of &#39;autocreate_branch_source_branch&#39;. If provided, &#39;autocreate_branch_source_branch&#39; is ignored.
     * 
     */
    @Export(name="autocreateBranchSourceSha", refs={String.class}, tree="[0]")
    private Output<String> autocreateBranchSourceSha;

    /**
     * @return The commit hash to start from, if &#39;autocreate_branch&#39; is set. Defaults to the tip of &#39;autocreate_branch_source_branch&#39;. If provided, &#39;autocreate_branch_source_branch&#39; is ignored.
     * 
     */
    public Output<String> autocreateBranchSourceSha() {
        return this.autocreateBranchSourceSha;
    }
    /**
     * Git branch (defaults to the repository&#39;s default branch).
     * The branch must already exist, it will only be created automatically if &#39;autocreate_branch&#39; is set true.
     * 
     */
    @Export(name="branch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> branch;

    /**
     * @return Git branch (defaults to the repository&#39;s default branch).
     * The branch must already exist, it will only be created automatically if &#39;autocreate_branch&#39; is set true.
     * 
     */
    public Output<Optional<String>> branch() {
        return Codegen.optional(this.branch);
    }
    /**
     * Committer author name to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
     * 
     */
    @Export(name="commitAuthor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> commitAuthor;

    /**
     * @return Committer author name to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
     * 
     */
    public Output<Optional<String>> commitAuthor() {
        return Codegen.optional(this.commitAuthor);
    }
    /**
     * Committer email address to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
     * 
     */
    @Export(name="commitEmail", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> commitEmail;

    /**
     * @return Committer email address to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
     * 
     */
    public Output<Optional<String>> commitEmail() {
        return Codegen.optional(this.commitEmail);
    }
    /**
     * The commit message when creating, updating or deleting the managed file.
     * 
     */
    @Export(name="commitMessage", refs={String.class}, tree="[0]")
    private Output<String> commitMessage;

    /**
     * @return The commit message when creating, updating or deleting the managed file.
     * 
     */
    public Output<String> commitMessage() {
        return this.commitMessage;
    }
    /**
     * The SHA of the commit that modified the file.
     * 
     */
    @Export(name="commitSha", refs={String.class}, tree="[0]")
    private Output<String> commitSha;

    /**
     * @return The SHA of the commit that modified the file.
     * 
     */
    public Output<String> commitSha() {
        return this.commitSha;
    }
    /**
     * The file content.
     * 
     */
    @Export(name="content", refs={String.class}, tree="[0]")
    private Output<String> content;

    /**
     * @return The file content.
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    /**
     * The path of the file to manage.
     * 
     */
    @Export(name="file", refs={String.class}, tree="[0]")
    private Output<String> file;

    /**
     * @return The path of the file to manage.
     * 
     */
    public Output<String> file() {
        return this.file;
    }
    /**
     * Enable overwriting existing files. If set to `true` it will overwrite an existing file with the same name. If set to `false` it will fail if there is an existing file with the same name.
     * 
     */
    @Export(name="overwriteOnCreate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> overwriteOnCreate;

    /**
     * @return Enable overwriting existing files. If set to `true` it will overwrite an existing file with the same name. If set to `false` it will fail if there is an existing file with the same name.
     * 
     */
    public Output<Optional<Boolean>> overwriteOnCreate() {
        return Codegen.optional(this.overwriteOnCreate);
    }
    /**
     * The name of the commit/branch/tag.
     * 
     */
    @Export(name="ref", refs={String.class}, tree="[0]")
    private Output<String> ref;

    /**
     * @return The name of the commit/branch/tag.
     * 
     */
    public Output<String> ref() {
        return this.ref;
    }
    /**
     * The repository to create the file in.
     * 
     */
    @Export(name="repository", refs={String.class}, tree="[0]")
    private Output<String> repository;

    /**
     * @return The repository to create the file in.
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * The SHA blob of the file.
     * 
     */
    @Export(name="sha", refs={String.class}, tree="[0]")
    private Output<String> sha;

    /**
     * @return The SHA blob of the file.
     * 
     */
    public Output<String> sha() {
        return this.sha;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RepositoryFile(java.lang.String name) {
        this(name, RepositoryFileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RepositoryFile(java.lang.String name, RepositoryFileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RepositoryFile(java.lang.String name, RepositoryFileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryFile:RepositoryFile", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RepositoryFile(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryFile:RepositoryFile", name, state, makeResourceOptions(options, id), false);
    }

    private static RepositoryFileArgs makeArgs(RepositoryFileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RepositoryFileArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RepositoryFile get(java.lang.String name, Output<java.lang.String> id, @Nullable RepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RepositoryFile(name, id, state, options);
    }
}
