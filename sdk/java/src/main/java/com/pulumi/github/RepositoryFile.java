// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.github.RepositoryFileArgs;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.RepositoryFileState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="github:index/repositoryFile:RepositoryFile")
public class RepositoryFile extends com.pulumi.resources.CustomResource {
    /**
     * The branch name, defaults to &#34;main&#34;
     * 
     */
    @Export(name="branch", type=String.class, parameters={})
    private Output</* @Nullable */ String> branch;

    /**
     * @return The branch name, defaults to &#34;main&#34;
     * 
     */
    public Output<Optional<String>> branch() {
        return Codegen.optional(this.branch);
    }
    /**
     * The commit author name, defaults to the authenticated user&#39;s name
     * 
     */
    @Export(name="commitAuthor", type=String.class, parameters={})
    private Output<String> commitAuthor;

    /**
     * @return The commit author name, defaults to the authenticated user&#39;s name
     * 
     */
    public Output<String> commitAuthor() {
        return this.commitAuthor;
    }
    /**
     * The commit author email address, defaults to the authenticated user&#39;s email address
     * 
     */
    @Export(name="commitEmail", type=String.class, parameters={})
    private Output<String> commitEmail;

    /**
     * @return The commit author email address, defaults to the authenticated user&#39;s email address
     * 
     */
    public Output<String> commitEmail() {
        return this.commitEmail;
    }
    /**
     * The commit message when creating or updating the file
     * 
     */
    @Export(name="commitMessage", type=String.class, parameters={})
    private Output<String> commitMessage;

    /**
     * @return The commit message when creating or updating the file
     * 
     */
    public Output<String> commitMessage() {
        return this.commitMessage;
    }
    /**
     * The SHA of the commit that modified the file
     * 
     */
    @Export(name="commitSha", type=String.class, parameters={})
    private Output<String> commitSha;

    /**
     * @return The SHA of the commit that modified the file
     * 
     */
    public Output<String> commitSha() {
        return this.commitSha;
    }
    /**
     * The file&#39;s content
     * 
     */
    @Export(name="content", type=String.class, parameters={})
    private Output<String> content;

    /**
     * @return The file&#39;s content
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    /**
     * The file path to manage
     * 
     */
    @Export(name="file", type=String.class, parameters={})
    private Output<String> file;

    /**
     * @return The file path to manage
     * 
     */
    public Output<String> file() {
        return this.file;
    }
    /**
     * Enable overwriting existing files, defaults to &#34;false&#34;
     * 
     */
    @Export(name="overwriteOnCreate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> overwriteOnCreate;

    /**
     * @return Enable overwriting existing files, defaults to &#34;false&#34;
     * 
     */
    public Output<Optional<Boolean>> overwriteOnCreate() {
        return Codegen.optional(this.overwriteOnCreate);
    }
    /**
     * The repository name
     * 
     */
    @Export(name="repository", type=String.class, parameters={})
    private Output<String> repository;

    /**
     * @return The repository name
     * 
     */
    public Output<String> repository() {
        return this.repository;
    }
    /**
     * The blob SHA of the file
     * 
     */
    @Export(name="sha", type=String.class, parameters={})
    private Output<String> sha;

    /**
     * @return The blob SHA of the file
     * 
     */
    public Output<String> sha() {
        return this.sha;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RepositoryFile(String name) {
        this(name, RepositoryFileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RepositoryFile(String name, RepositoryFileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RepositoryFile(String name, RepositoryFileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryFile:RepositoryFile", name, args == null ? RepositoryFileArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RepositoryFile(String name, Output<String> id, @Nullable RepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("github:index/repositoryFile:RepositoryFile", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RepositoryFile get(String name, Output<String> id, @Nullable RepositoryFileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RepositoryFile(name, id, state, options);
    }
}
