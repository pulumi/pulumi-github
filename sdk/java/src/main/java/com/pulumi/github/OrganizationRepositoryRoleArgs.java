// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationRepositoryRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRepositoryRoleArgs Empty = new OrganizationRepositoryRoleArgs();

    /**
     * The system role from which this role inherits permissions.
     * 
     */
    @Import(name="baseRole", required=true)
    private Output<String> baseRole;

    /**
     * @return The system role from which this role inherits permissions.
     * 
     */
    public Output<String> baseRole() {
        return this.baseRole;
    }

    /**
     * The description of the organization repository role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the organization repository role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the organization repository role.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the organization repository role.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The permissions included in this role.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    /**
     * @return The permissions included in this role.
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }

    private OrganizationRepositoryRoleArgs() {}

    private OrganizationRepositoryRoleArgs(OrganizationRepositoryRoleArgs $) {
        this.baseRole = $.baseRole;
        this.description = $.description;
        this.name = $.name;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRepositoryRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRepositoryRoleArgs $;

        public Builder() {
            $ = new OrganizationRepositoryRoleArgs();
        }

        public Builder(OrganizationRepositoryRoleArgs defaults) {
            $ = new OrganizationRepositoryRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseRole The system role from which this role inherits permissions.
         * 
         * @return builder
         * 
         */
        public Builder baseRole(Output<String> baseRole) {
            $.baseRole = baseRole;
            return this;
        }

        /**
         * @param baseRole The system role from which this role inherits permissions.
         * 
         * @return builder
         * 
         */
        public Builder baseRole(String baseRole) {
            return baseRole(Output.of(baseRole));
        }

        /**
         * @param description The description of the organization repository role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the organization repository role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the organization repository role.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the organization repository role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public OrganizationRepositoryRoleArgs build() {
            if ($.baseRole == null) {
                throw new MissingRequiredPropertyException("OrganizationRepositoryRoleArgs", "baseRole");
            }
            if ($.permissions == null) {
                throw new MissingRequiredPropertyException("OrganizationRepositoryRoleArgs", "permissions");
            }
            return $;
        }
    }

}
