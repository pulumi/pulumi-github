// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnterpriseActionsRunnerGroupState extends com.pulumi.resources.ResourceArgs {

    public static final EnterpriseActionsRunnerGroupState Empty = new EnterpriseActionsRunnerGroupState();

    /**
     * Whether public repositories can be added to the runner group. Defaults to false.
     * 
     */
    @Import(name="allowsPublicRepositories")
    private @Nullable Output<Boolean> allowsPublicRepositories;

    /**
     * @return Whether public repositories can be added to the runner group. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> allowsPublicRepositories() {
        return Optional.ofNullable(this.allowsPublicRepositories);
    }

    /**
     * Whether this is the default runner group
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Whether this is the default runner group
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * The slug of the enterprise.
     * 
     */
    @Import(name="enterpriseSlug")
    private @Nullable Output<String> enterpriseSlug;

    /**
     * @return The slug of the enterprise.
     * 
     */
    public Optional<Output<String>> enterpriseSlug() {
        return Optional.ofNullable(this.enterpriseSlug);
    }

    /**
     * An etag representing the runner group object
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return An etag representing the runner group object
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Name of the runner group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the runner group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
     * 
     */
    @Import(name="restrictedToWorkflows")
    private @Nullable Output<Boolean> restrictedToWorkflows;

    /**
     * @return If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> restrictedToWorkflows() {
        return Optional.ofNullable(this.restrictedToWorkflows);
    }

    /**
     * The GitHub API URL for the runner group&#39;s runners
     * 
     */
    @Import(name="runnersUrl")
    private @Nullable Output<String> runnersUrl;

    /**
     * @return The GitHub API URL for the runner group&#39;s runners
     * 
     */
    public Optional<Output<String>> runnersUrl() {
        return Optional.ofNullable(this.runnersUrl);
    }

    /**
     * IDs of the organizations which should be added to the runner group
     * 
     */
    @Import(name="selectedOrganizationIds")
    private @Nullable Output<List<Integer>> selectedOrganizationIds;

    /**
     * @return IDs of the organizations which should be added to the runner group
     * 
     */
    public Optional<Output<List<Integer>>> selectedOrganizationIds() {
        return Optional.ofNullable(this.selectedOrganizationIds);
    }

    /**
     * The GitHub API URL for the runner group&#39;s selected organizations
     * 
     */
    @Import(name="selectedOrganizationsUrl")
    private @Nullable Output<String> selectedOrganizationsUrl;

    /**
     * @return The GitHub API URL for the runner group&#39;s selected organizations
     * 
     */
    public Optional<Output<String>> selectedOrganizationsUrl() {
        return Optional.ofNullable(this.selectedOrganizationsUrl);
    }

    /**
     * List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
     * 
     */
    @Import(name="selectedWorkflows")
    private @Nullable Output<List<String>> selectedWorkflows;

    /**
     * @return List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
     * 
     */
    public Optional<Output<List<String>>> selectedWorkflows() {
        return Optional.ofNullable(this.selectedWorkflows);
    }

    /**
     * Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private EnterpriseActionsRunnerGroupState() {}

    private EnterpriseActionsRunnerGroupState(EnterpriseActionsRunnerGroupState $) {
        this.allowsPublicRepositories = $.allowsPublicRepositories;
        this.default_ = $.default_;
        this.enterpriseSlug = $.enterpriseSlug;
        this.etag = $.etag;
        this.name = $.name;
        this.restrictedToWorkflows = $.restrictedToWorkflows;
        this.runnersUrl = $.runnersUrl;
        this.selectedOrganizationIds = $.selectedOrganizationIds;
        this.selectedOrganizationsUrl = $.selectedOrganizationsUrl;
        this.selectedWorkflows = $.selectedWorkflows;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnterpriseActionsRunnerGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnterpriseActionsRunnerGroupState $;

        public Builder() {
            $ = new EnterpriseActionsRunnerGroupState();
        }

        public Builder(EnterpriseActionsRunnerGroupState defaults) {
            $ = new EnterpriseActionsRunnerGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowsPublicRepositories Whether public repositories can be added to the runner group. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder allowsPublicRepositories(@Nullable Output<Boolean> allowsPublicRepositories) {
            $.allowsPublicRepositories = allowsPublicRepositories;
            return this;
        }

        /**
         * @param allowsPublicRepositories Whether public repositories can be added to the runner group. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder allowsPublicRepositories(Boolean allowsPublicRepositories) {
            return allowsPublicRepositories(Output.of(allowsPublicRepositories));
        }

        /**
         * @param default_ Whether this is the default runner group
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Whether this is the default runner group
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param enterpriseSlug The slug of the enterprise.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseSlug(@Nullable Output<String> enterpriseSlug) {
            $.enterpriseSlug = enterpriseSlug;
            return this;
        }

        /**
         * @param enterpriseSlug The slug of the enterprise.
         * 
         * @return builder
         * 
         */
        public Builder enterpriseSlug(String enterpriseSlug) {
            return enterpriseSlug(Output.of(enterpriseSlug));
        }

        /**
         * @param etag An etag representing the runner group object
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag An etag representing the runner group object
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param name Name of the runner group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the runner group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param restrictedToWorkflows If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder restrictedToWorkflows(@Nullable Output<Boolean> restrictedToWorkflows) {
            $.restrictedToWorkflows = restrictedToWorkflows;
            return this;
        }

        /**
         * @param restrictedToWorkflows If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder restrictedToWorkflows(Boolean restrictedToWorkflows) {
            return restrictedToWorkflows(Output.of(restrictedToWorkflows));
        }

        /**
         * @param runnersUrl The GitHub API URL for the runner group&#39;s runners
         * 
         * @return builder
         * 
         */
        public Builder runnersUrl(@Nullable Output<String> runnersUrl) {
            $.runnersUrl = runnersUrl;
            return this;
        }

        /**
         * @param runnersUrl The GitHub API URL for the runner group&#39;s runners
         * 
         * @return builder
         * 
         */
        public Builder runnersUrl(String runnersUrl) {
            return runnersUrl(Output.of(runnersUrl));
        }

        /**
         * @param selectedOrganizationIds IDs of the organizations which should be added to the runner group
         * 
         * @return builder
         * 
         */
        public Builder selectedOrganizationIds(@Nullable Output<List<Integer>> selectedOrganizationIds) {
            $.selectedOrganizationIds = selectedOrganizationIds;
            return this;
        }

        /**
         * @param selectedOrganizationIds IDs of the organizations which should be added to the runner group
         * 
         * @return builder
         * 
         */
        public Builder selectedOrganizationIds(List<Integer> selectedOrganizationIds) {
            return selectedOrganizationIds(Output.of(selectedOrganizationIds));
        }

        /**
         * @param selectedOrganizationIds IDs of the organizations which should be added to the runner group
         * 
         * @return builder
         * 
         */
        public Builder selectedOrganizationIds(Integer... selectedOrganizationIds) {
            return selectedOrganizationIds(List.of(selectedOrganizationIds));
        }

        /**
         * @param selectedOrganizationsUrl The GitHub API URL for the runner group&#39;s selected organizations
         * 
         * @return builder
         * 
         */
        public Builder selectedOrganizationsUrl(@Nullable Output<String> selectedOrganizationsUrl) {
            $.selectedOrganizationsUrl = selectedOrganizationsUrl;
            return this;
        }

        /**
         * @param selectedOrganizationsUrl The GitHub API URL for the runner group&#39;s selected organizations
         * 
         * @return builder
         * 
         */
        public Builder selectedOrganizationsUrl(String selectedOrganizationsUrl) {
            return selectedOrganizationsUrl(Output.of(selectedOrganizationsUrl));
        }

        /**
         * @param selectedWorkflows List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
         * 
         * @return builder
         * 
         */
        public Builder selectedWorkflows(@Nullable Output<List<String>> selectedWorkflows) {
            $.selectedWorkflows = selectedWorkflows;
            return this;
        }

        /**
         * @param selectedWorkflows List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
         * 
         * @return builder
         * 
         */
        public Builder selectedWorkflows(List<String> selectedWorkflows) {
            return selectedWorkflows(Output.of(selectedWorkflows));
        }

        /**
         * @param selectedWorkflows List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.
         * 
         * @return builder
         * 
         */
        public Builder selectedWorkflows(String... selectedWorkflows) {
            return selectedWorkflows(List.of(selectedWorkflows));
        }

        /**
         * @param visibility Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility Visibility of a runner group to enterprise organizations. Whether the runner group can include `all` or `selected`
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public EnterpriseActionsRunnerGroupState build() {
            return $;
        }
    }

}
