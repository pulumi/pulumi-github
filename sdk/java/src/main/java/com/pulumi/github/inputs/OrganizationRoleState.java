// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationRoleState extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationRoleState Empty = new OrganizationRoleState();

    /**
     * The system role from which this role inherits permissions.
     * 
     */
    @Import(name="baseRole")
    private @Nullable Output<String> baseRole;

    /**
     * @return The system role from which this role inherits permissions.
     * 
     */
    public Optional<Output<String>> baseRole() {
        return Optional.ofNullable(this.baseRole);
    }

    /**
     * The description of the organization role.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the organization role.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the organization role.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the organization role.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The permissions included in this role.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    /**
     * @return The permissions included in this role.
     * 
     */
    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * The ID of the organization role.
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<Integer> roleId;

    /**
     * @return The ID of the organization role.
     * 
     */
    public Optional<Output<Integer>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    private OrganizationRoleState() {}

    private OrganizationRoleState(OrganizationRoleState $) {
        this.baseRole = $.baseRole;
        this.description = $.description;
        this.name = $.name;
        this.permissions = $.permissions;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationRoleState $;

        public Builder() {
            $ = new OrganizationRoleState();
        }

        public Builder(OrganizationRoleState defaults) {
            $ = new OrganizationRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseRole The system role from which this role inherits permissions.
         * 
         * @return builder
         * 
         */
        public Builder baseRole(@Nullable Output<String> baseRole) {
            $.baseRole = baseRole;
            return this;
        }

        /**
         * @param baseRole The system role from which this role inherits permissions.
         * 
         * @return builder
         * 
         */
        public Builder baseRole(String baseRole) {
            return baseRole(Output.of(baseRole));
        }

        /**
         * @param description The description of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions The permissions included in this role.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param roleId The ID of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<Integer> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The ID of the organization role.
         * 
         * @return builder
         * 
         */
        public Builder roleId(Integer roleId) {
            return roleId(Output.of(roleId));
        }

        public OrganizationRoleState build() {
            return $;
        }
    }

}
