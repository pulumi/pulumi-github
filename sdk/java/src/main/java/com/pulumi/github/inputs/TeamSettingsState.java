// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.github.inputs.TeamSettingsReviewRequestDelegationArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final TeamSettingsState Empty = new TeamSettingsState();

    /**
     * The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub&#39;s documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.
     * 
     */
    @Import(name="reviewRequestDelegation")
    private @Nullable Output<TeamSettingsReviewRequestDelegationArgs> reviewRequestDelegation;

    /**
     * @return The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub&#39;s documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.
     * 
     */
    public Optional<Output<TeamSettingsReviewRequestDelegationArgs>> reviewRequestDelegation() {
        return Optional.ofNullable(this.reviewRequestDelegation);
    }

    /**
     * The GitHub team id or the GitHub team slug
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return The GitHub team id or the GitHub team slug
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * The slug of the Team within the Organization.
     * 
     */
    @Import(name="teamSlug")
    private @Nullable Output<String> teamSlug;

    /**
     * @return The slug of the Team within the Organization.
     * 
     */
    public Optional<Output<String>> teamSlug() {
        return Optional.ofNullable(this.teamSlug);
    }

    /**
     * The unique ID of the Team on GitHub. Corresponds to the ID of the &#39;github_team_settings&#39; resource.
     * 
     */
    @Import(name="teamUid")
    private @Nullable Output<String> teamUid;

    /**
     * @return The unique ID of the Team on GitHub. Corresponds to the ID of the &#39;github_team_settings&#39; resource.
     * 
     */
    public Optional<Output<String>> teamUid() {
        return Optional.ofNullable(this.teamUid);
    }

    private TeamSettingsState() {}

    private TeamSettingsState(TeamSettingsState $) {
        this.reviewRequestDelegation = $.reviewRequestDelegation;
        this.teamId = $.teamId;
        this.teamSlug = $.teamSlug;
        this.teamUid = $.teamUid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamSettingsState $;

        public Builder() {
            $ = new TeamSettingsState();
        }

        public Builder(TeamSettingsState defaults) {
            $ = new TeamSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param reviewRequestDelegation The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub&#39;s documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.
         * 
         * @return builder
         * 
         */
        public Builder reviewRequestDelegation(@Nullable Output<TeamSettingsReviewRequestDelegationArgs> reviewRequestDelegation) {
            $.reviewRequestDelegation = reviewRequestDelegation;
            return this;
        }

        /**
         * @param reviewRequestDelegation The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub&#39;s documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.
         * 
         * @return builder
         * 
         */
        public Builder reviewRequestDelegation(TeamSettingsReviewRequestDelegationArgs reviewRequestDelegation) {
            return reviewRequestDelegation(Output.of(reviewRequestDelegation));
        }

        /**
         * @param teamId The GitHub team id or the GitHub team slug
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId The GitHub team id or the GitHub team slug
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param teamSlug The slug of the Team within the Organization.
         * 
         * @return builder
         * 
         */
        public Builder teamSlug(@Nullable Output<String> teamSlug) {
            $.teamSlug = teamSlug;
            return this;
        }

        /**
         * @param teamSlug The slug of the Team within the Organization.
         * 
         * @return builder
         * 
         */
        public Builder teamSlug(String teamSlug) {
            return teamSlug(Output.of(teamSlug));
        }

        /**
         * @param teamUid The unique ID of the Team on GitHub. Corresponds to the ID of the &#39;github_team_settings&#39; resource.
         * 
         * @return builder
         * 
         */
        public Builder teamUid(@Nullable Output<String> teamUid) {
            $.teamUid = teamUid;
            return this;
        }

        /**
         * @param teamUid The unique ID of the Team on GitHub. Corresponds to the ID of the &#39;github_team_settings&#39; resource.
         * 
         * @return builder
         * 
         */
        public Builder teamUid(String teamUid) {
            return teamUid(Output.of(teamUid));
        }

        public TeamSettingsState build() {
            return $;
        }
    }

}
