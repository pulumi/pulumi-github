{
    "name": "github",
    "description": "A Pulumi package for creating and managing github cloud resources.",
    "keywords": [
        "pulumi",
        "github"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`github` Terraform Provider](https://github.com/integrations/terraform-provider-github).",
    "repository": "https://github.com/pulumi/pulumi-github",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-github/sdk/v5/go/github",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing github cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/integrations/terraform-provider-github)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-github` repo](https://github.com/pulumi/pulumi-github/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-github` repo](https://github.com/integrations/terraform-provider-github/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/integrations/terraform-provider-github)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-github` repo](https://github.com/pulumi/pulumi-github/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-github` repo](https://github.com/integrations/terraform-provider-github/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "appAuth": {
                "$ref": "#/types/github:config/appAuth:appAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n",
                "default": "https://api.github.com/",
                "defaultInfo": {
                    "environment": [
                        "GITHUB_BASE_URL"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "parallelRequests": {
                "type": "boolean",
                "description": "Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github\nEnterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we\nenforce the respect of github.com's best practices to avoid hitting abuse rate limitsDefaults to false if not set\n"
            },
            "readDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        }
    },
    "types": {
        "github:config/appAuth:appAuth": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "pemFile": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "installationId",
                "pemFile"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig": {
            "properties": {
                "githubOwnedAllowed": {
                    "type": "boolean",
                    "description": "Whether GitHub-owned actions are allowed in the organization.\n"
                },
                "patternsAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*.\"\n"
                },
                "verifiedAllowed": {
                    "type": "boolean",
                    "description": "Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.\n"
                }
            },
            "type": "object",
            "required": [
                "githubOwnedAllowed"
            ]
        },
        "github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig": {
            "properties": {
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of repository IDs to enable for GitHub Actions.\n"
                }
            },
            "type": "object",
            "required": [
                "repositoryIds"
            ]
        },
        "github:index/ActionsRepositoryPermissionsAllowedActionsConfig:ActionsRepositoryPermissionsAllowedActionsConfig": {
            "properties": {
                "githubOwnedAllowed": {
                    "type": "boolean",
                    "description": "Whether GitHub-owned actions are allowed in the repository.\n"
                },
                "patternsAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*.\"\n"
                },
                "verifiedAllowed": {
                    "type": "boolean",
                    "description": "Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.\n"
                }
            },
            "type": "object",
            "required": [
                "githubOwnedAllowed"
            ]
        },
        "github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview": {
            "properties": {
                "dismissStaleReviews": {
                    "type": "boolean",
                    "description": "Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.\n"
                },
                "dismissalRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs with dismissal access. If not empty, `restrict_dismissals` is ignored. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "pullRequestBypassers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs that are allowed to bypass pull request requirements. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "requireCodeOwnerReviews": {
                    "type": "boolean",
                    "description": "Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.\n"
                },
                "requireLastPushApproval": {
                    "type": "boolean",
                    "description": "Require that The most recent push must be approved by someone other than the last pusher.  Defaults to `false`\n"
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "description": "Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.\n(https://developer.github.com/v3/repos/branches/#parameters-1) for more information.\n"
                },
                "restrictDismissals": {
                    "type": "boolean",
                    "description": "Restrict pull request review dismissals.\n"
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck": {
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of status checks to require in order to merge into this branch. No status checks are required by default.\n\n\u003e Note: This attribute can contain multiple string patterns.\nIf specified, usual value is the [job name](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idname). Otherwise, the [job id](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idname) is defaulted to.\nFor workflows that use matrixes, append the matrix name to the value using the following pattern `(\u003cmatrix_value\u003e[, \u003cmatrix_value\u003e])`. Matrixes should be specified based on the order of matrix properties in the workflow file. See GitHub Documentation for more information.\nFor workflows that use reusable workflows, the pattern is `\u003cinitial_workflow.jobs.job.[name/id]\u003e / \u003creused-workflow.jobs.job.[name/id]\u003e`. This can extend multiple levels.\n"
                },
                "strict": {
                    "type": "boolean",
                    "description": "Require branches to be up to date before merging. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews": {
            "properties": {
                "bypassPullRequestAllowances": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances:BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances",
                    "description": "Allow specific users, teams, or apps to bypass pull request requirements. See Bypass Pull Request Allowances below for details.\n"
                },
                "dismissStaleReviews": {
                    "type": "boolean",
                    "description": "Dismiss approved reviews automatically when a new commit is pushed. Defaults to `false`.\n"
                },
                "dismissalApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of app slugs with dismissal access.\n"
                },
                "dismissalTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of team slugs with dismissal access.\nAlways use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.\n"
                },
                "dismissalUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of user logins with dismissal access\n"
                },
                "includeAdmins": {
                    "type": "boolean",
                    "deprecationMessage": "Use enforce_admins instead"
                },
                "requireCodeOwnerReviews": {
                    "type": "boolean",
                    "description": "Require an approved review in pull requests including files with a designated code owner. Defaults to `false`.\n"
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "description": "Require x number of approvals to satisfy branch protection requirements. If this is specified it must be a number between 0-6. This requirement matches GitHub's API, see the upstream [documentation](https://developer.github.com/v3/repos/branches/#parameters-1) for more information.\n"
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances:BranchProtectionV3RequiredPullRequestReviewsBypassPullRequestAllowances": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of app slugs allowed to bypass pull request requirements.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of team slugs allowed to bypass pull request requirements.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of user logins allowed to bypass pull request requirements.\n"
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks": {
            "properties": {
                "checks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of status checks to require in order to merge into this branch. No status checks are required by default. Checks should be strings containing the context and app_id like so \"context:app_id\".\n"
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "[**DEPRECATED**] (Optional) The list of status checks to require in order to merge into this branch. No status checks are required by default.\n\n\u003e Note: This attribute can contain multiple string patterns.\nIf specified, usual value is the [job name](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idname). Otherwise, the [job id](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idname) is defaulted to.\nFor workflows that use matrixes, append the matrix name to the value using the following pattern `(\u003cmatrix_value\u003e[, \u003cmatrix_value\u003e])`. Matrixes should be specified based on the order of matrix properties in the workflow file. See GitHub Documentation for more information.\nFor workflows that use reusable workflows, the pattern is `\u003cinitial_workflow.jobs.job.[name/id]\u003e / \u003creused-workflow.jobs.job.[name/id]\u003e`. This can extend multiple levels.\n",
                    "deprecationMessage": "GitHub is deprecating the use of `contexts`. Use a `checks` array instead."
                },
                "includeAdmins": {
                    "type": "boolean",
                    "deprecationMessage": "Use enforce_admins instead"
                },
                "strict": {
                    "type": "boolean",
                    "description": "Require branches to be up to date before merging. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of app slugs with push access.\n\n`restrictions` is only available for organization-owned repositories.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of team slugs with push access.\nAlways use `slug` of the team, **not** its name. Each team already **has** to have access to the repository.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of user logins with push access.\n"
                }
            },
            "type": "object"
        },
        "github:index/IssueLabelsLabel:IssueLabelsLabel": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the issue label\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "color",
                        "name",
                        "url"
                    ]
                }
            }
        },
        "github:index/OrganizationRulesetBypassActor:OrganizationRulesetBypassActor": {
            "properties": {
                "actorId": {
                    "type": "integer",
                    "description": "(Number) The ID of the actor that can bypass a ruleset.\n"
                },
                "actorType": {
                    "type": "string",
                    "description": "The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.\n"
                },
                "bypassMode": {
                    "type": "string",
                    "description": "(String) When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pull_request`.\n\n~\u003eNote: at the time of writing this, the following actor types correspond to the following actor IDs:\n"
                }
            },
            "type": "object",
            "required": [
                "actorId",
                "actorType",
                "bypassMode"
            ]
        },
        "github:index/OrganizationRulesetConditions:OrganizationRulesetConditions": {
            "properties": {
                "refName": {
                    "$ref": "#/types/github:index/OrganizationRulesetConditionsRefName:OrganizationRulesetConditionsRefName",
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.\n"
                },
                "repositoryName": {
                    "$ref": "#/types/github:index/OrganizationRulesetConditionsRepositoryName:OrganizationRulesetConditionsRepositoryName",
                    "description": "Conflicts with `repository_id`. (see below for nested schema)\n\nOne of `repository_id` and `repository_name` must be set for the rule to target any repositories.\n"
                }
            },
            "type": "object",
            "required": [
                "refName"
            ]
        },
        "github:index/OrganizationRulesetConditionsRefName:OrganizationRulesetConditionsRefName": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ]
        },
        "github:index/OrganizationRulesetConditionsRepositoryName:OrganizationRulesetConditionsRepositoryName": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.\n"
                },
                "protected": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ]
        },
        "github:index/OrganizationRulesetRules:OrganizationRulesetRules": {
            "properties": {
                "branchNamePattern": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesBranchNamePattern:OrganizationRulesetRulesBranchNamePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applies to rulesets with target `branch`. (see below for nested schema)\n"
                },
                "commitAuthorEmailPattern": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesCommitAuthorEmailPattern:OrganizationRulesetRulesCommitAuthorEmailPattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "commitMessagePattern": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesCommitMessagePattern:OrganizationRulesetRulesCommitMessagePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "committerEmailPattern": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesCommitterEmailPattern:OrganizationRulesetRulesCommitterEmailPattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "creation": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permission to create matching refs.\n"
                },
                "deletion": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permissions to delete matching refs.\n"
                },
                "nonFastForward": {
                    "type": "boolean",
                    "description": "(Boolean) Prevent users with push access from force pushing to branches.\n"
                },
                "pullRequest": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesPullRequest:OrganizationRulesetRulesPullRequest",
                    "description": "(Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "(Boolean) Prevent merge commits from being pushed to matching branches.\n"
                },
                "requiredSignatures": {
                    "type": "boolean",
                    "description": "(Boolean) Commits pushed to matching branches must have verified signatures.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesRequiredStatusChecks:OrganizationRulesetRulesRequiredStatusChecks",
                    "description": "(Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)\n"
                },
                "requiredWorkflows": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesRequiredWorkflows:OrganizationRulesetRulesRequiredWorkflows",
                    "description": "(Block List, Max: 1) Define which Actions workflows must pass before changes can be merged into a branch matching the rule. Multiple workflows can be specified. (see below for nested schema)\n"
                },
                "tagNamePattern": {
                    "$ref": "#/types/github:index/OrganizationRulesetRulesTagNamePattern:OrganizationRulesetRulesTagNamePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applies to rulesets with target `tag`. (see below for nested schema)\n"
                },
                "update": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permission to update matching refs.\n"
                }
            },
            "type": "object"
        },
        "github:index/OrganizationRulesetRulesBranchNamePattern:OrganizationRulesetRulesBranchNamePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/OrganizationRulesetRulesCommitAuthorEmailPattern:OrganizationRulesetRulesCommitAuthorEmailPattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/OrganizationRulesetRulesCommitMessagePattern:OrganizationRulesetRulesCommitMessagePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/OrganizationRulesetRulesCommitterEmailPattern:OrganizationRulesetRulesCommitterEmailPattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/OrganizationRulesetRulesPullRequest:OrganizationRulesetRulesPullRequest": {
            "properties": {
                "dismissStaleReviewsOnPush": {
                    "type": "boolean",
                    "description": "(Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.\n"
                },
                "requireCodeOwnerReview": {
                    "type": "boolean",
                    "description": "(Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.\n"
                },
                "requireLastPushApproval": {
                    "type": "boolean",
                    "description": "(Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.\n"
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "description": "(Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.\n"
                },
                "requiredReviewThreadResolution": {
                    "type": "boolean",
                    "description": "(Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "github:index/OrganizationRulesetRulesRequiredStatusChecks:OrganizationRulesetRulesRequiredStatusChecks": {
            "properties": {
                "requiredChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/OrganizationRulesetRulesRequiredStatusChecksRequiredCheck:OrganizationRulesetRulesRequiredStatusChecksRequiredCheck"
                    },
                    "description": "(Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)\n"
                },
                "strictRequiredStatusChecksPolicy": {
                    "type": "boolean",
                    "description": "(Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "requiredChecks"
            ]
        },
        "github:index/OrganizationRulesetRulesRequiredStatusChecksRequiredCheck:OrganizationRulesetRulesRequiredStatusChecksRequiredCheck": {
            "properties": {
                "context": {
                    "type": "string",
                    "description": "(String) The status check context name that must be present on the commit.\n"
                },
                "integrationId": {
                    "type": "integer",
                    "description": "(Number) The optional integration ID that this status check must originate from.\n"
                }
            },
            "type": "object",
            "required": [
                "context"
            ]
        },
        "github:index/OrganizationRulesetRulesRequiredWorkflows:OrganizationRulesetRulesRequiredWorkflows": {
            "properties": {
                "requiredWorkflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflow:OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflow"
                    },
                    "description": "(Block Set, Min: 1) Actions workflows that are required. Multiple can be defined. (see below for nested schema)\n"
                }
            },
            "type": "object",
            "required": [
                "requiredWorkflows"
            ]
        },
        "github:index/OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflow:OrganizationRulesetRulesRequiredWorkflowsRequiredWorkflow": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "(String) The path to the YAML definition file of the workflow.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "(String) The optional ref from which to fetch the workflow. Defaults to `master`.\n"
                },
                "repositoryId": {
                    "type": "integer",
                    "description": "The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass. Conflicts with `repository_name`.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "repositoryId"
            ]
        },
        "github:index/OrganizationRulesetRulesTagNamePattern:OrganizationRulesetRulesTagNamePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration": {
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "insecureSsl": {
                    "type": "boolean"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "URL of the webhook\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "github:index/ProviderAppAuth:ProviderAppAuth": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "pemFile": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "installationId",
                "pemFile"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "github:index/RepositoryCollaboratorsTeam:RepositoryCollaboratorsTeam": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborators for the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                }
            },
            "type": "object",
            "required": [
                "teamId"
            ]
        },
        "github:index/RepositoryCollaboratorsUser:RepositoryCollaboratorsUser": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborators for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the repository as a collaborator.\n"
                }
            },
            "type": "object",
            "required": [
                "username"
            ]
        },
        "github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy": {
            "properties": {
                "customBranchPolicies": {
                    "type": "boolean",
                    "description": "Whether only branches that match the specified name patterns can deploy to this environment.\n"
                },
                "protectedBranches": {
                    "type": "boolean",
                    "description": "Whether only branches with branch protection rules can deploy to this environment.\n"
                }
            },
            "type": "object",
            "required": [
                "customBranchPolicies",
                "protectedBranches"
            ]
        },
        "github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer": {
            "properties": {
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 6 IDs for teams who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 6 IDs for users who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.\n"
                }
            },
            "type": "object"
        },
        "github:index/RepositoryPages:RepositoryPages": {
            "properties": {
                "buildType": {
                    "type": "string",
                    "description": "The type of GitHub Pages site to build. Can be `legacy` or `workflow`. If you use `legacy` as build type you need to set the option `source`.\n"
                },
                "cname": {
                    "type": "string",
                    "description": "The custom domain for the repository. This can only be set after the repository has been created.\n"
                },
                "custom404": {
                    "type": "boolean",
                    "description": "Whether the rendered GitHub Pages site has a custom 404 page.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n"
                },
                "source": {
                    "$ref": "#/types/github:index/RepositoryPagesSource:RepositoryPagesSource",
                    "description": "The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.\n"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "custom404",
                        "htmlUrl",
                        "status",
                        "url"
                    ]
                }
            }
        },
        "github:index/RepositoryPagesSource:RepositoryPagesSource": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The repository directory from which the site publishes (Default: `/`).\n"
                }
            },
            "type": "object",
            "required": [
                "branch"
            ]
        },
        "github:index/RepositoryRulesetBypassActor:RepositoryRulesetBypassActor": {
            "properties": {
                "actorId": {
                    "type": "integer",
                    "description": "(Number) The ID of the actor that can bypass a ruleset.\n"
                },
                "actorType": {
                    "type": "string",
                    "description": "The type of actor that can bypass a ruleset. Can be one of: `RepositoryRole`, `Team`, `Integration`, `OrganizationAdmin`.\n"
                },
                "bypassMode": {
                    "type": "string",
                    "description": "(String) When the specified actor can bypass the ruleset. pull_request means that an actor can only bypass rules on pull requests. Can be one of: `always`, `pull_request`.\n\n\u003e Note: at the time of writing this, the following actor types correspond to the following actor IDs:\n"
                }
            },
            "type": "object",
            "required": [
                "actorId",
                "actorType",
                "bypassMode"
            ]
        },
        "github:index/RepositoryRulesetConditions:RepositoryRulesetConditions": {
            "properties": {
                "refName": {
                    "$ref": "#/types/github:index/RepositoryRulesetConditionsRefName:RepositoryRulesetConditionsRefName",
                    "description": "(Block List, Min: 1, Max: 1) (see below for nested schema)\n"
                }
            },
            "type": "object",
            "required": [
                "refName"
            ]
        },
        "github:index/RepositoryRulesetConditionsRefName:RepositoryRulesetConditionsRefName": {
            "properties": {
                "excludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.\n"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.\n"
                }
            },
            "type": "object",
            "required": [
                "excludes",
                "includes"
            ]
        },
        "github:index/RepositoryRulesetRules:RepositoryRulesetRules": {
            "properties": {
                "branchNamePattern": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesBranchNamePattern:RepositoryRulesetRulesBranchNamePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the branch_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `tag_name_pattern` as it only applied to rulesets with target `branch`. (see below for nested schema)\n"
                },
                "commitAuthorEmailPattern": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesCommitAuthorEmailPattern:RepositoryRulesetRulesCommitAuthorEmailPattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the commit_author_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "commitMessagePattern": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesCommitMessagePattern:RepositoryRulesetRulesCommitMessagePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the commit_message_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "committerEmailPattern": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesCommitterEmailPattern:RepositoryRulesetRulesCommitterEmailPattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the committer_email_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. (see below for nested schema)\n"
                },
                "creation": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permission to create matching refs.\n"
                },
                "deletion": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permissions to delete matching refs.\n"
                },
                "nonFastForward": {
                    "type": "boolean",
                    "description": "(Boolean) Prevent users with push access from force pushing to branches.\n"
                },
                "pullRequest": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesPullRequest:RepositoryRulesetRulesPullRequest",
                    "description": "(Block List, Max: 1) Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. (see below for nested schema)\n"
                },
                "requiredDeployments": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesRequiredDeployments:RepositoryRulesetRulesRequiredDeployments",
                    "description": "(Block List, Max: 1) Choose which environments must be successfully deployed to before branches can be merged into a branch that matches this rule. (see below for nested schema)\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "(Boolean) Prevent merge commits from being pushed to matching branches.\n"
                },
                "requiredSignatures": {
                    "type": "boolean",
                    "description": "(Boolean) Commits pushed to matching branches must have verified signatures.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesRequiredStatusChecks:RepositoryRulesetRulesRequiredStatusChecks",
                    "description": "(Block List, Max: 1) Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a branch that matches this rule after status checks have passed. (see below for nested schema)\n"
                },
                "tagNamePattern": {
                    "$ref": "#/types/github:index/RepositoryRulesetRulesTagNamePattern:RepositoryRulesetRulesTagNamePattern",
                    "description": "(Block List, Max: 1) Parameters to be used for the tag_name_pattern rule. This rule only applies to repositories within an enterprise, it cannot be applied to repositories owned by individuals or regular organizations. Conflicts with `branch_name_pattern` as it only applied to rulesets with target `tag`. (see below for nested schema)\n"
                },
                "update": {
                    "type": "boolean",
                    "description": "(Boolean) Only allow users with bypass permission to update matching refs.\n"
                },
                "updateAllowsFetchAndMerge": {
                    "type": "boolean",
                    "description": "(Boolean) Branch can pull changes from its upstream repository. This is only applicable to forked repositories. Requires `update` to be set to `true`. Note: behaviour is affected by a known bug on the GitHub side which may cause issues when using this parameter.\n"
                }
            },
            "type": "object"
        },
        "github:index/RepositoryRulesetRulesBranchNamePattern:RepositoryRulesetRulesBranchNamePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/RepositoryRulesetRulesCommitAuthorEmailPattern:RepositoryRulesetRulesCommitAuthorEmailPattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/RepositoryRulesetRulesCommitMessagePattern:RepositoryRulesetRulesCommitMessagePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/RepositoryRulesetRulesCommitterEmailPattern:RepositoryRulesetRulesCommitterEmailPattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/RepositoryRulesetRulesPullRequest:RepositoryRulesetRulesPullRequest": {
            "properties": {
                "dismissStaleReviewsOnPush": {
                    "type": "boolean",
                    "description": "(Boolean) New, reviewable commits pushed will dismiss previous pull request review approvals. Defaults to `false`.\n"
                },
                "requireCodeOwnerReview": {
                    "type": "boolean",
                    "description": "(Boolean) Require an approving review in pull requests that modify files that have a designated code owner. Defaults to `false`.\n"
                },
                "requireLastPushApproval": {
                    "type": "boolean",
                    "description": "(Boolean) Whether the most recent reviewable push must be approved by someone other than the person who pushed it. Defaults to `false`.\n"
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "description": "(Number) The number of approving reviews that are required before a pull request can be merged. Defaults to `0`.\n"
                },
                "requiredReviewThreadResolution": {
                    "type": "boolean",
                    "description": "(Boolean) All conversations on code must be resolved before a pull request can be merged. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "github:index/RepositoryRulesetRulesRequiredDeployments:RepositoryRulesetRulesRequiredDeployments": {
            "properties": {
                "requiredDeploymentEnvironments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) The environments that must be successfully deployed to before branches can be merged.\n"
                }
            },
            "type": "object",
            "required": [
                "requiredDeploymentEnvironments"
            ]
        },
        "github:index/RepositoryRulesetRulesRequiredStatusChecks:RepositoryRulesetRulesRequiredStatusChecks": {
            "properties": {
                "requiredChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryRulesetRulesRequiredStatusChecksRequiredCheck:RepositoryRulesetRulesRequiredStatusChecksRequiredCheck"
                    },
                    "description": "(Block Set, Min: 1) Status checks that are required. Several can be defined. (see below for nested schema)\n"
                },
                "strictRequiredStatusChecksPolicy": {
                    "type": "boolean",
                    "description": "(Boolean) Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "requiredChecks"
            ]
        },
        "github:index/RepositoryRulesetRulesRequiredStatusChecksRequiredCheck:RepositoryRulesetRulesRequiredStatusChecksRequiredCheck": {
            "properties": {
                "context": {
                    "type": "string",
                    "description": "(String) The status check context name that must be present on the commit.\n"
                },
                "integrationId": {
                    "type": "integer",
                    "description": "(Number) The optional integration ID that this status check must originate from.\n"
                }
            },
            "type": "object",
            "required": [
                "context"
            ]
        },
        "github:index/RepositoryRulesetRulesTagNamePattern:RepositoryRulesetRulesTagNamePattern": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "(Boolean) If true, the rule will fail if the pattern matches.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(String) The operator to use for matching. Can be one of: `starts_with`, `ends_with`, `contains`, `regex`.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) The pattern to match with.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "pattern"
            ]
        },
        "github:index/RepositorySecurityAndAnalysis:RepositorySecurityAndAnalysis": {
            "properties": {
                "advancedSecurity": {
                    "$ref": "#/types/github:index/RepositorySecurityAndAnalysisAdvancedSecurity:RepositorySecurityAndAnalysisAdvancedSecurity",
                    "description": "The advanced security configuration for the repository. See Advanced Security Configuration below for details. If a repository's visibility is `public`, advanced security is always enabled and cannot be changed, so this setting cannot be supplied.\n"
                },
                "secretScanning": {
                    "$ref": "#/types/github:index/RepositorySecurityAndAnalysisSecretScanning:RepositorySecurityAndAnalysisSecretScanning",
                    "description": "The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.\n"
                },
                "secretScanningPushProtection": {
                    "$ref": "#/types/github:index/RepositorySecurityAndAnalysisSecretScanningPushProtection:RepositorySecurityAndAnalysisSecretScanningPushProtection",
                    "description": "The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.\n"
                }
            },
            "type": "object"
        },
        "github:index/RepositorySecurityAndAnalysisAdvancedSecurity:RepositorySecurityAndAnalysisAdvancedSecurity": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.\n"
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "github:index/RepositorySecurityAndAnalysisSecretScanning:RepositorySecurityAndAnalysisSecretScanning": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.\n"
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "github:index/RepositorySecurityAndAnalysisSecretScanningPushProtection:RepositorySecurityAndAnalysisSecretScanningPushProtection": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Set to `enabled` to enable advanced security features on the repository. Can be `enabled` or `disabled`.\n"
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "github:index/RepositoryTemplate:RepositoryTemplate": {
            "properties": {
                "includeAllBranches": {
                    "type": "boolean",
                    "description": "Whether the new repository should include all the branches from the template repository (defaults to false, which includes only the default branch from the template).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The GitHub organization or user the template repository is owned by.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the template repository.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repository"
            ]
        },
        "github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The content type for the payload. Valid values are either `form` or `json`.\n"
                },
                "insecureSsl": {
                    "type": "boolean",
                    "description": "Insecure SSL boolean toggle. Defaults to `false`.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the webhook.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "github:index/TeamMembersMember:TeamMembersMember": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the team.\n"
                }
            },
            "type": "object",
            "required": [
                "username"
            ]
        },
        "github:index/TeamSettingsReviewRequestDelegation:TeamSettingsReviewRequestDelegation": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "The algorithm to use when assigning pull requests to team members. Supported values are `ROUND_ROBIN` and `LOAD_BALANCE`. Default value is `ROUND_ROBIN`\n"
                },
                "memberCount": {
                    "type": "integer",
                    "description": "The number of team members to assign to a pull request\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "whether to notify the entire team when at least one member is also assigned to the pull request\n"
                }
            },
            "type": "object"
        },
        "github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup": {
            "properties": {
                "groupDescription": {
                    "type": "string",
                    "description": "The description of the IdP group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the IdP group.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the IdP group.\n"
                }
            },
            "type": "object",
            "required": [
                "groupDescription",
                "groupId",
                "groupName"
            ]
        },
        "github:index/getActionsEnvironmentSecretsSecret:getActionsEnvironmentSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getActionsEnvironmentVariablesVariable:getActionsEnvironmentVariablesVariable": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the variable creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the variable last update\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getActionsOrganizationSecretsSecret:getActionsOrganizationSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Secret name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Secret visibility\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getActionsOrganizationVariablesVariable:getActionsOrganizationVariablesVariable": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the variable creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the variable last update\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "value",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getActionsSecretsSecret:getActionsSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getActionsVariablesVariable:getActionsVariablesVariable": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the variable creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the variable last update\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getBranchProtectionRulesRule:getBranchProtectionRulesRule": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "Identifies the protection rule pattern.\n"
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getCodespacesOrganizationSecretsSecret:getCodespacesOrganizationSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Secret name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Secret visibility\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getCodespacesSecretsSecret:getCodespacesSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getCodespacesUserSecretsSecret:getCodespacesUserSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Secret name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Secret visibility\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getCollaboratorsCollaborator:getCollaboratorsCollaborator": {
            "properties": {
                "eventsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's events.\n"
                },
                "followersUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's followers.\n"
                },
                "followingUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for those following the collaborator.\n"
                },
                "gistsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's gists.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The GitHub HTML URL for the collaborator.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the collaborator.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The collaborator's login.\n"
                },
                "organizationsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's organizations.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission of the collaborator.\n"
                },
                "receivedEventsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's received events.\n"
                },
                "reposUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's repositories.\n"
                },
                "siteAdmin": {
                    "type": "boolean",
                    "description": "Whether the user is a GitHub admin.\n"
                },
                "starredUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's starred repositories.\n"
                },
                "subscriptionsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's subscribed repositories.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the collaborator (ex. `user`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator.\n"
                }
            },
            "type": "object",
            "required": [
                "eventsUrl",
                "followersUrl",
                "followingUrl",
                "gistsUrl",
                "htmlUrl",
                "id",
                "login",
                "organizationsUrl",
                "permission",
                "receivedEventsUrl",
                "reposUrl",
                "siteAdmin",
                "starredUrl",
                "subscriptionsUrl",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getDependabotOrganizationSecretsSecret:getDependabotOrganizationSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Secret name\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Secret visibility\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getDependabotSecretsSecret:getDependabotSecretsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of the secret creation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of the secret last update\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getExternalGroupsExternalGroup:getExternalGroupsExternalGroup": {
            "properties": {
                "groupId": {
                    "type": "integer",
                    "description": "the ID of the group.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "the name of the group.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "the date the group was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "groupId",
                "groupName",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getIssueLabelsLabel:getIssueLabelsLabel": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hexadecimal color code for the label, without the leading #.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the label.\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationExternalIdentitiesIdentity:getOrganizationExternalIdentitiesIdentity": {
            "properties": {
                "login": {
                    "type": "string",
                    "description": "The username of the GitHub user\n"
                },
                "samlIdentity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An Object containing the user's SAML data. This object will\nbe empty if the user is not managed by SAML.\n"
                },
                "scimIdentity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An Object contining the user's SCIM data. This object will\nbe empty if the user is not managed by SCIM.\n"
                }
            },
            "type": "object",
            "required": [
                "login",
                "samlIdentity",
                "scimIdentity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationIpAllowListIpAllowList:getOrganizationIpAllowListIpAllowList": {
            "properties": {
                "allowListValue": {
                    "type": "string",
                    "description": "A single IP address or range of IP addresses in CIDR notation.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Identifies the date and time when the object was created.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the IP allow list entry.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "Whether the entry is currently active.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP allow list entry.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Identifies the date and time when the object was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "allowListValue",
                "createdAt",
                "id",
                "isActive",
                "name",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationTeamSyncGroupsGroup:getOrganizationTeamSyncGroupsGroup": {
            "properties": {
                "groupDescription": {
                    "type": "string",
                    "description": "The description of the IdP group.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the IdP group.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the IdP group.\n"
                }
            },
            "type": "object",
            "required": [
                "groupDescription",
                "groupId",
                "groupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationTeamsTeam:getOrganizationTeamsTeam": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "the team's description.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "the ID of the team.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of team members. Not returned if `summary_only = true`\n"
                },
                "name": {
                    "type": "string",
                    "description": "the team's full name.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "the Node ID of the team.\n"
                },
                "parent": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the parent team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "the team's privacy type.\n"
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of team repositories. Not returned if `summary_only = true`\n"
                },
                "slug": {
                    "type": "string",
                    "description": "the slug of the team.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "members",
                "name",
                "nodeId",
                "parent",
                "privacy",
                "repositories",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationWebhooksWebhook:getOrganizationWebhooksWebhook": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "`true` if the webhook is active.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "the ID of the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "the type of the webhook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "the url of the webhook.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id",
                "name",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getReleaseAsset:getReleaseAsset": {
            "properties": {
                "browserDownloadUrl": {
                    "type": "string",
                    "description": "Browser download URL\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "MIME type of the asset\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date the asset was created\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ID of the asset\n"
                },
                "label": {
                    "type": "string",
                    "description": "Label for the asset\n"
                },
                "name": {
                    "type": "string",
                    "description": "The file name of the asset\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID of the asset\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size in byte\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date the asset was last updated\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the asset\n"
                }
            },
            "type": "object",
            "required": [
                "browserDownloadUrl",
                "contentType",
                "createdAt",
                "id",
                "label",
                "name",
                "nodeId",
                "size",
                "updatedAt",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryAutolinkReferencesAutolinkReference:getRepositoryAutolinkReferencesAutolinkReference": {
            "properties": {
                "isAlphanumeric": {
                    "type": "boolean",
                    "description": "True if alphanumeric.\n"
                },
                "keyPrefix": {
                    "type": "string",
                    "description": "Key prefix.\n"
                },
                "targetUrlTemplate": {
                    "type": "string",
                    "description": "Target url template.\n"
                }
            },
            "type": "object",
            "required": [
                "isAlphanumeric",
                "keyPrefix",
                "targetUrlTemplate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryBranchesBranch:getRepositoryBranchesBranch": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "protected": {
                    "type": "boolean",
                    "description": "Whether the branch is protected.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "protected"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryDeployKeysKey:getRepositoryDeployKeysKey": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Key id\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key itself\n"
                },
                "title": {
                    "type": "string",
                    "description": "Key title\n"
                },
                "verified": {
                    "type": "boolean",
                    "description": "`true` if the key was verified.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "title",
                "verified"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy:getRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryEnvironmentsEnvironment:getRepositoryEnvironmentsEnvironment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Environment name.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "Environment node id.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "nodeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPage:getRepositoryPage": {
            "properties": {
                "buildType": {
                    "type": "string"
                },
                "cname": {
                    "type": "string"
                },
                "custom404": {
                    "type": "boolean"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The URL to view the license details on GitHub.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/getRepositoryPageSource:getRepositoryPageSource"
                    }
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to access information about the license on GitHub.\n"
                }
            },
            "type": "object",
            "required": [
                "buildType",
                "cname",
                "custom404",
                "htmlUrl",
                "sources",
                "status",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPageSource:getRepositoryPageSource": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the license file within the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPullRequestsResult:getRepositoryPullRequestsResult": {
            "properties": {
                "baseRef": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by base branch name.\n"
                },
                "baseSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request base.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n"
                },
                "draft": {
                    "type": "boolean",
                    "description": "Indicates Whether this Pull Request is a draft.\n"
                },
                "headOwner": {
                    "type": "string",
                    "description": "Owner of the Pull Request head repository.\n"
                },
                "headRef": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by head user or head organization and branch name in the format of \"user:ref-name\" or \"organization:ref-name\". For example: \"github:new-script-format\" or \"octocat:test-branch\".\n"
                },
                "headRepository": {
                    "type": "string",
                    "description": "Name of the Pull Request head repository.\n"
                },
                "headSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request head.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names set on the Pull Request.\n"
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Indicates whether the base repository maintainers can modify the Pull Request.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the Pull Request within the repository.\n"
                },
                "openedAt": {
                    "type": "integer",
                    "description": "Unix timestamp indicating the Pull Request creation time.\n"
                },
                "openedBy": {
                    "type": "string",
                    "description": "GitHub login of the user who opened the Pull Request.\n"
                },
                "state": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by state. Can be \"open\", \"closed\", or \"all\". Default: \"open\".\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp of the last Pull Request update.\n"
                }
            },
            "type": "object",
            "required": [
                "baseRef",
                "baseSha",
                "body",
                "draft",
                "headOwner",
                "headRef",
                "headRepository",
                "headSha",
                "labels",
                "maintainerCanModify",
                "number",
                "openedAt",
                "openedBy",
                "state",
                "title",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryRepositoryLicense:getRepositoryRepositoryLicense": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Content of the license file, encoded by encoding scheme mentioned below.\n"
                },
                "downloadUrl": {
                    "type": "string",
                    "description": "The URL to download the raw content of the license file.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "The encoding used for the content (e.g., \"base64\").\n"
                },
                "gitUrl": {
                    "type": "string",
                    "description": "The URL to access information about the license file as a Git blob.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The URL to view the license details on GitHub.\n"
                },
                "licenses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/getRepositoryRepositoryLicenseLicense:getRepositoryRepositoryLicenseLicense"
                    },
                    "description": "`license` block consists of the fields documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the license file within the repository.\n"
                },
                "sha": {
                    "type": "string",
                    "description": "The SHA hash of the license file.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the license file in bytes.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the content, (e.g., \"file\").\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to access information about the license on GitHub.\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "downloadUrl",
                "encoding",
                "gitUrl",
                "htmlUrl",
                "licenses",
                "name",
                "path",
                "sha",
                "size",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryRepositoryLicenseLicense:getRepositoryRepositoryLicenseLicense": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The text of the license.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Conditions associated with the license.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the license.\n"
                },
                "featured": {
                    "type": "boolean",
                    "description": "Indicates if the license is featured.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The URL to view the license details on GitHub.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Details about the implementation of the license.\n"
                },
                "key": {
                    "type": "string",
                    "description": "A key representing the license type (e.g., \"apache-2.0\").\n"
                },
                "limitations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Limitations associated with the license.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Permissions associated with the license.\n"
                },
                "spdxId": {
                    "type": "string",
                    "description": "The SPDX identifier for the license (e.g., \"Apache-2.0\").\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to access information about the license on GitHub.\n"
                }
            },
            "type": "object",
            "required": [
                "body",
                "conditions",
                "description",
                "featured",
                "htmlUrl",
                "implementation",
                "key",
                "limitations",
                "name",
                "permissions",
                "spdxId",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryTeamsTeam:getRepositoryTeamsTeam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Team permission\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Team slug\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "permission",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryTemplate:getRepositoryTemplate": {
            "properties": {
                "owner": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repository"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryWebhooksWebhook:getRepositoryWebhooksWebhook": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "`true` if the webhook is active.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "the ID of the webhook.\n"
                },
                "name": {
                    "type": "string",
                    "description": "the name of the webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "the type of the webhook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "the url of the webhook.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id",
                "name",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getTeamRepositoriesDetailed:getTeamRepositoriesDetailed": {
            "properties": {
                "repoId": {
                    "type": "integer"
                },
                "roleName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "repoId",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getTreeEntry:getTreeEntry": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "sha": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mode",
                "path",
                "sha",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the github package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "appAuth": {
                "$ref": "#/types/github:index/ProviderAppAuth:ProviderAppAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "parallelRequests": {
                "type": "boolean",
                "description": "Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github\nEnterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we\nenforce the respect of github.com's best practices to avoid hitting abuse rate limitsDefaults to false if not set\n"
            },
            "readDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        },
        "inputProperties": {
            "appAuth": {
                "$ref": "#/types/github:index/ProviderAppAuth:ProviderAppAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n",
                "default": "https://api.github.com/",
                "defaultInfo": {
                    "environment": [
                        "GITHUB_BASE_URL"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "parallelRequests": {
                "type": "boolean",
                "description": "Allow the provider to make parallel API calls to GitHub. You may want to set it to true when you have a private Github\nEnterprise without strict rate limits. Although, it is not possible to enable this setting on github.com because we\nenforce the respect of github.com's best practices to avoid hitting abuse rate limitsDefaults to false if not set\n"
            },
            "readDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between non-write requests to GitHub API. Defaults to 0ms if not set.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        }
    },
    "resources": {
        "github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleSecretActionsEnvironmentSecret = new github.ActionsEnvironmentSecret(\"exampleSecretActionsEnvironmentSecret\", {\n    environment: \"example_environment\",\n    secretName: \"example_secret_name\",\n    plaintextValue: _var.some_secret_string,\n});\nconst exampleSecretIndex_actionsEnvironmentSecretActionsEnvironmentSecret = new github.ActionsEnvironmentSecret(\"exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret\", {\n    environment: \"example_environment\",\n    secretName: \"example_secret_name\",\n    encryptedValue: _var.some_encrypted_secret_string,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_secret_actions_environment_secret = github.ActionsEnvironmentSecret(\"exampleSecretActionsEnvironmentSecret\",\n    environment=\"example_environment\",\n    secret_name=\"example_secret_name\",\n    plaintext_value=var[\"some_secret_string\"])\nexample_secret_index_actions_environment_secret_actions_environment_secret = github.ActionsEnvironmentSecret(\"exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret\",\n    environment=\"example_environment\",\n    secret_name=\"example_secret_name\",\n    encrypted_value=var[\"some_encrypted_secret_string\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSecretActionsEnvironmentSecret = new Github.ActionsEnvironmentSecret(\"exampleSecretActionsEnvironmentSecret\", new()\n    {\n        Environment = \"example_environment\",\n        SecretName = \"example_secret_name\",\n        PlaintextValue = @var.Some_secret_string,\n    });\n\n    var exampleSecretIndex_actionsEnvironmentSecretActionsEnvironmentSecret = new Github.ActionsEnvironmentSecret(\"exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret\", new()\n    {\n        Environment = \"example_environment\",\n        SecretName = \"example_secret_name\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsEnvironmentSecret(ctx, \"exampleSecretActionsEnvironmentSecret\", \u0026github.ActionsEnvironmentSecretArgs{\n\t\t\tEnvironment:    pulumi.String(\"example_environment\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsEnvironmentSecret(ctx, \"exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret\", \u0026github.ActionsEnvironmentSecretArgs{\n\t\t\tEnvironment:    pulumi.String(\"example_environment\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsEnvironmentSecret;\nimport com.pulumi.github.ActionsEnvironmentSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSecretActionsEnvironmentSecret = new ActionsEnvironmentSecret(\"exampleSecretActionsEnvironmentSecret\", ActionsEnvironmentSecretArgs.builder()        \n            .environment(\"example_environment\")\n            .secretName(\"example_secret_name\")\n            .plaintextValue(var_.some_secret_string())\n            .build());\n\n        var exampleSecretIndex_actionsEnvironmentSecretActionsEnvironmentSecret = new ActionsEnvironmentSecret(\"exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret\", ActionsEnvironmentSecretArgs.builder()        \n            .environment(\"example_environment\")\n            .secretName(\"example_secret_name\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretActionsEnvironmentSecret:\n    type: github:ActionsEnvironmentSecret\n    properties:\n      environment: example_environment\n      secretName: example_secret_name\n      plaintextValue: ${var.some_secret_string}\n  exampleSecretIndex/actionsEnvironmentSecretActionsEnvironmentSecret:\n    type: github:ActionsEnvironmentSecret\n    properties:\n      environment: example_environment\n      secretName: example_secret_name\n      encryptedValue: ${var.some_encrypted_secret_string}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst repoEnvironment = new github.RepositoryEnvironment(\"repoEnvironment\", {\n    repository: repo.then(repo =\u003e repo.name),\n    environment: \"example_environment\",\n});\nconst testSecret = new github.ActionsEnvironmentSecret(\"testSecret\", {\n    repository: repo.then(repo =\u003e repo.name),\n    environment: repoEnvironment.environment,\n    secretName: \"test_secret_name\",\n    plaintextValue: \"%s\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nrepo_environment = github.RepositoryEnvironment(\"repoEnvironment\",\n    repository=repo.name,\n    environment=\"example_environment\")\ntest_secret = github.ActionsEnvironmentSecret(\"testSecret\",\n    repository=repo.name,\n    environment=repo_environment.environment,\n    secret_name=\"test_secret_name\",\n    plaintext_value=\"%s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var repoEnvironment = new Github.RepositoryEnvironment(\"repoEnvironment\", new()\n    {\n        Repository = repo.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n        Environment = \"example_environment\",\n    });\n\n    var testSecret = new Github.ActionsEnvironmentSecret(\"testSecret\", new()\n    {\n        Repository = repo.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n        Environment = repoEnvironment.Environment,\n        SecretName = \"test_secret_name\",\n        PlaintextValue = \"%s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trepoEnvironment, err := github.NewRepositoryEnvironment(ctx, \"repoEnvironment\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tRepository:  *pulumi.String(repo.Name),\n\t\t\tEnvironment: pulumi.String(\"example_environment\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsEnvironmentSecret(ctx, \"testSecret\", \u0026github.ActionsEnvironmentSecretArgs{\n\t\t\tRepository:     *pulumi.String(repo.Name),\n\t\t\tEnvironment:    repoEnvironment.Environment,\n\t\t\tSecretName:     pulumi.String(\"test_secret_name\"),\n\t\t\tPlaintextValue: pulumi.String(\"%s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.RepositoryEnvironment;\nimport com.pulumi.github.RepositoryEnvironmentArgs;\nimport com.pulumi.github.ActionsEnvironmentSecret;\nimport com.pulumi.github.ActionsEnvironmentSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var repoEnvironment = new RepositoryEnvironment(\"repoEnvironment\", RepositoryEnvironmentArgs.builder()        \n            .repository(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .environment(\"example_environment\")\n            .build());\n\n        var testSecret = new ActionsEnvironmentSecret(\"testSecret\", ActionsEnvironmentSecretArgs.builder()        \n            .repository(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .environment(repoEnvironment.environment())\n            .secretName(\"test_secret_name\")\n            .plaintextValue(\"%s\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repoEnvironment:\n    type: github:RepositoryEnvironment\n    properties:\n      repository: ${repo.name}\n      environment: example_environment\n  testSecret:\n    type: github:ActionsEnvironmentSecret\n    properties:\n      repository: ${repo.name}\n      environment: ${repoEnvironment.environment}\n      secretName: test_secret_name\n      plaintextValue: '%s'\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. If you'd like to help contribute it, please visit our GitHub page! ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "environment",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsEnvironmentSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "Name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsEnvironmentVariable:ActionsEnvironmentVariable": {
            "description": "This resource allows you to create and manage GitHub Actions variables within your GitHub repository environments.\nYou must have write access to a repository to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleVariable = new github.ActionsEnvironmentVariable(\"exampleVariable\", {\n    environment: \"example_environment\",\n    value: \"example_variable_value\",\n    variableName: \"example_variable_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_variable = github.ActionsEnvironmentVariable(\"exampleVariable\",\n    environment=\"example_environment\",\n    value=\"example_variable_value\",\n    variable_name=\"example_variable_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleVariable = new Github.ActionsEnvironmentVariable(\"exampleVariable\", new()\n    {\n        Environment = \"example_environment\",\n        Value = \"example_variable_value\",\n        VariableName = \"example_variable_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsEnvironmentVariable(ctx, \"exampleVariable\", \u0026github.ActionsEnvironmentVariableArgs{\n\t\t\tEnvironment:  pulumi.String(\"example_environment\"),\n\t\t\tValue:        pulumi.String(\"example_variable_value\"),\n\t\t\tVariableName: pulumi.String(\"example_variable_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsEnvironmentVariable;\nimport com.pulumi.github.ActionsEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleVariable = new ActionsEnvironmentVariable(\"exampleVariable\", ActionsEnvironmentVariableArgs.builder()        \n            .environment(\"example_environment\")\n            .value(\"example_variable_value\")\n            .variableName(\"example_variable_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleVariable:\n    type: github:ActionsEnvironmentVariable\n    properties:\n      environment: example_environment\n      value: example_variable_value\n      variableName: example_variable_name\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst repoEnvironment = new github.RepositoryEnvironment(\"repoEnvironment\", {\n    repository: repo.then(repo =\u003e repo.name),\n    environment: \"example_environment\",\n});\nconst exampleVariable = new github.ActionsEnvironmentVariable(\"exampleVariable\", {\n    repository: repo.then(repo =\u003e repo.name),\n    environment: repoEnvironment.environment,\n    variableName: \"example_variable_name\",\n    value: \"example_variable_value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nrepo_environment = github.RepositoryEnvironment(\"repoEnvironment\",\n    repository=repo.name,\n    environment=\"example_environment\")\nexample_variable = github.ActionsEnvironmentVariable(\"exampleVariable\",\n    repository=repo.name,\n    environment=repo_environment.environment,\n    variable_name=\"example_variable_name\",\n    value=\"example_variable_value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var repoEnvironment = new Github.RepositoryEnvironment(\"repoEnvironment\", new()\n    {\n        Repository = repo.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n        Environment = \"example_environment\",\n    });\n\n    var exampleVariable = new Github.ActionsEnvironmentVariable(\"exampleVariable\", new()\n    {\n        Repository = repo.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n        Environment = repoEnvironment.Environment,\n        VariableName = \"example_variable_name\",\n        Value = \"example_variable_value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trepoEnvironment, err := github.NewRepositoryEnvironment(ctx, \"repoEnvironment\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tRepository:  *pulumi.String(repo.Name),\n\t\t\tEnvironment: pulumi.String(\"example_environment\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsEnvironmentVariable(ctx, \"exampleVariable\", \u0026github.ActionsEnvironmentVariableArgs{\n\t\t\tRepository:   *pulumi.String(repo.Name),\n\t\t\tEnvironment:  repoEnvironment.Environment,\n\t\t\tVariableName: pulumi.String(\"example_variable_name\"),\n\t\t\tValue:        pulumi.String(\"example_variable_value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.RepositoryEnvironment;\nimport com.pulumi.github.RepositoryEnvironmentArgs;\nimport com.pulumi.github.ActionsEnvironmentVariable;\nimport com.pulumi.github.ActionsEnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var repoEnvironment = new RepositoryEnvironment(\"repoEnvironment\", RepositoryEnvironmentArgs.builder()        \n            .repository(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .environment(\"example_environment\")\n            .build());\n\n        var exampleVariable = new ActionsEnvironmentVariable(\"exampleVariable\", ActionsEnvironmentVariableArgs.builder()        \n            .repository(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .environment(repoEnvironment.environment())\n            .variableName(\"example_variable_name\")\n            .value(\"example_variable_value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repoEnvironment:\n    type: github:RepositoryEnvironment\n    properties:\n      repository: ${repo.name}\n      environment: example_environment\n  exampleVariable:\n    type: github:ActionsEnvironmentVariable\n    properties:\n      repository: ${repo.name}\n      environment: ${repoEnvironment.environment}\n      variableName: example_variable_name\n      value: example_variable_value\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the repository name, environment name, and variable name:\n\n```sh\n $ pulumi import github:index/actionsEnvironmentVariable:ActionsEnvironmentVariable test_variable myrepo:myenv:myvariable\n```\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret creation.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret update.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable.\n"
                }
            },
            "required": [
                "createdAt",
                "environment",
                "repository",
                "updatedAt",
                "value",
                "variableName"
            ],
            "inputProperties": {
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environment",
                "repository",
                "value",
                "variableName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsEnvironmentVariable resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret creation.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret update.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable\n"
                    },
                    "variableName": {
                        "type": "string",
                        "description": "Name of the variable.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationOidcSubjectClaimCustomizationTemplate:ActionsOrganizationOidcSubjectClaimCustomizationTemplate": {
            "description": "This resource allows you to create and manage an OpenID Connect subject claim customization template within a GitHub \norganization.\n\nMore information on integrating GitHub with cloud providers using OpenID Connect and a list of available claims is\navailable in the [Actions documentation](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleTemplate = new github.ActionsOrganizationOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", {includeClaimKeys: [\n    \"actor\",\n    \"context\",\n    \"repository_owner\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_template = github.ActionsOrganizationOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", include_claim_keys=[\n    \"actor\",\n    \"context\",\n    \"repository_owner\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTemplate = new Github.ActionsOrganizationOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", new()\n    {\n        IncludeClaimKeys = new[]\n        {\n            \"actor\",\n            \"context\",\n            \"repository_owner\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsOrganizationOidcSubjectClaimCustomizationTemplate(ctx, \"exampleTemplate\", \u0026github.ActionsOrganizationOidcSubjectClaimCustomizationTemplateArgs{\n\t\t\tIncludeClaimKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"actor\"),\n\t\t\t\tpulumi.String(\"context\"),\n\t\t\t\tpulumi.String(\"repository_owner\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsOrganizationOidcSubjectClaimCustomizationTemplate;\nimport com.pulumi.github.ActionsOrganizationOidcSubjectClaimCustomizationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleTemplate = new ActionsOrganizationOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", ActionsOrganizationOidcSubjectClaimCustomizationTemplateArgs.builder()        \n            .includeClaimKeys(            \n                \"actor\",\n                \"context\",\n                \"repository_owner\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTemplate:\n    type: github:ActionsOrganizationOidcSubjectClaimCustomizationTemplate\n    properties:\n      includeClaimKeys:\n        - actor\n        - context\n        - repository_owner\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the organization's name.\n\n```sh\n $ pulumi import github:index/actionsOrganizationOidcSubjectClaimCustomizationTemplate:ActionsOrganizationOidcSubjectClaimCustomizationTemplate test example_organization\n```\n ",
            "properties": {
                "includeClaimKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of OpenID Connect claims.\n"
                }
            },
            "required": [
                "includeClaimKeys"
            ],
            "inputProperties": {
                "includeClaimKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of OpenID Connect claims.\n"
                }
            },
            "requiredInputs": [
                "includeClaimKeys"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationOidcSubjectClaimCustomizationTemplate resources.\n",
                "properties": {
                    "includeClaimKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of OpenID Connect claims.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions": {
            "description": "This resource allows you to create and manage GitHub Actions permissions within your GitHub enterprise organizations.\nYou must have admin access to an organization to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {});\nconst test = new github.ActionsOrganizationPermissions(\"test\", {\n    allowedActions: \"selected\",\n    enabledRepositories: \"selected\",\n    allowedActionsConfig: {\n        githubOwnedAllowed: true,\n        patternsAlloweds: [\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verifiedAllowed: true,\n    },\n    enabledRepositoriesConfig: {\n        repositoryIds: [example.repoId],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\")\ntest = github.ActionsOrganizationPermissions(\"test\",\n    allowed_actions=\"selected\",\n    enabled_repositories=\"selected\",\n    allowed_actions_config=github.ActionsOrganizationPermissionsAllowedActionsConfigArgs(\n        github_owned_allowed=True,\n        patterns_alloweds=[\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verified_allowed=True,\n    ),\n    enabled_repositories_config=github.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs(\n        repository_ids=[example.repo_id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\");\n\n    var test = new Github.ActionsOrganizationPermissions(\"test\", new()\n    {\n        AllowedActions = \"selected\",\n        EnabledRepositories = \"selected\",\n        AllowedActionsConfig = new Github.Inputs.ActionsOrganizationPermissionsAllowedActionsConfigArgs\n        {\n            GithubOwnedAllowed = true,\n            PatternsAlloweds = new[]\n            {\n                \"actions/cache@*\",\n                \"actions/checkout@*\",\n            },\n            VerifiedAllowed = true,\n        },\n        EnabledRepositoriesConfig = new Github.Inputs.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs\n        {\n            RepositoryIds = new[]\n            {\n                example.RepoId,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationPermissions(ctx, \"test\", \u0026github.ActionsOrganizationPermissionsArgs{\n\t\t\tAllowedActions:      pulumi.String(\"selected\"),\n\t\t\tEnabledRepositories: pulumi.String(\"selected\"),\n\t\t\tAllowedActionsConfig: \u0026github.ActionsOrganizationPermissionsAllowedActionsConfigArgs{\n\t\t\t\tGithubOwnedAllowed: pulumi.Bool(true),\n\t\t\t\tPatternsAlloweds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"actions/cache@*\"),\n\t\t\t\t\tpulumi.String(\"actions/checkout@*\"),\n\t\t\t\t},\n\t\t\t\tVerifiedAllowed: pulumi.Bool(true),\n\t\t\t},\n\t\t\tEnabledRepositoriesConfig: \u0026github.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{\n\t\t\t\tRepositoryIds: pulumi.IntArray{\n\t\t\t\t\texample.RepoId,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.ActionsOrganizationPermissions;\nimport com.pulumi.github.ActionsOrganizationPermissionsArgs;\nimport com.pulumi.github.inputs.ActionsOrganizationPermissionsAllowedActionsConfigArgs;\nimport com.pulumi.github.inputs.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\");\n\n        var test = new ActionsOrganizationPermissions(\"test\", ActionsOrganizationPermissionsArgs.builder()        \n            .allowedActions(\"selected\")\n            .enabledRepositories(\"selected\")\n            .allowedActionsConfig(ActionsOrganizationPermissionsAllowedActionsConfigArgs.builder()\n                .githubOwnedAllowed(true)\n                .patternsAlloweds(                \n                    \"actions/cache@*\",\n                    \"actions/checkout@*\")\n                .verifiedAllowed(true)\n                .build())\n            .enabledRepositoriesConfig(ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs.builder()\n                .repositoryIds(example.repoId())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n  test:\n    type: github:ActionsOrganizationPermissions\n    properties:\n      allowedActions: selected\n      enabledRepositories: selected\n      allowedActionsConfig:\n        githubOwnedAllowed: true\n        patternsAlloweds:\n          - actions/cache@*\n          - actions/checkout@*\n        verifiedAllowed: true\n      enabledRepositoriesConfig:\n        repositoryIds:\n          - ${example.repoId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the name of the GitHub organization:\n\n```sh\n $ pulumi import github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions test github_organization_name\n```\n ",
            "properties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabledRepositories": {
                    "type": "string",
                    "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                },
                "enabledRepositoriesConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                    "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                }
            },
            "required": [
                "enabledRepositories"
            ],
            "inputProperties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabledRepositories": {
                    "type": "string",
                    "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                },
                "enabledRepositoriesConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                    "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                }
            },
            "requiredInputs": [
                "enabledRepositories"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationPermissions resources.\n",
                "properties": {
                    "allowedActions": {
                        "type": "string",
                        "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                    },
                    "allowedActionsConfig": {
                        "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                        "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                    },
                    "enabledRepositories": {
                        "type": "string",
                        "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                    },
                    "enabledRepositoriesConfig": {
                        "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                        "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationSecret:ActionsOrganizationSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleSecretActionsOrganizationSecret = new github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"private\",\n    plaintextValue: _var.some_secret_string,\n});\nconst exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"private\",\n    encryptedValue: _var.some_encrypted_secret_string,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_secret_actions_organization_secret = github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"private\",\n    plaintext_value=var[\"some_secret_string\"])\nexample_secret_index_actions_organization_secret_actions_organization_secret = github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"private\",\n    encrypted_value=var[\"some_encrypted_secret_string\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSecretActionsOrganizationSecret = new Github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"private\",\n        PlaintextValue = @var.Some_secret_string,\n    });\n\n    var exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new Github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"private\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsOrganizationSecret(ctx, \"exampleSecretActionsOrganizationSecret\", \u0026github.ActionsOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"private\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationSecret(ctx, \"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", \u0026github.ActionsOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"private\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsOrganizationSecret;\nimport com.pulumi.github.ActionsOrganizationSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSecretActionsOrganizationSecret = new ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", ActionsOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"private\")\n            .plaintextValue(var_.some_secret_string())\n            .build());\n\n        var exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", ActionsOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"private\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretActionsOrganizationSecret:\n    type: github:ActionsOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: private\n      plaintextValue: ${var.some_secret_string}\n  exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret:\n    type: github:ActionsOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: private\n      encryptedValue: ${var.some_encrypted_secret_string}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst exampleSecretActionsOrganizationSecret = new github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"selected\",\n    plaintextValue: _var.some_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\nconst exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"selected\",\n    encryptedValue: _var.some_encrypted_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nexample_secret_actions_organization_secret = github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"selected\",\n    plaintext_value=var[\"some_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\nexample_secret_index_actions_organization_secret_actions_organization_secret = github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"selected\",\n    encrypted_value=var[\"some_encrypted_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var exampleSecretActionsOrganizationSecret = new Github.ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"selected\",\n        PlaintextValue = @var.Some_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n    var exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new Github.ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"selected\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationSecret(ctx, \"exampleSecretActionsOrganizationSecret\", \u0026github.ActionsOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"selected\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationSecret(ctx, \"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", \u0026github.ActionsOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"selected\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.ActionsOrganizationSecret;\nimport com.pulumi.github.ActionsOrganizationSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var exampleSecretActionsOrganizationSecret = new ActionsOrganizationSecret(\"exampleSecretActionsOrganizationSecret\", ActionsOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"selected\")\n            .plaintextValue(var_.some_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n        var exampleSecretIndex_actionsOrganizationSecretActionsOrganizationSecret = new ActionsOrganizationSecret(\"exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret\", ActionsOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"selected\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretActionsOrganizationSecret:\n    type: github:ActionsOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: selected\n      plaintextValue: ${var.some_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\n  exampleSecretIndex/actionsOrganizationSecretActionsOrganizationSecret:\n    type: github:ActionsOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: selected\n      encryptedValue: ${var.some_encrypted_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name:\n\n```sh\n $ pulumi import github:index/actionsOrganizationSecret:ActionsOrganizationSecret test_secret test_secret_name\n```\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround.\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_secret update.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                }
            },
            "required": [
                "createdAt",
                "secretName",
                "updatedAt",
                "visibility"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretName",
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_secret update.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationSecretRepositories:ActionsOrganizationSecretRepositories": {
            "description": "This resource allows you to manage repository allow list for existing GitHub Actions secrets within your GitHub organization.\nYou must have write access to an organization secret to use this resource.\n\nThis resource is only applicable when `visibility` of the existing organization secret has been set to `selected`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst orgSecretRepos = new github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\", {\n    secretName: \"existing_secret_name\",\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\norg_secret_repos = github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\",\n    secret_name=\"existing_secret_name\",\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var orgSecretRepos = new Github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\", new()\n    {\n        SecretName = \"existing_secret_name\",\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationSecretRepositories(ctx, \"orgSecretRepos\", \u0026github.ActionsOrganizationSecretRepositoriesArgs{\n\t\t\tSecretName: pulumi.String(\"existing_secret_name\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.ActionsOrganizationSecretRepositories;\nimport com.pulumi.github.ActionsOrganizationSecretRepositoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var orgSecretRepos = new ActionsOrganizationSecretRepositories(\"orgSecretRepos\", ActionsOrganizationSecretRepositoriesArgs.builder()        \n            .secretName(\"existing_secret_name\")\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  orgSecretRepos:\n    type: github:ActionsOrganizationSecretRepositories\n    properties:\n      secretName: existing_secret_name\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name:\n\n```sh\n $ pulumi import github:index/actionsOrganizationSecretRepositories:ActionsOrganizationSecretRepositories test_secret_repos test_secret_name\n```\n ",
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "required": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "inputProperties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "requiredInputs": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationSecretRepositories resources.\n",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "Name of the existing secret\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationVariable:ActionsOrganizationVariable": {
            "description": "This resource allows you to create and manage GitHub Actions variables within your GitHub organization.\nYou must have write access to a repository to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleVariable = new github.ActionsOrganizationVariable(\"exampleVariable\", {\n    value: \"example_variable_value\",\n    variableName: \"example_variable_name\",\n    visibility: \"private\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_variable = github.ActionsOrganizationVariable(\"exampleVariable\",\n    value=\"example_variable_value\",\n    variable_name=\"example_variable_name\",\n    visibility=\"private\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleVariable = new Github.ActionsOrganizationVariable(\"exampleVariable\", new()\n    {\n        Value = \"example_variable_value\",\n        VariableName = \"example_variable_name\",\n        Visibility = \"private\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsOrganizationVariable(ctx, \"exampleVariable\", \u0026github.ActionsOrganizationVariableArgs{\n\t\t\tValue:        pulumi.String(\"example_variable_value\"),\n\t\t\tVariableName: pulumi.String(\"example_variable_name\"),\n\t\t\tVisibility:   pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsOrganizationVariable;\nimport com.pulumi.github.ActionsOrganizationVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleVariable = new ActionsOrganizationVariable(\"exampleVariable\", ActionsOrganizationVariableArgs.builder()        \n            .value(\"example_variable_value\")\n            .variableName(\"example_variable_name\")\n            .visibility(\"private\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleVariable:\n    type: github:ActionsOrganizationVariable\n    properties:\n      value: example_variable_value\n      variableName: example_variable_name\n      visibility: private\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst exampleVariable = new github.ActionsOrganizationVariable(\"exampleVariable\", {\n    variableName: \"example_variable_name\",\n    visibility: \"selected\",\n    value: \"example_variable_value\",\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nexample_variable = github.ActionsOrganizationVariable(\"exampleVariable\",\n    variable_name=\"example_variable_name\",\n    visibility=\"selected\",\n    value=\"example_variable_value\",\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var exampleVariable = new Github.ActionsOrganizationVariable(\"exampleVariable\", new()\n    {\n        VariableName = \"example_variable_name\",\n        Visibility = \"selected\",\n        Value = \"example_variable_value\",\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationVariable(ctx, \"exampleVariable\", \u0026github.ActionsOrganizationVariableArgs{\n\t\t\tVariableName: pulumi.String(\"example_variable_name\"),\n\t\t\tVisibility:   pulumi.String(\"selected\"),\n\t\t\tValue:        pulumi.String(\"example_variable_value\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.ActionsOrganizationVariable;\nimport com.pulumi.github.ActionsOrganizationVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var exampleVariable = new ActionsOrganizationVariable(\"exampleVariable\", ActionsOrganizationVariableArgs.builder()        \n            .variableName(\"example_variable_name\")\n            .visibility(\"selected\")\n            .value(\"example_variable_value\")\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleVariable:\n    type: github:ActionsOrganizationVariable\n    properties:\n      variableName: example_variable_name\n      visibility: selected\n      value: example_variable_value\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the variable name:\n\n```sh\n $ pulumi import github:index/actionsOrganizationVariable:ActionsOrganizationVariable test_variable test_variable_name\n```\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_variable creation.\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization variable.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_variable update.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization variable.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                }
            },
            "required": [
                "createdAt",
                "updatedAt",
                "value",
                "variableName",
                "visibility"
            ],
            "inputProperties": {
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "willReplaceOnChanges": true
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization variable.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "value",
                "variableName",
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationVariable resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_variable creation.\n"
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization variable.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_variable update.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable\n"
                    },
                    "variableName": {
                        "type": "string",
                        "description": "Name of the variable\n",
                        "willReplaceOnChanges": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Configures the access that repositories have to the organization variable.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel": {
            "description": "This resource allows you to set the access level of a non-public repositories actions and reusable workflows for use in other repositories.\nYou must have admin access to a repository to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {visibility: \"private\"});\nconst test = new github.ActionsRepositoryAccessLevel(\"test\", {\n    accessLevel: \"user\",\n    repository: example.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\", visibility=\"private\")\ntest = github.ActionsRepositoryAccessLevel(\"test\",\n    access_level=\"user\",\n    repository=example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Visibility = \"private\",\n    });\n\n    var test = new Github.ActionsRepositoryAccessLevel(\"test\", new()\n    {\n        AccessLevel = \"user\",\n        Repository = example.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tVisibility: pulumi.String(\"private\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsRepositoryAccessLevel(ctx, \"test\", \u0026github.ActionsRepositoryAccessLevelArgs{\n\t\t\tAccessLevel: pulumi.String(\"user\"),\n\t\t\tRepository:  example.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.ActionsRepositoryAccessLevel;\nimport com.pulumi.github.ActionsRepositoryAccessLevelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .visibility(\"private\")\n            .build());\n\n        var test = new ActionsRepositoryAccessLevel(\"test\", ActionsRepositoryAccessLevelArgs.builder()        \n            .accessLevel(\"user\")\n            .repository(example.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      visibility: private\n  test:\n    type: github:ActionsRepositoryAccessLevel\n    properties:\n      accessLevel: user\n      repository: ${example.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the name of the GitHub repository:\n\n```sh\n $ pulumi import github:index/actionsRepositoryAccessLevel:ActionsRepositoryAccessLevel test my-repository\n```\n ",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "required": [
                "accessLevel",
                "repository"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsRepositoryAccessLevel resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Where the actions or reusable workflows of the repository may be used. Possible values are `none`, `user`, `organization`, or `enterprise`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsRepositoryOidcSubjectClaimCustomizationTemplate:ActionsRepositoryOidcSubjectClaimCustomizationTemplate": {
            "description": "This resource allows you to create and manage an OpenID Connect subject claim customization template for a GitHub\nrepository.\n\nMore information on integrating GitHub with cloud providers using OpenID Connect and a list of available claims is\navailable in the [Actions documentation](https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect).\n\nThe following table lists the behaviour of `use_default`:\n\n| `use_default` | `include_claim_keys` | Template used                                             |\n|---------------|----------------------|-----------------------------------------------------------|\n| `true`        | Unset                | GitHub's default                                          |\n| `false`       | Set                  | `include_claim_keys`                                      |\n| `false`       | Unset                | Organization's default if set, otherwise GitHub's default |\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {});\nconst exampleTemplate = new github.ActionsRepositoryOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", {\n    repository: example.name,\n    useDefault: false,\n    includeClaimKeys: [\n        \"actor\",\n        \"context\",\n        \"repository_owner\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\")\nexample_template = github.ActionsRepositoryOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\",\n    repository=example.name,\n    use_default=False,\n    include_claim_keys=[\n        \"actor\",\n        \"context\",\n        \"repository_owner\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\");\n\n    var exampleTemplate = new Github.ActionsRepositoryOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", new()\n    {\n        Repository = example.Name,\n        UseDefault = false,\n        IncludeClaimKeys = new[]\n        {\n            \"actor\",\n            \"context\",\n            \"repository_owner\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsRepositoryOidcSubjectClaimCustomizationTemplate(ctx, \"exampleTemplate\", \u0026github.ActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs{\n\t\t\tRepository: example.Name,\n\t\t\tUseDefault: pulumi.Bool(false),\n\t\t\tIncludeClaimKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"actor\"),\n\t\t\t\tpulumi.String(\"context\"),\n\t\t\t\tpulumi.String(\"repository_owner\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.ActionsRepositoryOidcSubjectClaimCustomizationTemplate;\nimport com.pulumi.github.ActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\");\n\n        var exampleTemplate = new ActionsRepositoryOidcSubjectClaimCustomizationTemplate(\"exampleTemplate\", ActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()        \n            .repository(example.name())\n            .useDefault(false)\n            .includeClaimKeys(            \n                \"actor\",\n                \"context\",\n                \"repository_owner\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n  exampleTemplate:\n    type: github:ActionsRepositoryOidcSubjectClaimCustomizationTemplate\n    properties:\n      repository: ${example.name}\n      useDefault: false\n      includeClaimKeys:\n        - actor\n        - context\n        - repository_owner\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the repository's name.\n\n```sh\n $ pulumi import github:index/actionsRepositoryOidcSubjectClaimCustomizationTemplate:ActionsRepositoryOidcSubjectClaimCustomizationTemplate test example_repository\n```\n ",
            "properties": {
                "includeClaimKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of OpenID Connect claims.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "useDefault": {
                    "type": "boolean",
                    "description": "Whether to use the default template or not. If `true`, `include_claim_keys` must not\nbe set.\n"
                }
            },
            "required": [
                "repository",
                "useDefault"
            ],
            "inputProperties": {
                "includeClaimKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of OpenID Connect claims.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "useDefault": {
                    "type": "boolean",
                    "description": "Whether to use the default template or not. If `true`, `include_claim_keys` must not\nbe set.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "useDefault"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsRepositoryOidcSubjectClaimCustomizationTemplate resources.\n",
                "properties": {
                    "includeClaimKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of OpenID Connect claims.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "useDefault": {
                        "type": "boolean",
                        "description": "Whether to use the default template or not. If `true`, `include_claim_keys` must not\nbe set.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsRepositoryPermissions:ActionsRepositoryPermissions": {
            "description": "This resource allows you to enable and manage GitHub Actions permissions for a given repository.\nYou must have admin access to an repository to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {});\nconst test = new github.ActionsRepositoryPermissions(\"test\", {\n    allowedActions: \"selected\",\n    allowedActionsConfig: {\n        githubOwnedAllowed: true,\n        patternsAlloweds: [\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verifiedAllowed: true,\n    },\n    repository: example.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\")\ntest = github.ActionsRepositoryPermissions(\"test\",\n    allowed_actions=\"selected\",\n    allowed_actions_config=github.ActionsRepositoryPermissionsAllowedActionsConfigArgs(\n        github_owned_allowed=True,\n        patterns_alloweds=[\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verified_allowed=True,\n    ),\n    repository=example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\");\n\n    var test = new Github.ActionsRepositoryPermissions(\"test\", new()\n    {\n        AllowedActions = \"selected\",\n        AllowedActionsConfig = new Github.Inputs.ActionsRepositoryPermissionsAllowedActionsConfigArgs\n        {\n            GithubOwnedAllowed = true,\n            PatternsAlloweds = new[]\n            {\n                \"actions/cache@*\",\n                \"actions/checkout@*\",\n            },\n            VerifiedAllowed = true,\n        },\n        Repository = example.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsRepositoryPermissions(ctx, \"test\", \u0026github.ActionsRepositoryPermissionsArgs{\n\t\t\tAllowedActions: pulumi.String(\"selected\"),\n\t\t\tAllowedActionsConfig: \u0026github.ActionsRepositoryPermissionsAllowedActionsConfigArgs{\n\t\t\t\tGithubOwnedAllowed: pulumi.Bool(true),\n\t\t\t\tPatternsAlloweds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"actions/cache@*\"),\n\t\t\t\t\tpulumi.String(\"actions/checkout@*\"),\n\t\t\t\t},\n\t\t\t\tVerifiedAllowed: pulumi.Bool(true),\n\t\t\t},\n\t\t\tRepository: example.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.ActionsRepositoryPermissions;\nimport com.pulumi.github.ActionsRepositoryPermissionsArgs;\nimport com.pulumi.github.inputs.ActionsRepositoryPermissionsAllowedActionsConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\");\n\n        var test = new ActionsRepositoryPermissions(\"test\", ActionsRepositoryPermissionsArgs.builder()        \n            .allowedActions(\"selected\")\n            .allowedActionsConfig(ActionsRepositoryPermissionsAllowedActionsConfigArgs.builder()\n                .githubOwnedAllowed(true)\n                .patternsAlloweds(                \n                    \"actions/cache@*\",\n                    \"actions/checkout@*\")\n                .verifiedAllowed(true)\n                .build())\n            .repository(example.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n  test:\n    type: github:ActionsRepositoryPermissions\n    properties:\n      allowedActions: selected\n      allowedActionsConfig:\n        githubOwnedAllowed: true\n        patternsAlloweds:\n          - actions/cache@*\n          - actions/checkout@*\n        verifiedAllowed: true\n      repository: ${example.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the name of the GitHub repository:\n\n```sh\n $ pulumi import github:index/actionsRepositoryPermissions:ActionsRepositoryPermissions test my-repository\n```\n ",
            "properties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsRepositoryPermissionsAllowedActionsConfig:ActionsRepositoryPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an repository. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Should GitHub actions be enabled on this repository?\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "required": [
                "repository"
            ],
            "inputProperties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsRepositoryPermissionsAllowedActionsConfig:ActionsRepositoryPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an repository. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Should GitHub actions be enabled on this repository?\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsRepositoryPermissions resources.\n",
                "properties": {
                    "allowedActions": {
                        "type": "string",
                        "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                    },
                    "allowedActionsConfig": {
                        "$ref": "#/types/github:index/ActionsRepositoryPermissionsAllowedActionsConfig:ActionsRepositoryPermissionsAllowedActionsConfig",
                        "description": "Sets the actions that are allowed in an repository. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Should GitHub actions be enabled on this repository?\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsRunnerGroup:ActionsRunnerGroup": {
            "description": "This resource allows you to create and manage GitHub Actions runner groups within your GitHub enterprise organizations.\nYou must have admin access to an organization to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleActionsRunnerGroup = new github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\", {\n    visibility: \"selected\",\n    selectedRepositoryIds: [exampleRepository.repoId],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_actions_runner_group = github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\",\n    visibility=\"selected\",\n    selected_repository_ids=[example_repository.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new Github.Repository(\"exampleRepository\");\n\n    var exampleActionsRunnerGroup = new Github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\", new()\n    {\n        Visibility = \"selected\",\n        SelectedRepositoryIds = new[]\n        {\n            exampleRepository.RepoId,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsRunnerGroup(ctx, \"exampleActionsRunnerGroup\", \u0026github.ActionsRunnerGroupArgs{\n\t\t\tVisibility: pulumi.String(\"selected\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\texampleRepository.RepoId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.ActionsRunnerGroup;\nimport com.pulumi.github.ActionsRunnerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\");\n\n        var exampleActionsRunnerGroup = new ActionsRunnerGroup(\"exampleActionsRunnerGroup\", ActionsRunnerGroupArgs.builder()        \n            .visibility(\"selected\")\n            .selectedRepositoryIds(exampleRepository.repoId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: github:Repository\n  exampleActionsRunnerGroup:\n    type: github:ActionsRunnerGroup\n    properties:\n      visibility: selected\n      selectedRepositoryIds:\n        - ${exampleRepository.repoId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the ID of the runner group:\n\n```sh\n $ pulumi import github:index/actionsRunnerGroup:ActionsRunnerGroup test 7\n```\n ",
            "properties": {
                "allowsPublicRepositories": {
                    "type": "boolean",
                    "description": "Whether public repositories can be added to the runner group. Defaults to false.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Whether this is the default runner group\n"
                },
                "etag": {
                    "type": "string",
                    "description": "An etag representing the runner group object\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "Whether the runner group is inherited from the enterprise level\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the runner group\n"
                },
                "restrictedToWorkflows": {
                    "type": "boolean",
                    "description": "If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.\n"
                },
                "runnersUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the runner group's runners\n"
                },
                "selectedRepositoriesUrl": {
                    "type": "string",
                    "description": "GitHub API URL for the runner group's repositories\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the repositories which should be added to the runner group\n"
                },
                "selectedWorkflows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                }
            },
            "required": [
                "default",
                "etag",
                "inherited",
                "name",
                "runnersUrl",
                "selectedRepositoriesUrl",
                "visibility"
            ],
            "inputProperties": {
                "allowsPublicRepositories": {
                    "type": "boolean",
                    "description": "Whether public repositories can be added to the runner group. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the runner group\n"
                },
                "restrictedToWorkflows": {
                    "type": "boolean",
                    "description": "If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the repositories which should be added to the runner group\n"
                },
                "selectedWorkflows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                }
            },
            "requiredInputs": [
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsRunnerGroup resources.\n",
                "properties": {
                    "allowsPublicRepositories": {
                        "type": "boolean",
                        "description": "Whether public repositories can be added to the runner group. Defaults to false.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether this is the default runner group\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the runner group object\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "Whether the runner group is inherited from the enterprise level\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the runner group\n"
                    },
                    "restrictedToWorkflows": {
                        "type": "boolean",
                        "description": "If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array. Defaults to false.\n"
                    },
                    "runnersUrl": {
                        "type": "string",
                        "description": "The GitHub API URL for the runner group's runners\n"
                    },
                    "selectedRepositoriesUrl": {
                        "type": "string",
                        "description": "GitHub API URL for the runner group's repositories\n"
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of the repositories which should be added to the runner group\n"
                    },
                    "selectedWorkflows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsSecret:ActionsSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst examplePublicKey = github.getActionsPublicKey({\n    repository: \"example_repository\",\n});\nconst exampleSecretActionsSecret = new github.ActionsSecret(\"exampleSecretActionsSecret\", {\n    repository: \"example_repository\",\n    secretName: \"example_secret_name\",\n    plaintextValue: _var.some_secret_string,\n});\nconst exampleSecretIndex_actionsSecretActionsSecret = new github.ActionsSecret(\"exampleSecretIndex/actionsSecretActionsSecret\", {\n    repository: \"example_repository\",\n    secretName: \"example_secret_name\",\n    encryptedValue: _var.some_encrypted_secret_string,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_public_key = github.get_actions_public_key(repository=\"example_repository\")\nexample_secret_actions_secret = github.ActionsSecret(\"exampleSecretActionsSecret\",\n    repository=\"example_repository\",\n    secret_name=\"example_secret_name\",\n    plaintext_value=var[\"some_secret_string\"])\nexample_secret_index_actions_secret_actions_secret = github.ActionsSecret(\"exampleSecretIndex/actionsSecretActionsSecret\",\n    repository=\"example_repository\",\n    secret_name=\"example_secret_name\",\n    encrypted_value=var[\"some_encrypted_secret_string\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePublicKey = Github.GetActionsPublicKey.Invoke(new()\n    {\n        Repository = \"example_repository\",\n    });\n\n    var exampleSecretActionsSecret = new Github.ActionsSecret(\"exampleSecretActionsSecret\", new()\n    {\n        Repository = \"example_repository\",\n        SecretName = \"example_secret_name\",\n        PlaintextValue = @var.Some_secret_string,\n    });\n\n    var exampleSecretIndex_actionsSecretActionsSecret = new Github.ActionsSecret(\"exampleSecretIndex/actionsSecretActionsSecret\", new()\n    {\n        Repository = \"example_repository\",\n        SecretName = \"example_secret_name\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsPublicKey(ctx, \u0026github.GetActionsPublicKeyArgs{\n\t\t\tRepository: \"example_repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsSecret(ctx, \"exampleSecretActionsSecret\", \u0026github.ActionsSecretArgs{\n\t\t\tRepository:     pulumi.String(\"example_repository\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsSecret(ctx, \"exampleSecretIndex/actionsSecretActionsSecret\", \u0026github.ActionsSecretArgs{\n\t\t\tRepository:     pulumi.String(\"example_repository\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsPublicKeyArgs;\nimport com.pulumi.github.ActionsSecret;\nimport com.pulumi.github.ActionsSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var examplePublicKey = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()\n            .repository(\"example_repository\")\n            .build());\n\n        var exampleSecretActionsSecret = new ActionsSecret(\"exampleSecretActionsSecret\", ActionsSecretArgs.builder()        \n            .repository(\"example_repository\")\n            .secretName(\"example_secret_name\")\n            .plaintextValue(var_.some_secret_string())\n            .build());\n\n        var exampleSecretIndex_actionsSecretActionsSecret = new ActionsSecret(\"exampleSecretIndex/actionsSecretActionsSecret\", ActionsSecretArgs.builder()        \n            .repository(\"example_repository\")\n            .secretName(\"example_secret_name\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretActionsSecret:\n    type: github:ActionsSecret\n    properties:\n      repository: example_repository\n      secretName: example_secret_name\n      plaintextValue: ${var.some_secret_string}\n  exampleSecretIndex/actionsSecretActionsSecret:\n    type: github:ActionsSecret\n    properties:\n      repository: example_repository\n      secretName: example_secret_name\n      encryptedValue: ${var.some_encrypted_secret_string}\nvariables:\n  examplePublicKey:\n    fn::invoke:\n      Function: github:getActionsPublicKey\n      Arguments:\n        repository: example_repository\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the `repository` and `secret_name`:\n\n```sh\n $ pulumi import github:index/actionsSecret:ActionsSecret example_secret repository/secret_name\n```\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround.\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsVariable:ActionsVariable": {
            "description": "This resource allows you to create and manage GitHub Actions variables within your GitHub repositories.\nYou must have write access to a repository to use this resource.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleVariable = new github.ActionsVariable(\"exampleVariable\", {\n    repository: \"example_repository\",\n    value: \"example_variable_value\",\n    variableName: \"example_variable_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_variable = github.ActionsVariable(\"exampleVariable\",\n    repository=\"example_repository\",\n    value=\"example_variable_value\",\n    variable_name=\"example_variable_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleVariable = new Github.ActionsVariable(\"exampleVariable\", new()\n    {\n        Repository = \"example_repository\",\n        Value = \"example_variable_value\",\n        VariableName = \"example_variable_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewActionsVariable(ctx, \"exampleVariable\", \u0026github.ActionsVariableArgs{\n\t\t\tRepository:   pulumi.String(\"example_repository\"),\n\t\t\tValue:        pulumi.String(\"example_variable_value\"),\n\t\t\tVariableName: pulumi.String(\"example_variable_name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.ActionsVariable;\nimport com.pulumi.github.ActionsVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleVariable = new ActionsVariable(\"exampleVariable\", ActionsVariableArgs.builder()        \n            .repository(\"example_repository\")\n            .value(\"example_variable_value\")\n            .variableName(\"example_variable_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleVariable:\n    type: github:ActionsVariable\n    properties:\n      repository: example_repository\n      value: example_variable_value\n      variableName: example_variable_name\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Actions variables can be imported using an ID made up of `repository:variable_name`, e.g.\n\n```sh\n $ pulumi import github:index/actionsVariable:ActionsVariable myvariable myrepo:myvariable\n```\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_variable creation.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_variable update.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable\n"
                }
            },
            "required": [
                "createdAt",
                "repository",
                "updatedAt",
                "value",
                "variableName"
            ],
            "inputProperties": {
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "value",
                "variableName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsVariable resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_variable creation.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_variable update.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the variable\n"
                    },
                    "variableName": {
                        "type": "string",
                        "description": "Name of the variable\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/appInstallationRepositories:AppInstallationRepositories": {
            "description": "\u003e **Note**: This resource is not compatible with the GitHub App Installation authentication method.\n\nThis resource manages relationships between app installations and repositories\nin your GitHub organization.\n\nCreating this resource installs a particular app on multiple repositories.\n\nThe app installation and the repositories must all belong to the same\norganization on GitHub. Note: you can review your organization's installations\nby the following the instructions at this\n[link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).\n\n\n## Import\n\nGitHub App Installation Repositories can be imported using an ID made up of `installation_id`, e.g.\n\n```sh\n $ pulumi import github:index/appInstallationRepositories:AppInstallationRepositories some_app_repos 1234567\n```\n ",
            "properties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n"
                },
                "selectedRepositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of repository names to install the app on.\n\n\u003e **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.\n"
                }
            },
            "required": [
                "installationId",
                "selectedRepositories"
            ],
            "inputProperties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of repository names to install the app on.\n\n\u003e **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.\n"
                }
            },
            "requiredInputs": [
                "installationId",
                "selectedRepositories"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppInstallationRepositories resources.\n",
                "properties": {
                    "installationId": {
                        "type": "string",
                        "description": "The GitHub app installation id.\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of repository names to install the app on.\n\n\u003e **Note**: Due to how GitHub implements app installations, apps cannot be installed with no repositories selected. Therefore deleting this resource will leave one repository with the app installed. Manually uninstall the app or set the installation to all repositories via the GUI as after deleting this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/appInstallationRepository:AppInstallationRepository": {
            "description": "\u003e **Note**: This resource is not compatible with the GitHub App Installation authentication method.\n\nThis resource manages relationships between app installations and repositories\nin your GitHub organization.\n\nCreating this resource installs a particular app on a particular repository.\n\nThe app installation and the repository must both belong to the same\norganization on GitHub. Note: you can review your organization's installations\nby the following the instructions at this\n[link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a repository.\nconst someRepo = new github.Repository(\"someRepo\", {});\nconst someAppRepo = new github.AppInstallationRepository(\"someAppRepo\", {\n    installationId: \"1234567\",\n    repository: someRepo.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a repository.\nsome_repo = github.Repository(\"someRepo\")\nsome_app_repo = github.AppInstallationRepository(\"someAppRepo\",\n    installation_id=\"1234567\",\n    repository=some_repo.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a repository.\n    var someRepo = new Github.Repository(\"someRepo\");\n\n    var someAppRepo = new Github.AppInstallationRepository(\"someAppRepo\", new()\n    {\n        InstallationId = \"1234567\",\n        Repository = someRepo.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeRepo, err := github.NewRepository(ctx, \"someRepo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewAppInstallationRepository(ctx, \"someAppRepo\", \u0026github.AppInstallationRepositoryArgs{\n\t\t\tInstallationId: pulumi.String(\"1234567\"),\n\t\t\tRepository:     someRepo.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.AppInstallationRepository;\nimport com.pulumi.github.AppInstallationRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someRepo = new Repository(\"someRepo\");\n\n        var someAppRepo = new AppInstallationRepository(\"someAppRepo\", AppInstallationRepositoryArgs.builder()        \n            .installationId(\"1234567\")\n            .repository(someRepo.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a repository.\n  someRepo:\n    type: github:Repository\n  someAppRepo:\n    type: github:AppInstallationRepository\n    properties:\n      # The installation id of the app (in the organization).\n      installationId: '1234567'\n      repository: ${someRepo.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub App Installation Repository can be imported using an ID made up of `installation_id:repository`, e.g.\n\n```sh\n $ pulumi import github:index/appInstallationRepository:AppInstallationRepository terraform_repo 1234567:terraform\n```\n ",
            "properties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n"
                },
                "repoId": {
                    "type": "integer"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to install the app on.\n"
                }
            },
            "required": [
                "installationId",
                "repoId",
                "repository"
            ],
            "inputProperties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to install the app on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "installationId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppInstallationRepository resources.\n",
                "properties": {
                    "installationId": {
                        "type": "string",
                        "description": "The GitHub app installation id.\n",
                        "willReplaceOnChanges": true
                    },
                    "repoId": {
                        "type": "integer"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to install the app on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/branch:Branch": {
            "description": "This resource allows you to create and manage branches within your repository.\n\nAdditional constraints can be applied to ensure your branch is created from\nanother branch or commit.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst development = new github.Branch(\"development\", {\n    branch: \"development\",\n    repository: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ndevelopment = github.Branch(\"development\",\n    branch=\"development\",\n    repository=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new Github.Branch(\"development\", new()\n    {\n        BranchName = \"development\",\n        Repository = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewBranch(ctx, \"development\", \u0026github.BranchArgs{\n\t\t\tBranch:     pulumi.String(\"development\"),\n\t\t\tRepository: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Branch;\nimport com.pulumi.github.BranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Branch(\"development\", BranchArgs.builder()        \n            .branch(\"development\")\n            .repository(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: github:Branch\n    properties:\n      branch: development\n      repository: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch can be imported using an ID made up of `repository:branch`, e.g.\n\n```sh\n $ pulumi import github:index/branch:Branch terraform terraform:main\n```\n Importing github branch into an instance object (when using a for each block to manage multiple branches)\n\n```sh\n $ pulumi import github:index/branch:Branch terraform[\"terraform\"] terraform:main\n```\n Optionally, a source branch may be specified using an ID of `repository:branch:source_branch`. This is useful for importing branches that do not branch directly off main.\n\n```sh\n $ pulumi import github:index/branch:Branch terraform terraform:feature-branch:dev\n```\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch to create.\n",
                    "language": {
                        "csharp": {
                            "name": "BranchName"
                        }
                    }
                },
                "etag": {
                    "type": "string",
                    "description": "An etag representing the Branch object.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "sha": {
                    "type": "string",
                    "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                },
                "sourceBranch": {
                    "type": "string",
                    "description": "The branch name to start from. Defaults to `main`.\n"
                },
                "sourceSha": {
                    "type": "string",
                    "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n"
                }
            },
            "required": [
                "branch",
                "etag",
                "ref",
                "repository",
                "sha",
                "sourceSha"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch to create.\n",
                    "language": {
                        "csharp": {
                            "name": "BranchName"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n",
                    "willReplaceOnChanges": true
                },
                "sourceBranch": {
                    "type": "string",
                    "description": "The branch name to start from. Defaults to `main`.\n",
                    "willReplaceOnChanges": true
                },
                "sourceSha": {
                    "type": "string",
                    "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branch resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The repository branch to create.\n",
                        "language": {
                            "csharp": {
                                "name": "BranchName"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the Branch object.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n",
                        "willReplaceOnChanges": true
                    },
                    "sha": {
                        "type": "string",
                        "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                    },
                    "sourceBranch": {
                        "type": "string",
                        "description": "The branch name to start from. Defaults to `main`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sourceSha": {
                        "type": "string",
                        "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchDefault:BranchDefault": {
            "description": "Provides a GitHub branch default resource.\n\nThis resource allows you to set the default branch for a given repository. \n\nNote that use of this resource is incompatible with the `default_branch` option of the `github.Repository` resource.  Using both will result in plans always showing a diff.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nBasic usage:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    autoInit: true,\n});\nconst development = new github.Branch(\"development\", {\n    repository: example.name,\n    branch: \"development\",\n});\nconst _default = new github.BranchDefault(\"default\", {\n    repository: example.name,\n    branch: development.branch,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    auto_init=True)\ndevelopment = github.Branch(\"development\",\n    repository=example.name,\n    branch=\"development\")\ndefault = github.BranchDefault(\"default\",\n    repository=example.name,\n    branch=development.branch)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Description = \"My awesome codebase\",\n        AutoInit = true,\n    });\n\n    var development = new Github.Branch(\"development\", new()\n    {\n        Repository = example.Name,\n        BranchName = \"development\",\n    });\n\n    var @default = new Github.BranchDefault(\"default\", new()\n    {\n        Repository = example.Name,\n        Branch = development.BranchName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tAutoInit:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevelopment, err := github.NewBranch(ctx, \"development\", \u0026github.BranchArgs{\n\t\t\tRepository: example.Name,\n\t\t\tBranch:     pulumi.String(\"development\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchDefault(ctx, \"default\", \u0026github.BranchDefaultArgs{\n\t\t\tRepository: example.Name,\n\t\t\tBranch:     development.Branch,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.Branch;\nimport com.pulumi.github.BranchArgs;\nimport com.pulumi.github.BranchDefault;\nimport com.pulumi.github.BranchDefaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .description(\"My awesome codebase\")\n            .autoInit(true)\n            .build());\n\n        var development = new Branch(\"development\", BranchArgs.builder()        \n            .repository(example.name())\n            .branch(\"development\")\n            .build());\n\n        var default_ = new BranchDefault(\"default\", BranchDefaultArgs.builder()        \n            .repository(example.name())\n            .branch(development.branch())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      description: My awesome codebase\n      autoInit: true\n  development:\n    type: github:Branch\n    properties:\n      repository: ${example.name}\n      branch: development\n  default:\n    type: github:BranchDefault\n    properties:\n      repository: ${example.name}\n      branch: ${development.branch}\n```\n\nRenaming to a branch that doesn't exist:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    autoInit: true,\n});\nconst _default = new github.BranchDefault(\"default\", {\n    repository: example.name,\n    branch: \"development\",\n    rename: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    auto_init=True)\ndefault = github.BranchDefault(\"default\",\n    repository=example.name,\n    branch=\"development\",\n    rename=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Description = \"My awesome codebase\",\n        AutoInit = true,\n    });\n\n    var @default = new Github.BranchDefault(\"default\", new()\n    {\n        Repository = example.Name,\n        Branch = \"development\",\n        Rename = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tAutoInit:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchDefault(ctx, \"default\", \u0026github.BranchDefaultArgs{\n\t\t\tRepository: example.Name,\n\t\t\tBranch:     pulumi.String(\"development\"),\n\t\t\tRename:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.BranchDefault;\nimport com.pulumi.github.BranchDefaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .description(\"My awesome codebase\")\n            .autoInit(true)\n            .build());\n\n        var default_ = new BranchDefault(\"default\", BranchDefaultArgs.builder()        \n            .repository(example.name())\n            .branch(\"development\")\n            .rename(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      description: My awesome codebase\n      autoInit: true\n  default:\n    type: github:BranchDefault\n    properties:\n      repository: ${example.name}\n      branch: development\n      rename: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch Defaults can be imported using an ID made up of `repository`, e.g.\n\n```sh\n $ pulumi import github:index/branchDefault:BranchDefault branch_default my-repo\n```\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch (e.g. `main`)\n"
                },
                "etag": {
                    "type": "string"
                },
                "rename": {
                    "type": "boolean",
                    "description": "Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "required": [
                "branch",
                "etag",
                "repository"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch (e.g. `main`)\n"
                },
                "rename": {
                    "type": "boolean",
                    "description": "Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchDefault resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch (e.g. `main`)\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "rename": {
                        "type": "boolean",
                        "description": "Indicate if it should rename the branch rather than use an existing branch. Defaults to `false`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchProtection:BranchProtection": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleUser = github.getUser({\n    username: \"example\",\n});\nconst exampleTeam = new github.Team(\"exampleTeam\", {});\n// Protect the main branch of the foo repository. Additionally, require that\n// the \"ci/travis\" context to be passing and only allow the engineers team merge\n// to the branch.\nconst exampleBranchProtection = new github.BranchProtection(\"exampleBranchProtection\", {\n    repositoryId: exampleRepository.nodeId,\n    pattern: \"main\",\n    enforceAdmins: true,\n    allowsDeletions: true,\n    requiredStatusChecks: [{\n        strict: false,\n        contexts: [\"ci/travis\"],\n    }],\n    requiredPullRequestReviews: [{\n        dismissStaleReviews: true,\n        restrictDismissals: true,\n        dismissalRestrictions: [\n            exampleUser.then(exampleUser =\u003e exampleUser.nodeId),\n            exampleTeam.nodeId,\n            \"/exampleuser\",\n            \"exampleorganization/exampleteam\",\n        ],\n    }],\n    pushRestrictions: [\n        exampleUser.then(exampleUser =\u003e exampleUser.nodeId),\n        \"/exampleuser\",\n        \"exampleorganization/exampleteam\",\n    ],\n    forcePushBypassers: [\n        exampleUser.then(exampleUser =\u003e exampleUser.nodeId),\n        \"/exampleuser\",\n        \"exampleorganization/exampleteam\",\n    ],\n});\nconst exampleTeamRepository = new github.TeamRepository(\"exampleTeamRepository\", {\n    teamId: exampleTeam.id,\n    repository: exampleRepository.name,\n    permission: \"pull\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_user = github.get_user(username=\"example\")\nexample_team = github.Team(\"exampleTeam\")\n# Protect the main branch of the foo repository. Additionally, require that\n# the \"ci/travis\" context to be passing and only allow the engineers team merge\n# to the branch.\nexample_branch_protection = github.BranchProtection(\"exampleBranchProtection\",\n    repository_id=example_repository.node_id,\n    pattern=\"main\",\n    enforce_admins=True,\n    allows_deletions=True,\n    required_status_checks=[github.BranchProtectionRequiredStatusCheckArgs(\n        strict=False,\n        contexts=[\"ci/travis\"],\n    )],\n    required_pull_request_reviews=[github.BranchProtectionRequiredPullRequestReviewArgs(\n        dismiss_stale_reviews=True,\n        restrict_dismissals=True,\n        dismissal_restrictions=[\n            example_user.node_id,\n            example_team.node_id,\n            \"/exampleuser\",\n            \"exampleorganization/exampleteam\",\n        ],\n    )],\n    push_restrictions=[\n        example_user.node_id,\n        \"/exampleuser\",\n        \"exampleorganization/exampleteam\",\n    ],\n    force_push_bypassers=[\n        example_user.node_id,\n        \"/exampleuser\",\n        \"exampleorganization/exampleteam\",\n    ])\nexample_team_repository = github.TeamRepository(\"exampleTeamRepository\",\n    team_id=example_team.id,\n    repository=example_repository.name,\n    permission=\"pull\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new Github.Repository(\"exampleRepository\");\n\n    var exampleUser = Github.GetUser.Invoke(new()\n    {\n        Username = \"example\",\n    });\n\n    var exampleTeam = new Github.Team(\"exampleTeam\");\n\n    // Protect the main branch of the foo repository. Additionally, require that\n    // the \"ci/travis\" context to be passing and only allow the engineers team merge\n    // to the branch.\n    var exampleBranchProtection = new Github.BranchProtection(\"exampleBranchProtection\", new()\n    {\n        RepositoryId = exampleRepository.NodeId,\n        Pattern = \"main\",\n        EnforceAdmins = true,\n        AllowsDeletions = true,\n        RequiredStatusChecks = new[]\n        {\n            new Github.Inputs.BranchProtectionRequiredStatusCheckArgs\n            {\n                Strict = false,\n                Contexts = new[]\n                {\n                    \"ci/travis\",\n                },\n            },\n        },\n        RequiredPullRequestReviews = new[]\n        {\n            new Github.Inputs.BranchProtectionRequiredPullRequestReviewArgs\n            {\n                DismissStaleReviews = true,\n                RestrictDismissals = true,\n                DismissalRestrictions = new[]\n                {\n                    exampleUser.Apply(getUserResult =\u003e getUserResult.NodeId),\n                    exampleTeam.NodeId,\n                    \"/exampleuser\",\n                    \"exampleorganization/exampleteam\",\n                },\n            },\n        },\n        PushRestrictions = new[]\n        {\n            exampleUser.Apply(getUserResult =\u003e getUserResult.NodeId),\n            \"/exampleuser\",\n            \"exampleorganization/exampleteam\",\n        },\n        ForcePushBypassers = new[]\n        {\n            exampleUser.Apply(getUserResult =\u003e getUserResult.NodeId),\n            \"/exampleuser\",\n            \"exampleorganization/exampleteam\",\n        },\n    });\n\n    var exampleTeamRepository = new Github.TeamRepository(\"exampleTeamRepository\", new()\n    {\n        TeamId = exampleTeam.Id,\n        Repository = exampleRepository.Name,\n        Permission = \"pull\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := github.GetUser(ctx, \u0026github.GetUserArgs{\n\t\t\tUsername: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := github.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchProtection(ctx, \"exampleBranchProtection\", \u0026github.BranchProtectionArgs{\n\t\t\tRepositoryId:    exampleRepository.NodeId,\n\t\t\tPattern:         pulumi.String(\"main\"),\n\t\t\tEnforceAdmins:   pulumi.Bool(true),\n\t\t\tAllowsDeletions: pulumi.Bool(true),\n\t\t\tRequiredStatusChecks: github.BranchProtectionRequiredStatusCheckArray{\n\t\t\t\t\u0026github.BranchProtectionRequiredStatusCheckArgs{\n\t\t\t\t\tStrict: pulumi.Bool(false),\n\t\t\t\t\tContexts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ci/travis\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRequiredPullRequestReviews: github.BranchProtectionRequiredPullRequestReviewArray{\n\t\t\t\t\u0026github.BranchProtectionRequiredPullRequestReviewArgs{\n\t\t\t\t\tDismissStaleReviews: pulumi.Bool(true),\n\t\t\t\t\tRestrictDismissals:  pulumi.Bool(true),\n\t\t\t\t\tDismissalRestrictions: pulumi.StringArray{\n\t\t\t\t\t\t*pulumi.String(exampleUser.NodeId),\n\t\t\t\t\t\texampleTeam.NodeId,\n\t\t\t\t\t\tpulumi.String(\"/exampleuser\"),\n\t\t\t\t\t\tpulumi.String(\"exampleorganization/exampleteam\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushRestrictions: pulumi.StringArray{\n\t\t\t\t*pulumi.String(exampleUser.NodeId),\n\t\t\t\tpulumi.String(\"/exampleuser\"),\n\t\t\t\tpulumi.String(\"exampleorganization/exampleteam\"),\n\t\t\t},\n\t\t\tForcePushBypassers: pulumi.StringArray{\n\t\t\t\t*pulumi.String(exampleUser.NodeId),\n\t\t\t\tpulumi.String(\"/exampleuser\"),\n\t\t\t\tpulumi.String(\"exampleorganization/exampleteam\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamRepository(ctx, \"exampleTeamRepository\", \u0026github.TeamRepositoryArgs{\n\t\t\tTeamId:     exampleTeam.ID(),\n\t\t\tRepository: exampleRepository.Name,\n\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUserArgs;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.BranchProtection;\nimport com.pulumi.github.BranchProtectionArgs;\nimport com.pulumi.github.inputs.BranchProtectionRequiredStatusCheckArgs;\nimport com.pulumi.github.inputs.BranchProtectionRequiredPullRequestReviewArgs;\nimport com.pulumi.github.TeamRepository;\nimport com.pulumi.github.TeamRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\");\n\n        final var exampleUser = GithubFunctions.getUser(GetUserArgs.builder()\n            .username(\"example\")\n            .build());\n\n        var exampleTeam = new Team(\"exampleTeam\");\n\n        var exampleBranchProtection = new BranchProtection(\"exampleBranchProtection\", BranchProtectionArgs.builder()        \n            .repositoryId(exampleRepository.nodeId())\n            .pattern(\"main\")\n            .enforceAdmins(true)\n            .allowsDeletions(true)\n            .requiredStatusChecks(BranchProtectionRequiredStatusCheckArgs.builder()\n                .strict(false)\n                .contexts(\"ci/travis\")\n                .build())\n            .requiredPullRequestReviews(BranchProtectionRequiredPullRequestReviewArgs.builder()\n                .dismissStaleReviews(true)\n                .restrictDismissals(true)\n                .dismissalRestrictions(                \n                    exampleUser.applyValue(getUserResult -\u003e getUserResult.nodeId()),\n                    exampleTeam.nodeId(),\n                    \"/exampleuser\",\n                    \"exampleorganization/exampleteam\")\n                .build())\n            .pushRestrictions(            \n                exampleUser.applyValue(getUserResult -\u003e getUserResult.nodeId()),\n                \"/exampleuser\",\n                \"exampleorganization/exampleteam\")\n            .forcePushBypassers(            \n                exampleUser.applyValue(getUserResult -\u003e getUserResult.nodeId()),\n                \"/exampleuser\",\n                \"exampleorganization/exampleteam\")\n            .build());\n\n        var exampleTeamRepository = new TeamRepository(\"exampleTeamRepository\", TeamRepositoryArgs.builder()        \n            .teamId(exampleTeam.id())\n            .repository(exampleRepository.name())\n            .permission(\"pull\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Protect the main branch of the foo repository. Additionally, require that\n  # the \"ci/travis\" context to be passing and only allow the engineers team merge\n  # to the branch.\n  exampleBranchProtection:\n    type: github:BranchProtection\n    properties:\n      repositoryId: ${exampleRepository.nodeId} # also accepts repository name\n      #   # repository_id  = github_repository.example.name\n      pattern: main\n      enforceAdmins: true\n      allowsDeletions: true\n      requiredStatusChecks:\n        - strict: false\n          contexts:\n            - ci/travis\n      requiredPullRequestReviews:\n        - dismissStaleReviews: true\n          restrictDismissals: true\n          dismissalRestrictions:\n            - ${exampleUser.nodeId}\n            - ${exampleTeam.nodeId}\n            - /exampleuser\n            - exampleorganization/exampleteam\n      pushRestrictions:\n        - ${exampleUser.nodeId}\n        - /exampleuser\n        - exampleorganization/exampleteam\n      forcePushBypassers:\n        - ${exampleUser.nodeId}\n        - /exampleuser\n        - exampleorganization/exampleteam\n  exampleRepository:\n    type: github:Repository\n  exampleTeam:\n    type: github:Team\n  exampleTeamRepository:\n    type: github:TeamRepository\n    properties:\n      teamId: ${exampleTeam.id}\n      repository: ${exampleRepository.name}\n      permission: pull\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: github:getUser\n      Arguments:\n        username: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch Protection can be imported using an ID made up of `repository:pattern`, e.g.\n\n```sh\n $ pulumi import github:index/branchProtection:BranchProtection terraform terraform:main\n```\n ",
            "properties": {
                "allowsDeletions": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                },
                "allowsForcePushes": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                },
                "blocksCreations": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to block creating the branch.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "forcePushBypassers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs that are allowed to bypass force push restrictions. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "lockBranch": {
                    "type": "boolean",
                    "description": "Boolean, Setting this to `true` will make the branch read-only and preventing any pushes to it. Defaults to `false`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Identifies the protection rule pattern.\n"
                },
                "pushRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs that may push to the branch. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The name or node ID of the repository associated with this branch protection rule.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                },
                "requiredPullRequestReviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                    },
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                    },
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                }
            },
            "required": [
                "pattern",
                "repositoryId"
            ],
            "inputProperties": {
                "allowsDeletions": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                },
                "allowsForcePushes": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                },
                "blocksCreations": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to block creating the branch.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "forcePushBypassers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs that are allowed to bypass force push restrictions. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "lockBranch": {
                    "type": "boolean",
                    "description": "Boolean, Setting this to `true` will make the branch read-only and preventing any pushes to it. Defaults to `false`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Identifies the protection rule pattern.\n"
                },
                "pushRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor Names/IDs that may push to the branch. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The name or node ID of the repository associated with this branch protection rule.\n",
                    "willReplaceOnChanges": true
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                },
                "requiredPullRequestReviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                    },
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                    },
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                }
            },
            "requiredInputs": [
                "pattern",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtection resources.\n",
                "properties": {
                    "allowsDeletions": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                    },
                    "allowsForcePushes": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                    },
                    "blocksCreations": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` to block creating the branch.\n"
                    },
                    "enforceAdmins": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                    },
                    "forcePushBypassers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of actor Names/IDs that are allowed to bypass force push restrictions. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                    },
                    "lockBranch": {
                        "type": "boolean",
                        "description": "Boolean, Setting this to `true` will make the branch read-only and preventing any pushes to it. Defaults to `false`\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Identifies the protection rule pattern.\n"
                    },
                    "pushRestrictions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of actor Names/IDs that may push to the branch. Actor names must either begin with a \"/\" for users or the organization name followed by a \"/\" for teams.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The name or node ID of the repository associated with this branch protection rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "requireConversationResolution": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                    },
                    "requireSignedCommits": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                    },
                    "requiredLinearHistory": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                    },
                    "requiredPullRequestReviews": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                        },
                        "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                    },
                    "requiredStatusChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                        },
                        "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchProtectionV3:BranchProtectionV3": {
            "description": "Protects a GitHub branch.\n\nThe `github.BranchProtection` resource has moved to the GraphQL API, while this resource will continue to leverage the REST API.\n\nThis resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users, teams, and apps, can also be configured.\n\n\n## Import\n\nGitHub Branch Protection can be imported using an ID made up of `repository:branch`, e.g.\n\n```sh\n $ pulumi import github:index/branchProtectionV3:BranchProtectionV3 terraform terraform:main\n```\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The Git branch to protect.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "etag": {
                    "type": "string"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredPullRequestReviews": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                },
                "restrictions": {
                    "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                    "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                }
            },
            "required": [
                "branch",
                "etag",
                "repository"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The Git branch to protect.\n",
                    "willReplaceOnChanges": true
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n",
                    "willReplaceOnChanges": true
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredPullRequestReviews": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                },
                "restrictions": {
                    "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                    "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtectionV3 resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The Git branch to protect.\n",
                        "willReplaceOnChanges": true
                    },
                    "enforceAdmins": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n",
                        "willReplaceOnChanges": true
                    },
                    "requireConversationResolution": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                    },
                    "requireSignedCommits": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                    },
                    "requiredPullRequestReviews": {
                        "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                        "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                    },
                    "requiredStatusChecks": {
                        "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                        "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                    },
                    "restrictions": {
                        "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                        "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/codespacesOrganizationSecret:CodespacesOrganizationSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleSecretCodespacesOrganizationSecret = new github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"private\",\n    plaintextValue: _var.some_secret_string,\n});\nconst exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"private\",\n    encryptedValue: _var.some_encrypted_secret_string,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_secret_codespaces_organization_secret = github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"private\",\n    plaintext_value=var[\"some_secret_string\"])\nexample_secret_index_codespaces_organization_secret_codespaces_organization_secret = github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"private\",\n    encrypted_value=var[\"some_encrypted_secret_string\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSecretCodespacesOrganizationSecret = new Github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"private\",\n        PlaintextValue = @var.Some_secret_string,\n    });\n\n    var exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new Github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"private\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewCodespacesOrganizationSecret(ctx, \"exampleSecretCodespacesOrganizationSecret\", \u0026github.CodespacesOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"private\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesOrganizationSecret(ctx, \"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", \u0026github.CodespacesOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"private\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.CodespacesOrganizationSecret;\nimport com.pulumi.github.CodespacesOrganizationSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSecretCodespacesOrganizationSecret = new CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", CodespacesOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"private\")\n            .plaintextValue(var_.some_secret_string())\n            .build());\n\n        var exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", CodespacesOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"private\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretCodespacesOrganizationSecret:\n    type: github:CodespacesOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: private\n      plaintextValue: ${var.some_secret_string}\n  exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret:\n    type: github:CodespacesOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: private\n      encryptedValue: ${var.some_encrypted_secret_string}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst exampleSecretCodespacesOrganizationSecret = new github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"selected\",\n    plaintextValue: _var.some_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\nconst exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", {\n    secretName: \"example_secret_name\",\n    visibility: \"selected\",\n    encryptedValue: _var.some_encrypted_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nexample_secret_codespaces_organization_secret = github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"selected\",\n    plaintext_value=var[\"some_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\nexample_secret_index_codespaces_organization_secret_codespaces_organization_secret = github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\",\n    secret_name=\"example_secret_name\",\n    visibility=\"selected\",\n    encrypted_value=var[\"some_encrypted_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var exampleSecretCodespacesOrganizationSecret = new Github.CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"selected\",\n        PlaintextValue = @var.Some_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n    var exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new Github.CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        Visibility = \"selected\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesOrganizationSecret(ctx, \"exampleSecretCodespacesOrganizationSecret\", \u0026github.CodespacesOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"selected\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesOrganizationSecret(ctx, \"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", \u0026github.CodespacesOrganizationSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tVisibility:     pulumi.String(\"selected\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.CodespacesOrganizationSecret;\nimport com.pulumi.github.CodespacesOrganizationSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var exampleSecretCodespacesOrganizationSecret = new CodespacesOrganizationSecret(\"exampleSecretCodespacesOrganizationSecret\", CodespacesOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"selected\")\n            .plaintextValue(var_.some_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n        var exampleSecretIndex_codespacesOrganizationSecretCodespacesOrganizationSecret = new CodespacesOrganizationSecret(\"exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret\", CodespacesOrganizationSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .visibility(\"selected\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretCodespacesOrganizationSecret:\n    type: github:CodespacesOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: selected\n      plaintextValue: ${var.some_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\n  exampleSecretIndex/codespacesOrganizationSecretCodespacesOrganizationSecret:\n    type: github:CodespacesOrganizationSecret\n    properties:\n      secretName: example_secret_name\n      visibility: selected\n      encryptedValue: ${var.some_encrypted_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name\n\n```sh\n $ pulumi import github:index/codespacesOrganizationSecret:CodespacesOrganizationSecret test_secret test_secret_name\n```\n\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround. ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret update.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                }
            },
            "required": [
                "createdAt",
                "secretName",
                "updatedAt",
                "visibility"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretName",
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CodespacesOrganizationSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret update.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/codespacesOrganizationSecretRepositories:CodespacesOrganizationSecretRepositories": {
            "description": "This resource allows you to manage repository allow list for existing GitHub Codespaces secrets within your GitHub organization.\n\nYou must have write access to an organization secret to use this resource.\n\nThis resource is only applicable when `visibility` of the existing organization secret has been set to `selected`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst orgSecretRepos = new github.CodespacesOrganizationSecretRepositories(\"orgSecretRepos\", {\n    secretName: \"existing_secret_name\",\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\norg_secret_repos = github.CodespacesOrganizationSecretRepositories(\"orgSecretRepos\",\n    secret_name=\"existing_secret_name\",\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var orgSecretRepos = new Github.CodespacesOrganizationSecretRepositories(\"orgSecretRepos\", new()\n    {\n        SecretName = \"existing_secret_name\",\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesOrganizationSecretRepositories(ctx, \"orgSecretRepos\", \u0026github.CodespacesOrganizationSecretRepositoriesArgs{\n\t\t\tSecretName: pulumi.String(\"existing_secret_name\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.CodespacesOrganizationSecretRepositories;\nimport com.pulumi.github.CodespacesOrganizationSecretRepositoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var orgSecretRepos = new CodespacesOrganizationSecretRepositories(\"orgSecretRepos\", CodespacesOrganizationSecretRepositoriesArgs.builder()        \n            .secretName(\"existing_secret_name\")\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  orgSecretRepos:\n    type: github:CodespacesOrganizationSecretRepositories\n    properties:\n      secretName: existing_secret_name\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name:\n\n```sh\n $ pulumi import github:index/codespacesOrganizationSecretRepositories:CodespacesOrganizationSecretRepositories org_secret_repos existing_secret_name\n```\n ",
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "required": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "inputProperties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "requiredInputs": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CodespacesOrganizationSecretRepositories resources.\n",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "Name of the existing secret\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/codespacesSecret:CodespacesSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst examplePublicKey = github.getCodespacesPublicKey({\n    repository: \"example_repository\",\n});\nconst exampleSecretCodespacesSecret = new github.CodespacesSecret(\"exampleSecretCodespacesSecret\", {\n    repository: \"example_repository\",\n    secretName: \"example_secret_name\",\n    plaintextValue: _var.some_secret_string,\n});\nconst exampleSecretIndex_codespacesSecretCodespacesSecret = new github.CodespacesSecret(\"exampleSecretIndex/codespacesSecretCodespacesSecret\", {\n    repository: \"example_repository\",\n    secretName: \"example_secret_name\",\n    encryptedValue: _var.some_encrypted_secret_string,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_public_key = github.get_codespaces_public_key(repository=\"example_repository\")\nexample_secret_codespaces_secret = github.CodespacesSecret(\"exampleSecretCodespacesSecret\",\n    repository=\"example_repository\",\n    secret_name=\"example_secret_name\",\n    plaintext_value=var[\"some_secret_string\"])\nexample_secret_index_codespaces_secret_codespaces_secret = github.CodespacesSecret(\"exampleSecretIndex/codespacesSecretCodespacesSecret\",\n    repository=\"example_repository\",\n    secret_name=\"example_secret_name\",\n    encrypted_value=var[\"some_encrypted_secret_string\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePublicKey = Github.GetCodespacesPublicKey.Invoke(new()\n    {\n        Repository = \"example_repository\",\n    });\n\n    var exampleSecretCodespacesSecret = new Github.CodespacesSecret(\"exampleSecretCodespacesSecret\", new()\n    {\n        Repository = \"example_repository\",\n        SecretName = \"example_secret_name\",\n        PlaintextValue = @var.Some_secret_string,\n    });\n\n    var exampleSecretIndex_codespacesSecretCodespacesSecret = new Github.CodespacesSecret(\"exampleSecretIndex/codespacesSecretCodespacesSecret\", new()\n    {\n        Repository = \"example_repository\",\n        SecretName = \"example_secret_name\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesPublicKey(ctx, \u0026github.GetCodespacesPublicKeyArgs{\n\t\t\tRepository: \"example_repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesSecret(ctx, \"exampleSecretCodespacesSecret\", \u0026github.CodespacesSecretArgs{\n\t\t\tRepository:     pulumi.String(\"example_repository\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesSecret(ctx, \"exampleSecretIndex/codespacesSecretCodespacesSecret\", \u0026github.CodespacesSecretArgs{\n\t\t\tRepository:     pulumi.String(\"example_repository\"),\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetCodespacesPublicKeyArgs;\nimport com.pulumi.github.CodespacesSecret;\nimport com.pulumi.github.CodespacesSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var examplePublicKey = GithubFunctions.getCodespacesPublicKey(GetCodespacesPublicKeyArgs.builder()\n            .repository(\"example_repository\")\n            .build());\n\n        var exampleSecretCodespacesSecret = new CodespacesSecret(\"exampleSecretCodespacesSecret\", CodespacesSecretArgs.builder()        \n            .repository(\"example_repository\")\n            .secretName(\"example_secret_name\")\n            .plaintextValue(var_.some_secret_string())\n            .build());\n\n        var exampleSecretIndex_codespacesSecretCodespacesSecret = new CodespacesSecret(\"exampleSecretIndex/codespacesSecretCodespacesSecret\", CodespacesSecretArgs.builder()        \n            .repository(\"example_repository\")\n            .secretName(\"example_secret_name\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretCodespacesSecret:\n    type: github:CodespacesSecret\n    properties:\n      repository: example_repository\n      secretName: example_secret_name\n      plaintextValue: ${var.some_secret_string}\n  exampleSecretIndex/codespacesSecretCodespacesSecret:\n    type: github:CodespacesSecret\n    properties:\n      repository: example_repository\n      secretName: example_secret_name\n      encryptedValue: ${var.some_encrypted_secret_string}\nvariables:\n  examplePublicKey:\n    fn::invoke:\n      Function: github:getCodespacesPublicKey\n      Arguments:\n        repository: example_repository\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the `repository` and `secret_name`:\n\n```sh\n $ pulumi import github:index/codespacesSecret:CodespacesSecret example_secret example_repository/example_secret_name\n```\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround.\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CodespacesSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/codespacesUserSecret:CodespacesUserSecret": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst exampleSecretCodespacesUserSecret = new github.CodespacesUserSecret(\"exampleSecretCodespacesUserSecret\", {\n    secretName: \"example_secret_name\",\n    plaintextValue: _var.some_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\nconst exampleSecretIndex_codespacesUserSecretCodespacesUserSecret = new github.CodespacesUserSecret(\"exampleSecretIndex/codespacesUserSecretCodespacesUserSecret\", {\n    secretName: \"example_secret_name\",\n    encryptedValue: _var.some_encrypted_secret_string,\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\nexample_secret_codespaces_user_secret = github.CodespacesUserSecret(\"exampleSecretCodespacesUserSecret\",\n    secret_name=\"example_secret_name\",\n    plaintext_value=var[\"some_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\nexample_secret_index_codespaces_user_secret_codespaces_user_secret = github.CodespacesUserSecret(\"exampleSecretIndex/codespacesUserSecretCodespacesUserSecret\",\n    secret_name=\"example_secret_name\",\n    encrypted_value=var[\"some_encrypted_secret_string\"],\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"my-org/repo\",\n    });\n\n    var exampleSecretCodespacesUserSecret = new Github.CodespacesUserSecret(\"exampleSecretCodespacesUserSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        PlaintextValue = @var.Some_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n    var exampleSecretIndex_codespacesUserSecretCodespacesUserSecret = new Github.CodespacesUserSecret(\"exampleSecretIndex/codespacesUserSecretCodespacesUserSecret\", new()\n    {\n        SecretName = \"example_secret_name\",\n        EncryptedValue = @var.Some_encrypted_secret_string,\n        SelectedRepositoryIds = new[]\n        {\n            repo.Apply(getRepositoryResult =\u003e getRepositoryResult.RepoId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"my-org/repo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesUserSecret(ctx, \"exampleSecretCodespacesUserSecret\", \u0026github.CodespacesUserSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tPlaintextValue: pulumi.Any(_var.Some_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewCodespacesUserSecret(ctx, \"exampleSecretIndex/codespacesUserSecretCodespacesUserSecret\", \u0026github.CodespacesUserSecretArgs{\n\t\t\tSecretName:     pulumi.String(\"example_secret_name\"),\n\t\t\tEncryptedValue: pulumi.Any(_var.Some_encrypted_secret_string),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\t*pulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.CodespacesUserSecret;\nimport com.pulumi.github.CodespacesUserSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"my-org/repo\")\n            .build());\n\n        var exampleSecretCodespacesUserSecret = new CodespacesUserSecret(\"exampleSecretCodespacesUserSecret\", CodespacesUserSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .plaintextValue(var_.some_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n        var exampleSecretIndex_codespacesUserSecretCodespacesUserSecret = new CodespacesUserSecret(\"exampleSecretIndex/codespacesUserSecretCodespacesUserSecret\", CodespacesUserSecretArgs.builder()        \n            .secretName(\"example_secret_name\")\n            .encryptedValue(var_.some_encrypted_secret_string())\n            .selectedRepositoryIds(repo.applyValue(getRepositoryResult -\u003e getRepositoryResult.repoId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSecretCodespacesUserSecret:\n    type: github:CodespacesUserSecret\n    properties:\n      secretName: example_secret_name\n      plaintextValue: ${var.some_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\n  exampleSecretIndex/codespacesUserSecretCodespacesUserSecret:\n    type: github:CodespacesUserSecret\n    properties:\n      secretName: example_secret_name\n      encryptedValue: ${var.some_encrypted_secret_string}\n      selectedRepositoryIds:\n        - ${repo.repoId}\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: my-org/repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name\n\n```sh\n $ pulumi import github:index/codespacesUserSecret:CodespacesUserSecret test_secret test_secret_name\n```\n\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround. ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the user secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of codespaces_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the user secret.\n"
                }
            },
            "requiredInputs": [
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CodespacesUserSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the user secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of codespaces_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/dependabotOrganizationSecret:DependabotOrganizationSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of 'dependabot_secret' creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of 'dependabot_secret' update.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret. Must be one of 'all', 'private' or 'selected'.\n'selected_repository_ids' is required if set to 'selected'.\n"
                }
            },
            "required": [
                "createdAt",
                "secretName",
                "updatedAt",
                "visibility"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret. Must be one of 'all', 'private' or 'selected'.\n'selected_repository_ids' is required if set to 'selected'.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "secretName",
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DependabotOrganizationSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of 'dependabot_secret' creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of 'dependabot_secret' update.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Configures the access that repositories have to the organization secret. Must be one of 'all', 'private' or 'selected'.\n'selected_repository_ids' is required if set to 'selected'.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/dependabotOrganizationSecretRepositories:DependabotOrganizationSecretRepositories": {
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret.\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "required": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "inputProperties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret.\n",
                    "willReplaceOnChanges": true
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "requiredInputs": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DependabotOrganizationSecretRepositories resources.\n",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "Name of the existing secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/dependabotSecret:DependabotSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of 'dependabot_secret' creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of 'dependabot_secret' update.\n"
                }
            },
            "required": [
                "createdAt",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DependabotSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of 'dependabot_secret' creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the GitHub public key in Base64 format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of 'dependabot_secret' update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/emuGroupMapping:EmuGroupMapping": {
            "description": "This resource manages mappings between external groups for enterprise managed users and GitHub teams. It wraps the API detailed [here](https://docs.github.com/en/rest/reference/teams#external-groups). Note that this is a distinct resource from `github.TeamSyncGroupMapping`. `github.EmuGroupMapping` is special to the Enterprise Managed User (EMU) external group feature, whereas `github.TeamSyncGroupMapping` is specific to Identity Provider Groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleEmuGroupMapping = new github.EmuGroupMapping(\"exampleEmuGroupMapping\", {\n    groupId: 28836,\n    teamSlug: \"emu-test-team\",\n});\n// The GitHub team name to modify\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_emu_group_mapping = github.EmuGroupMapping(\"exampleEmuGroupMapping\",\n    group_id=28836,\n    team_slug=\"emu-test-team\")\n# The GitHub team name to modify\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleEmuGroupMapping = new Github.EmuGroupMapping(\"exampleEmuGroupMapping\", new()\n    {\n        GroupId = 28836,\n        TeamSlug = \"emu-test-team\",\n    });\n\n    // The GitHub team name to modify\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewEmuGroupMapping(ctx, \"exampleEmuGroupMapping\", \u0026github.EmuGroupMappingArgs{\n\t\t\tGroupId:  pulumi.Int(28836),\n\t\t\tTeamSlug: pulumi.String(\"emu-test-team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.EmuGroupMapping;\nimport com.pulumi.github.EmuGroupMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleEmuGroupMapping = new EmuGroupMapping(\"exampleEmuGroupMapping\", EmuGroupMappingArgs.builder()        \n            .groupId(28836)\n            .teamSlug(\"emu-test-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEmuGroupMapping:\n    type: github:EmuGroupMapping\n    properties:\n      groupId: 28836\n      # The group ID of the external group to link\n      teamSlug: emu-test-team\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub EMU External Group Mappings can be imported using the external `group_id`, e.g.\n\n```sh\n $ pulumi import github:index/emuGroupMapping:EmuGroupMapping example_emu_group_mapping 28836\n```\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer",
                    "description": "Integer corresponding to the external group ID to be linked\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the GitHub team\n"
                }
            },
            "required": [
                "etag",
                "groupId",
                "teamSlug"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "integer",
                    "description": "Integer corresponding to the external group ID to be linked\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the GitHub team\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "teamSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmuGroupMapping resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "Integer corresponding to the external group ID to be linked\n"
                    },
                    "teamSlug": {
                        "type": "string",
                        "description": "Slug of the GitHub team\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/enterpriseOrganization:EnterpriseOrganization": {
            "description": "This resource allows you to create and manage a GitHub enterprise organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst org = new github.EnterpriseOrganization(\"org\", {\n    enterpriseId: data.github_enterprise.enterprise.id,\n    displayName: \"Some Awesome Org\",\n    description: \"Organization created with terraform\",\n    billingEmail: \"jon@winteriscoming.com\",\n    adminLogins: [\"jon-snow\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\norg = github.EnterpriseOrganization(\"org\",\n    enterprise_id=data[\"github_enterprise\"][\"enterprise\"][\"id\"],\n    display_name=\"Some Awesome Org\",\n    description=\"Organization created with terraform\",\n    billing_email=\"jon@winteriscoming.com\",\n    admin_logins=[\"jon-snow\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var org = new Github.EnterpriseOrganization(\"org\", new()\n    {\n        EnterpriseId = data.Github_enterprise.Enterprise.Id,\n        DisplayName = \"Some Awesome Org\",\n        Description = \"Organization created with terraform\",\n        BillingEmail = \"jon@winteriscoming.com\",\n        AdminLogins = new[]\n        {\n            \"jon-snow\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewEnterpriseOrganization(ctx, \"org\", \u0026github.EnterpriseOrganizationArgs{\n\t\t\tEnterpriseId: pulumi.Any(data.Github_enterprise.Enterprise.Id),\n\t\t\tDisplayName:  pulumi.String(\"Some Awesome Org\"),\n\t\t\tDescription:  pulumi.String(\"Organization created with terraform\"),\n\t\t\tBillingEmail: pulumi.String(\"jon@winteriscoming.com\"),\n\t\t\tAdminLogins: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"jon-snow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.EnterpriseOrganization;\nimport com.pulumi.github.EnterpriseOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var org = new EnterpriseOrganization(\"org\", EnterpriseOrganizationArgs.builder()        \n            .enterpriseId(data.github_enterprise().enterprise().id())\n            .displayName(\"Some Awesome Org\")\n            .description(\"Organization created with terraform\")\n            .billingEmail(\"jon@winteriscoming.com\")\n            .adminLogins(\"jon-snow\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  org:\n    type: github:EnterpriseOrganization\n    properties:\n      enterpriseId: ${data.github_enterprise.enterprise.id}\n      displayName: Some Awesome Org\n      description: Organization created with terraform\n      billingEmail: jon@winteriscoming.com\n      adminLogins:\n        - jon-snow\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Enterprise Organization can be imported using the `slug` of the enterprise, combined with the `orgname` of the organization, separated by a `/` character.\n\n```sh\n $ pulumi import github:index/enterpriseOrganization:EnterpriseOrganization org enterp/some-awesome-org\n```\n ",
            "properties": {
                "adminLogins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of organization owner usernames.\n"
                },
                "billingEmail": {
                    "type": "string",
                    "description": "The billing email address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the organization.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the organization.\n"
                },
                "enterpriseId": {
                    "type": "string",
                    "description": "The ID of the enterprise.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization.\n"
                }
            },
            "required": [
                "adminLogins",
                "billingEmail",
                "enterpriseId",
                "name"
            ],
            "inputProperties": {
                "adminLogins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of organization owner usernames.\n"
                },
                "billingEmail": {
                    "type": "string",
                    "description": "The billing email address.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the organization.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the organization.\n"
                },
                "enterpriseId": {
                    "type": "string",
                    "description": "The ID of the enterprise.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "adminLogins",
                "billingEmail",
                "enterpriseId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnterpriseOrganization resources.\n",
                "properties": {
                    "adminLogins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of organization owner usernames.\n"
                    },
                    "billingEmail": {
                        "type": "string",
                        "description": "The billing email address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the organization.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the organization.\n"
                    },
                    "enterpriseId": {
                        "type": "string",
                        "description": "The ID of the enterprise.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/issue:Issue": {
            "description": "Provides a GitHub issue resource.\n\nThis resource allows you to create and manage issue within your\nGitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a simple issue\nconst testRepository = new github.Repository(\"testRepository\", {\n    autoInit: true,\n    hasIssues: true,\n});\nconst testIssue = new github.Issue(\"testIssue\", {\n    repository: testRepository.name,\n    title: \"My issue title\",\n    body: \"The body of my issue\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a simple issue\ntest_repository = github.Repository(\"testRepository\",\n    auto_init=True,\n    has_issues=True)\ntest_issue = github.Issue(\"testIssue\",\n    repository=test_repository.name,\n    title=\"My issue title\",\n    body=\"The body of my issue\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a simple issue\n    var testRepository = new Github.Repository(\"testRepository\", new()\n    {\n        AutoInit = true,\n        HasIssues = true,\n    });\n\n    var testIssue = new Github.Issue(\"testIssue\", new()\n    {\n        Repository = testRepository.Name,\n        Title = \"My issue title\",\n        Body = \"The body of my issue\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRepository, err := github.NewRepository(ctx, \"testRepository\", \u0026github.RepositoryArgs{\n\t\t\tAutoInit:  pulumi.Bool(true),\n\t\t\tHasIssues: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewIssue(ctx, \"testIssue\", \u0026github.IssueArgs{\n\t\t\tRepository: testRepository.Name,\n\t\t\tTitle:      pulumi.String(\"My issue title\"),\n\t\t\tBody:       pulumi.String(\"The body of my issue\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.Issue;\nimport com.pulumi.github.IssueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepository = new Repository(\"testRepository\", RepositoryArgs.builder()        \n            .autoInit(true)\n            .hasIssues(true)\n            .build());\n\n        var testIssue = new Issue(\"testIssue\", IssueArgs.builder()        \n            .repository(testRepository.name())\n            .title(\"My issue title\")\n            .body(\"The body of my issue\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a simple issue\n  testRepository:\n    type: github:Repository\n    properties:\n      autoInit: true\n      hasIssues: true\n  testIssue:\n    type: github:Issue\n    properties:\n      repository: ${testRepository.name}\n      title: My issue title\n      body: The body of my issue\n```\n\n{{% /example %}}\n{{% example %}}\n### With Milestone And Project Assignment\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create an issue with milestone and project assignment\nconst testRepository = new github.Repository(\"testRepository\", {\n    autoInit: true,\n    hasIssues: true,\n});\nconst testRepositoryMilestone = new github.RepositoryMilestone(\"testRepositoryMilestone\", {\n    owner: testRepository.fullName.apply(fullName =\u003e fullName.split(\"/\")).apply(split =\u003e split[0]),\n    repository: testRepository.name,\n    title: \"v1.0.0\",\n    description: \"General Availability\",\n    dueDate: \"2022-11-22\",\n    state: \"open\",\n});\nconst testIssue = new github.Issue(\"testIssue\", {\n    repository: testRepository.name,\n    title: \"My issue\",\n    body: \"My issue body\",\n    labels: [\n        \"bug\",\n        \"documentation\",\n    ],\n    assignees: [\"bob-github\"],\n    milestoneNumber: testRepositoryMilestone.number,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create an issue with milestone and project assignment\ntest_repository = github.Repository(\"testRepository\",\n    auto_init=True,\n    has_issues=True)\ntest_repository_milestone = github.RepositoryMilestone(\"testRepositoryMilestone\",\n    owner=test_repository.full_name.apply(lambda full_name: full_name.split(\"/\")).apply(lambda split: split[0]),\n    repository=test_repository.name,\n    title=\"v1.0.0\",\n    description=\"General Availability\",\n    due_date=\"2022-11-22\",\n    state=\"open\")\ntest_issue = github.Issue(\"testIssue\",\n    repository=test_repository.name,\n    title=\"My issue\",\n    body=\"My issue body\",\n    labels=[\n        \"bug\",\n        \"documentation\",\n    ],\n    assignees=[\"bob-github\"],\n    milestone_number=test_repository_milestone.number)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an issue with milestone and project assignment\n    var testRepository = new Github.Repository(\"testRepository\", new()\n    {\n        AutoInit = true,\n        HasIssues = true,\n    });\n\n    var testRepositoryMilestone = new Github.RepositoryMilestone(\"testRepositoryMilestone\", new()\n    {\n        Owner = testRepository.FullName.Apply(fullName =\u003e fullName.Split(\"/\")).Apply(split =\u003e split[0]),\n        Repository = testRepository.Name,\n        Title = \"v1.0.0\",\n        Description = \"General Availability\",\n        DueDate = \"2022-11-22\",\n        State = \"open\",\n    });\n\n    var testIssue = new Github.Issue(\"testIssue\", new()\n    {\n        Repository = testRepository.Name,\n        Title = \"My issue\",\n        Body = \"My issue body\",\n        Labels = new[]\n        {\n            \"bug\",\n            \"documentation\",\n        },\n        Assignees = new[]\n        {\n            \"bob-github\",\n        },\n        MilestoneNumber = testRepositoryMilestone.Number,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRepository, err := github.NewRepository(ctx, \"testRepository\", \u0026github.RepositoryArgs{\n\t\t\tAutoInit:  pulumi.Bool(true),\n\t\t\tHasIssues: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRepositoryMilestone, err := github.NewRepositoryMilestone(ctx, \"testRepositoryMilestone\", \u0026github.RepositoryMilestoneArgs{\n\t\t\tOwner: testRepository.FullName.ApplyT(func(fullName string) (pulumi.StringArray, error) {\n\t\t\t\treturn pulumi.StringArray(\"TODO: call split\"), nil\n\t\t\t}).(pulumi.StringArrayOutput).ApplyT(func(split []string) (string, error) {\n\t\t\t\treturn split[0], nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tRepository:  testRepository.Name,\n\t\t\tTitle:       pulumi.String(\"v1.0.0\"),\n\t\t\tDescription: pulumi.String(\"General Availability\"),\n\t\t\tDueDate:     pulumi.String(\"2022-11-22\"),\n\t\t\tState:       pulumi.String(\"open\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewIssue(ctx, \"testIssue\", \u0026github.IssueArgs{\n\t\t\tRepository: testRepository.Name,\n\t\t\tTitle:      pulumi.String(\"My issue\"),\n\t\t\tBody:       pulumi.String(\"My issue body\"),\n\t\t\tLabels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"bug\"),\n\t\t\t\tpulumi.String(\"documentation\"),\n\t\t\t},\n\t\t\tAssignees: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"bob-github\"),\n\t\t\t},\n\t\t\tMilestoneNumber: testRepositoryMilestone.Number,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryMilestone;\nimport com.pulumi.github.RepositoryMilestoneArgs;\nimport com.pulumi.github.Issue;\nimport com.pulumi.github.IssueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepository = new Repository(\"testRepository\", RepositoryArgs.builder()        \n            .autoInit(true)\n            .hasIssues(true)\n            .build());\n\n        var testRepositoryMilestone = new RepositoryMilestone(\"testRepositoryMilestone\", RepositoryMilestoneArgs.builder()        \n            .owner(testRepository.fullName().applyValue(fullName -\u003e fullName.split(\"/\")).applyValue(split -\u003e split[0]))\n            .repository(testRepository.name())\n            .title(\"v1.0.0\")\n            .description(\"General Availability\")\n            .dueDate(\"2022-11-22\")\n            .state(\"open\")\n            .build());\n\n        var testIssue = new Issue(\"testIssue\", IssueArgs.builder()        \n            .repository(testRepository.name())\n            .title(\"My issue\")\n            .body(\"My issue body\")\n            .labels(            \n                \"bug\",\n                \"documentation\")\n            .assignees(\"bob-github\")\n            .milestoneNumber(testRepositoryMilestone.number())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Issues can be imported using an ID made up of `repository:number`, e.g.\n\n```sh\n $ pulumi import github:index/issue:Issue issue_15 myrepo:15\n```\n ",
            "properties": {
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Logins to assign the to the issue\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the issue\n"
                },
                "etag": {
                    "type": "string"
                },
                "issueId": {
                    "type": "integer",
                    "description": "(Computed) - The issue id\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels to attach to the issue\n"
                },
                "milestoneNumber": {
                    "type": "integer",
                    "description": "Milestone number to assign to the issue\n"
                },
                "number": {
                    "type": "integer",
                    "description": "(Computed) - The issue number\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the issue\n"
                }
            },
            "required": [
                "etag",
                "issueId",
                "number",
                "repository",
                "title"
            ],
            "inputProperties": {
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Logins to assign the to the issue\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the issue\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of labels to attach to the issue\n"
                },
                "milestoneNumber": {
                    "type": "integer",
                    "description": "Milestone number to assign to the issue\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "Title of the issue\n"
                }
            },
            "requiredInputs": [
                "repository",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Issue resources.\n",
                "properties": {
                    "assignees": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Logins to assign the to the issue\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the issue\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "issueId": {
                        "type": "integer",
                        "description": "(Computed) - The issue id\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of labels to attach to the issue\n"
                    },
                    "milestoneNumber": {
                        "type": "integer",
                        "description": "Milestone number to assign to the issue\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "(Computed) - The issue number\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name\n",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the issue\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/issueLabel:IssueLabel": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a new, red colored label\nconst testRepo = new github.IssueLabel(\"testRepo\", {\n    color: \"FF0000\",\n    repository: \"test-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a new, red colored label\ntest_repo = github.IssueLabel(\"testRepo\",\n    color=\"FF0000\",\n    repository=\"test-repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new, red colored label\n    var testRepo = new Github.IssueLabel(\"testRepo\", new()\n    {\n        Color = \"FF0000\",\n        Repository = \"test-repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewIssueLabel(ctx, \"testRepo\", \u0026github.IssueLabelArgs{\n\t\t\tColor:      pulumi.String(\"FF0000\"),\n\t\t\tRepository: pulumi.String(\"test-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.IssueLabel;\nimport com.pulumi.github.IssueLabelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepo = new IssueLabel(\"testRepo\", IssueLabelArgs.builder()        \n            .color(\"FF0000\")\n            .repository(\"test-repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new, red colored label\n  testRepo:\n    type: github:IssueLabel\n    properties:\n      color: FF0000\n      repository: test-repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Issue Labels can be imported using an ID made up of `repository:name`, e.g.\n\n```sh\n $ pulumi import github:index/issueLabel:IssueLabel panic_label terraform:panic\n```\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the issue label\n"
                }
            },
            "required": [
                "color",
                "etag",
                "name",
                "repository",
                "url"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "color",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IssueLabel resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the label.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the issue label\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/issueLabels:IssueLabels": {
            "description": "Provides GitHub issue labels resource.\n\nThis resource allows you to create and manage issue labels within your\nGitHub organization.\n\n\u003e Note: github.IssueLabels cannot be used in conjunction with github.IssueLabel or they will fight over what your policy should be.\n\nThis resource is authoritative. For adding a label to a repo in a non-authoritative manner, use github.IssueLabel instead.\n\nIf you change the case of a label's name, its' color, or description, this resource will edit the existing label to match the new values. However, if you change the name of a label, this resource will create a new label with the new name and delete the old label. Beware that this will remove the label from any issues it was previously attached to.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a new, red colored label\nconst testRepo = new github.IssueLabels(\"testRepo\", {\n    labels: [\n        {\n            color: \"FF0000\",\n            name: \"Urgent\",\n        },\n        {\n            color: \"FF0000\",\n            name: \"Critical\",\n        },\n    ],\n    repository: \"test-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a new, red colored label\ntest_repo = github.IssueLabels(\"testRepo\",\n    labels=[\n        github.IssueLabelsLabelArgs(\n            color=\"FF0000\",\n            name=\"Urgent\",\n        ),\n        github.IssueLabelsLabelArgs(\n            color=\"FF0000\",\n            name=\"Critical\",\n        ),\n    ],\n    repository=\"test-repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new, red colored label\n    var testRepo = new Github.IssueLabels(\"testRepo\", new()\n    {\n        Labels = new[]\n        {\n            new Github.Inputs.IssueLabelsLabelArgs\n            {\n                Color = \"FF0000\",\n                Name = \"Urgent\",\n            },\n            new Github.Inputs.IssueLabelsLabelArgs\n            {\n                Color = \"FF0000\",\n                Name = \"Critical\",\n            },\n        },\n        Repository = \"test-repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewIssueLabels(ctx, \"testRepo\", \u0026github.IssueLabelsArgs{\n\t\t\tLabels: github.IssueLabelsLabelArray{\n\t\t\t\t\u0026github.IssueLabelsLabelArgs{\n\t\t\t\t\tColor: pulumi.String(\"FF0000\"),\n\t\t\t\t\tName:  pulumi.String(\"Urgent\"),\n\t\t\t\t},\n\t\t\t\t\u0026github.IssueLabelsLabelArgs{\n\t\t\t\t\tColor: pulumi.String(\"FF0000\"),\n\t\t\t\t\tName:  pulumi.String(\"Critical\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepository: pulumi.String(\"test-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.IssueLabels;\nimport com.pulumi.github.IssueLabelsArgs;\nimport com.pulumi.github.inputs.IssueLabelsLabelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepo = new IssueLabels(\"testRepo\", IssueLabelsArgs.builder()        \n            .labels(            \n                IssueLabelsLabelArgs.builder()\n                    .color(\"FF0000\")\n                    .name(\"Urgent\")\n                    .build(),\n                IssueLabelsLabelArgs.builder()\n                    .color(\"FF0000\")\n                    .name(\"Critical\")\n                    .build())\n            .repository(\"test-repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new, red colored label\n  testRepo:\n    type: github:IssueLabels\n    properties:\n      labels:\n        - color: FF0000\n          name: Urgent\n        - color: FF0000\n          name: Critical\n      repository: test-repo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Issue Labels can be imported using the repository `name`, e.g.\n\n```sh\n $ pulumi import github:index/issueLabels:IssueLabels test_repo test_repo\n```\n ",
            "properties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/IssueLabelsLabel:IssueLabelsLabel"
                    },
                    "description": "List of labels\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "required": [
                "repository"
            ],
            "inputProperties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/IssueLabelsLabel:IssueLabelsLabel"
                    },
                    "description": "List of labels\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IssueLabels resources.\n",
                "properties": {
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/IssueLabelsLabel:IssueLabelsLabel"
                        },
                        "description": "List of labels\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/membership:Membership": {
            "description": "Provides a GitHub membership resource.\n\nThis resource allows you to add/remove users from your organization. When applied,\nan invitation will be sent to the user to become part of the organization. When\ndestroyed, either the invitation will be cancelled or the user will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a user to the organization\nconst membershipForSomeUser = new github.Membership(\"membershipForSomeUser\", {\n    role: \"member\",\n    username: \"SomeUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a user to the organization\nmembership_for_some_user = github.Membership(\"membershipForSomeUser\",\n    role=\"member\",\n    username=\"SomeUser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a user to the organization\n    var membershipForSomeUser = new Github.Membership(\"membershipForSomeUser\", new()\n    {\n        Role = \"member\",\n        Username = \"SomeUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewMembership(ctx, \"membershipForSomeUser\", \u0026github.MembershipArgs{\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Membership;\nimport com.pulumi.github.MembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var membershipForSomeUser = new Membership(\"membershipForSomeUser\", MembershipArgs.builder()        \n            .role(\"member\")\n            .username(\"SomeUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a user to the organization\n  membershipForSomeUser:\n    type: github:Membership\n    properties:\n      role: member\n      username: SomeUser\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Membership can be imported using an ID made up of `organization:username`, e.g.\n\n```sh\n $ pulumi import github:index/membership:Membership member hashicorp:someuser\n```\n ",
            "properties": {
                "downgradeOnDestroy": {
                    "type": "boolean",
                    "description": "Defaults to `false`. If set to true,\nwhen this resource is destroyed, the member will not be removed\nfrom the organization. Instead, the member's role will be\ndowngraded to 'member'.\n"
                },
                "etag": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n`admin` role represents the `owner` role available via GitHub UI.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the organization.\n"
                }
            },
            "required": [
                "etag",
                "username"
            ],
            "inputProperties": {
                "downgradeOnDestroy": {
                    "type": "boolean",
                    "description": "Defaults to `false`. If set to true,\nwhen this resource is destroyed, the member will not be removed\nfrom the organization. Instead, the member's role will be\ndowngraded to 'member'.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n`admin` role represents the `owner` role available via GitHub UI.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the organization.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Membership resources.\n",
                "properties": {
                    "downgradeOnDestroy": {
                        "type": "boolean",
                        "description": "Defaults to `false`. If set to true,\nwhen this resource is destroyed, the member will not be removed\nfrom the organization. Instead, the member's role will be\ndowngraded to 'member'.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n`admin` role represents the `owner` role available via GitHub UI.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the organization.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationBlock:OrganizationBlock": {
            "description": "This resource allows you to create and manage blocks for GitHub organizations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.OrganizationBlock(\"example\", {username: \"paultyng\"});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.OrganizationBlock(\"example\", username=\"paultyng\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.OrganizationBlock(\"example\", new()\n    {\n        Username = \"paultyng\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationBlock(ctx, \"example\", \u0026github.OrganizationBlockArgs{\n\t\t\tUsername: pulumi.String(\"paultyng\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationBlock;\nimport com.pulumi.github.OrganizationBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new OrganizationBlock(\"example\", OrganizationBlockArgs.builder()        \n            .username(\"paultyng\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:OrganizationBlock\n    properties:\n      username: paultyng\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub organization block can be imported using a username, e.g.\n\n```sh\n $ pulumi import github:index/organizationBlock:OrganizationBlock example someuser\n```\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user to block.\n"
                }
            },
            "required": [
                "etag",
                "username"
            ],
            "inputProperties": {
                "username": {
                    "type": "string",
                    "description": "The name of the user to block.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationBlock resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user to block.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationCustomRole:OrganizationCustomRole": {
            "description": "This resource allows you to create and manage custom roles in a GitHub Organization for use in repositories. \n\n\u003e Note: Custom roles are currently only available in GitHub Enterprise Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.OrganizationCustomRole(\"example\", {\n    baseRole: \"read\",\n    description: \"Example custom role that uses the read role as its base\",\n    permissions: [\n        \"add_assignee\",\n        \"add_label\",\n        \"bypass_branch_protection\",\n        \"close_issue\",\n        \"close_pull_request\",\n        \"mark_as_duplicate\",\n        \"create_tag\",\n        \"delete_issue\",\n        \"delete_tag\",\n        \"manage_deploy_keys\",\n        \"push_protected_branch\",\n        \"read_code_scanning\",\n        \"reopen_issue\",\n        \"reopen_pull_request\",\n        \"request_pr_review\",\n        \"resolve_dependabot_alerts\",\n        \"resolve_secret_scanning_alerts\",\n        \"view_secret_scanning_alerts\",\n        \"write_code_scanning\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.OrganizationCustomRole(\"example\",\n    base_role=\"read\",\n    description=\"Example custom role that uses the read role as its base\",\n    permissions=[\n        \"add_assignee\",\n        \"add_label\",\n        \"bypass_branch_protection\",\n        \"close_issue\",\n        \"close_pull_request\",\n        \"mark_as_duplicate\",\n        \"create_tag\",\n        \"delete_issue\",\n        \"delete_tag\",\n        \"manage_deploy_keys\",\n        \"push_protected_branch\",\n        \"read_code_scanning\",\n        \"reopen_issue\",\n        \"reopen_pull_request\",\n        \"request_pr_review\",\n        \"resolve_dependabot_alerts\",\n        \"resolve_secret_scanning_alerts\",\n        \"view_secret_scanning_alerts\",\n        \"write_code_scanning\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.OrganizationCustomRole(\"example\", new()\n    {\n        BaseRole = \"read\",\n        Description = \"Example custom role that uses the read role as its base\",\n        Permissions = new[]\n        {\n            \"add_assignee\",\n            \"add_label\",\n            \"bypass_branch_protection\",\n            \"close_issue\",\n            \"close_pull_request\",\n            \"mark_as_duplicate\",\n            \"create_tag\",\n            \"delete_issue\",\n            \"delete_tag\",\n            \"manage_deploy_keys\",\n            \"push_protected_branch\",\n            \"read_code_scanning\",\n            \"reopen_issue\",\n            \"reopen_pull_request\",\n            \"request_pr_review\",\n            \"resolve_dependabot_alerts\",\n            \"resolve_secret_scanning_alerts\",\n            \"view_secret_scanning_alerts\",\n            \"write_code_scanning\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationCustomRole(ctx, \"example\", \u0026github.OrganizationCustomRoleArgs{\n\t\t\tBaseRole:    pulumi.String(\"read\"),\n\t\t\tDescription: pulumi.String(\"Example custom role that uses the read role as its base\"),\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"add_assignee\"),\n\t\t\t\tpulumi.String(\"add_label\"),\n\t\t\t\tpulumi.String(\"bypass_branch_protection\"),\n\t\t\t\tpulumi.String(\"close_issue\"),\n\t\t\t\tpulumi.String(\"close_pull_request\"),\n\t\t\t\tpulumi.String(\"mark_as_duplicate\"),\n\t\t\t\tpulumi.String(\"create_tag\"),\n\t\t\t\tpulumi.String(\"delete_issue\"),\n\t\t\t\tpulumi.String(\"delete_tag\"),\n\t\t\t\tpulumi.String(\"manage_deploy_keys\"),\n\t\t\t\tpulumi.String(\"push_protected_branch\"),\n\t\t\t\tpulumi.String(\"read_code_scanning\"),\n\t\t\t\tpulumi.String(\"reopen_issue\"),\n\t\t\t\tpulumi.String(\"reopen_pull_request\"),\n\t\t\t\tpulumi.String(\"request_pr_review\"),\n\t\t\t\tpulumi.String(\"resolve_dependabot_alerts\"),\n\t\t\t\tpulumi.String(\"resolve_secret_scanning_alerts\"),\n\t\t\t\tpulumi.String(\"view_secret_scanning_alerts\"),\n\t\t\t\tpulumi.String(\"write_code_scanning\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationCustomRole;\nimport com.pulumi.github.OrganizationCustomRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new OrganizationCustomRole(\"example\", OrganizationCustomRoleArgs.builder()        \n            .baseRole(\"read\")\n            .description(\"Example custom role that uses the read role as its base\")\n            .permissions(            \n                \"add_assignee\",\n                \"add_label\",\n                \"bypass_branch_protection\",\n                \"close_issue\",\n                \"close_pull_request\",\n                \"mark_as_duplicate\",\n                \"create_tag\",\n                \"delete_issue\",\n                \"delete_tag\",\n                \"manage_deploy_keys\",\n                \"push_protected_branch\",\n                \"read_code_scanning\",\n                \"reopen_issue\",\n                \"reopen_pull_request\",\n                \"request_pr_review\",\n                \"resolve_dependabot_alerts\",\n                \"resolve_secret_scanning_alerts\",\n                \"view_secret_scanning_alerts\",\n                \"write_code_scanning\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:OrganizationCustomRole\n    properties:\n      baseRole: read\n      description: Example custom role that uses the read role as its base\n      permissions:\n        - add_assignee\n        - add_label\n        - bypass_branch_protection\n        - close_issue\n        - close_pull_request\n        - mark_as_duplicate\n        - create_tag\n        - delete_issue\n        - delete_tag\n        - manage_deploy_keys\n        - push_protected_branch\n        - read_code_scanning\n        - reopen_issue\n        - reopen_pull_request\n        - request_pr_review\n        - resolve_dependabot_alerts\n        - resolve_secret_scanning_alerts\n        - view_secret_scanning_alerts\n        - write_code_scanning\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustom roles can be imported using the `id` of the role. The `id` of the custom role can be found using the [list custom roles in an organization](https://docs.github.com/en/enterprise-cloud@latest/rest/orgs/custom-roles#list-custom-repository-roles-in-an-organization) API.\n\n```sh\n $ pulumi import github:index/organizationCustomRole:OrganizationCustomRole example 1234\n```\n ",
            "properties": {
                "baseRole": {
                    "type": "string",
                    "description": "The system role from which the role inherits permissions. Can be one of: `read`, `triage`, `write`, or `maintain`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the custom role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom role.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of additional permissions included in this role. Must have a minimum of 1 additional permission. The list of available permissions can be found using the [list repository fine-grained permissions for an organization](https://docs.github.com/en/enterprise-cloud@latest/rest/orgs/custom-roles?apiVersion=2022-11-28#list-repository-fine-grained-permissions-for-an-organization) API.\n"
                }
            },
            "required": [
                "baseRole",
                "name",
                "permissions"
            ],
            "inputProperties": {
                "baseRole": {
                    "type": "string",
                    "description": "The system role from which the role inherits permissions. Can be one of: `read`, `triage`, `write`, or `maintain`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the custom role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom role.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of additional permissions included in this role. Must have a minimum of 1 additional permission. The list of available permissions can be found using the [list repository fine-grained permissions for an organization](https://docs.github.com/en/enterprise-cloud@latest/rest/orgs/custom-roles?apiVersion=2022-11-28#list-repository-fine-grained-permissions-for-an-organization) API.\n"
                }
            },
            "requiredInputs": [
                "baseRole",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationCustomRole resources.\n",
                "properties": {
                    "baseRole": {
                        "type": "string",
                        "description": "The system role from which the role inherits permissions. Can be one of: `read`, `triage`, `write`, or `maintain`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the custom role.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the custom role.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of additional permissions included in this role. Must have a minimum of 1 additional permission. The list of available permissions can be found using the [list repository fine-grained permissions for an organization](https://docs.github.com/en/enterprise-cloud@latest/rest/orgs/custom-roles?apiVersion=2022-11-28#list-repository-fine-grained-permissions-for-an-organization) API.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationProject:OrganizationProject": {
            "description": "This resource allows you to create and manage projects for GitHub organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {body: \"This is a organization project.\"});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is a organization project.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Github.OrganizationProject(\"project\", new()\n    {\n        Body = \"This is a organization project.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is a organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationProject;\nimport com.pulumi.github.OrganizationProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new OrganizationProject(\"project\", OrganizationProjectArgs.builder()        \n            .body(\"This is a organization project.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: github:OrganizationProject\n    properties:\n      body: This is a organization project.\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the project\n"
                }
            },
            "required": [
                "etag",
                "name",
                "url"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationProject resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the project.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationRuleset:OrganizationRuleset": {
            "description": "Creates a GitHub organization ruleset.\n\nThis resource allows you to create and manage rulesets on the organization level. When applied, a new ruleset will be created. When destroyed, that ruleset will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationRuleset;\nimport com.pulumi.github.OrganizationRulesetArgs;\nimport com.pulumi.github.inputs.OrganizationRulesetBypassActorArgs;\nimport com.pulumi.github.inputs.OrganizationRulesetConditionsArgs;\nimport com.pulumi.github.inputs.OrganizationRulesetConditionsRefNameArgs;\nimport com.pulumi.github.inputs.OrganizationRulesetRulesArgs;\nimport com.pulumi.github.inputs.OrganizationRulesetRulesBranchNamePatternArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new OrganizationRuleset(\"example\", OrganizationRulesetArgs.builder()        \n            .bypassActors(OrganizationRulesetBypassActorArgs.builder()\n                .actorId(13473)\n                .actorType(\"Integration\")\n                .bypassMode(\"always\")\n                .build())\n            .conditions(OrganizationRulesetConditionsArgs.builder()\n                .refName(OrganizationRulesetConditionsRefNameArgs.builder()\n                    .exclude()\n                    .include(\"~ALL\")\n                    .build())\n                .build())\n            .enforcement(\"active\")\n            .rules(OrganizationRulesetRulesArgs.builder()\n                .branchNamePattern(OrganizationRulesetRulesBranchNamePatternArgs.builder()\n                    .name(\"example\")\n                    .negate(false)\n                    .operator(\"starts_with\")\n                    .pattern(\"ex\")\n                    .build())\n                .creation(true)\n                .deletion(true)\n                .requiredLinearHistory(true)\n                .requiredSignatures(true)\n                .update(true)\n                .build())\n            .target(\"branch\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:OrganizationRuleset\n    properties:\n      bypassActors:\n        - actorId: 13473\n          actorType: Integration\n          bypassMode: always\n      conditions:\n        refName:\n          exclude: []\n          include:\n            - ~ALL\n      enforcement: active\n      rules:\n        branchNamePattern:\n          name: example\n          negate: false\n          operator: starts_with\n          pattern: ex\n        creation: true\n        deletion: true\n        requiredLinearHistory: true\n        requiredSignatures: true\n        update: true\n      target: branch\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Organization Rulesets can be imported using the GitHub ruleset ID e.g.\n\n```sh\n $ pulumi import github:index/organizationRuleset:OrganizationRuleset example 12345`\n```\n\n ",
            "properties": {
                "bypassActors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/OrganizationRulesetBypassActor:OrganizationRulesetBypassActor"
                    },
                    "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                },
                "conditions": {
                    "$ref": "#/types/github:index/OrganizationRulesetConditions:OrganizationRulesetConditions",
                    "description": "(Block List, Max: 1) Parameters for an organization ruleset condition. `ref_name` is required alongside one of `repository_name` or `repository_id`. (see below for nested schema)\n"
                },
                "enforcement": {
                    "type": "string",
                    "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "(String) GraphQL global node id for use with v4 API.\n"
                },
                "rules": {
                    "$ref": "#/types/github:index/OrganizationRulesetRules:OrganizationRulesetRules",
                    "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                },
                "rulesetId": {
                    "type": "integer",
                    "description": "(Number) GitHub ID for the ruleset.\n"
                },
                "target": {
                    "type": "string",
                    "description": "(String) Possible values are `branch` and `tag`.\n"
                }
            },
            "required": [
                "enforcement",
                "etag",
                "name",
                "nodeId",
                "rules",
                "rulesetId",
                "target"
            ],
            "inputProperties": {
                "bypassActors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/OrganizationRulesetBypassActor:OrganizationRulesetBypassActor"
                    },
                    "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                },
                "conditions": {
                    "$ref": "#/types/github:index/OrganizationRulesetConditions:OrganizationRulesetConditions",
                    "description": "(Block List, Max: 1) Parameters for an organization ruleset condition. `ref_name` is required alongside one of `repository_name` or `repository_id`. (see below for nested schema)\n"
                },
                "enforcement": {
                    "type": "string",
                    "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "rules": {
                    "$ref": "#/types/github:index/OrganizationRulesetRules:OrganizationRulesetRules",
                    "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                },
                "target": {
                    "type": "string",
                    "description": "(String) Possible values are `branch` and `tag`.\n"
                }
            },
            "requiredInputs": [
                "enforcement",
                "rules",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationRuleset resources.\n",
                "properties": {
                    "bypassActors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/OrganizationRulesetBypassActor:OrganizationRulesetBypassActor"
                        },
                        "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                    },
                    "conditions": {
                        "$ref": "#/types/github:index/OrganizationRulesetConditions:OrganizationRulesetConditions",
                        "description": "(Block List, Max: 1) Parameters for an organization ruleset condition. `ref_name` is required alongside one of `repository_name` or `repository_id`. (see below for nested schema)\n"
                    },
                    "enforcement": {
                        "type": "string",
                        "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The name of the ruleset.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "(String) GraphQL global node id for use with v4 API.\n"
                    },
                    "rules": {
                        "$ref": "#/types/github:index/OrganizationRulesetRules:OrganizationRulesetRules",
                        "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                    },
                    "rulesetId": {
                        "type": "integer",
                        "description": "(Number) GitHub ID for the ruleset.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "(String) Possible values are `branch` and `tag`.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationSecurityManager:OrganizationSecurityManager": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst someTeamTeam = new github.Team(\"someTeamTeam\", {description: \"Some cool team\"});\nconst someTeamOrganizationSecurityManager = new github.OrganizationSecurityManager(\"someTeamOrganizationSecurityManager\", {teamSlug: someTeamTeam.slug});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nsome_team_team = github.Team(\"someTeamTeam\", description=\"Some cool team\")\nsome_team_organization_security_manager = github.OrganizationSecurityManager(\"someTeamOrganizationSecurityManager\", team_slug=some_team_team.slug)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var someTeamTeam = new Github.Team(\"someTeamTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var someTeamOrganizationSecurityManager = new Github.OrganizationSecurityManager(\"someTeamOrganizationSecurityManager\", new()\n    {\n        TeamSlug = someTeamTeam.Slug,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeTeamTeam, err := github.NewTeam(ctx, \"someTeamTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewOrganizationSecurityManager(ctx, \"someTeamOrganizationSecurityManager\", \u0026github.OrganizationSecurityManagerArgs{\n\t\t\tTeamSlug: someTeamTeam.Slug,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.OrganizationSecurityManager;\nimport com.pulumi.github.OrganizationSecurityManagerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someTeamTeam = new Team(\"someTeamTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var someTeamOrganizationSecurityManager = new OrganizationSecurityManager(\"someTeamOrganizationSecurityManager\", OrganizationSecurityManagerArgs.builder()        \n            .teamSlug(someTeamTeam.slug())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  someTeamTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  someTeamOrganizationSecurityManager:\n    type: github:OrganizationSecurityManager\n    properties:\n      teamSlug: ${someTeamTeam.slug}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Security Manager Teams can be imported using the GitHub team ID e.g.\n\n```sh\n $ pulumi import github:index/organizationSecurityManager:OrganizationSecurityManager core 1234567\n```\n ",
            "properties": {
                "teamSlug": {
                    "type": "string",
                    "description": "The slug of the team to manage.\n"
                }
            },
            "required": [
                "teamSlug"
            ],
            "inputProperties": {
                "teamSlug": {
                    "type": "string",
                    "description": "The slug of the team to manage.\n"
                }
            },
            "requiredInputs": [
                "teamSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationSecurityManager resources.\n",
                "properties": {
                    "teamSlug": {
                        "type": "string",
                        "description": "The slug of the team to manage.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationSettings:OrganizationSettings": {
            "description": "This resource allows you to create and manage settings for a GitHub Organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = new github.OrganizationSettings(\"test\", {\n    advancedSecurityEnabledForNewRepositories: false,\n    billingEmail: \"test@example.com\",\n    blog: \"https://example.com\",\n    company: \"Test Company\",\n    defaultRepositoryPermission: \"read\",\n    dependabotAlertsEnabledForNewRepositories: false,\n    dependabotSecurityUpdatesEnabledForNewRepositories: false,\n    dependencyGraphEnabledForNewRepositories: false,\n    description: \"Test Description\",\n    email: \"test@example.com\",\n    hasOrganizationProjects: true,\n    hasRepositoryProjects: true,\n    location: \"Test Location\",\n    membersCanCreateInternalRepositories: true,\n    membersCanCreatePages: true,\n    membersCanCreatePrivatePages: true,\n    membersCanCreatePrivateRepositories: true,\n    membersCanCreatePublicPages: true,\n    membersCanCreatePublicRepositories: true,\n    membersCanCreateRepositories: true,\n    membersCanForkPrivateRepositories: true,\n    secretScanningEnabledForNewRepositories: false,\n    secretScanningPushProtectionEnabledForNewRepositories: false,\n    twitterUsername: \"Test\",\n    webCommitSignoffRequired: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.OrganizationSettings(\"test\",\n    advanced_security_enabled_for_new_repositories=False,\n    billing_email=\"test@example.com\",\n    blog=\"https://example.com\",\n    company=\"Test Company\",\n    default_repository_permission=\"read\",\n    dependabot_alerts_enabled_for_new_repositories=False,\n    dependabot_security_updates_enabled_for_new_repositories=False,\n    dependency_graph_enabled_for_new_repositories=False,\n    description=\"Test Description\",\n    email=\"test@example.com\",\n    has_organization_projects=True,\n    has_repository_projects=True,\n    location=\"Test Location\",\n    members_can_create_internal_repositories=True,\n    members_can_create_pages=True,\n    members_can_create_private_pages=True,\n    members_can_create_private_repositories=True,\n    members_can_create_public_pages=True,\n    members_can_create_public_repositories=True,\n    members_can_create_repositories=True,\n    members_can_fork_private_repositories=True,\n    secret_scanning_enabled_for_new_repositories=False,\n    secret_scanning_push_protection_enabled_for_new_repositories=False,\n    twitter_username=\"Test\",\n    web_commit_signoff_required=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Github.OrganizationSettings(\"test\", new()\n    {\n        AdvancedSecurityEnabledForNewRepositories = false,\n        BillingEmail = \"test@example.com\",\n        Blog = \"https://example.com\",\n        Company = \"Test Company\",\n        DefaultRepositoryPermission = \"read\",\n        DependabotAlertsEnabledForNewRepositories = false,\n        DependabotSecurityUpdatesEnabledForNewRepositories = false,\n        DependencyGraphEnabledForNewRepositories = false,\n        Description = \"Test Description\",\n        Email = \"test@example.com\",\n        HasOrganizationProjects = true,\n        HasRepositoryProjects = true,\n        Location = \"Test Location\",\n        MembersCanCreateInternalRepositories = true,\n        MembersCanCreatePages = true,\n        MembersCanCreatePrivatePages = true,\n        MembersCanCreatePrivateRepositories = true,\n        MembersCanCreatePublicPages = true,\n        MembersCanCreatePublicRepositories = true,\n        MembersCanCreateRepositories = true,\n        MembersCanForkPrivateRepositories = true,\n        SecretScanningEnabledForNewRepositories = false,\n        SecretScanningPushProtectionEnabledForNewRepositories = false,\n        TwitterUsername = \"Test\",\n        WebCommitSignoffRequired = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationSettings(ctx, \"test\", \u0026github.OrganizationSettingsArgs{\n\t\t\tAdvancedSecurityEnabledForNewRepositories: pulumi.Bool(false),\n\t\t\tBillingEmail:                pulumi.String(\"test@example.com\"),\n\t\t\tBlog:                        pulumi.String(\"https://example.com\"),\n\t\t\tCompany:                     pulumi.String(\"Test Company\"),\n\t\t\tDefaultRepositoryPermission: pulumi.String(\"read\"),\n\t\t\tDependabotAlertsEnabledForNewRepositories:             pulumi.Bool(false),\n\t\t\tDependabotSecurityUpdatesEnabledForNewRepositories:    pulumi.Bool(false),\n\t\t\tDependencyGraphEnabledForNewRepositories:              pulumi.Bool(false),\n\t\t\tDescription:                                           pulumi.String(\"Test Description\"),\n\t\t\tEmail:                                                 pulumi.String(\"test@example.com\"),\n\t\t\tHasOrganizationProjects:                               pulumi.Bool(true),\n\t\t\tHasRepositoryProjects:                                 pulumi.Bool(true),\n\t\t\tLocation:                                              pulumi.String(\"Test Location\"),\n\t\t\tMembersCanCreateInternalRepositories:                  pulumi.Bool(true),\n\t\t\tMembersCanCreatePages:                                 pulumi.Bool(true),\n\t\t\tMembersCanCreatePrivatePages:                          pulumi.Bool(true),\n\t\t\tMembersCanCreatePrivateRepositories:                   pulumi.Bool(true),\n\t\t\tMembersCanCreatePublicPages:                           pulumi.Bool(true),\n\t\t\tMembersCanCreatePublicRepositories:                    pulumi.Bool(true),\n\t\t\tMembersCanCreateRepositories:                          pulumi.Bool(true),\n\t\t\tMembersCanForkPrivateRepositories:                     pulumi.Bool(true),\n\t\t\tSecretScanningEnabledForNewRepositories:               pulumi.Bool(false),\n\t\t\tSecretScanningPushProtectionEnabledForNewRepositories: pulumi.Bool(false),\n\t\t\tTwitterUsername:                                       pulumi.String(\"Test\"),\n\t\t\tWebCommitSignoffRequired:                              pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationSettings;\nimport com.pulumi.github.OrganizationSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new OrganizationSettings(\"test\", OrganizationSettingsArgs.builder()        \n            .advancedSecurityEnabledForNewRepositories(false)\n            .billingEmail(\"test@example.com\")\n            .blog(\"https://example.com\")\n            .company(\"Test Company\")\n            .defaultRepositoryPermission(\"read\")\n            .dependabotAlertsEnabledForNewRepositories(false)\n            .dependabotSecurityUpdatesEnabledForNewRepositories(false)\n            .dependencyGraphEnabledForNewRepositories(false)\n            .description(\"Test Description\")\n            .email(\"test@example.com\")\n            .hasOrganizationProjects(true)\n            .hasRepositoryProjects(true)\n            .location(\"Test Location\")\n            .membersCanCreateInternalRepositories(true)\n            .membersCanCreatePages(true)\n            .membersCanCreatePrivatePages(true)\n            .membersCanCreatePrivateRepositories(true)\n            .membersCanCreatePublicPages(true)\n            .membersCanCreatePublicRepositories(true)\n            .membersCanCreateRepositories(true)\n            .membersCanForkPrivateRepositories(true)\n            .secretScanningEnabledForNewRepositories(false)\n            .secretScanningPushProtectionEnabledForNewRepositories(false)\n            .twitterUsername(\"Test\")\n            .webCommitSignoffRequired(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: github:OrganizationSettings\n    properties:\n      advancedSecurityEnabledForNewRepositories: false\n      billingEmail: test@example.com\n      blog: https://example.com\n      company: Test Company\n      defaultRepositoryPermission: read\n      dependabotAlertsEnabledForNewRepositories: false\n      dependabotSecurityUpdatesEnabledForNewRepositories: false\n      dependencyGraphEnabledForNewRepositories: false\n      description: Test Description\n      email: test@example.com\n      hasOrganizationProjects: true\n      hasRepositoryProjects: true\n      location: Test Location\n      membersCanCreateInternalRepositories: true\n      membersCanCreatePages: true\n      membersCanCreatePrivatePages: true\n      membersCanCreatePrivateRepositories: true\n      membersCanCreatePublicPages: true\n      membersCanCreatePublicRepositories: true\n      membersCanCreateRepositories: true\n      membersCanForkPrivateRepositories: true\n      secretScanningEnabledForNewRepositories: false\n      secretScanningPushProtectionEnabledForNewRepositories: false\n      twitterUsername: Test\n      webCommitSignoffRequired: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nOrganization settings can be imported using the `id` of the organization. The `id` of the organization can be found using the [get an organization](https://docs.github.com/en/rest/orgs/orgs#get-an-organization) API.\n\n```sh\n $ pulumi import github:index/organizationSettings:OrganizationSettings test 123456789\n```\n ",
            "properties": {
                "advancedSecurityEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not advanced security is enabled for new repositories. Defaults to `false`.\n"
                },
                "billingEmail": {
                    "type": "string",
                    "description": "The billing email address for the organization.\n"
                },
                "blog": {
                    "type": "string",
                    "description": "The blog URL for the organization.\n"
                },
                "company": {
                    "type": "string",
                    "description": "The company name for the organization.\n"
                },
                "defaultRepositoryPermission": {
                    "type": "string",
                    "description": "The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.\n"
                },
                "dependabotAlertsEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.\n"
                },
                "dependabotSecurityUpdatesEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.\n"
                },
                "dependencyGraphEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependency graph is enabled for new repositories. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the organization.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address for the organization.\n"
                },
                "hasOrganizationProjects": {
                    "type": "boolean",
                    "description": "Whether or not organization projects are enabled for the organization.\n"
                },
                "hasRepositoryProjects": {
                    "type": "boolean",
                    "description": "Whether or not repository projects are enabled for the organization.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location for the organization.\n"
                },
                "membersCanCreateInternalRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new internal repositories. For Enterprise Organizations only.\n"
                },
                "membersCanCreatePages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new pages. Defaults to `true`.\n"
                },
                "membersCanCreatePrivatePages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new private pages. Defaults to `true`.\n"
                },
                "membersCanCreatePrivateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new private repositories. Defaults to `true`.\n"
                },
                "membersCanCreatePublicPages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new public pages. Defaults to `true`.\n"
                },
                "membersCanCreatePublicRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new public repositories. Defaults to `true`.\n"
                },
                "membersCanCreateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new repositories. Defaults to `true`.\n"
                },
                "membersCanForkPrivateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can fork private repositories. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the organization.\n"
                },
                "secretScanningEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not secret scanning is enabled for new repositories. Defaults to `false`.\n"
                },
                "secretScanningPushProtectionEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.\n"
                },
                "twitterUsername": {
                    "type": "string",
                    "description": "The Twitter username for the organization.\n"
                },
                "webCommitSignoffRequired": {
                    "type": "boolean",
                    "description": "Whether or not commit signatures are required for commits to the organization. Defaults to `false`.\n"
                }
            },
            "required": [
                "billingEmail",
                "name"
            ],
            "inputProperties": {
                "advancedSecurityEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not advanced security is enabled for new repositories. Defaults to `false`.\n"
                },
                "billingEmail": {
                    "type": "string",
                    "description": "The billing email address for the organization.\n"
                },
                "blog": {
                    "type": "string",
                    "description": "The blog URL for the organization.\n"
                },
                "company": {
                    "type": "string",
                    "description": "The company name for the organization.\n"
                },
                "defaultRepositoryPermission": {
                    "type": "string",
                    "description": "The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.\n"
                },
                "dependabotAlertsEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.\n"
                },
                "dependabotSecurityUpdatesEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.\n"
                },
                "dependencyGraphEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not dependency graph is enabled for new repositories. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the organization.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address for the organization.\n"
                },
                "hasOrganizationProjects": {
                    "type": "boolean",
                    "description": "Whether or not organization projects are enabled for the organization.\n"
                },
                "hasRepositoryProjects": {
                    "type": "boolean",
                    "description": "Whether or not repository projects are enabled for the organization.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location for the organization.\n"
                },
                "membersCanCreateInternalRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new internal repositories. For Enterprise Organizations only.\n"
                },
                "membersCanCreatePages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new pages. Defaults to `true`.\n"
                },
                "membersCanCreatePrivatePages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new private pages. Defaults to `true`.\n"
                },
                "membersCanCreatePrivateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new private repositories. Defaults to `true`.\n"
                },
                "membersCanCreatePublicPages": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new public pages. Defaults to `true`.\n"
                },
                "membersCanCreatePublicRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new public repositories. Defaults to `true`.\n"
                },
                "membersCanCreateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can create new repositories. Defaults to `true`.\n"
                },
                "membersCanForkPrivateRepositories": {
                    "type": "boolean",
                    "description": "Whether or not organization members can fork private repositories. Defaults to `false`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the organization.\n"
                },
                "secretScanningEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not secret scanning is enabled for new repositories. Defaults to `false`.\n"
                },
                "secretScanningPushProtectionEnabledForNewRepositories": {
                    "type": "boolean",
                    "description": "Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.\n"
                },
                "twitterUsername": {
                    "type": "string",
                    "description": "The Twitter username for the organization.\n"
                },
                "webCommitSignoffRequired": {
                    "type": "boolean",
                    "description": "Whether or not commit signatures are required for commits to the organization. Defaults to `false`.\n"
                }
            },
            "requiredInputs": [
                "billingEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationSettings resources.\n",
                "properties": {
                    "advancedSecurityEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not advanced security is enabled for new repositories. Defaults to `false`.\n"
                    },
                    "billingEmail": {
                        "type": "string",
                        "description": "The billing email address for the organization.\n"
                    },
                    "blog": {
                        "type": "string",
                        "description": "The blog URL for the organization.\n"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company name for the organization.\n"
                    },
                    "defaultRepositoryPermission": {
                        "type": "string",
                        "description": "The default permission for organization members to create new repositories. Can be one of `read`, `write`, `admin`, or `none`. Defaults to `read`.\n"
                    },
                    "dependabotAlertsEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not dependabot alerts are enabled for new repositories. Defaults to `false`.\n"
                    },
                    "dependabotSecurityUpdatesEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not dependabot security updates are enabled for new repositories. Defaults to `false`.\n"
                    },
                    "dependencyGraphEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not dependency graph is enabled for new repositories. Defaults to `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the organization.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address for the organization.\n"
                    },
                    "hasOrganizationProjects": {
                        "type": "boolean",
                        "description": "Whether or not organization projects are enabled for the organization.\n"
                    },
                    "hasRepositoryProjects": {
                        "type": "boolean",
                        "description": "Whether or not repository projects are enabled for the organization.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location for the organization.\n"
                    },
                    "membersCanCreateInternalRepositories": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new internal repositories. For Enterprise Organizations only.\n"
                    },
                    "membersCanCreatePages": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new pages. Defaults to `true`.\n"
                    },
                    "membersCanCreatePrivatePages": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new private pages. Defaults to `true`.\n"
                    },
                    "membersCanCreatePrivateRepositories": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new private repositories. Defaults to `true`.\n"
                    },
                    "membersCanCreatePublicPages": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new public pages. Defaults to `true`.\n"
                    },
                    "membersCanCreatePublicRepositories": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new public repositories. Defaults to `true`.\n"
                    },
                    "membersCanCreateRepositories": {
                        "type": "boolean",
                        "description": "Whether or not organization members can create new repositories. Defaults to `true`.\n"
                    },
                    "membersCanForkPrivateRepositories": {
                        "type": "boolean",
                        "description": "Whether or not organization members can fork private repositories. Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the organization.\n"
                    },
                    "secretScanningEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not secret scanning is enabled for new repositories. Defaults to `false`.\n"
                    },
                    "secretScanningPushProtectionEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether or not secret scanning push protection is enabled for new repositories. Defaults to `false`.\n"
                    },
                    "twitterUsername": {
                        "type": "string",
                        "description": "The Twitter username for the organization.\n"
                    },
                    "webCommitSignoffRequired": {
                        "type": "boolean",
                        "description": "Whether or not commit signatures are required for commits to the organization. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationWebhook:OrganizationWebhook": {
            "description": "This resource allows you to create and manage webhooks for GitHub organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst foo = new github.OrganizationWebhook(\"foo\", {\n    active: false,\n    configuration: {\n        contentType: \"form\",\n        insecureSsl: false,\n        url: \"https://google.de/\",\n    },\n    events: [\"issues\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo = github.OrganizationWebhook(\"foo\",\n    active=False,\n    configuration=github.OrganizationWebhookConfigurationArgs(\n        content_type=\"form\",\n        insecure_ssl=False,\n        url=\"https://google.de/\",\n    ),\n    events=[\"issues\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Github.OrganizationWebhook(\"foo\", new()\n    {\n        Active = false,\n        Configuration = new Github.Inputs.OrganizationWebhookConfigurationArgs\n        {\n            ContentType = \"form\",\n            InsecureSsl = false,\n            Url = \"https://google.de/\",\n        },\n        Events = new[]\n        {\n            \"issues\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationWebhook(ctx, \"foo\", \u0026github.OrganizationWebhookArgs{\n\t\t\tActive: pulumi.Bool(false),\n\t\t\tConfiguration: \u0026github.OrganizationWebhookConfigurationArgs{\n\t\t\t\tContentType: pulumi.String(\"form\"),\n\t\t\t\tInsecureSsl: pulumi.Bool(false),\n\t\t\t\tUrl:         pulumi.String(\"https://google.de/\"),\n\t\t\t},\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"issues\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationWebhook;\nimport com.pulumi.github.OrganizationWebhookArgs;\nimport com.pulumi.github.inputs.OrganizationWebhookConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new OrganizationWebhook(\"foo\", OrganizationWebhookArgs.builder()        \n            .active(false)\n            .configuration(OrganizationWebhookConfigurationArgs.builder()\n                .contentType(\"form\")\n                .insecureSsl(false)\n                .url(\"https://google.de/\")\n                .build())\n            .events(\"issues\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: github:OrganizationWebhook\n    properties:\n      active: false\n      configuration:\n        contentType: form\n        insecureSsl: false\n        url: https://google.de/\n      events:\n        - issues\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nOrganization webhooks can be imported using the `id` of the webhook. The `id` of the webhook can be found in the URL of the webhook. For example, `\"https://github.com/organizations/foo-org/settings/hooks/123456789\"`.\n\n```sh\n $ pulumi import github:index/organizationWebhook:OrganizationWebhook terraform 123456789\n```\n If secret is populated in the webhook's configuration, the value will be imported as \"********\".\n\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                    "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                },
                "etag": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the webhook\n"
                }
            },
            "required": [
                "etag",
                "events",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                    "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                }
            },
            "requiredInputs": [
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationWebhook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                        "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the webhook\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/projectCard:ProjectCard": {
            "description": "This resource allows you to create and manage cards for GitHub projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {body: \"This is an organization project.\"});\nconst column = new github.ProjectColumn(\"column\", {projectId: project.id});\nconst card = new github.ProjectCard(\"card\", {\n    columnId: column.columnId,\n    note: \"## Unaccepted 👇\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is an organization project.\")\ncolumn = github.ProjectColumn(\"column\", project_id=project.id)\ncard = github.ProjectCard(\"card\",\n    column_id=column.column_id,\n    note=\"## Unaccepted 👇\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Github.OrganizationProject(\"project\", new()\n    {\n        Body = \"This is an organization project.\",\n    });\n\n    var column = new Github.ProjectColumn(\"column\", new()\n    {\n        ProjectId = project.Id,\n    });\n\n    var card = new Github.ProjectCard(\"card\", new()\n    {\n        ColumnId = column.ColumnId,\n        Note = \"## Unaccepted 👇\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is an organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcolumn, err := github.NewProjectColumn(ctx, \"column\", \u0026github.ProjectColumnArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProjectCard(ctx, \"card\", \u0026github.ProjectCardArgs{\n\t\t\tColumnId: column.ColumnId,\n\t\t\tNote:     pulumi.String(\"## Unaccepted 👇\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationProject;\nimport com.pulumi.github.OrganizationProjectArgs;\nimport com.pulumi.github.ProjectColumn;\nimport com.pulumi.github.ProjectColumnArgs;\nimport com.pulumi.github.ProjectCard;\nimport com.pulumi.github.ProjectCardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new OrganizationProject(\"project\", OrganizationProjectArgs.builder()        \n            .body(\"This is an organization project.\")\n            .build());\n\n        var column = new ProjectColumn(\"column\", ProjectColumnArgs.builder()        \n            .projectId(project.id())\n            .build());\n\n        var card = new ProjectCard(\"card\", ProjectCardArgs.builder()        \n            .columnId(column.columnId())\n            .note(\"## Unaccepted 👇\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: github:OrganizationProject\n    properties:\n      body: This is an organization project.\n  column:\n    type: github:ProjectColumn\n    properties:\n      projectId: ${project.id}\n  card:\n    type: github:ProjectCard\n    properties:\n      columnId: ${column.columnId}\n      note: \"## Unaccepted \\U0001F447\"\n```\n{{% /example %}}\n{{% example %}}\n### Adding An Issue To A Project\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst testRepository = new github.Repository(\"testRepository\", {\n    hasProjects: true,\n    hasIssues: true,\n});\nconst testIssue = new github.Issue(\"testIssue\", {\n    repository: testRepository.id,\n    title: \"Test issue title\",\n    body: \"Test issue body\",\n});\nconst testRepositoryProject = new github.RepositoryProject(\"testRepositoryProject\", {\n    repository: testRepository.name,\n    body: \"this is a test project\",\n});\nconst testProjectColumn = new github.ProjectColumn(\"testProjectColumn\", {projectId: testRepositoryProject.id});\nconst testProjectCard = new github.ProjectCard(\"testProjectCard\", {\n    columnId: testProjectColumn.columnId,\n    contentId: testIssue.issueId,\n    contentType: \"Issue\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest_repository = github.Repository(\"testRepository\",\n    has_projects=True,\n    has_issues=True)\ntest_issue = github.Issue(\"testIssue\",\n    repository=test_repository.id,\n    title=\"Test issue title\",\n    body=\"Test issue body\")\ntest_repository_project = github.RepositoryProject(\"testRepositoryProject\",\n    repository=test_repository.name,\n    body=\"this is a test project\")\ntest_project_column = github.ProjectColumn(\"testProjectColumn\", project_id=test_repository_project.id)\ntest_project_card = github.ProjectCard(\"testProjectCard\",\n    column_id=test_project_column.column_id,\n    content_id=test_issue.issue_id,\n    content_type=\"Issue\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testRepository = new Github.Repository(\"testRepository\", new()\n    {\n        HasProjects = true,\n        HasIssues = true,\n    });\n\n    var testIssue = new Github.Issue(\"testIssue\", new()\n    {\n        Repository = testRepository.Id,\n        Title = \"Test issue title\",\n        Body = \"Test issue body\",\n    });\n\n    var testRepositoryProject = new Github.RepositoryProject(\"testRepositoryProject\", new()\n    {\n        Repository = testRepository.Name,\n        Body = \"this is a test project\",\n    });\n\n    var testProjectColumn = new Github.ProjectColumn(\"testProjectColumn\", new()\n    {\n        ProjectId = testRepositoryProject.Id,\n    });\n\n    var testProjectCard = new Github.ProjectCard(\"testProjectCard\", new()\n    {\n        ColumnId = testProjectColumn.ColumnId,\n        ContentId = testIssue.IssueId,\n        ContentType = \"Issue\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRepository, err := github.NewRepository(ctx, \"testRepository\", \u0026github.RepositoryArgs{\n\t\t\tHasProjects: pulumi.Bool(true),\n\t\t\tHasIssues:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestIssue, err := github.NewIssue(ctx, \"testIssue\", \u0026github.IssueArgs{\n\t\t\tRepository: testRepository.ID(),\n\t\t\tTitle:      pulumi.String(\"Test issue title\"),\n\t\t\tBody:       pulumi.String(\"Test issue body\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRepositoryProject, err := github.NewRepositoryProject(ctx, \"testRepositoryProject\", \u0026github.RepositoryProjectArgs{\n\t\t\tRepository: testRepository.Name,\n\t\t\tBody:       pulumi.String(\"this is a test project\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestProjectColumn, err := github.NewProjectColumn(ctx, \"testProjectColumn\", \u0026github.ProjectColumnArgs{\n\t\t\tProjectId: testRepositoryProject.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProjectCard(ctx, \"testProjectCard\", \u0026github.ProjectCardArgs{\n\t\t\tColumnId:    testProjectColumn.ColumnId,\n\t\t\tContentId:   testIssue.IssueId,\n\t\t\tContentType: pulumi.String(\"Issue\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.Issue;\nimport com.pulumi.github.IssueArgs;\nimport com.pulumi.github.RepositoryProject;\nimport com.pulumi.github.RepositoryProjectArgs;\nimport com.pulumi.github.ProjectColumn;\nimport com.pulumi.github.ProjectColumnArgs;\nimport com.pulumi.github.ProjectCard;\nimport com.pulumi.github.ProjectCardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepository = new Repository(\"testRepository\", RepositoryArgs.builder()        \n            .hasProjects(true)\n            .hasIssues(true)\n            .build());\n\n        var testIssue = new Issue(\"testIssue\", IssueArgs.builder()        \n            .repository(testRepository.id())\n            .title(\"Test issue title\")\n            .body(\"Test issue body\")\n            .build());\n\n        var testRepositoryProject = new RepositoryProject(\"testRepositoryProject\", RepositoryProjectArgs.builder()        \n            .repository(testRepository.name())\n            .body(\"this is a test project\")\n            .build());\n\n        var testProjectColumn = new ProjectColumn(\"testProjectColumn\", ProjectColumnArgs.builder()        \n            .projectId(testRepositoryProject.id())\n            .build());\n\n        var testProjectCard = new ProjectCard(\"testProjectCard\", ProjectCardArgs.builder()        \n            .columnId(testProjectColumn.columnId())\n            .contentId(testIssue.issueId())\n            .contentType(\"Issue\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRepository:\n    type: github:Repository\n    properties:\n      hasProjects: true\n      hasIssues: true\n  testIssue:\n    type: github:Issue\n    properties:\n      repository: ${testRepository.id}\n      title: Test issue title\n      body: Test issue body\n  testRepositoryProject:\n    type: github:RepositoryProject\n    properties:\n      repository: ${testRepository.name}\n      body: this is a test project\n  testProjectColumn:\n    type: github:ProjectColumn\n    properties:\n      projectId: ${testRepositoryProject.id}\n  testProjectCard:\n    type: github:ProjectCard\n    properties:\n      columnId: ${testProjectColumn.columnId}\n      contentId: ${testIssue.issueId}\n      contentType: Issue\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA GitHub Project Card can be imported using its [Card ID](https://developer.github.com/v3/projects/cards/#get-a-project-card):\n\n```sh\n $ pulumi import github:index/projectCard:ProjectCard card 01234567\n```\n ",
            "properties": {
                "cardId": {
                    "type": "integer",
                    "description": "The ID of the card.\n"
                },
                "columnId": {
                    "type": "string",
                    "description": "The ID of the card.\n"
                },
                "contentId": {
                    "type": "integer",
                    "description": "`github_issue.issue_id`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "Must be either `Issue` or `PullRequest`\n\n**Remarks:** You must either set the `note` attribute or both `content_id` and `content_type`.\nSee note example or issue example for more information.\n"
                },
                "etag": {
                    "type": "string"
                },
                "note": {
                    "type": "string",
                    "description": "The note contents of the card. Markdown supported.\n"
                }
            },
            "required": [
                "cardId",
                "columnId",
                "etag"
            ],
            "inputProperties": {
                "columnId": {
                    "type": "string",
                    "description": "The ID of the card.\n",
                    "willReplaceOnChanges": true
                },
                "contentId": {
                    "type": "integer",
                    "description": "`github_issue.issue_id`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "Must be either `Issue` or `PullRequest`\n\n**Remarks:** You must either set the `note` attribute or both `content_id` and `content_type`.\nSee note example or issue example for more information.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note contents of the card. Markdown supported.\n"
                }
            },
            "requiredInputs": [
                "columnId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCard resources.\n",
                "properties": {
                    "cardId": {
                        "type": "integer",
                        "description": "The ID of the card.\n"
                    },
                    "columnId": {
                        "type": "string",
                        "description": "The ID of the card.\n",
                        "willReplaceOnChanges": true
                    },
                    "contentId": {
                        "type": "integer",
                        "description": "`github_issue.issue_id`.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Must be either `Issue` or `PullRequest`\n\n**Remarks:** You must either set the `note` attribute or both `content_id` and `content_type`.\nSee note example or issue example for more information.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note contents of the card. Markdown supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/projectColumn:ProjectColumn": {
            "description": "This resource allows you to create and manage columns for GitHub projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {body: \"This is an organization project.\"});\nconst column = new github.ProjectColumn(\"column\", {projectId: project.id});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is an organization project.\")\ncolumn = github.ProjectColumn(\"column\", project_id=project.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project = new Github.OrganizationProject(\"project\", new()\n    {\n        Body = \"This is an organization project.\",\n    });\n\n    var column = new Github.ProjectColumn(\"column\", new()\n    {\n        ProjectId = project.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is an organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProjectColumn(ctx, \"column\", \u0026github.ProjectColumnArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.OrganizationProject;\nimport com.pulumi.github.OrganizationProjectArgs;\nimport com.pulumi.github.ProjectColumn;\nimport com.pulumi.github.ProjectColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var project = new OrganizationProject(\"project\", OrganizationProjectArgs.builder()        \n            .body(\"This is an organization project.\")\n            .build());\n\n        var column = new ProjectColumn(\"column\", ProjectColumnArgs.builder()        \n            .projectId(project.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  project:\n    type: github:OrganizationProject\n    properties:\n      body: This is an organization project.\n  column:\n    type: github:ProjectColumn\n    properties:\n      projectId: ${project.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "columnId": {
                    "type": "integer",
                    "description": "The ID of the column.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of an existing project that the column will be created in.\n"
                }
            },
            "required": [
                "columnId",
                "etag",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the column.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of an existing project that the column will be created in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectColumn resources.\n",
                "properties": {
                    "columnId": {
                        "type": "integer",
                        "description": "The ID of the column.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the column.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of an existing project that the column will be created in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/release:Release": {
            "description": "This resource allows you to create and manage a release in a specific\nGitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = new github.Repository(\"repo\", {\n    description: \"GitHub repo managed by Terraform\",\n    \"private\": false,\n});\nconst example = new github.Release(\"example\", {\n    repository: repo.name,\n    tagName: \"v1.0.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.Repository(\"repo\",\n    description=\"GitHub repo managed by Terraform\",\n    private=False)\nexample = github.Release(\"example\",\n    repository=repo.name,\n    tag_name=\"v1.0.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = new Github.Repository(\"repo\", new()\n    {\n        Description = \"GitHub repo managed by Terraform\",\n        Private = false,\n    });\n\n    var example = new Github.Release(\"example\", new()\n    {\n        Repository = repo.Name,\n        TagName = \"v1.0.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.NewRepository(ctx, \"repo\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"GitHub repo managed by Terraform\"),\n\t\t\tPrivate:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRelease(ctx, \"example\", \u0026github.ReleaseArgs{\n\t\t\tRepository: repo.Name,\n\t\t\tTagName:    pulumi.String(\"v1.0.0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.Release;\nimport com.pulumi.github.ReleaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo = new Repository(\"repo\", RepositoryArgs.builder()        \n            .description(\"GitHub repo managed by Terraform\")\n            .private_(false)\n            .build());\n\n        var example = new Release(\"example\", ReleaseArgs.builder()        \n            .repository(repo.name())\n            .tagName(\"v1.0.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repo:\n    type: github:Repository\n    properties:\n      description: GitHub repo managed by Terraform\n      private: false\n  example:\n    type: github:Release\n    properties:\n      repository: ${repo.name}\n      tagName: v1.0.0\n```\n\n{{% /example %}}\n{{% example %}}\n### On Non-Default Branch\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {autoInit: true});\nconst exampleBranch = new github.Branch(\"exampleBranch\", {\n    repository: exampleRepository.name,\n    branch: \"branch_name\",\n    sourceBranch: exampleRepository.defaultBranch,\n});\nconst exampleRelease = new github.Release(\"exampleRelease\", {\n    repository: exampleRepository.name,\n    tagName: \"v1.0.0\",\n    targetCommitish: exampleBranch.branch,\n    draft: false,\n    prerelease: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\", auto_init=True)\nexample_branch = github.Branch(\"exampleBranch\",\n    repository=example_repository.name,\n    branch=\"branch_name\",\n    source_branch=example_repository.default_branch)\nexample_release = github.Release(\"exampleRelease\",\n    repository=example_repository.name,\n    tag_name=\"v1.0.0\",\n    target_commitish=example_branch.branch,\n    draft=False,\n    prerelease=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new Github.Repository(\"exampleRepository\", new()\n    {\n        AutoInit = true,\n    });\n\n    var exampleBranch = new Github.Branch(\"exampleBranch\", new()\n    {\n        Repository = exampleRepository.Name,\n        BranchName = \"branch_name\",\n        SourceBranch = exampleRepository.DefaultBranch,\n    });\n\n    var exampleRelease = new Github.Release(\"exampleRelease\", new()\n    {\n        Repository = exampleRepository.Name,\n        TagName = \"v1.0.0\",\n        TargetCommitish = exampleBranch.BranchName,\n        Draft = false,\n        Prerelease = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", \u0026github.RepositoryArgs{\n\t\t\tAutoInit: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleBranch, err := github.NewBranch(ctx, \"exampleBranch\", \u0026github.BranchArgs{\n\t\t\tRepository:   exampleRepository.Name,\n\t\t\tBranch:       pulumi.String(\"branch_name\"),\n\t\t\tSourceBranch: exampleRepository.DefaultBranch,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRelease(ctx, \"exampleRelease\", \u0026github.ReleaseArgs{\n\t\t\tRepository:      exampleRepository.Name,\n\t\t\tTagName:         pulumi.String(\"v1.0.0\"),\n\t\t\tTargetCommitish: exampleBranch.Branch,\n\t\t\tDraft:           pulumi.Bool(false),\n\t\t\tPrerelease:      pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.Branch;\nimport com.pulumi.github.BranchArgs;\nimport com.pulumi.github.Release;\nimport com.pulumi.github.ReleaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\", RepositoryArgs.builder()        \n            .autoInit(true)\n            .build());\n\n        var exampleBranch = new Branch(\"exampleBranch\", BranchArgs.builder()        \n            .repository(exampleRepository.name())\n            .branch(\"branch_name\")\n            .sourceBranch(exampleRepository.defaultBranch())\n            .build());\n\n        var exampleRelease = new Release(\"exampleRelease\", ReleaseArgs.builder()        \n            .repository(exampleRepository.name())\n            .tagName(\"v1.0.0\")\n            .targetCommitish(exampleBranch.branch())\n            .draft(false)\n            .prerelease(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: github:Repository\n    properties:\n      autoInit: true\n  exampleBranch:\n    type: github:Branch\n    properties:\n      repository: ${exampleRepository.name}\n      branch: branch_name\n      sourceBranch: ${exampleRepository.defaultBranch}\n  exampleRelease:\n    type: github:Release\n    properties:\n      repository: ${exampleRepository.name}\n      tagName: v1.0.0\n      targetCommitish: ${exampleBranch.branch}\n      draft: false\n      prerelease: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the `name` of the repository, combined with the `id` of the release, and a `:` character for separating components, e.g.\n\n```sh\n $ pulumi import github:index/release:Release example repo:12345678\n```\n\n ",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag.\n"
                },
                "discussionCategoryName": {
                    "type": "string",
                    "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\n"
                },
                "draft": {
                    "type": "boolean",
                    "description": "Set to `false` to create a published release.\n"
                },
                "etag": {
                    "type": "string"
                },
                "generateReleaseNotes": {
                    "type": "boolean",
                    "description": "Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the release.\n"
                },
                "prerelease": {
                    "type": "boolean",
                    "description": "Set to `false` to identify the release as a full release.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "tagName": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "targetCommitish": {
                    "type": "string",
                    "description": "The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.\n"
                }
            },
            "required": [
                "etag",
                "name",
                "repository",
                "tagName"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag.\n"
                },
                "discussionCategoryName": {
                    "type": "string",
                    "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\n",
                    "willReplaceOnChanges": true
                },
                "draft": {
                    "type": "boolean",
                    "description": "Set to `false` to create a published release.\n",
                    "willReplaceOnChanges": true
                },
                "generateReleaseNotes": {
                    "type": "boolean",
                    "description": "Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the release.\n"
                },
                "prerelease": {
                    "type": "boolean",
                    "description": "Set to `false` to identify the release as a full release.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "tagName": {
                    "type": "string",
                    "description": "The name of the tag.\n",
                    "willReplaceOnChanges": true
                },
                "targetCommitish": {
                    "type": "string",
                    "description": "The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "tagName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Release resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Text describing the contents of the tag.\n"
                    },
                    "discussionCategoryName": {
                        "type": "string",
                        "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see [Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\n",
                        "willReplaceOnChanges": true
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Set to `false` to create a published release.\n",
                        "willReplaceOnChanges": true
                    },
                    "etag": {
                        "type": "string"
                    },
                    "generateReleaseNotes": {
                        "type": "boolean",
                        "description": "Set to `true` to automatically generate the name and body for this release. If `name` is specified, the specified `name` will be used; otherwise, a name will be automatically generated. If `body` is specified, the `body` will be pre-pended to the automatically generated notes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the release.\n"
                    },
                    "prerelease": {
                        "type": "boolean",
                        "description": "Set to `false` to identify the release as a full release.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagName": {
                        "type": "string",
                        "description": "The name of the tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetCommitish": {
                        "type": "string",
                        "description": "The branch name or commit SHA the tag is created from. Defaults to the default branch of the repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repository:Repository": {
            "description": "This resource allows you to create and manage repositories within your\nGitHub organization or personal account.\n\n\u003e Note: When used with GitHub App authentication, even GET requests must have\nthe `contents:write` permission or else the `allow_merge_commit`, `allow_rebase_merge`,\nand `allow_squash_merge` attributes will be ignored, causing confusing diffs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    template: {\n        includeAllBranches: true,\n        owner: \"github\",\n        repository: \"terraform-template-module\",\n    },\n    visibility: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    template=github.RepositoryTemplateArgs(\n        include_all_branches=True,\n        owner=\"github\",\n        repository=\"terraform-template-module\",\n    ),\n    visibility=\"public\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Description = \"My awesome codebase\",\n        Template = new Github.Inputs.RepositoryTemplateArgs\n        {\n            IncludeAllBranches = true,\n            Owner = \"github\",\n            Repository = \"terraform-template-module\",\n        },\n        Visibility = \"public\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tTemplate: \u0026github.RepositoryTemplateArgs{\n\t\t\t\tIncludeAllBranches: pulumi.Bool(true),\n\t\t\t\tOwner:              pulumi.String(\"github\"),\n\t\t\t\tRepository:         pulumi.String(\"terraform-template-module\"),\n\t\t\t},\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.inputs.RepositoryTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .description(\"My awesome codebase\")\n            .template(RepositoryTemplateArgs.builder()\n                .includeAllBranches(true)\n                .owner(\"github\")\n                .repository(\"terraform-template-module\")\n                .build())\n            .visibility(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      description: My awesome codebase\n      template:\n        includeAllBranches: true\n        owner: github\n        repository: terraform-template-module\n      visibility: public\n```\n\n{{% /example %}}\n{{% example %}}\n### With GitHub Pages Enabled\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome web page\",\n    pages: {\n        source: {\n            branch: \"master\",\n            path: \"/docs\",\n        },\n    },\n    \"private\": false,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome web page\",\n    pages=github.RepositoryPagesArgs(\n        source=github.RepositoryPagesSourceArgs(\n            branch=\"master\",\n            path=\"/docs\",\n        ),\n    ),\n    private=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Description = \"My awesome web page\",\n        Pages = new Github.Inputs.RepositoryPagesArgs\n        {\n            Source = new Github.Inputs.RepositoryPagesSourceArgs\n            {\n                Branch = \"master\",\n                Path = \"/docs\",\n            },\n        },\n        Private = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome web page\"),\n\t\t\tPages: \u0026github.RepositoryPagesArgs{\n\t\t\t\tSource: \u0026github.RepositoryPagesSourceArgs{\n\t\t\t\t\tBranch: pulumi.String(\"master\"),\n\t\t\t\t\tPath:   pulumi.String(\"/docs\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrivate: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.inputs.RepositoryPagesArgs;\nimport com.pulumi.github.inputs.RepositoryPagesSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .description(\"My awesome web page\")\n            .pages(RepositoryPagesArgs.builder()\n                .source(RepositoryPagesSourceArgs.builder()\n                    .branch(\"master\")\n                    .path(\"/docs\")\n                    .build())\n                .build())\n            .private_(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      description: My awesome web page\n      pages:\n        source:\n          branch: master\n          path: /docs\n      private: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepositories can be imported using the `name`, e.g.\n\n```sh\n $ pulumi import github:index/repository:Repository terraform terraform\n```\n ",
            "properties": {
                "allowAutoMerge": {
                    "type": "boolean",
                    "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                },
                "allowMergeCommit": {
                    "type": "boolean",
                    "description": "Set to `false` to disable merge commits on the repository.\n"
                },
                "allowRebaseMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable rebase merges on the repository.\n"
                },
                "allowSquashMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable squash merges on the repository.\n"
                },
                "allowUpdateBranch": {
                    "type": "boolean",
                    "description": "Set to `true` to always suggest updating pull request branches.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                },
                "autoInit": {
                    "type": "boolean",
                    "description": "Set to `true` to produce an initial commit in the repository.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                    "deprecationMessage": "Use the github_branch_default resource instead"
                },
                "deleteBranchOnMerge": {
                    "type": "boolean",
                    "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the repository.\n"
                },
                "etag": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string",
                    "description": "A string of the form \"orgname/reponame\".\n"
                },
                "gitCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                },
                "gitignoreTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                },
                "hasDiscussions": {
                    "type": "boolean",
                    "description": "Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.\n"
                },
                "hasDownloads": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                },
                "hasProjects": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "URL of a page describing the project.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n"
                },
                "httpCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                },
                "ignoreVulnerabilityAlertsDuringRead": {
                    "type": "boolean",
                    "description": "Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                },
                "licenseTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                },
                "mergeCommitMessage": {
                    "type": "string",
                    "description": "Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allow_merge_commit` is `true`.\n"
                },
                "mergeCommitTitle": {
                    "type": "string",
                    "description": "Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allow_merge_commit` is `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "GraphQL global node id for use with v4 API\n"
                },
                "pages": {
                    "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                    "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                },
                "primaryLanguage": {
                    "type": "string",
                    "description": "The primary language used in the repository.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                    "deprecationMessage": "use visibility instead"
                },
                "repoId": {
                    "type": "integer",
                    "description": "GitHub ID for the repository\n"
                },
                "securityAndAnalysis": {
                    "$ref": "#/types/github:index/RepositorySecurityAndAnalysis:RepositorySecurityAndAnalysis",
                    "description": "The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.\n"
                },
                "squashMergeCommitMessage": {
                    "type": "string",
                    "description": "Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allow_squash_merge` is `true`.\n"
                },
                "squashMergeCommitTitle": {
                    "type": "string",
                    "description": "Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allow_squash_merge` is `true`.\n"
                },
                "sshCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                },
                "svnUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                },
                "template": {
                    "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                    "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics of the repository.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                },
                "vulnerabilityAlerts": {
                    "type": "boolean",
                    "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                },
                "webCommitSignoffRequired": {
                    "type": "boolean",
                    "description": "Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.\n"
                }
            },
            "required": [
                "defaultBranch",
                "etag",
                "fullName",
                "gitCloneUrl",
                "htmlUrl",
                "httpCloneUrl",
                "name",
                "nodeId",
                "primaryLanguage",
                "private",
                "repoId",
                "securityAndAnalysis",
                "sshCloneUrl",
                "svnUrl",
                "topics",
                "visibility"
            ],
            "inputProperties": {
                "allowAutoMerge": {
                    "type": "boolean",
                    "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                },
                "allowMergeCommit": {
                    "type": "boolean",
                    "description": "Set to `false` to disable merge commits on the repository.\n"
                },
                "allowRebaseMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable rebase merges on the repository.\n"
                },
                "allowSquashMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable squash merges on the repository.\n"
                },
                "allowUpdateBranch": {
                    "type": "boolean",
                    "description": "Set to `true` to always suggest updating pull request branches.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                },
                "autoInit": {
                    "type": "boolean",
                    "description": "Set to `true` to produce an initial commit in the repository.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                    "deprecationMessage": "Use the github_branch_default resource instead"
                },
                "deleteBranchOnMerge": {
                    "type": "boolean",
                    "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the repository.\n"
                },
                "gitignoreTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                },
                "hasDiscussions": {
                    "type": "boolean",
                    "description": "Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.\n"
                },
                "hasDownloads": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                },
                "hasProjects": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "URL of a page describing the project.\n"
                },
                "ignoreVulnerabilityAlertsDuringRead": {
                    "type": "boolean",
                    "description": "Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                },
                "licenseTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                },
                "mergeCommitMessage": {
                    "type": "string",
                    "description": "Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allow_merge_commit` is `true`.\n"
                },
                "mergeCommitTitle": {
                    "type": "string",
                    "description": "Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allow_merge_commit` is `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "pages": {
                    "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                    "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                    "deprecationMessage": "use visibility instead"
                },
                "securityAndAnalysis": {
                    "$ref": "#/types/github:index/RepositorySecurityAndAnalysis:RepositorySecurityAndAnalysis",
                    "description": "The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.\n"
                },
                "squashMergeCommitMessage": {
                    "type": "string",
                    "description": "Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allow_squash_merge` is `true`.\n"
                },
                "squashMergeCommitTitle": {
                    "type": "string",
                    "description": "Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allow_squash_merge` is `true`.\n"
                },
                "template": {
                    "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                    "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics of the repository.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                },
                "vulnerabilityAlerts": {
                    "type": "boolean",
                    "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                },
                "webCommitSignoffRequired": {
                    "type": "boolean",
                    "description": "Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "allowAutoMerge": {
                        "type": "boolean",
                        "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                    },
                    "allowMergeCommit": {
                        "type": "boolean",
                        "description": "Set to `false` to disable merge commits on the repository.\n"
                    },
                    "allowRebaseMerge": {
                        "type": "boolean",
                        "description": "Set to `false` to disable rebase merges on the repository.\n"
                    },
                    "allowSquashMerge": {
                        "type": "boolean",
                        "description": "Set to `false` to disable squash merges on the repository.\n"
                    },
                    "allowUpdateBranch": {
                        "type": "boolean",
                        "description": "Set to `true` to always suggest updating pull request branches.\n"
                    },
                    "archiveOnDestroy": {
                        "type": "boolean",
                        "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                    },
                    "autoInit": {
                        "type": "boolean",
                        "description": "Set to `true` to produce an initial commit in the repository.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                        "deprecationMessage": "Use the github_branch_default resource instead"
                    },
                    "deleteBranchOnMerge": {
                        "type": "boolean",
                        "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the repository.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "A string of the form \"orgname/reponame\".\n"
                    },
                    "gitCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                    },
                    "gitignoreTemplate": {
                        "type": "string",
                        "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                    },
                    "hasDiscussions": {
                        "type": "boolean",
                        "description": "Set to `true` to enable GitHub Discussions on the repository. Defaults to `false`.\n"
                    },
                    "hasDownloads": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                    },
                    "hasProjects": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n"
                    },
                    "httpCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                    },
                    "ignoreVulnerabilityAlertsDuringRead": {
                        "type": "boolean",
                        "description": "Set to `true` to not call the vulnerability alerts endpoint so the resource can also be used without admin permissions during read.\n"
                    },
                    "isTemplate": {
                        "type": "boolean",
                        "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                    },
                    "licenseTemplate": {
                        "type": "string",
                        "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                    },
                    "mergeCommitMessage": {
                        "type": "string",
                        "description": "Can be `PR_BODY`, `PR_TITLE`, or `BLANK` for a default merge commit message. Applicable only if `allow_merge_commit` is `true`.\n"
                    },
                    "mergeCommitTitle": {
                        "type": "string",
                        "description": "Can be `PR_TITLE` or `MERGE_MESSAGE` for a default merge commit title. Applicable only if `allow_merge_commit` is `true`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "GraphQL global node id for use with v4 API\n"
                    },
                    "pages": {
                        "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                        "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                    },
                    "primaryLanguage": {
                        "type": "string",
                        "description": "The primary language used in the repository.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                        "deprecationMessage": "use visibility instead"
                    },
                    "repoId": {
                        "type": "integer",
                        "description": "GitHub ID for the repository\n"
                    },
                    "securityAndAnalysis": {
                        "$ref": "#/types/github:index/RepositorySecurityAndAnalysis:RepositorySecurityAndAnalysis",
                        "description": "The repository's [security and analysis](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository) configuration. See Security and Analysis Configuration below for details.\n"
                    },
                    "squashMergeCommitMessage": {
                        "type": "string",
                        "description": "Can be `PR_BODY`, `COMMIT_MESSAGES`, or `BLANK` for a default squash merge commit message. Applicable only if `allow_squash_merge` is `true`.\n"
                    },
                    "squashMergeCommitTitle": {
                        "type": "string",
                        "description": "Can be `PR_TITLE` or `COMMIT_OR_PR_TITLE` for a default squash merge commit title. Applicable only if `allow_squash_merge` is `true`.\n"
                    },
                    "sshCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                    },
                    "svnUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                    },
                    "template": {
                        "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                        "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topics of the repository.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                    },
                    "vulnerabilityAlerts": {
                        "type": "boolean",
                        "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                    },
                    "webCommitSignoffRequired": {
                        "type": "boolean",
                        "description": "Require contributors to sign off on web-based commits. See more [here](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository). Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryAutolinkReference:RepositoryAutolinkReference": {
            "description": "This resource allows you to create and manage an autolink reference for a single repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = new github.Repository(\"repo\", {\n    description: \"GitHub repo managed by Terraform\",\n    \"private\": false,\n});\nconst autolink = new github.RepositoryAutolinkReference(\"autolink\", {\n    repository: repo.name,\n    keyPrefix: \"TICKET-\",\n    targetUrlTemplate: \"https://example.com/TICKET?query=\u003cnum\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.Repository(\"repo\",\n    description=\"GitHub repo managed by Terraform\",\n    private=False)\nautolink = github.RepositoryAutolinkReference(\"autolink\",\n    repository=repo.name,\n    key_prefix=\"TICKET-\",\n    target_url_template=\"https://example.com/TICKET?query=\u003cnum\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = new Github.Repository(\"repo\", new()\n    {\n        Description = \"GitHub repo managed by Terraform\",\n        Private = false,\n    });\n\n    var autolink = new Github.RepositoryAutolinkReference(\"autolink\", new()\n    {\n        Repository = repo.Name,\n        KeyPrefix = \"TICKET-\",\n        TargetUrlTemplate = \"https://example.com/TICKET?query=\u003cnum\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.NewRepository(ctx, \"repo\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"GitHub repo managed by Terraform\"),\n\t\t\tPrivate:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryAutolinkReference(ctx, \"autolink\", \u0026github.RepositoryAutolinkReferenceArgs{\n\t\t\tRepository:        repo.Name,\n\t\t\tKeyPrefix:         pulumi.String(\"TICKET-\"),\n\t\t\tTargetUrlTemplate: pulumi.String(\"https://example.com/TICKET?query=\u003cnum\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryAutolinkReference;\nimport com.pulumi.github.RepositoryAutolinkReferenceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo = new Repository(\"repo\", RepositoryArgs.builder()        \n            .description(\"GitHub repo managed by Terraform\")\n            .private_(false)\n            .build());\n\n        var autolink = new RepositoryAutolinkReference(\"autolink\", RepositoryAutolinkReferenceArgs.builder()        \n            .repository(repo.name())\n            .keyPrefix(\"TICKET-\")\n            .targetUrlTemplate(\"https://example.com/TICKET?query=\u003cnum\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repo:\n    type: github:Repository\n    properties:\n      description: GitHub repo managed by Terraform\n      private: false\n  autolink:\n    type: github:RepositoryAutolinkReference\n    properties:\n      repository: ${repo.name}\n      keyPrefix: TICKET-\n      targetUrlTemplate: https://example.com/TICKET?query=\u003cnum\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n### Import by key prefix\n\n```sh\n $ pulumi import github:index/repositoryAutolinkReference:RepositoryAutolinkReference auto oof/OOF-\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string",
                    "description": "An etag representing the autolink reference object.\n"
                },
                "isAlphanumeric": {
                    "type": "boolean",
                    "description": "Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters. Default is true.\n"
                },
                "keyPrefix": {
                    "type": "string",
                    "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the autolink reference.\n"
                },
                "targetUrlTemplate": {
                    "type": "string",
                    "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n"
                }
            },
            "required": [
                "etag",
                "keyPrefix",
                "repository",
                "targetUrlTemplate"
            ],
            "inputProperties": {
                "isAlphanumeric": {
                    "type": "boolean",
                    "description": "Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters. Default is true.\n",
                    "willReplaceOnChanges": true
                },
                "keyPrefix": {
                    "type": "string",
                    "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the autolink reference.\n",
                    "willReplaceOnChanges": true
                },
                "targetUrlTemplate": {
                    "type": "string",
                    "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyPrefix",
                "repository",
                "targetUrlTemplate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryAutolinkReference resources.\n",
                "properties": {
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the autolink reference object.\n"
                    },
                    "isAlphanumeric": {
                        "type": "boolean",
                        "description": "Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters. Default is true.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyPrefix": {
                        "type": "string",
                        "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the autolink reference.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetUrlTemplate": {
                        "type": "string",
                        "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryCollaborator:RepositoryCollaborator": {
            "description": "Provides a GitHub repository collaborator resource.\n\n\u003e Note: github.RepositoryCollaborator cannot be used in conjunction with github.RepositoryCollaborators or \nthey will fight over what your policy should be.\n\nThis resource allows you to add/remove collaborators from repositories in your\norganization or personal account. For organization repositories, collaborators can\nhave explicit (and differing levels of) read, write, or administrator access to \nspecific repositories, without giving the user full organization membership. \nFor personal repositories, collaborators can only be granted write\n(implicitly includes read) permission. \n\nWhen applied, an invitation will be sent to the user to become a collaborator\non a repository. When destroyed, either the invitation will be cancelled or the\ncollaborator will be removed from the repository.\n\nThis resource is non-authoritative, for managing ALL collaborators of a repo, use github.RepositoryCollaborators\ninstead.\n\nFurther documentation on GitHub collaborators:\n\n- [Adding outside collaborators to your personal repositories](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories)\n- [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)\n- [Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a collaborator to a repository\nconst aRepoCollaborator = new github.RepositoryCollaborator(\"aRepoCollaborator\", {\n    permission: \"admin\",\n    repository: \"our-cool-repo\",\n    username: \"SomeUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a collaborator to a repository\na_repo_collaborator = github.RepositoryCollaborator(\"aRepoCollaborator\",\n    permission=\"admin\",\n    repository=\"our-cool-repo\",\n    username=\"SomeUser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a collaborator to a repository\n    var aRepoCollaborator = new Github.RepositoryCollaborator(\"aRepoCollaborator\", new()\n    {\n        Permission = \"admin\",\n        Repository = \"our-cool-repo\",\n        Username = \"SomeUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryCollaborator(ctx, \"aRepoCollaborator\", \u0026github.RepositoryCollaboratorArgs{\n\t\t\tPermission: pulumi.String(\"admin\"),\n\t\t\tRepository: pulumi.String(\"our-cool-repo\"),\n\t\t\tUsername:   pulumi.String(\"SomeUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryCollaborator;\nimport com.pulumi.github.RepositoryCollaboratorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aRepoCollaborator = new RepositoryCollaborator(\"aRepoCollaborator\", RepositoryCollaboratorArgs.builder()        \n            .permission(\"admin\")\n            .repository(\"our-cool-repo\")\n            .username(\"SomeUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a collaborator to a repository\n  aRepoCollaborator:\n    type: github:RepositoryCollaborator\n    properties:\n      permission: admin\n      repository: our-cool-repo\n      username: SomeUser\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Collaborators can be imported using an ID made up of `repository:username`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryCollaborator:RepositoryCollaborator collaborator terraform:someuser\n```\n ",
            "properties": {
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to be used in `github.UserInvitationAccepter`\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                },
                "permissionDiffSuppression": {
                    "type": "boolean",
                    "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n\n\u003e Note: The owner of the repository can be passed as part of the repository name  e.g. `owner-org-name/repo-name`. If owner is not supplied as part of the repository name, it may also be supplied by setting the environment variable `GITHUB_OWNER`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the repository as a collaborator.\n"
                }
            },
            "required": [
                "invitationId",
                "repository",
                "username"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n",
                    "willReplaceOnChanges": true
                },
                "permissionDiffSuppression": {
                    "type": "boolean",
                    "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n\n\u003e Note: The owner of the repository can be passed as part of the repository name  e.g. `owner-org-name/repo-name`. If owner is not supplied as part of the repository name, it may also be supplied by setting the environment variable `GITHUB_OWNER`.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the repository as a collaborator.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryCollaborator resources.\n",
                "properties": {
                    "invitationId": {
                        "type": "string",
                        "description": "ID of the invitation to be used in `github.UserInvitationAccepter`\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organization for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissionDiffSuppression": {
                        "type": "boolean",
                        "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n\n\u003e Note: The owner of the repository can be passed as part of the repository name  e.g. `owner-org-name/repo-name`. If owner is not supplied as part of the repository name, it may also be supplied by setting the environment variable `GITHUB_OWNER`.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the repository as a collaborator.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryCollaborators:RepositoryCollaborators": {
            "description": "Provides a GitHub repository collaborators resource.\n\n\u003e Note: github.RepositoryCollaborators cannot be used in conjunction with github.RepositoryCollaborator and\ngithub.TeamRepository or they will fight over what your policy should be.\n\nThis resource allows you to manage all collaborators for repositories in your\norganization or personal account. For organization repositories, collaborators can\nhave explicit (and differing levels of) read, write, or administrator access to \nspecific repositories, without giving the user full organization membership. \nFor personal repositories, collaborators can only be granted write\n(implicitly includes read) permission. \n\nWhen applied, an invitation will be sent to the user to become a collaborators\non a repository. When destroyed, either the invitation will be cancelled or the\ncollaborators will be removed from the repository.\n\nThis resource is authoritative. For adding a collaborator to a repo in a non-authoritative manner, use\ngithub.RepositoryCollaborator instead.\n\nFurther documentation on GitHub collaborators:\n\n- [Adding outside collaborators to your personal repositories](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories)\n- [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)\n- [Converting an organization member to an outside collaborators](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\n \n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add collaborators to a repository\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someRepo = new github.Repository(\"someRepo\", {});\nconst someRepoCollaborators = new github.RepositoryCollaborators(\"someRepoCollaborators\", {\n    repository: someRepo.name,\n    users: [{\n        permission: \"admin\",\n        username: \"SomeUser\",\n    }],\n    teams: [{\n        permission: \"pull\",\n        teamId: someTeam.slug,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add collaborators to a repository\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_repo = github.Repository(\"someRepo\")\nsome_repo_collaborators = github.RepositoryCollaborators(\"someRepoCollaborators\",\n    repository=some_repo.name,\n    users=[github.RepositoryCollaboratorsUserArgs(\n        permission=\"admin\",\n        username=\"SomeUser\",\n    )],\n    teams=[github.RepositoryCollaboratorsTeamArgs(\n        permission=\"pull\",\n        team_id=some_team.slug,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add collaborators to a repository\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var someRepo = new Github.Repository(\"someRepo\");\n\n    var someRepoCollaborators = new Github.RepositoryCollaborators(\"someRepoCollaborators\", new()\n    {\n        Repository = someRepo.Name,\n        Users = new[]\n        {\n            new Github.Inputs.RepositoryCollaboratorsUserArgs\n            {\n                Permission = \"admin\",\n                Username = \"SomeUser\",\n            },\n        },\n        Teams = new[]\n        {\n            new Github.Inputs.RepositoryCollaboratorsTeamArgs\n            {\n                Permission = \"pull\",\n                TeamId = someTeam.Slug,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeRepo, err := github.NewRepository(ctx, \"someRepo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryCollaborators(ctx, \"someRepoCollaborators\", \u0026github.RepositoryCollaboratorsArgs{\n\t\t\tRepository: someRepo.Name,\n\t\t\tUsers: github.RepositoryCollaboratorsUserArray{\n\t\t\t\t\u0026github.RepositoryCollaboratorsUserArgs{\n\t\t\t\t\tPermission: pulumi.String(\"admin\"),\n\t\t\t\t\tUsername:   pulumi.String(\"SomeUser\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTeams: github.RepositoryCollaboratorsTeamArray{\n\t\t\t\t\u0026github.RepositoryCollaboratorsTeamArgs{\n\t\t\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t\t\t\tTeamId:     someTeam.Slug,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryCollaborators;\nimport com.pulumi.github.RepositoryCollaboratorsArgs;\nimport com.pulumi.github.inputs.RepositoryCollaboratorsUserArgs;\nimport com.pulumi.github.inputs.RepositoryCollaboratorsTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var someRepo = new Repository(\"someRepo\");\n\n        var someRepoCollaborators = new RepositoryCollaborators(\"someRepoCollaborators\", RepositoryCollaboratorsArgs.builder()        \n            .repository(someRepo.name())\n            .users(RepositoryCollaboratorsUserArgs.builder()\n                .permission(\"admin\")\n                .username(\"SomeUser\")\n                .build())\n            .teams(RepositoryCollaboratorsTeamArgs.builder()\n                .permission(\"pull\")\n                .teamId(someTeam.slug())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add collaborators to a repository\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  someRepo:\n    type: github:Repository\n  someRepoCollaborators:\n    type: github:RepositoryCollaborators\n    properties:\n      repository: ${someRepo.name}\n      users:\n        - permission: admin\n          username: SomeUser\n      teams:\n        - permission: pull\n          teamId: ${someTeam.slug}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Collaborators can be imported using the name `name`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryCollaborators:RepositoryCollaborators collaborators terraform\n```\n ",
            "properties": {
                "invitationIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of usernames to invitation ID for any users added as part of creation of this resource to \nbe used in `github.UserInvitationAccepter`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryCollaboratorsTeam:RepositoryCollaboratorsTeam"
                    },
                    "description": "List of teams\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryCollaboratorsUser:RepositoryCollaboratorsUser"
                    },
                    "description": "List of users\n"
                }
            },
            "required": [
                "invitationIds",
                "repository"
            ],
            "inputProperties": {
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n",
                    "willReplaceOnChanges": true
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryCollaboratorsTeam:RepositoryCollaboratorsTeam"
                    },
                    "description": "List of teams\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryCollaboratorsUser:RepositoryCollaboratorsUser"
                    },
                    "description": "List of users\n"
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryCollaborators resources.\n",
                "properties": {
                    "invitationIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of usernames to invitation ID for any users added as part of creation of this resource to \nbe used in `github.UserInvitationAccepter`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n",
                        "willReplaceOnChanges": true
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryCollaboratorsTeam:RepositoryCollaboratorsTeam"
                        },
                        "description": "List of teams\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryCollaboratorsUser:RepositoryCollaboratorsUser"
                        },
                        "description": "List of users\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryDependabotSecurityUpdates:RepositoryDependabotSecurityUpdates": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The state of the automated security fixes.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository.\n"
                }
            },
            "required": [
                "enabled",
                "repository"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The state of the automated security fixes.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryDependabotSecurityUpdates resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "The state of the automated security fixes.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryDeployKey:RepositoryDeployKey": {
            "description": "Provides a GitHub repository deploy key resource.\n\nA deploy key is an SSH key that is stored on your server and grants\naccess to a single GitHub repository. This key is attached directly to the repository instead of to a personal user\naccount.\n\nThis resource allows you to add/remove repository deploy keys.\n\nFurther documentation on GitHub repository deploy keys:\n- [About deploy keys](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a deploy key\nconst exampleRepositoryDeployKey = new github.RepositoryDeployKey(\"exampleRepositoryDeployKey\", {\n    key: \"ssh-rsa AAA...\",\n    readOnly: false,\n    repository: \"test-repo\",\n    title: \"Repository test key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a deploy key\nexample_repository_deploy_key = github.RepositoryDeployKey(\"exampleRepositoryDeployKey\",\n    key=\"ssh-rsa AAA...\",\n    read_only=False,\n    repository=\"test-repo\",\n    title=\"Repository test key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a deploy key\n    var exampleRepositoryDeployKey = new Github.RepositoryDeployKey(\"exampleRepositoryDeployKey\", new()\n    {\n        Key = \"ssh-rsa AAA...\",\n        ReadOnly = false,\n        Repository = \"test-repo\",\n        Title = \"Repository test key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryDeployKey(ctx, \"exampleRepositoryDeployKey\", \u0026github.RepositoryDeployKeyArgs{\n\t\t\tKey:        pulumi.String(\"ssh-rsa AAA...\"),\n\t\t\tReadOnly:   pulumi.Bool(false),\n\t\t\tRepository: pulumi.String(\"test-repo\"),\n\t\t\tTitle:      pulumi.String(\"Repository test key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryDeployKey;\nimport com.pulumi.github.RepositoryDeployKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepositoryDeployKey = new RepositoryDeployKey(\"exampleRepositoryDeployKey\", RepositoryDeployKeyArgs.builder()        \n            .key(\"ssh-rsa AAA...\")\n            .readOnly(\"false\")\n            .repository(\"test-repo\")\n            .title(\"Repository test key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a deploy key\n  exampleRepositoryDeployKey:\n    type: github:RepositoryDeployKey\n    properties:\n      key: ssh-rsa AAA...\n      readOnly: 'false'\n      repository: test-repo\n      title: Repository test key\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository deploy keys can be imported using a colon-separated pair of repository name and GitHub's key id. The latter can be obtained by GitHub's SDKs and API.\n\n```sh\n $ pulumi import github:index/repositoryDeployKey:RepositoryDeployKey foo test-repo:23824728\n```\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "A SSH key.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "A boolean qualifying the key to be either read only or read/write.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the GitHub repository.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title.\n\nChanging any of the fields forces re-creating the resource.\n"
                }
            },
            "required": [
                "etag",
                "key",
                "repository",
                "title"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "A SSH key.\n",
                    "willReplaceOnChanges": true
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "A boolean qualifying the key to be either read only or read/write.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the GitHub repository.\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "A title.\n\nChanging any of the fields forces re-creating the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "repository",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryDeployKey resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "A SSH key.\n",
                        "willReplaceOnChanges": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "A boolean qualifying the key to be either read only or read/write.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the GitHub repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "A title.\n\nChanging any of the fields forces re-creating the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryDeploymentBranchPolicy:RepositoryDeploymentBranchPolicy": {
            "description": "This resource allows you to create and manage deployment branch policies.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst env = new github.RepositoryEnvironment(\"env\", {\n    repository: \"my_repo\",\n    environment: \"my_env\",\n    deploymentBranchPolicy: {\n        protectedBranches: false,\n        customBranchPolicies: true,\n    },\n});\nconst foo = new github.RepositoryDeploymentBranchPolicy(\"foo\", {\n    repository: \"my_repo\",\n    environmentName: \"my_env\",\n}, {\n    dependsOn: [env],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nenv = github.RepositoryEnvironment(\"env\",\n    repository=\"my_repo\",\n    environment=\"my_env\",\n    deployment_branch_policy=github.RepositoryEnvironmentDeploymentBranchPolicyArgs(\n        protected_branches=False,\n        custom_branch_policies=True,\n    ))\nfoo = github.RepositoryDeploymentBranchPolicy(\"foo\",\n    repository=\"my_repo\",\n    environment_name=\"my_env\",\n    opts=pulumi.ResourceOptions(depends_on=[env]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var env = new Github.RepositoryEnvironment(\"env\", new()\n    {\n        Repository = \"my_repo\",\n        Environment = \"my_env\",\n        DeploymentBranchPolicy = new Github.Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs\n        {\n            ProtectedBranches = false,\n            CustomBranchPolicies = true,\n        },\n    });\n\n    var foo = new Github.RepositoryDeploymentBranchPolicy(\"foo\", new()\n    {\n        Repository = \"my_repo\",\n        EnvironmentName = \"my_env\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            env,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tenv, err := github.NewRepositoryEnvironment(ctx, \"env\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tRepository:  pulumi.String(\"my_repo\"),\n\t\t\tEnvironment: pulumi.String(\"my_env\"),\n\t\t\tDeploymentBranchPolicy: \u0026github.RepositoryEnvironmentDeploymentBranchPolicyArgs{\n\t\t\t\tProtectedBranches:    pulumi.Bool(false),\n\t\t\t\tCustomBranchPolicies: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryDeploymentBranchPolicy(ctx, \"foo\", \u0026github.RepositoryDeploymentBranchPolicyArgs{\n\t\t\tRepository:      pulumi.String(\"my_repo\"),\n\t\t\tEnvironmentName: pulumi.String(\"my_env\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tenv,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryEnvironment;\nimport com.pulumi.github.RepositoryEnvironmentArgs;\nimport com.pulumi.github.inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs;\nimport com.pulumi.github.RepositoryDeploymentBranchPolicy;\nimport com.pulumi.github.RepositoryDeploymentBranchPolicyArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var env = new RepositoryEnvironment(\"env\", RepositoryEnvironmentArgs.builder()        \n            .repository(\"my_repo\")\n            .environment(\"my_env\")\n            .deploymentBranchPolicy(RepositoryEnvironmentDeploymentBranchPolicyArgs.builder()\n                .protectedBranches(false)\n                .customBranchPolicies(true)\n                .build())\n            .build());\n\n        var foo = new RepositoryDeploymentBranchPolicy(\"foo\", RepositoryDeploymentBranchPolicyArgs.builder()        \n            .repository(\"my_repo\")\n            .environmentName(\"my_env\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(env)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  env:\n    type: github:RepositoryEnvironment\n    properties:\n      repository: my_repo\n      environment: my_env\n      deploymentBranchPolicy:\n        protectedBranches: false\n        customBranchPolicies: true\n  foo:\n    type: github:RepositoryDeploymentBranchPolicy\n    properties:\n      repository: my_repo\n      environmentName: my_env\n    options:\n      dependson:\n        - ${env}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n```sh\n $ pulumi import github:index/repositoryDeploymentBranchPolicy:RepositoryDeploymentBranchPolicy foo repo:env:id\n```\n ",
            "properties": {
                "environmentName": {
                    "type": "string",
                    "description": "The name of the environment. This environment must have `deployment_branch_policy.custom_branch_policies` set to true or a 404 error will be thrown.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "An etag representing the Branch object.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the policy in.\n"
                }
            },
            "required": [
                "environmentName",
                "etag",
                "name",
                "repository"
            ],
            "inputProperties": {
                "environmentName": {
                    "type": "string",
                    "description": "The name of the environment. This environment must have `deployment_branch_policy.custom_branch_policies` set to true or a 404 error will be thrown.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the policy in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "environmentName",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryDeploymentBranchPolicy resources.\n",
                "properties": {
                    "environmentName": {
                        "type": "string",
                        "description": "The name of the environment. This environment must have `deployment_branch_policy.custom_branch_policies` set to true or a 404 error will be thrown.\n",
                        "willReplaceOnChanges": true
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the Branch object.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to create the policy in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryEnvironment:RepositoryEnvironment": {
            "description": "This resource allows you to create and manage environments for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst current = github.getUser({\n    username: \"\",\n});\nconst exampleRepository = new github.Repository(\"exampleRepository\", {description: \"My awesome codebase\"});\nconst exampleRepositoryEnvironment = new github.RepositoryEnvironment(\"exampleRepositoryEnvironment\", {\n    environment: \"example\",\n    repository: exampleRepository.name,\n    reviewers: [{\n        users: [current.then(current =\u003e current.id)],\n    }],\n    deploymentBranchPolicy: {\n        protectedBranches: true,\n        customBranchPolicies: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ncurrent = github.get_user(username=\"\")\nexample_repository = github.Repository(\"exampleRepository\", description=\"My awesome codebase\")\nexample_repository_environment = github.RepositoryEnvironment(\"exampleRepositoryEnvironment\",\n    environment=\"example\",\n    repository=example_repository.name,\n    reviewers=[github.RepositoryEnvironmentReviewerArgs(\n        users=[current.id],\n    )],\n    deployment_branch_policy=github.RepositoryEnvironmentDeploymentBranchPolicyArgs(\n        protected_branches=True,\n        custom_branch_policies=False,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Github.GetUser.Invoke(new()\n    {\n        Username = \"\",\n    });\n\n    var exampleRepository = new Github.Repository(\"exampleRepository\", new()\n    {\n        Description = \"My awesome codebase\",\n    });\n\n    var exampleRepositoryEnvironment = new Github.RepositoryEnvironment(\"exampleRepositoryEnvironment\", new()\n    {\n        Environment = \"example\",\n        Repository = exampleRepository.Name,\n        Reviewers = new[]\n        {\n            new Github.Inputs.RepositoryEnvironmentReviewerArgs\n            {\n                Users = new[]\n                {\n                    current.Apply(getUserResult =\u003e getUserResult.Id),\n                },\n            },\n        },\n        DeploymentBranchPolicy = new Github.Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs\n        {\n            ProtectedBranches = true,\n            CustomBranchPolicies = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := github.GetUser(ctx, \u0026github.GetUserArgs{\n\t\t\tUsername: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryEnvironment(ctx, \"exampleRepositoryEnvironment\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tEnvironment: pulumi.String(\"example\"),\n\t\t\tRepository:  exampleRepository.Name,\n\t\t\tReviewers: github.RepositoryEnvironmentReviewerArray{\n\t\t\t\t\u0026github.RepositoryEnvironmentReviewerArgs{\n\t\t\t\t\tUsers: pulumi.IntArray{\n\t\t\t\t\t\t*pulumi.String(current.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeploymentBranchPolicy: \u0026github.RepositoryEnvironmentDeploymentBranchPolicyArgs{\n\t\t\t\tProtectedBranches:    pulumi.Bool(true),\n\t\t\t\tCustomBranchPolicies: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUserArgs;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryEnvironment;\nimport com.pulumi.github.RepositoryEnvironmentArgs;\nimport com.pulumi.github.inputs.RepositoryEnvironmentReviewerArgs;\nimport com.pulumi.github.inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = GithubFunctions.getUser(GetUserArgs.builder()\n            .username(\"\")\n            .build());\n\n        var exampleRepository = new Repository(\"exampleRepository\", RepositoryArgs.builder()        \n            .description(\"My awesome codebase\")\n            .build());\n\n        var exampleRepositoryEnvironment = new RepositoryEnvironment(\"exampleRepositoryEnvironment\", RepositoryEnvironmentArgs.builder()        \n            .environment(\"example\")\n            .repository(exampleRepository.name())\n            .reviewers(RepositoryEnvironmentReviewerArgs.builder()\n                .users(current.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .deploymentBranchPolicy(RepositoryEnvironmentDeploymentBranchPolicyArgs.builder()\n                .protectedBranches(true)\n                .customBranchPolicies(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: github:Repository\n    properties:\n      description: My awesome codebase\n  exampleRepositoryEnvironment:\n    type: github:RepositoryEnvironment\n    properties:\n      environment: example\n      repository: ${exampleRepository.name}\n      reviewers:\n        - users:\n            - ${current.id}\n      deploymentBranchPolicy:\n        protectedBranches: true\n        customBranchPolicies: false\nvariables:\n  current:\n    fn::invoke:\n      Function: github:getUser\n      Arguments:\n        username:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Environment can be imported using an ID made up of `name` of the repository combined with the `environment` name of the environment, separated by a `:` character, e.g.\n\n```sh\n $ pulumi import github:index/repositoryEnvironment:RepositoryEnvironment daily terraform:daily\n```\n ",
            "properties": {
                "canAdminsBypass": {
                    "type": "boolean",
                    "description": "Can repository admins bypass the environment protections.  Defaults to `true`.\n"
                },
                "deploymentBranchPolicy": {
                    "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy",
                    "description": "The deployment branch policy configuration\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                    },
                    "description": "The environment reviewers configuration.\n"
                },
                "waitTimer": {
                    "type": "integer",
                    "description": "Amount of time to delay a job after the job is initially triggered.\n"
                }
            },
            "required": [
                "environment",
                "repository"
            ],
            "inputProperties": {
                "canAdminsBypass": {
                    "type": "boolean",
                    "description": "Can repository admins bypass the environment protections.  Defaults to `true`.\n"
                },
                "deploymentBranchPolicy": {
                    "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy",
                    "description": "The deployment branch policy configuration\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                    },
                    "description": "The environment reviewers configuration.\n"
                },
                "waitTimer": {
                    "type": "integer",
                    "description": "Amount of time to delay a job after the job is initially triggered.\n"
                }
            },
            "requiredInputs": [
                "environment",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryEnvironment resources.\n",
                "properties": {
                    "canAdminsBypass": {
                        "type": "boolean",
                        "description": "Can repository admins bypass the environment protections.  Defaults to `true`.\n"
                    },
                    "deploymentBranchPolicy": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy",
                        "description": "The deployment branch policy configuration\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "reviewers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                        },
                        "description": "The environment reviewers configuration.\n"
                    },
                    "waitTimer": {
                        "type": "integer",
                        "description": "Amount of time to delay a job after the job is initially triggered.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryEnvironmentDeploymentPolicy:RepositoryEnvironmentDeploymentPolicy": {
            "description": "This resource allows you to create and manage environment deployment branch policies for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst current = github.getUser({\n    username: \"\",\n});\nconst testRepository = new github.Repository(\"testRepository\", {});\nconst testRepositoryEnvironment = new github.RepositoryEnvironment(\"testRepositoryEnvironment\", {\n    repository: testRepository.name,\n    environment: \"environment/test\",\n    waitTimer: 10000,\n    reviewers: [{\n        users: [current.then(current =\u003e current.id)],\n    }],\n    deploymentBranchPolicy: {\n        protectedBranches: false,\n        customBranchPolicies: true,\n    },\n});\nconst testRepositoryEnvironmentDeploymentPolicy = new github.RepositoryEnvironmentDeploymentPolicy(\"testRepositoryEnvironmentDeploymentPolicy\", {\n    repository: testRepository.name,\n    environment: testRepositoryEnvironment.environment,\n    branchPattern: \"releases/*\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ncurrent = github.get_user(username=\"\")\ntest_repository = github.Repository(\"testRepository\")\ntest_repository_environment = github.RepositoryEnvironment(\"testRepositoryEnvironment\",\n    repository=test_repository.name,\n    environment=\"environment/test\",\n    wait_timer=10000,\n    reviewers=[github.RepositoryEnvironmentReviewerArgs(\n        users=[current.id],\n    )],\n    deployment_branch_policy=github.RepositoryEnvironmentDeploymentBranchPolicyArgs(\n        protected_branches=False,\n        custom_branch_policies=True,\n    ))\ntest_repository_environment_deployment_policy = github.RepositoryEnvironmentDeploymentPolicy(\"testRepositoryEnvironmentDeploymentPolicy\",\n    repository=test_repository.name,\n    environment=test_repository_environment.environment,\n    branch_pattern=\"releases/*\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Github.GetUser.Invoke(new()\n    {\n        Username = \"\",\n    });\n\n    var testRepository = new Github.Repository(\"testRepository\");\n\n    var testRepositoryEnvironment = new Github.RepositoryEnvironment(\"testRepositoryEnvironment\", new()\n    {\n        Repository = testRepository.Name,\n        Environment = \"environment/test\",\n        WaitTimer = 10000,\n        Reviewers = new[]\n        {\n            new Github.Inputs.RepositoryEnvironmentReviewerArgs\n            {\n                Users = new[]\n                {\n                    current.Apply(getUserResult =\u003e getUserResult.Id),\n                },\n            },\n        },\n        DeploymentBranchPolicy = new Github.Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs\n        {\n            ProtectedBranches = false,\n            CustomBranchPolicies = true,\n        },\n    });\n\n    var testRepositoryEnvironmentDeploymentPolicy = new Github.RepositoryEnvironmentDeploymentPolicy(\"testRepositoryEnvironmentDeploymentPolicy\", new()\n    {\n        Repository = testRepository.Name,\n        Environment = testRepositoryEnvironment.Environment,\n        BranchPattern = \"releases/*\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := github.GetUser(ctx, \u0026github.GetUserArgs{\n\t\t\tUsername: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRepository, err := github.NewRepository(ctx, \"testRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRepositoryEnvironment, err := github.NewRepositoryEnvironment(ctx, \"testRepositoryEnvironment\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tRepository:  testRepository.Name,\n\t\t\tEnvironment: pulumi.String(\"environment/test\"),\n\t\t\tWaitTimer:   pulumi.Int(10000),\n\t\t\tReviewers: github.RepositoryEnvironmentReviewerArray{\n\t\t\t\t\u0026github.RepositoryEnvironmentReviewerArgs{\n\t\t\t\t\tUsers: pulumi.IntArray{\n\t\t\t\t\t\t*pulumi.String(current.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeploymentBranchPolicy: \u0026github.RepositoryEnvironmentDeploymentBranchPolicyArgs{\n\t\t\t\tProtectedBranches:    pulumi.Bool(false),\n\t\t\t\tCustomBranchPolicies: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryEnvironmentDeploymentPolicy(ctx, \"testRepositoryEnvironmentDeploymentPolicy\", \u0026github.RepositoryEnvironmentDeploymentPolicyArgs{\n\t\t\tRepository:    testRepository.Name,\n\t\t\tEnvironment:   testRepositoryEnvironment.Environment,\n\t\t\tBranchPattern: pulumi.String(\"releases/*\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUserArgs;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryEnvironment;\nimport com.pulumi.github.RepositoryEnvironmentArgs;\nimport com.pulumi.github.inputs.RepositoryEnvironmentReviewerArgs;\nimport com.pulumi.github.inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs;\nimport com.pulumi.github.RepositoryEnvironmentDeploymentPolicy;\nimport com.pulumi.github.RepositoryEnvironmentDeploymentPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = GithubFunctions.getUser(GetUserArgs.builder()\n            .username(\"\")\n            .build());\n\n        var testRepository = new Repository(\"testRepository\");\n\n        var testRepositoryEnvironment = new RepositoryEnvironment(\"testRepositoryEnvironment\", RepositoryEnvironmentArgs.builder()        \n            .repository(testRepository.name())\n            .environment(\"environment/test\")\n            .waitTimer(10000)\n            .reviewers(RepositoryEnvironmentReviewerArgs.builder()\n                .users(current.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .deploymentBranchPolicy(RepositoryEnvironmentDeploymentBranchPolicyArgs.builder()\n                .protectedBranches(false)\n                .customBranchPolicies(true)\n                .build())\n            .build());\n\n        var testRepositoryEnvironmentDeploymentPolicy = new RepositoryEnvironmentDeploymentPolicy(\"testRepositoryEnvironmentDeploymentPolicy\", RepositoryEnvironmentDeploymentPolicyArgs.builder()        \n            .repository(testRepository.name())\n            .environment(testRepositoryEnvironment.environment())\n            .branchPattern(\"releases/*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRepository:\n    type: github:Repository\n  testRepositoryEnvironment:\n    type: github:RepositoryEnvironment\n    properties:\n      repository: ${testRepository.name}\n      environment: environment/test\n      waitTimer: 10000\n      reviewers:\n        - users:\n            - ${current.id}\n      deploymentBranchPolicy:\n        protectedBranches: false\n        customBranchPolicies: true\n  testRepositoryEnvironmentDeploymentPolicy:\n    type: github:RepositoryEnvironmentDeploymentPolicy\n    properties:\n      repository: ${testRepository.name}\n      environment: ${testRepositoryEnvironment.environment}\n      branchPattern: releases/*\nvariables:\n  current:\n    fn::invoke:\n      Function: github:getUser\n      Arguments:\n        username:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Environment Deployment Policy can be imported using an ID made up of `name` of the repository combined with the `environment` name of the environment with the `Id` of the deployment policy, separated by a `:` character, e.g.\n\n```sh\n $ pulumi import github:index/repositoryEnvironmentDeploymentPolicy:RepositoryEnvironmentDeploymentPolicy daily terraform:daily:123456\n```\n ",
            "properties": {
                "branchPattern": {
                    "type": "string",
                    "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n"
                }
            },
            "required": [
                "branchPattern",
                "environment",
                "repository"
            ],
            "inputProperties": {
                "branchPattern": {
                    "type": "string",
                    "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "branchPattern",
                "environment",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryEnvironmentDeploymentPolicy resources.\n",
                "properties": {
                    "branchPattern": {
                        "type": "string",
                        "description": "The name pattern that branches must match in order to deploy to the environment.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryFile:RepositoryFile": {
            "description": "This resource allows you to create and manage files within a\nGitHub repository.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst fooRepository = new github.Repository(\"fooRepository\", {autoInit: true});\nconst fooRepositoryFile = new github.RepositoryFile(\"fooRepositoryFile\", {\n    repository: fooRepository.name,\n    branch: \"main\",\n    file: \".gitignore\",\n    content: \"**/*.tfstate\",\n    commitMessage: \"Managed by Terraform\",\n    commitAuthor: \"Terraform User\",\n    commitEmail: \"terraform@example.com\",\n    overwriteOnCreate: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo_repository = github.Repository(\"fooRepository\", auto_init=True)\nfoo_repository_file = github.RepositoryFile(\"fooRepositoryFile\",\n    repository=foo_repository.name,\n    branch=\"main\",\n    file=\".gitignore\",\n    content=\"**/*.tfstate\",\n    commit_message=\"Managed by Terraform\",\n    commit_author=\"Terraform User\",\n    commit_email=\"terraform@example.com\",\n    overwrite_on_create=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooRepository = new Github.Repository(\"fooRepository\", new()\n    {\n        AutoInit = true,\n    });\n\n    var fooRepositoryFile = new Github.RepositoryFile(\"fooRepositoryFile\", new()\n    {\n        Repository = fooRepository.Name,\n        Branch = \"main\",\n        File = \".gitignore\",\n        Content = \"**/*.tfstate\",\n        CommitMessage = \"Managed by Terraform\",\n        CommitAuthor = \"Terraform User\",\n        CommitEmail = \"terraform@example.com\",\n        OverwriteOnCreate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooRepository, err := github.NewRepository(ctx, \"fooRepository\", \u0026github.RepositoryArgs{\n\t\t\tAutoInit: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryFile(ctx, \"fooRepositoryFile\", \u0026github.RepositoryFileArgs{\n\t\t\tRepository:        fooRepository.Name,\n\t\t\tBranch:            pulumi.String(\"main\"),\n\t\t\tFile:              pulumi.String(\".gitignore\"),\n\t\t\tContent:           pulumi.String(\"**/*.tfstate\"),\n\t\t\tCommitMessage:     pulumi.String(\"Managed by Terraform\"),\n\t\t\tCommitAuthor:      pulumi.String(\"Terraform User\"),\n\t\t\tCommitEmail:       pulumi.String(\"terraform@example.com\"),\n\t\t\tOverwriteOnCreate: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryFile;\nimport com.pulumi.github.RepositoryFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooRepository = new Repository(\"fooRepository\", RepositoryArgs.builder()        \n            .autoInit(true)\n            .build());\n\n        var fooRepositoryFile = new RepositoryFile(\"fooRepositoryFile\", RepositoryFileArgs.builder()        \n            .repository(fooRepository.name())\n            .branch(\"main\")\n            .file(\".gitignore\")\n            .content(\"**/*.tfstate\")\n            .commitMessage(\"Managed by Terraform\")\n            .commitAuthor(\"Terraform User\")\n            .commitEmail(\"terraform@example.com\")\n            .overwriteOnCreate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooRepository:\n    type: github:Repository\n    properties:\n      autoInit: true\n  fooRepositoryFile:\n    type: github:RepositoryFile\n    properties:\n      repository: ${fooRepository.name}\n      branch: main\n      file: .gitignore\n      content: '**/*.tfstate'\n      commitMessage: Managed by Terraform\n      commitAuthor: Terraform User\n      commitEmail: terraform@example.com\n      overwriteOnCreate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository files can be imported using a combination of the `repo` and `file`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore\n```\n To import a file from a branch other than the default branch, append `:` and the branch name, e.g.\n\n```sh\n $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore:dev\n```\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to the repository's default branch).\nThe branch must already exist, it will not be created if it does not already exist.\n"
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author name to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.\n"
                },
                "commitEmail": {
                    "type": "string",
                    "description": "Committer email address to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "commitSha": {
                    "type": "string",
                    "description": "The SHA of the commit that modified the file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n"
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files. If set to `true` it will overwrite an existing file with the same name. If set to `false` it will fail if there is an existing file with the same name.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "The name of the commit/branch/tag.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the file in.\n"
                },
                "sha": {
                    "type": "string",
                    "description": "The SHA blob of the file.\n"
                }
            },
            "required": [
                "commitMessage",
                "commitSha",
                "content",
                "file",
                "ref",
                "repository",
                "sha"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to the repository's default branch).\nThe branch must already exist, it will not be created if it does not already exist.\n",
                    "willReplaceOnChanges": true
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author name to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.\n"
                },
                "commitEmail": {
                    "type": "string",
                    "description": "Committer email address to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n",
                    "willReplaceOnChanges": true
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files. If set to `true` it will overwrite an existing file with the same name. If set to `false` it will fail if there is an existing file with the same name.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the file in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "file",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryFile resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch (defaults to the repository's default branch).\nThe branch must already exist, it will not be created if it does not already exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "commitAuthor": {
                        "type": "string",
                        "description": "Committer author name to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.\n"
                    },
                    "commitEmail": {
                        "type": "string",
                        "description": "Committer email address to use. **NOTE:** GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message when adding or updating the managed file.\n"
                    },
                    "commitSha": {
                        "type": "string",
                        "description": "The SHA of the commit that modified the file.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The path of the file to manage.\n",
                        "willReplaceOnChanges": true
                    },
                    "overwriteOnCreate": {
                        "type": "boolean",
                        "description": "Enable overwriting existing files. If set to `true` it will overwrite an existing file with the same name. If set to `false` it will fail if there is an existing file with the same name.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The name of the commit/branch/tag.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to create the file in.\n",
                        "willReplaceOnChanges": true
                    },
                    "sha": {
                        "type": "string",
                        "description": "The SHA blob of the file.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryMilestone:RepositoryMilestone": {
            "description": "Provides a GitHub repository milestone resource.\n\nThis resource allows you to create and manage milestones for a GitHub Repository within an organization or user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a milestone for a repository\nconst example = new github.RepositoryMilestone(\"example\", {\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n    title: \"v1.1.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a milestone for a repository\nexample = github.RepositoryMilestone(\"example\",\n    owner=\"example-owner\",\n    repository=\"example-repository\",\n    title=\"v1.1.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a milestone for a repository\n    var example = new Github.RepositoryMilestone(\"example\", new()\n    {\n        Owner = \"example-owner\",\n        Repository = \"example-repository\",\n        Title = \"v1.1.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryMilestone(ctx, \"example\", \u0026github.RepositoryMilestoneArgs{\n\t\t\tOwner:      pulumi.String(\"example-owner\"),\n\t\t\tRepository: pulumi.String(\"example-repository\"),\n\t\t\tTitle:      pulumi.String(\"v1.1.0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryMilestone;\nimport com.pulumi.github.RepositoryMilestoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RepositoryMilestone(\"example\", RepositoryMilestoneArgs.builder()        \n            .owner(\"example-owner\")\n            .repository(\"example-repository\")\n            .title(\"v1.1.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a milestone for a repository\n  example:\n    type: github:RepositoryMilestone\n    properties:\n      owner: example-owner\n      repository: example-repository\n      title: v1.1.0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA GitHub Repository Milestone can be imported using an ID made up of `owner/repository/number`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryMilestone:RepositoryMilestone example example-owner/example-repository/1\n```\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the milestone.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the milestone.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the GitHub Repository.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the GitHub Repository.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the milestone.\n"
                }
            },
            "required": [
                "number",
                "owner",
                "repository",
                "title"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the milestone.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the GitHub Repository.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the GitHub Repository.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the milestone.\n"
                }
            },
            "requiredInputs": [
                "owner",
                "repository",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryMilestone resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the milestone.\n"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the milestone.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the GitHub Repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the GitHub Repository.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the milestone.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryProject:RepositoryProject": {
            "description": "This resource allows you to create and manage projects for GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    hasProjects: true,\n});\nconst project = new github.RepositoryProject(\"project\", {\n    body: \"This is a repository project.\",\n    repository: example.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    has_projects=True)\nproject = github.RepositoryProject(\"project\",\n    body=\"This is a repository project.\",\n    repository=example.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.Repository(\"example\", new()\n    {\n        Description = \"My awesome codebase\",\n        HasProjects = true,\n    });\n\n    var project = new Github.RepositoryProject(\"project\", new()\n    {\n        Body = \"This is a repository project.\",\n        Repository = example.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tHasProjects: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryProject(ctx, \"project\", \u0026github.RepositoryProjectArgs{\n\t\t\tBody:       pulumi.String(\"This is a repository project.\"),\n\t\t\tRepository: example.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryProject;\nimport com.pulumi.github.RepositoryProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Repository(\"example\", RepositoryArgs.builder()        \n            .description(\"My awesome codebase\")\n            .hasProjects(true)\n            .build());\n\n        var project = new RepositoryProject(\"project\", RepositoryProjectArgs.builder()        \n            .body(\"This is a repository project.\")\n            .repository(example.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:Repository\n    properties:\n      description: My awesome codebase\n      hasProjects: true\n  project:\n    type: github:RepositoryProject\n    properties:\n      body: This is a repository project.\n      repository: ${example.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the project\n"
                }
            },
            "required": [
                "etag",
                "name",
                "repository",
                "url"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the project.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryProject resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the project.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryPullRequest:RepositoryPullRequest": {
            "description": "This resource allows you to create and manage PullRequests for repositories within your GitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.RepositoryPullRequest(\"example\", {\n    baseRef: \"main\",\n    baseRepository: \"example-repository\",\n    body: \"This will change everything\",\n    headRef: \"feature-branch\",\n    title: \"My newest feature\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.RepositoryPullRequest(\"example\",\n    base_ref=\"main\",\n    base_repository=\"example-repository\",\n    body=\"This will change everything\",\n    head_ref=\"feature-branch\",\n    title=\"My newest feature\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.RepositoryPullRequest(\"example\", new()\n    {\n        BaseRef = \"main\",\n        BaseRepository = \"example-repository\",\n        Body = \"This will change everything\",\n        HeadRef = \"feature-branch\",\n        Title = \"My newest feature\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryPullRequest(ctx, \"example\", \u0026github.RepositoryPullRequestArgs{\n\t\t\tBaseRef:        pulumi.String(\"main\"),\n\t\t\tBaseRepository: pulumi.String(\"example-repository\"),\n\t\t\tBody:           pulumi.String(\"This will change everything\"),\n\t\t\tHeadRef:        pulumi.String(\"feature-branch\"),\n\t\t\tTitle:          pulumi.String(\"My newest feature\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryPullRequest;\nimport com.pulumi.github.RepositoryPullRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RepositoryPullRequest(\"example\", RepositoryPullRequestArgs.builder()        \n            .baseRef(\"main\")\n            .baseRepository(\"example-repository\")\n            .body(\"This will change everything\")\n            .headRef(\"feature-branch\")\n            .title(\"My newest feature\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:RepositoryPullRequest\n    properties:\n      baseRef: main\n      baseRepository: example-repository\n      body: This will change everything\n      headRef: feature-branch\n      title: My newest feature\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "baseRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the base of the Pull Request.\n"
                },
                "baseRepository": {
                    "type": "string",
                    "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                },
                "baseSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request base.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n"
                },
                "draft": {
                    "type": "boolean",
                    "description": "Indicates Whether this Pull Request is a draft.\n"
                },
                "headRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the head of the Pull Request.\n"
                },
                "headSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request head.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names set on the Pull Request.\n"
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the Pull Request within the repository.\n"
                },
                "openedAt": {
                    "type": "integer",
                    "description": "Unix timestamp indicating the Pull Request creation time.\n"
                },
                "openedBy": {
                    "type": "string",
                    "description": "GitHub login of the user who opened the Pull Request.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                },
                "state": {
                    "type": "string",
                    "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp of the last Pull Request update.\n"
                }
            },
            "required": [
                "baseRef",
                "baseRepository",
                "baseSha",
                "draft",
                "headRef",
                "headSha",
                "labels",
                "number",
                "openedAt",
                "openedBy",
                "state",
                "title",
                "updatedAt"
            ],
            "inputProperties": {
                "baseRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the base of the Pull Request.\n"
                },
                "baseRepository": {
                    "type": "string",
                    "description": "Name of the base repository to retrieve the Pull Requests from.\n",
                    "willReplaceOnChanges": true
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n"
                },
                "headRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the head of the Pull Request.\n",
                    "willReplaceOnChanges": true
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the repository. If not provided, the provider's default owner is used.\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n"
                }
            },
            "requiredInputs": [
                "baseRef",
                "baseRepository",
                "headRef",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPullRequest resources.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the branch serving as the base of the Pull Request.\n"
                    },
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Requests from.\n",
                        "willReplaceOnChanges": true
                    },
                    "baseSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request base.\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the Pull Request.\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Indicates Whether this Pull Request is a draft.\n"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "Name of the branch serving as the head of the Pull Request.\n",
                        "willReplaceOnChanges": true
                    },
                    "headSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request head.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names set on the Pull Request.\n"
                    },
                    "maintainerCanModify": {
                        "type": "boolean",
                        "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the Pull Request within the repository.\n"
                    },
                    "openedAt": {
                        "type": "integer",
                        "description": "Unix timestamp indicating the Pull Request creation time.\n"
                    },
                    "openedBy": {
                        "type": "string",
                        "description": "GitHub login of the user who opened the Pull Request.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Pull Request.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp of the last Pull Request update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryRuleset:RepositoryRuleset": {
            "description": "Creates a GitHub repository ruleset.\n\nThis resource allows you to create and manage rulesets on the repository level. When applied, a new ruleset will be created. When destroyed, that ruleset will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {description: \"Example repository\"});\nconst exampleRepositoryRuleset = new github.RepositoryRuleset(\"exampleRepositoryRuleset\", {\n    repository: exampleRepository.name,\n    target: \"branch\",\n    enforcement: \"active\",\n    conditions: {\n        refName: {\n            includes: [\"~ALL\"],\n            excludes: [],\n        },\n    },\n    bypassActors: [{\n        actorId: 13473,\n        actorType: \"Integration\",\n        bypassMode: \"always\",\n    }],\n    rules: {\n        creation: true,\n        update: true,\n        deletion: true,\n        requiredLinearHistory: true,\n        requiredSignatures: true,\n        requiredDeployments: {\n            requiredDeploymentEnvironments: [\"test\"],\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\", description=\"Example repository\")\nexample_repository_ruleset = github.RepositoryRuleset(\"exampleRepositoryRuleset\",\n    repository=example_repository.name,\n    target=\"branch\",\n    enforcement=\"active\",\n    conditions=github.RepositoryRulesetConditionsArgs(\n        ref_name=github.RepositoryRulesetConditionsRefNameArgs(\n            includes=[\"~ALL\"],\n            excludes=[],\n        ),\n    ),\n    bypass_actors=[github.RepositoryRulesetBypassActorArgs(\n        actor_id=13473,\n        actor_type=\"Integration\",\n        bypass_mode=\"always\",\n    )],\n    rules=github.RepositoryRulesetRulesArgs(\n        creation=True,\n        update=True,\n        deletion=True,\n        required_linear_history=True,\n        required_signatures=True,\n        required_deployments=github.RepositoryRulesetRulesRequiredDeploymentsArgs(\n            required_deployment_environments=[\"test\"],\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new Github.Repository(\"exampleRepository\", new()\n    {\n        Description = \"Example repository\",\n    });\n\n    var exampleRepositoryRuleset = new Github.RepositoryRuleset(\"exampleRepositoryRuleset\", new()\n    {\n        Repository = exampleRepository.Name,\n        Target = \"branch\",\n        Enforcement = \"active\",\n        Conditions = new Github.Inputs.RepositoryRulesetConditionsArgs\n        {\n            RefName = new Github.Inputs.RepositoryRulesetConditionsRefNameArgs\n            {\n                Includes = new[]\n                {\n                    \"~ALL\",\n                },\n                Excludes = new() { },\n            },\n        },\n        BypassActors = new[]\n        {\n            new Github.Inputs.RepositoryRulesetBypassActorArgs\n            {\n                ActorId = 13473,\n                ActorType = \"Integration\",\n                BypassMode = \"always\",\n            },\n        },\n        Rules = new Github.Inputs.RepositoryRulesetRulesArgs\n        {\n            Creation = true,\n            Update = true,\n            Deletion = true,\n            RequiredLinearHistory = true,\n            RequiredSignatures = true,\n            RequiredDeployments = new Github.Inputs.RepositoryRulesetRulesRequiredDeploymentsArgs\n            {\n                RequiredDeploymentEnvironments = new[]\n                {\n                    \"test\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"Example repository\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryRuleset(ctx, \"exampleRepositoryRuleset\", \u0026github.RepositoryRulesetArgs{\n\t\t\tRepository:  exampleRepository.Name,\n\t\t\tTarget:      pulumi.String(\"branch\"),\n\t\t\tEnforcement: pulumi.String(\"active\"),\n\t\t\tConditions: \u0026github.RepositoryRulesetConditionsArgs{\n\t\t\t\tRefName: \u0026github.RepositoryRulesetConditionsRefNameArgs{\n\t\t\t\t\tIncludes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"~ALL\"),\n\t\t\t\t\t},\n\t\t\t\t\tExcludes: pulumi.StringArray{},\n\t\t\t\t},\n\t\t\t},\n\t\t\tBypassActors: github.RepositoryRulesetBypassActorArray{\n\t\t\t\t\u0026github.RepositoryRulesetBypassActorArgs{\n\t\t\t\t\tActorId:    pulumi.Int(13473),\n\t\t\t\t\tActorType:  pulumi.String(\"Integration\"),\n\t\t\t\t\tBypassMode: pulumi.String(\"always\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRules: \u0026github.RepositoryRulesetRulesArgs{\n\t\t\t\tCreation:              pulumi.Bool(true),\n\t\t\t\tUpdate:                pulumi.Bool(true),\n\t\t\t\tDeletion:              pulumi.Bool(true),\n\t\t\t\tRequiredLinearHistory: pulumi.Bool(true),\n\t\t\t\tRequiredSignatures:    pulumi.Bool(true),\n\t\t\t\tRequiredDeployments: \u0026github.RepositoryRulesetRulesRequiredDeploymentsArgs{\n\t\t\t\t\tRequiredDeploymentEnvironments: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"test\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryRuleset;\nimport com.pulumi.github.RepositoryRulesetArgs;\nimport com.pulumi.github.inputs.RepositoryRulesetConditionsArgs;\nimport com.pulumi.github.inputs.RepositoryRulesetConditionsRefNameArgs;\nimport com.pulumi.github.inputs.RepositoryRulesetBypassActorArgs;\nimport com.pulumi.github.inputs.RepositoryRulesetRulesArgs;\nimport com.pulumi.github.inputs.RepositoryRulesetRulesRequiredDeploymentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\", RepositoryArgs.builder()        \n            .description(\"Example repository\")\n            .build());\n\n        var exampleRepositoryRuleset = new RepositoryRuleset(\"exampleRepositoryRuleset\", RepositoryRulesetArgs.builder()        \n            .repository(exampleRepository.name())\n            .target(\"branch\")\n            .enforcement(\"active\")\n            .conditions(RepositoryRulesetConditionsArgs.builder()\n                .refName(RepositoryRulesetConditionsRefNameArgs.builder()\n                    .includes(\"~ALL\")\n                    .excludes()\n                    .build())\n                .build())\n            .bypassActors(RepositoryRulesetBypassActorArgs.builder()\n                .actorId(13473)\n                .actorType(\"Integration\")\n                .bypassMode(\"always\")\n                .build())\n            .rules(RepositoryRulesetRulesArgs.builder()\n                .creation(true)\n                .update(true)\n                .deletion(true)\n                .requiredLinearHistory(true)\n                .requiredSignatures(true)\n                .requiredDeployments(RepositoryRulesetRulesRequiredDeploymentsArgs.builder()\n                    .requiredDeploymentEnvironments(\"test\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: github:Repository\n    properties:\n      description: Example repository\n  exampleRepositoryRuleset:\n    type: github:RepositoryRuleset\n    properties:\n      repository: ${exampleRepository.name}\n      target: branch\n      enforcement: active\n      conditions:\n        refName:\n          includes:\n            - ~ALL\n          excludes: []\n      bypassActors:\n        - actorId: 13473\n          actorType: Integration\n          bypassMode: always\n      rules:\n        creation: true\n        update: true\n        deletion: true\n        requiredLinearHistory: true\n        requiredSignatures: true\n        requiredDeployments:\n          requiredDeploymentEnvironments:\n            - test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Rulesets can be imported using the GitHub repository name and ruleset ID e.g.\n\n```sh\n $ pulumi import github:index/repositoryRuleset:RepositoryRuleset example example:12345`\n```\n\n ",
            "properties": {
                "bypassActors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryRulesetBypassActor:RepositoryRulesetBypassActor"
                    },
                    "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                },
                "conditions": {
                    "$ref": "#/types/github:index/RepositoryRulesetConditions:RepositoryRulesetConditions",
                    "description": "(Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)\n"
                },
                "enforcement": {
                    "type": "string",
                    "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "(String) GraphQL global node id for use with v4 API.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "(String) Name of the repository to apply rulset to.\n"
                },
                "rules": {
                    "$ref": "#/types/github:index/RepositoryRulesetRules:RepositoryRulesetRules",
                    "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                },
                "rulesetId": {
                    "type": "integer",
                    "description": "(Number) GitHub ID for the ruleset.\n"
                },
                "target": {
                    "type": "string",
                    "description": "(String) Possible values are `branch` and `tag`.\n"
                }
            },
            "required": [
                "enforcement",
                "etag",
                "name",
                "nodeId",
                "rules",
                "rulesetId",
                "target"
            ],
            "inputProperties": {
                "bypassActors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryRulesetBypassActor:RepositoryRulesetBypassActor"
                    },
                    "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                },
                "conditions": {
                    "$ref": "#/types/github:index/RepositoryRulesetConditions:RepositoryRulesetConditions",
                    "description": "(Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)\n"
                },
                "enforcement": {
                    "type": "string",
                    "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The name of the ruleset.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "(String) Name of the repository to apply rulset to.\n"
                },
                "rules": {
                    "$ref": "#/types/github:index/RepositoryRulesetRules:RepositoryRulesetRules",
                    "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                },
                "target": {
                    "type": "string",
                    "description": "(String) Possible values are `branch` and `tag`.\n"
                }
            },
            "requiredInputs": [
                "enforcement",
                "rules",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryRuleset resources.\n",
                "properties": {
                    "bypassActors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryRulesetBypassActor:RepositoryRulesetBypassActor"
                        },
                        "description": "(Block List) The actors that can bypass the rules in this ruleset. (see below for nested schema)\n"
                    },
                    "conditions": {
                        "$ref": "#/types/github:index/RepositoryRulesetConditions:RepositoryRulesetConditions",
                        "description": "(Block List, Max: 1) Parameters for a repository ruleset ref name condition. (see below for nested schema)\n"
                    },
                    "enforcement": {
                        "type": "string",
                        "description": "(String) Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for owners of type `organization`.\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The name of the ruleset.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "(String) GraphQL global node id for use with v4 API.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "(String) Name of the repository to apply rulset to.\n"
                    },
                    "rules": {
                        "$ref": "#/types/github:index/RepositoryRulesetRules:RepositoryRulesetRules",
                        "description": "(Block List, Min: 1, Max: 1) Rules within the ruleset. (see below for nested schema)\n"
                    },
                    "rulesetId": {
                        "type": "integer",
                        "description": "(Number) GitHub ID for the ruleset.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "(String) Possible values are `branch` and `tag`.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryTagProtection:RepositoryTagProtection": {
            "description": "This resource allows you to create and manage a repository tag protection for repositories within your GitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.RepositoryTagProtection(\"example\", {\n    pattern: \"v*\",\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.RepositoryTagProtection(\"example\",\n    pattern=\"v*\",\n    repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.RepositoryTagProtection(\"example\", new()\n    {\n        Pattern = \"v*\",\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryTagProtection(ctx, \"example\", \u0026github.RepositoryTagProtectionArgs{\n\t\t\tPattern:    pulumi.String(\"v*\"),\n\t\t\tRepository: pulumi.String(\"example-repository\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.RepositoryTagProtection;\nimport com.pulumi.github.RepositoryTagProtectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RepositoryTagProtection(\"example\", RepositoryTagProtectionArgs.builder()        \n            .pattern(\"v*\")\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:RepositoryTagProtection\n    properties:\n      pattern: v*\n      repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository tag protections can be imported using the `name` of the repository, combined with the `id` of the tag protection, separated by a `/` character. The `id` of the tag protection can be found using the [GitHub API](https://docs.github.com/en/rest/repos/tags#list-tag-protection-states-for-a-repository).\n\nImporting uses the name of the repository, as well as the ID of the tag protection, e.g.\n\n```sh\n $ pulumi import github:index/repositoryTagProtection:RepositoryTagProtection terraform my-repo/31077\n```\n ",
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the tag to protect.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository to add the tag protection to.\n"
                },
                "tagProtectionId": {
                    "type": "integer",
                    "description": "The ID of the tag protection.\n"
                }
            },
            "required": [
                "pattern",
                "repository",
                "tagProtectionId"
            ],
            "inputProperties": {
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the tag to protect.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository to add the tag protection to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "pattern",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryTagProtection resources.\n",
                "properties": {
                    "pattern": {
                        "type": "string",
                        "description": "The pattern of the tag to protect.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to add the tag protection to.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagProtectionId": {
                        "type": "integer",
                        "description": "The ID of the tag protection.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryTopics:RepositoryTopics": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst testRepository = github.getRepository({\n    name: \"test\",\n});\nconst testRepositoryTopics = new github.RepositoryTopics(\"testRepositoryTopics\", {\n    repository: github_repository.test.name,\n    topics: [\n        \"topic-1\",\n        \"topic-2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest_repository = github.get_repository(name=\"test\")\ntest_repository_topics = github.RepositoryTopics(\"testRepositoryTopics\",\n    repository=github_repository[\"test\"][\"name\"],\n    topics=[\n        \"topic-1\",\n        \"topic-2\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testRepository = Github.GetRepository.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    var testRepositoryTopics = new Github.RepositoryTopics(\"testRepositoryTopics\", new()\n    {\n        Repository = github_repository.Test.Name,\n        Topics = new[]\n        {\n            \"topic-1\",\n            \"topic-2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryTopics(ctx, \"testRepositoryTopics\", \u0026github.RepositoryTopicsArgs{\n\t\t\tRepository: pulumi.Any(github_repository.Test.Name),\n\t\t\tTopics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"topic-1\"),\n\t\t\t\tpulumi.String(\"topic-2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.RepositoryTopics;\nimport com.pulumi.github.RepositoryTopicsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .name(\"test\")\n            .build());\n\n        var testRepositoryTopics = new RepositoryTopics(\"testRepositoryTopics\", RepositoryTopicsArgs.builder()        \n            .repository(github_repository.test().name())\n            .topics(            \n                \"topic-1\",\n                \"topic-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRepositoryTopics:\n    type: github:RepositoryTopics\n    properties:\n      repository: ${github_repository.test.name}\n      topics:\n        - topic-1\n        - topic-2\nvariables:\n  testRepository:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        name: test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository topics can be imported using the `name` of the repository.\n\n```sh\n $ pulumi import github:index/repositoryTopics:RepositoryTopics terraform terraform\n```\n ",
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "The repository name.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of topics to add to the repository.\n"
                }
            },
            "required": [
                "repository",
                "topics"
            ],
            "inputProperties": {
                "repository": {
                    "type": "string",
                    "description": "The repository name.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of topics to add to the repository.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "topics"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryTopics resources.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "The repository name.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of topics to add to the repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryWebhook:RepositoryWebhook": {
            "description": "This resource allows you to create and manage webhooks for repositories within your\nGitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = new github.Repository(\"repo\", {\n    description: \"Terraform acceptance tests\",\n    homepageUrl: \"http://example.com/\",\n    visibility: \"public\",\n});\nconst foo = new github.RepositoryWebhook(\"foo\", {\n    repository: repo.name,\n    configuration: {\n        url: \"https://google.de/\",\n        contentType: \"form\",\n        insecureSsl: false,\n    },\n    active: false,\n    events: [\"issues\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.Repository(\"repo\",\n    description=\"Terraform acceptance tests\",\n    homepage_url=\"http://example.com/\",\n    visibility=\"public\")\nfoo = github.RepositoryWebhook(\"foo\",\n    repository=repo.name,\n    configuration=github.RepositoryWebhookConfigurationArgs(\n        url=\"https://google.de/\",\n        content_type=\"form\",\n        insecure_ssl=False,\n    ),\n    active=False,\n    events=[\"issues\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = new Github.Repository(\"repo\", new()\n    {\n        Description = \"Terraform acceptance tests\",\n        HomepageUrl = \"http://example.com/\",\n        Visibility = \"public\",\n    });\n\n    var foo = new Github.RepositoryWebhook(\"foo\", new()\n    {\n        Repository = repo.Name,\n        Configuration = new Github.Inputs.RepositoryWebhookConfigurationArgs\n        {\n            Url = \"https://google.de/\",\n            ContentType = \"form\",\n            InsecureSsl = false,\n        },\n        Active = false,\n        Events = new[]\n        {\n            \"issues\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.NewRepository(ctx, \"repo\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"Terraform acceptance tests\"),\n\t\t\tHomepageUrl: pulumi.String(\"http://example.com/\"),\n\t\t\tVisibility:  pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryWebhook(ctx, \"foo\", \u0026github.RepositoryWebhookArgs{\n\t\t\tRepository: repo.Name,\n\t\t\tConfiguration: \u0026github.RepositoryWebhookConfigurationArgs{\n\t\t\t\tUrl:         pulumi.String(\"https://google.de/\"),\n\t\t\t\tContentType: pulumi.String(\"form\"),\n\t\t\t\tInsecureSsl: pulumi.Bool(false),\n\t\t\t},\n\t\t\tActive: pulumi.Bool(false),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"issues\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryArgs;\nimport com.pulumi.github.RepositoryWebhook;\nimport com.pulumi.github.RepositoryWebhookArgs;\nimport com.pulumi.github.inputs.RepositoryWebhookConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repo = new Repository(\"repo\", RepositoryArgs.builder()        \n            .description(\"Terraform acceptance tests\")\n            .homepageUrl(\"http://example.com/\")\n            .visibility(\"public\")\n            .build());\n\n        var foo = new RepositoryWebhook(\"foo\", RepositoryWebhookArgs.builder()        \n            .repository(repo.name())\n            .configuration(RepositoryWebhookConfigurationArgs.builder()\n                .url(\"https://google.de/\")\n                .contentType(\"form\")\n                .insecureSsl(false)\n                .build())\n            .active(false)\n            .events(\"issues\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repo:\n    type: github:Repository\n    properties:\n      description: Terraform acceptance tests\n      homepageUrl: http://example.com/\n      visibility: public\n  foo:\n    type: github:RepositoryWebhook\n    properties:\n      repository: ${repo.name}\n      configuration:\n        url: https://google.de/\n        contentType: form\n        insecureSsl: false\n      active: false\n      events:\n        - issues\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository webhooks can be imported using the `name` of the repository, combined with the `id` of the webhook, separated by a `/` character. The `id` of the webhook can be found in the URL of the webhook. For example`\"https://github.com/foo-org/foo-repo/settings/hooks/14711452\"`.\n\nImporting uses the name of the repository, as well as the ID of the webhook, e.g.\n\n```sh\n $ pulumi import github:index/repositoryWebhook:RepositoryWebhook terraform terraform/11235813\n```\n If secret is populated in the webhook's configuration, the value will be imported as \"********\".\n\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                    "description": "Configuration block for the webhook. Detailed below.\n"
                },
                "etag": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the webhook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the webhook.\n"
                }
            },
            "required": [
                "etag",
                "events",
                "repository",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                    "description": "Configuration block for the webhook. Detailed below.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the webhook.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "events",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryWebhook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                        "description": "Configuration block for the webhook. Detailed below.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the webhook.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the webhook.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/team:Team": {
            "description": "Provides a GitHub team resource.\n\nThis resource allows you to add/remove teams from your organization. When applied,\na new team will be created. When destroyed, that team will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a team to the organization\nconst someTeam = new github.Team(\"someTeam\", {\n    description: \"Some cool team\",\n    privacy: \"closed\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a team to the organization\nsome_team = github.Team(\"someTeam\",\n    description=\"Some cool team\",\n    privacy=\"closed\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a team to the organization\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n        Privacy = \"closed\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t\tPrivacy:     pulumi.String(\"closed\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .privacy(\"closed\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a team to the organization\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n      privacy: closed\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Teams can be imported using the GitHub team ID or name e.g.\n\n```sh\n $ pulumi import github:index/team:Team core 1234567\n```\n\n\n\n```sh\n $ pulumi import github:index/team:Team core Administrators\n```\n\n ",
            "properties": {
                "createDefaultMaintainer": {
                    "type": "boolean",
                    "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "etag": {
                    "type": "string"
                },
                "ldapDn": {
                    "type": "string",
                    "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                },
                "membersCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "The Node ID of the created team.\n"
                },
                "parentTeamId": {
                    "type": "string",
                    "description": "The ID or slug of the parent team, if this is a nested team.\n"
                },
                "parentTeamReadId": {
                    "type": "string",
                    "description": "The id of the parent team read in Github.\n"
                },
                "parentTeamReadSlug": {
                    "type": "string",
                    "description": "The id of the parent team read in Github.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the created team, which may or may not differ from `name`,\ndepending on whether `name` contains \"URL-unsafe\" characters.\nUseful when referencing the team in [`github.BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).\n"
                }
            },
            "required": [
                "etag",
                "membersCount",
                "name",
                "nodeId",
                "parentTeamReadId",
                "parentTeamReadSlug",
                "slug"
            ],
            "inputProperties": {
                "createDefaultMaintainer": {
                    "type": "boolean",
                    "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "ldapDn": {
                    "type": "string",
                    "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "parentTeamId": {
                    "type": "string",
                    "description": "The ID or slug of the parent team, if this is a nested team.\n"
                },
                "parentTeamReadId": {
                    "type": "string",
                    "description": "The id of the parent team read in Github.\n"
                },
                "parentTeamReadSlug": {
                    "type": "string",
                    "description": "The id of the parent team read in Github.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "createDefaultMaintainer": {
                        "type": "boolean",
                        "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the team.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "ldapDn": {
                        "type": "string",
                        "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                    },
                    "membersCount": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "The Node ID of the created team.\n"
                    },
                    "parentTeamId": {
                        "type": "string",
                        "description": "The ID or slug of the parent team, if this is a nested team.\n"
                    },
                    "parentTeamReadId": {
                        "type": "string",
                        "description": "The id of the parent team read in Github.\n"
                    },
                    "parentTeamReadSlug": {
                        "type": "string",
                        "description": "The id of the parent team read in Github.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the created team, which may or may not differ from `name`,\ndepending on whether `name` contains \"URL-unsafe\" characters.\nUseful when referencing the team in [`github.BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamMembers:TeamMembers": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a user to the organization\nconst membershipForSomeUser = new github.Membership(\"membershipForSomeUser\", {\n    username: \"SomeUser\",\n    role: \"member\",\n});\nconst membershipForAnotherUser = new github.Membership(\"membershipForAnotherUser\", {\n    username: \"AnotherUser\",\n    role: \"member\",\n});\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someTeamMembers = new github.TeamMembers(\"someTeamMembers\", {\n    teamId: someTeam.id,\n    members: [\n        {\n            username: \"SomeUser\",\n            role: \"maintainer\",\n        },\n        {\n            username: \"AnotherUser\",\n            role: \"member\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a user to the organization\nmembership_for_some_user = github.Membership(\"membershipForSomeUser\",\n    username=\"SomeUser\",\n    role=\"member\")\nmembership_for_another_user = github.Membership(\"membershipForAnotherUser\",\n    username=\"AnotherUser\",\n    role=\"member\")\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_team_members = github.TeamMembers(\"someTeamMembers\",\n    team_id=some_team.id,\n    members=[\n        github.TeamMembersMemberArgs(\n            username=\"SomeUser\",\n            role=\"maintainer\",\n        ),\n        github.TeamMembersMemberArgs(\n            username=\"AnotherUser\",\n            role=\"member\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a user to the organization\n    var membershipForSomeUser = new Github.Membership(\"membershipForSomeUser\", new()\n    {\n        Username = \"SomeUser\",\n        Role = \"member\",\n    });\n\n    var membershipForAnotherUser = new Github.Membership(\"membershipForAnotherUser\", new()\n    {\n        Username = \"AnotherUser\",\n        Role = \"member\",\n    });\n\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var someTeamMembers = new Github.TeamMembers(\"someTeamMembers\", new()\n    {\n        TeamId = someTeam.Id,\n        Members = new[]\n        {\n            new Github.Inputs.TeamMembersMemberArgs\n            {\n                Username = \"SomeUser\",\n                Role = \"maintainer\",\n            },\n            new Github.Inputs.TeamMembersMemberArgs\n            {\n                Username = \"AnotherUser\",\n                Role = \"member\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewMembership(ctx, \"membershipForSomeUser\", \u0026github.MembershipArgs{\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewMembership(ctx, \"membershipForAnotherUser\", \u0026github.MembershipArgs{\n\t\t\tUsername: pulumi.String(\"AnotherUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamMembers(ctx, \"someTeamMembers\", \u0026github.TeamMembersArgs{\n\t\t\tTeamId: someTeam.ID(),\n\t\t\tMembers: github.TeamMembersMemberArray{\n\t\t\t\t\u0026github.TeamMembersMemberArgs{\n\t\t\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\t\t\tRole:     pulumi.String(\"maintainer\"),\n\t\t\t\t},\n\t\t\t\t\u0026github.TeamMembersMemberArgs{\n\t\t\t\t\tUsername: pulumi.String(\"AnotherUser\"),\n\t\t\t\t\tRole:     pulumi.String(\"member\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Membership;\nimport com.pulumi.github.MembershipArgs;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.TeamMembers;\nimport com.pulumi.github.TeamMembersArgs;\nimport com.pulumi.github.inputs.TeamMembersMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var membershipForSomeUser = new Membership(\"membershipForSomeUser\", MembershipArgs.builder()        \n            .username(\"SomeUser\")\n            .role(\"member\")\n            .build());\n\n        var membershipForAnotherUser = new Membership(\"membershipForAnotherUser\", MembershipArgs.builder()        \n            .username(\"AnotherUser\")\n            .role(\"member\")\n            .build());\n\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var someTeamMembers = new TeamMembers(\"someTeamMembers\", TeamMembersArgs.builder()        \n            .teamId(someTeam.id())\n            .members(            \n                TeamMembersMemberArgs.builder()\n                    .username(\"SomeUser\")\n                    .role(\"maintainer\")\n                    .build(),\n                TeamMembersMemberArgs.builder()\n                    .username(\"AnotherUser\")\n                    .role(\"member\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a user to the organization\n  membershipForSomeUser:\n    type: github:Membership\n    properties:\n      username: SomeUser\n      role: member\n  membershipForAnotherUser:\n    type: github:Membership\n    properties:\n      username: AnotherUser\n      role: member\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  someTeamMembers:\n    type: github:TeamMembers\n    properties:\n      teamId: ${someTeam.id}\n      members:\n        - username: SomeUser\n          role: maintainer\n        - username: AnotherUser\n          role: member\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n~\u003e **Note** Although the team id or team slug can be used it is recommended to use the team id.\n\nUsing the team slug will result in terraform doing conversions between the team slug and team id.\n\nThis will cause team members associations to the team to be destroyed and recreated on import. GitHub Team Membership can be imported using the team ID team id or team slug, e.g.\n\n```sh\n $ pulumi import github:index/teamMembers:TeamMembers some_team 1234567\n```\n\n\n\n```sh\n $ pulumi import github:index/teamMembers:TeamMembers some_team Administrators\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamMembersMember:TeamMembersMember"
                    },
                    "description": "List of team members. See Members below for details.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id or the team slug\n\n\u003e **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.\n"
                }
            },
            "required": [
                "members",
                "teamId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamMembersMember:TeamMembersMember"
                    },
                    "description": "List of team members. See Members below for details.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team id or the team slug\n\n\u003e **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "members",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembers resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/TeamMembersMember:TeamMembersMember"
                        },
                        "description": "List of team members. See Members below for details.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team id or the team slug\n\n\u003e **Note** Although the team id or team slug can be used it is recommended to use the team id.  Using the team slug will cause the team members associations to the team to be destroyed and recreated if the team name is updated.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamMembership:TeamMembership": {
            "description": "Provides a GitHub team membership resource.\n\nThis resource allows you to add/remove users from teams in your organization. When applied,\nthe user will be added to the team. If the user hasn't accepted their invitation to the\norganization, they won't be part of the team until they do. When\ndestroyed, the user will be removed from the team.\n\n\u003e **Note** This resource is not compatible with `github.TeamMembers`. Use either `github.TeamMembers` or `github.TeamMembership`.\n\n\u003e **Note** Organization owners may not be set as \"members\" of a team; they may only be set as \"maintainers\". Attempting to set organization an owner to \"member\" of a may result in a `pulumi preview` diff that changes their status back to \"maintainer\".\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a user to the organization\nconst membershipForSomeUser = new github.Membership(\"membershipForSomeUser\", {\n    username: \"SomeUser\",\n    role: \"member\",\n});\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someTeamMembership = new github.TeamMembership(\"someTeamMembership\", {\n    teamId: someTeam.id,\n    username: \"SomeUser\",\n    role: \"member\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a user to the organization\nmembership_for_some_user = github.Membership(\"membershipForSomeUser\",\n    username=\"SomeUser\",\n    role=\"member\")\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_team_membership = github.TeamMembership(\"someTeamMembership\",\n    team_id=some_team.id,\n    username=\"SomeUser\",\n    role=\"member\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a user to the organization\n    var membershipForSomeUser = new Github.Membership(\"membershipForSomeUser\", new()\n    {\n        Username = \"SomeUser\",\n        Role = \"member\",\n    });\n\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var someTeamMembership = new Github.TeamMembership(\"someTeamMembership\", new()\n    {\n        TeamId = someTeam.Id,\n        Username = \"SomeUser\",\n        Role = \"member\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewMembership(ctx, \"membershipForSomeUser\", \u0026github.MembershipArgs{\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamMembership(ctx, \"someTeamMembership\", \u0026github.TeamMembershipArgs{\n\t\t\tTeamId:   someTeam.ID(),\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Membership;\nimport com.pulumi.github.MembershipArgs;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.TeamMembership;\nimport com.pulumi.github.TeamMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var membershipForSomeUser = new Membership(\"membershipForSomeUser\", MembershipArgs.builder()        \n            .username(\"SomeUser\")\n            .role(\"member\")\n            .build());\n\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var someTeamMembership = new TeamMembership(\"someTeamMembership\", TeamMembershipArgs.builder()        \n            .teamId(someTeam.id())\n            .username(\"SomeUser\")\n            .role(\"member\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a user to the organization\n  membershipForSomeUser:\n    type: github:Membership\n    properties:\n      username: SomeUser\n      role: member\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  someTeamMembership:\n    type: github:TeamMembership\n    properties:\n      teamId: ${someTeam.id}\n      username: SomeUser\n      role: member\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Team Membership can be imported using an ID made up of `teamid:username` or `teamname:username`, e.g.\n\n```sh\n $ pulumi import github:index/teamMembership:TeamMembership member 1234567:someuser\n```\n\n\n\n```sh\n $ pulumi import github:index/teamMembership:TeamMembership member Administrators:someuser\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the team.\n"
                }
            },
            "required": [
                "etag",
                "teamId",
                "username"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the team.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "teamId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembership resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GitHub team id or the GitHub team slug\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the team.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamRepository:TeamRepository": {
            "description": "\u003e Note: github.TeamRepository cannot be used in conjunction with github.RepositoryCollaborators or\nthey will fight over what your policy should be.\n\nThis resource manages relationships between teams and repositories\nin your GitHub organization.\n\nCreating this resource grants a particular team permissions on a\nparticular repository.\n\nThe repository and the team must both belong to the same organization\non GitHub. This resource does not actually *create* any repositories;\nto do that, see `github.Repository`.\n\nThis resource is non-authoritative, for managing ALL collaborators of a repo, use github.RepositoryCollaborators\ninstead.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a repository to the team\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someRepo = new github.Repository(\"someRepo\", {});\nconst someTeamRepo = new github.TeamRepository(\"someTeamRepo\", {\n    teamId: someTeam.id,\n    repository: someRepo.name,\n    permission: \"pull\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a repository to the team\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_repo = github.Repository(\"someRepo\")\nsome_team_repo = github.TeamRepository(\"someTeamRepo\",\n    team_id=some_team.id,\n    repository=some_repo.name,\n    permission=\"pull\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a repository to the team\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var someRepo = new Github.Repository(\"someRepo\");\n\n    var someTeamRepo = new Github.TeamRepository(\"someTeamRepo\", new()\n    {\n        TeamId = someTeam.Id,\n        Repository = someRepo.Name,\n        Permission = \"pull\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeRepo, err := github.NewRepository(ctx, \"someRepo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamRepository(ctx, \"someTeamRepo\", \u0026github.TeamRepositoryArgs{\n\t\t\tTeamId:     someTeam.ID(),\n\t\t\tRepository: someRepo.Name,\n\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.TeamRepository;\nimport com.pulumi.github.TeamRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var someRepo = new Repository(\"someRepo\");\n\n        var someTeamRepo = new TeamRepository(\"someTeamRepo\", TeamRepositoryArgs.builder()        \n            .teamId(someTeam.id())\n            .repository(someRepo.name())\n            .permission(\"pull\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a repository to the team\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  someRepo:\n    type: github:Repository\n  someTeamRepo:\n    type: github:TeamRepository\n    properties:\n      teamId: ${someTeam.id}\n      repository: ${someRepo.name}\n      permission: pull\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Team Repository can be imported using an ID made up of `team_id:repository` or `team_name:repository`, e.g.\n\n```sh\n $ pulumi import github:index/teamRepository:TeamRepository terraform_repo 1234567:terraform\n```\n\n\n\n```sh\n $ pulumi import github:index/teamRepository:TeamRepository terraform_repo Administrators:terraform\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "permission": {
                    "type": "string",
                    "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to add to the team.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                }
            },
            "required": [
                "etag",
                "repository",
                "teamId"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to add to the team.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamRepository resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, `admin` or the name of an existing [custom repository role](https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization) within the organisation. Defaults to `pull`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to add to the team.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GitHub team id or the GitHub team slug\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamSettings:TeamSettings": {
            "description": "This resource manages the team settings (in particular the request review delegation settings) within the organization\n\nCreating this resource will alter the team Code Review settings.\n\nThe team must both belong to the same organization configured in the provider on GitHub. \n\n\u003e **Note**: This resource relies on the v4 GraphQl GitHub API. If this API is not available, or the Stone Crop schema preview is not available, then this resource will not work as intended.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a repository to the team\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst codeReviewSettings = new github.TeamSettings(\"codeReviewSettings\", {\n    teamId: someTeam.id,\n    reviewRequestDelegation: {\n        algorithm: \"ROUND_ROBIN\",\n        memberCount: 1,\n        notify: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a repository to the team\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\ncode_review_settings = github.TeamSettings(\"codeReviewSettings\",\n    team_id=some_team.id,\n    review_request_delegation=github.TeamSettingsReviewRequestDelegationArgs(\n        algorithm=\"ROUND_ROBIN\",\n        member_count=1,\n        notify=True,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a repository to the team\n    var someTeam = new Github.Team(\"someTeam\", new()\n    {\n        Description = \"Some cool team\",\n    });\n\n    var codeReviewSettings = new Github.TeamSettings(\"codeReviewSettings\", new()\n    {\n        TeamId = someTeam.Id,\n        ReviewRequestDelegation = new Github.Inputs.TeamSettingsReviewRequestDelegationArgs\n        {\n            Algorithm = \"ROUND_ROBIN\",\n            MemberCount = 1,\n            Notify = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamSettings(ctx, \"codeReviewSettings\", \u0026github.TeamSettingsArgs{\n\t\t\tTeamId: someTeam.ID(),\n\t\t\tReviewRequestDelegation: \u0026github.TeamSettingsReviewRequestDelegationArgs{\n\t\t\t\tAlgorithm:   pulumi.String(\"ROUND_ROBIN\"),\n\t\t\t\tMemberCount: pulumi.Int(1),\n\t\t\t\tNotify:      pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Team;\nimport com.pulumi.github.TeamArgs;\nimport com.pulumi.github.TeamSettings;\nimport com.pulumi.github.TeamSettingsArgs;\nimport com.pulumi.github.inputs.TeamSettingsReviewRequestDelegationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var someTeam = new Team(\"someTeam\", TeamArgs.builder()        \n            .description(\"Some cool team\")\n            .build());\n\n        var codeReviewSettings = new TeamSettings(\"codeReviewSettings\", TeamSettingsArgs.builder()        \n            .teamId(someTeam.id())\n            .reviewRequestDelegation(TeamSettingsReviewRequestDelegationArgs.builder()\n                .algorithm(\"ROUND_ROBIN\")\n                .memberCount(1)\n                .notify(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a repository to the team\n  someTeam:\n    type: github:Team\n    properties:\n      description: Some cool team\n  codeReviewSettings:\n    type: github:TeamSettings\n    properties:\n      teamId: ${someTeam.id}\n      reviewRequestDelegation:\n        algorithm: ROUND_ROBIN\n        memberCount: 1\n        notify: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Teams can be imported using the GitHub team ID, or the team slug e.g.\n\n```sh\n $ pulumi import github:index/teamSettings:TeamSettings code_review_settings 1234567\n```\n or,\n\n```sh\n $ pulumi import github:index/teamSettings:TeamSettings code_review_settings SomeTeam\n```\n ",
            "properties": {
                "reviewRequestDelegation": {
                    "$ref": "#/types/github:index/TeamSettingsReviewRequestDelegation:TeamSettingsReviewRequestDelegation",
                    "description": "The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub's documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "The slug of the Team within the Organization.\n"
                },
                "teamUid": {
                    "type": "string",
                    "description": "The unique ID of the Team on GitHub. Corresponds to the ID of the 'github_team_settings' resource.\n"
                }
            },
            "required": [
                "teamId",
                "teamSlug",
                "teamUid"
            ],
            "inputProperties": {
                "reviewRequestDelegation": {
                    "$ref": "#/types/github:index/TeamSettingsReviewRequestDelegation:TeamSettingsReviewRequestDelegation",
                    "description": "The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub's documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamSettings resources.\n",
                "properties": {
                    "reviewRequestDelegation": {
                        "$ref": "#/types/github:index/TeamSettingsReviewRequestDelegation:TeamSettingsReviewRequestDelegation",
                        "description": "The settings for delegating code reviews to individuals on behalf of the team. If this block is present, even without any fields, then review request delegation will be enabled for the team. See GitHub Review Request Delegation below for details. See [GitHub's documentation](https://docs.github.com/en/organizations/organizing-members-into-teams/managing-code-review-settings-for-your-team#configuring-team-notifications) for more configuration details.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GitHub team id or the GitHub team slug\n",
                        "willReplaceOnChanges": true
                    },
                    "teamSlug": {
                        "type": "string",
                        "description": "The slug of the Team within the Organization.\n"
                    },
                    "teamUid": {
                        "type": "string",
                        "description": "The unique ID of the Team on GitHub. Corresponds to the ID of the 'github_team_settings' resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamSyncGroupMapping:TeamSyncGroupMapping": {
            "description": "This resource allows you to create and manage Identity Provider (IdP) group connections within your GitHub teams.\nYou must have team synchronization enabled for organizations owned by enterprise accounts.\n\nTo learn more about team synchronization between IdPs and GitHub, please refer to:\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/synchronizing-teams-between-your-identity-provider-and-github\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.TeamSyncGroupMapping;\nimport com.pulumi.github.TeamSyncGroupMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleGroups = GithubFunctions.getOrganizationTeamSyncGroups();\n\n        var exampleGroupMapping = new TeamSyncGroupMapping(\"exampleGroupMapping\", TeamSyncGroupMappingArgs.builder()        \n            .teamSlug(\"example\")\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Team Sync Group Mappings can be imported using the GitHub team `slug` e.g.\n\n```sh\n $ pulumi import github:index/teamSyncGroupMapping:TeamSyncGroupMapping example some_team\n```\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                    },
                    "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n\nThe `group` block consists of:\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the team\n"
                }
            },
            "required": [
                "etag",
                "teamSlug"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                    },
                    "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n\nThe `group` block consists of:\n",
                    "willReplaceOnChanges": true
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the team\n"
                }
            },
            "requiredInputs": [
                "teamSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamSyncGroupMapping resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                        },
                        "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n\nThe `group` block consists of:\n",
                        "willReplaceOnChanges": true
                    },
                    "teamSlug": {
                        "type": "string",
                        "description": "Slug of the team\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/userGpgKey:UserGpgKey": {
            "description": "Provides a GitHub user's GPG key resource.\n\nThis resource allows you to add/remove GPG keys from your user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.UserGpgKey(\"example\", {armoredPublicKey: `-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n`});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.UserGpgKey(\"example\", armored_public_key=\"\"\"-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.UserGpgKey(\"example\", new()\n    {\n        ArmoredPublicKey = @\"-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewUserGpgKey(ctx, \"example\", \u0026github.UserGpgKeyArgs{\n\t\t\tArmoredPublicKey: pulumi.String(\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.UserGpgKey;\nimport com.pulumi.github.UserGpgKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserGpgKey(\"example\", UserGpgKeyArgs.builder()        \n            .armoredPublicKey(\"\"\"\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:UserGpgKey\n    properties:\n      armoredPublicKey: |\n        -----BEGIN PGP PUBLIC KEY BLOCK-----\n        ...\n        -----END PGP PUBLIC KEY BLOCK-----\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGPG keys are not importable due to the fact that [API](https://developer.github.com/v3/users/gpg_keys/#gpg-keys) does not return previously uploaded GPG key. ",
            "properties": {
                "armoredPublicKey": {
                    "type": "string",
                    "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n"
                },
                "etag": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string",
                    "description": "The key ID of the GPG key, e.g. `3262EFF25BA0D270`\n"
                }
            },
            "required": [
                "armoredPublicKey",
                "etag",
                "keyId"
            ],
            "inputProperties": {
                "armoredPublicKey": {
                    "type": "string",
                    "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "armoredPublicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGpgKey resources.\n",
                "properties": {
                    "armoredPublicKey": {
                        "type": "string",
                        "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n",
                        "willReplaceOnChanges": true
                    },
                    "etag": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The key ID of the GPG key, e.g. `3262EFF25BA0D270`\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/userInvitationAccepter:UserInvitationAccepter": {
            "description": "Provides a resource to manage GitHub repository collaborator invitations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleRepositoryCollaborator = new github.RepositoryCollaborator(\"exampleRepositoryCollaborator\", {\n    repository: exampleRepository.name,\n    username: \"example-username\",\n    permission: \"push\",\n});\nconst invitee = new github.Provider(\"invitee\", {token: _var.invitee_token});\nconst exampleUserInvitationAccepter = new github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", {invitationId: exampleRepositoryCollaborator.invitationId}, {\n    provider: \"github.invitee\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_repository_collaborator = github.RepositoryCollaborator(\"exampleRepositoryCollaborator\",\n    repository=example_repository.name,\n    username=\"example-username\",\n    permission=\"push\")\ninvitee = github.Provider(\"invitee\", token=var[\"invitee_token\"])\nexample_user_invitation_accepter = github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", invitation_id=example_repository_collaborator.invitation_id,\nopts=pulumi.ResourceOptions(provider=\"github.invitee\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRepository = new Github.Repository(\"exampleRepository\");\n\n    var exampleRepositoryCollaborator = new Github.RepositoryCollaborator(\"exampleRepositoryCollaborator\", new()\n    {\n        Repository = exampleRepository.Name,\n        Username = \"example-username\",\n        Permission = \"push\",\n    });\n\n    var invitee = new Github.Provider(\"invitee\", new()\n    {\n        Token = @var.Invitee_token,\n    });\n\n    var exampleUserInvitationAccepter = new Github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", new()\n    {\n        InvitationId = exampleRepositoryCollaborator.InvitationId,\n    }, new CustomResourceOptions\n    {\n        Provider = \"github.invitee\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRepositoryCollaborator, err := github.NewRepositoryCollaborator(ctx, \"exampleRepositoryCollaborator\", \u0026github.RepositoryCollaboratorArgs{\n\t\t\tRepository: exampleRepository.Name,\n\t\t\tUsername:   pulumi.String(\"example-username\"),\n\t\t\tPermission: pulumi.String(\"push\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProvider(ctx, \"invitee\", \u0026github.ProviderArgs{\n\t\t\tToken: pulumi.Any(_var.Invitee_token),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewUserInvitationAccepter(ctx, \"exampleUserInvitationAccepter\", \u0026github.UserInvitationAccepterArgs{\n\t\t\tInvitationId: exampleRepositoryCollaborator.InvitationId,\n\t\t}, pulumi.Provider(\"github.invitee\"))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.Repository;\nimport com.pulumi.github.RepositoryCollaborator;\nimport com.pulumi.github.RepositoryCollaboratorArgs;\nimport com.pulumi.github.Provider;\nimport com.pulumi.github.ProviderArgs;\nimport com.pulumi.github.UserInvitationAccepter;\nimport com.pulumi.github.UserInvitationAccepterArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRepository = new Repository(\"exampleRepository\");\n\n        var exampleRepositoryCollaborator = new RepositoryCollaborator(\"exampleRepositoryCollaborator\", RepositoryCollaboratorArgs.builder()        \n            .repository(exampleRepository.name())\n            .username(\"example-username\")\n            .permission(\"push\")\n            .build());\n\n        var invitee = new Provider(\"invitee\", ProviderArgs.builder()        \n            .token(var_.invitee_token())\n            .build());\n\n        var exampleUserInvitationAccepter = new UserInvitationAccepter(\"exampleUserInvitationAccepter\", UserInvitationAccepterArgs.builder()        \n            .invitationId(exampleRepositoryCollaborator.invitationId())\n            .build(), CustomResourceOptions.builder()\n                .provider(\"github.invitee\")\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRepository:\n    type: github:Repository\n  exampleRepositoryCollaborator:\n    type: github:RepositoryCollaborator\n    properties:\n      repository: ${exampleRepository.name}\n      username: example-username\n      permission: push\n  invitee:\n    type: pulumi:providers:github\n    properties:\n      token: ${var.invitee_token}\n  exampleUserInvitationAccepter:\n    type: github:UserInvitationAccepter\n    properties:\n      invitationId: ${exampleRepositoryCollaborator.invitationId}\n    options:\n      provider: github.invitee\n```\n{{% /example %}}\n{{% /examples %}}\n## Allowing empty invitation IDs\n\nSet `allow_empty_id` when using `for_each` over a list of `github_repository_collaborator.invitation_id`'s.\n\nThis allows applying a module again when a new `github.RepositoryCollaborator` resource is added to the `for_each` loop.\nThis is needed as the `github_repository_collaborator.invitation_id` will be empty after a state refresh when the invitation has been accepted.\n\nNote that when an invitation is accepted manually or by another tool between a state refresh and a `pulumi up` using that refreshed state,\nthe plan will contain the invitation ID, but the apply will receive an HTTP 404 from the API since the invitation has already been accepted.\n\nThis is tracked in #1157.\n",
            "properties": {
                "allowEmptyId": {
                    "type": "boolean",
                    "description": "Allow the ID to be unset. This will result in the resource being skipped when the ID is not set instead of returning an error.\n"
                },
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to accept. Must be set when `allow_empty_id` is `false`.\n"
                }
            },
            "inputProperties": {
                "allowEmptyId": {
                    "type": "boolean",
                    "description": "Allow the ID to be unset. This will result in the resource being skipped when the ID is not set instead of returning an error.\n",
                    "willReplaceOnChanges": true
                },
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to accept. Must be set when `allow_empty_id` is `false`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserInvitationAccepter resources.\n",
                "properties": {
                    "allowEmptyId": {
                        "type": "boolean",
                        "description": "Allow the ID to be unset. This will result in the resource being skipped when the ID is not set instead of returning an error.\n",
                        "willReplaceOnChanges": true
                    },
                    "invitationId": {
                        "type": "string",
                        "description": "ID of the invitation to accept. Must be set when `allow_empty_id` is `false`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "github:index/userSshKey:UserSshKey": {
            "description": "Provides a GitHub user's SSH key resource.\n\nThis resource allows you to add/remove SSH keys from your user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.UserSshKey(\"example\", {\n    title: \"example title\",\n    key: fs.readFileSync(\"~/.ssh/id_rsa.pub\", \"utf8\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.UserSshKey(\"example\",\n    title=\"example title\",\n    key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Github.UserSshKey(\"example\", new()\n    {\n        Title = \"example title\",\n        Key = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewUserSshKey(ctx, \"example\", \u0026github.UserSshKeyArgs{\n\t\t\tTitle: pulumi.String(\"example title\"),\n\t\t\tKey:   readFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.UserSshKey;\nimport com.pulumi.github.UserSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserSshKey(\"example\", UserSshKeyArgs.builder()        \n            .title(\"example title\")\n            .key(Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: github:UserSshKey\n    properties:\n      title: example title\n      key:\n        fn::readFile: ~/.ssh/id_rsa.pub\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using their ID e.g.\n\n```sh\n $ pulumi import github:index/userSshKey:UserSshKey example 1234567\n```\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The public SSH key to add to your GitHub account.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the SSH key\n"
                }
            },
            "required": [
                "etag",
                "key",
                "title",
                "url"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The public SSH key to add to your GitHub account.\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "key",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSshKey resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public SSH key to add to your GitHub account.\n",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the SSH key\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "github:index/getActionsEnvironmentSecrets:getActionsEnvironmentSecrets": {
            "description": "Use this data source to retrieve the list of secrets of the repository environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsEnvironmentSecrets({\n    environment: \"exampleEnvironment\",\n    name: \"exampleRepo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_environment_secrets(environment=\"exampleEnvironment\",\n    name=\"exampleRepo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsEnvironmentSecrets.Invoke(new()\n    {\n        Environment = \"exampleEnvironment\",\n        Name = \"exampleRepo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsEnvironmentSecrets(ctx, \u0026github.GetActionsEnvironmentSecretsArgs{\n\t\t\tEnvironment: \"exampleEnvironment\",\n\t\t\tName:        pulumi.StringRef(\"exampleRepo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsEnvironmentSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsEnvironmentSecrets(GetActionsEnvironmentSecretsArgs.builder()\n            .environment(\"exampleEnvironment\")\n            .name(\"exampleRepo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsEnvironmentSecrets\n      Arguments:\n        environment: exampleEnvironment\n        name: exampleRepo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsEnvironmentSecrets.\n",
                "properties": {
                    "environment": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsEnvironmentSecrets.\n",
                "properties": {
                    "environment": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsEnvironmentSecretsSecret:getActionsEnvironmentSecretsSecret"
                        },
                        "description": "list of secrets for the environment\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment",
                    "fullName",
                    "name",
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getActionsEnvironmentVariables:getActionsEnvironmentVariables": {
            "description": "Use this data source to retrieve the list of variables of the repository environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsEnvironmentVariables({\n    environment: \"exampleEnvironment\",\n    name: \"exampleRepo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_environment_variables(environment=\"exampleEnvironment\",\n    name=\"exampleRepo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsEnvironmentVariables.Invoke(new()\n    {\n        Environment = \"exampleEnvironment\",\n        Name = \"exampleRepo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsEnvironmentVariables(ctx, \u0026github.GetActionsEnvironmentVariablesArgs{\n\t\t\tEnvironment: \"exampleEnvironment\",\n\t\t\tName:        pulumi.StringRef(\"exampleRepo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsEnvironmentVariablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsEnvironmentVariables(GetActionsEnvironmentVariablesArgs.builder()\n            .environment(\"exampleEnvironment\")\n            .name(\"exampleRepo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsEnvironmentVariables\n      Arguments:\n        environment: exampleEnvironment\n        name: exampleRepo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsEnvironmentVariables.\n",
                "properties": {
                    "environment": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsEnvironmentVariables.\n",
                "properties": {
                    "environment": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the variable\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsEnvironmentVariablesVariable:getActionsEnvironmentVariablesVariable"
                        },
                        "description": "list of variables for the environment\n"
                    }
                },
                "type": "object",
                "required": [
                    "environment",
                    "fullName",
                    "name",
                    "variables",
                    "id"
                ]
            }
        },
        "github:index/getActionsOrganizationOidcSubjectClaimCustomizationTemplate:getActionsOrganizationOidcSubjectClaimCustomizationTemplate": {
            "description": "Use this data source to retrieve the OpenID Connect subject claim customization template for an organization\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsOrganizationOidcSubjectClaimCustomizationTemplate({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_organization_oidc_subject_claim_customization_template()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsOrganizationOidcSubjectClaimCustomizationTemplate.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupActionsOrganizationOidcSubjectClaimCustomizationTemplate(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsOrganizationOidcSubjectClaimCustomizationTemplate();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsOrganizationOidcSubjectClaimCustomizationTemplate\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActionsOrganizationOidcSubjectClaimCustomizationTemplate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeClaimKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of OpenID Connect claim keys.\n"
                    }
                },
                "type": "object",
                "required": [
                    "includeClaimKeys",
                    "id"
                ]
            }
        },
        "github:index/getActionsOrganizationPublicKey:getActionsOrganizationPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Actions Organization public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to an organization to retrieve it's action public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsOrganizationPublicKey({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_organization_public_key()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsOrganizationPublicKey.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsOrganizationPublicKey(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsOrganizationPublicKey();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsOrganizationPublicKey\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActionsOrganizationPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "id"
                ]
            }
        },
        "github:index/getActionsOrganizationRegistrationToken:getActionsOrganizationRegistrationToken": {
            "description": "Use this data source to retrieve a GitHub Actions organization registration token. This token can then be used to register a self-hosted runner.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsOrganizationRegistrationToken({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_organization_registration_token()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsOrganizationRegistrationToken.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsOrganizationRegistrationToken(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsOrganizationRegistrationToken();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsOrganizationRegistrationToken\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActionsOrganizationRegistrationToken.\n",
                "properties": {
                    "expiresAt": {
                        "type": "integer",
                        "description": "The token expiration date.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "expiresAt",
                    "token",
                    "id"
                ]
            }
        },
        "github:index/getActionsOrganizationSecrets:getActionsOrganizationSecrets": {
            "description": "Use this data source to retrieve the list of secrets of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsOrganizationSecrets({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_organization_secrets()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsOrganizationSecrets.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsOrganizationSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsOrganizationSecrets();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsOrganizationSecrets\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActionsOrganizationSecrets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsOrganizationSecretsSecret:getActionsOrganizationSecretsSecret"
                        },
                        "description": "list of secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getActionsOrganizationVariables:getActionsOrganizationVariables": {
            "description": "Use this data source to retrieve the list of variables of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsOrganizationVariables({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_organization_variables()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsOrganizationVariables.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsOrganizationVariables(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsOrganizationVariables();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsOrganizationVariables\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActionsOrganizationVariables.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsOrganizationVariablesVariable:getActionsOrganizationVariablesVariable"
                        },
                        "description": "list of variables for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "variables",
                    "id"
                ]
            }
        },
        "github:index/getActionsPublicKey:getActionsPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to a repository to retrieve it's action public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsPublicKey({\n    repository: \"example_repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_public_key(repository=\"example_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsPublicKey.Invoke(new()\n    {\n        Repository = \"example_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsPublicKey(ctx, \u0026github.GetActionsPublicKeyArgs{\n\t\t\tRepository: \"example_repo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsPublicKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()\n            .repository(\"example_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsPublicKey\n      Arguments:\n        repository: example_repo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsPublicKey.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to get public key from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getActionsRegistrationToken:getActionsRegistrationToken": {
            "description": "Use this data source to retrieve a GitHub Actions repository registration token. This token can then be used to register a self-hosted runner.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsRegistrationToken({\n    repository: \"example_repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_registration_token(repository=\"example_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsRegistrationToken.Invoke(new()\n    {\n        Repository = \"example_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsRegistrationToken(ctx, \u0026github.GetActionsRegistrationTokenArgs{\n\t\t\tRepository: \"example_repo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsRegistrationTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsRegistrationToken(GetActionsRegistrationTokenArgs.builder()\n            .repository(\"example_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsRegistrationToken\n      Arguments:\n        repository: example_repo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsRegistrationToken.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to get a GitHub Actions registration token for.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsRegistrationToken.\n",
                "properties": {
                    "expiresAt": {
                        "type": "integer",
                        "description": "The token expiration date.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "expiresAt",
                    "repository",
                    "token",
                    "id"
                ]
            }
        },
        "github:index/getActionsRepositoryOidcSubjectClaimCustomizationTemplate:getActionsRepositoryOidcSubjectClaimCustomizationTemplate": {
            "description": "Use this data source to retrieve the OpenID Connect subject claim customization template for a repository\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsRepositoryOidcSubjectClaimCustomizationTemplate({\n    name: \"example_repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_repository_oidc_subject_claim_customization_template(name=\"example_repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsRepositoryOidcSubjectClaimCustomizationTemplate.Invoke(new()\n    {\n        Name = \"example_repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupActionsRepositoryOidcSubjectClaimCustomizationTemplate(ctx, \u0026github.LookupActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs{\n\t\t\tName: \"example_repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsRepositoryOidcSubjectClaimCustomizationTemplate(GetActionsRepositoryOidcSubjectClaimCustomizationTemplateArgs.builder()\n            .name(\"example_repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsRepositoryOidcSubjectClaimCustomizationTemplate\n      Arguments:\n        name: example_repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsRepositoryOidcSubjectClaimCustomizationTemplate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the repository to get the OpenID Connect subject claim customization template for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsRepositoryOidcSubjectClaimCustomizationTemplate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeClaimKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of OpenID Connect claim keys.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "useDefault": {
                        "type": "boolean",
                        "description": "Whether the repository uses the default template.\n"
                    }
                },
                "type": "object",
                "required": [
                    "includeClaimKeys",
                    "name",
                    "useDefault",
                    "id"
                ]
            }
        },
        "github:index/getActionsSecrets:getActionsSecrets": {
            "description": "Use this data source to retrieve the list of secrets for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsSecrets({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_secrets(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsSecrets.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsSecrets(ctx, \u0026github.GetActionsSecretsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsSecrets(GetActionsSecretsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsSecrets\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getActionsSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Secret name\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsSecretsSecret:getActionsSecretsSecret"
                        },
                        "description": "list of secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "fullName",
                    "name",
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getActionsVariables:getActionsVariables": {
            "description": "Use this data source to retrieve the list of variables for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getActionsVariables({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_variables(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetActionsVariables.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsVariables(ctx, \u0026github.GetActionsVariablesArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetActionsVariablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getActionsVariables(GetActionsVariablesArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getActionsVariables\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsVariables.\n",
                "properties": {
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getActionsVariables.\n",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the variable\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getActionsVariablesVariable:getActionsVariablesVariable"
                        },
                        "description": "list of variables for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "fullName",
                    "name",
                    "variables",
                    "id"
                ]
            }
        },
        "github:index/getAppToken:getAppToken": {
            "description": "Use this data source to generate a [GitHub App JWT](https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as github from \"@pulumi/github\";\n\nconst this = github.getAppToken({\n    appId: \"123456\",\n    installationId: \"78910\",\n    pemFile: fs.readFileSync(\"foo/bar.pem\", \"utf8\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nthis = github.get_app_token(app_id=\"123456\",\n    installation_id=\"78910\",\n    pem_file=(lambda path: open(path).read())(\"foo/bar.pem\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Github.GetAppToken.Invoke(new()\n    {\n        AppId = \"123456\",\n        InstallationId = \"78910\",\n        PemFile = File.ReadAllText(\"foo/bar.pem\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetAppToken(ctx, \u0026github.GetAppTokenArgs{\n\t\t\tAppId:          \"123456\",\n\t\t\tInstallationId: \"78910\",\n\t\t\tPemFile:        readFileOrPanic(\"foo/bar.pem\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetAppTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = GithubFunctions.getAppToken(GetAppTokenArgs.builder()\n            .appId(\"123456\")\n            .installationId(\"78910\")\n            .pemFile(Files.readString(Paths.get(\"foo/bar.pem\")))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: github:getAppToken\n      Arguments:\n        appId: '123456'\n        installationId: '78910'\n        pemFile:\n          fn::readFile: foo/bar.pem\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAppToken.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "This is the ID of the GitHub App.\n"
                    },
                    "installationId": {
                        "type": "string",
                        "description": "This is the ID of the GitHub App installation.\n"
                    },
                    "pemFile": {
                        "type": "string",
                        "description": "This is the contents of the GitHub App private key PEM file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "installationId",
                    "pemFile"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppToken.\n",
                "properties": {
                    "appId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "installationId": {
                        "type": "string"
                    },
                    "pemFile": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "The generated GitHub APP JWT.\n",
                        "secret": true
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "installationId",
                    "pemFile",
                    "token",
                    "id"
                ]
            }
        },
        "github:index/getBranch:getBranch": {
            "description": "Use this data source to retrieve information about a repository branch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst development = github.getBranch({\n    branch: \"development\",\n    repository: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ndevelopment = github.get_branch(branch=\"development\",\n    repository=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = Github.GetBranch.Invoke(new()\n    {\n        Branch = \"development\",\n        Repository = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupBranch(ctx, \u0026github.LookupBranchArgs{\n\t\t\tBranch:     \"development\",\n\t\t\tRepository: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetBranchArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var development = GithubFunctions.getBranch(GetBranchArgs.builder()\n            .branch(\"development\")\n            .repository(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  development:\n    fn::invoke:\n      Function: github:getBranch\n      Arguments:\n        branch: development\n        repository: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBranch.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The repository branch to retrieve.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranch.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the Branch object.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha": {
                        "type": "string",
                        "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "etag",
                    "ref",
                    "repository",
                    "sha",
                    "id"
                ]
            }
        },
        "github:index/getBranchProtectionRules:getBranchProtectionRules": {
            "description": "Use this data source to retrieve a list of repository branch protection rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getBranchProtectionRules({\n    repository: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_branch_protection_rules(repository=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetBranchProtectionRules.Invoke(new()\n    {\n        Repository = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetBranchProtectionRules(ctx, \u0026github.GetBranchProtectionRulesArgs{\n\t\t\tRepository: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetBranchProtectionRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getBranchProtectionRules(GetBranchProtectionRulesArgs.builder()\n            .repository(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getBranchProtectionRules\n      Arguments:\n        repository: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBranchProtectionRules.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranchProtectionRules.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getBranchProtectionRulesRule:getBranchProtectionRulesRule"
                        },
                        "description": "Collection of Branch Protection Rules. Each of the results conforms to the following scheme:\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository",
                    "rules",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesOrganizationPublicKey:getCodespacesOrganizationPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Codespaces Organization public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to an organization to retrieve it's Codespaces public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesOrganizationPublicKey({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_organization_public_key()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesOrganizationPublicKey.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesOrganizationPublicKey(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesOrganizationPublicKey();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesOrganizationPublicKey\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCodespacesOrganizationPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesOrganizationSecrets:getCodespacesOrganizationSecrets": {
            "description": "Use this data source to retrieve the list of codespaces secrets of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesOrganizationSecrets({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_organization_secrets()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesOrganizationSecrets.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesOrganizationSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesOrganizationSecrets();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesOrganizationSecrets\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCodespacesOrganizationSecrets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getCodespacesOrganizationSecretsSecret:getCodespacesOrganizationSecretsSecret"
                        },
                        "description": "list of secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesPublicKey:getCodespacesPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Codespaces public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to a repository to retrieve it's Codespaces public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesPublicKey({\n    repository: \"example_repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_public_key(repository=\"example_repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesPublicKey.Invoke(new()\n    {\n        Repository = \"example_repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesPublicKey(ctx, \u0026github.GetCodespacesPublicKeyArgs{\n\t\t\tRepository: \"example_repo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetCodespacesPublicKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesPublicKey(GetCodespacesPublicKeyArgs.builder()\n            .repository(\"example_repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesPublicKey\n      Arguments:\n        repository: example_repo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCodespacesPublicKey.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to get public key from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCodespacesPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesSecrets:getCodespacesSecrets": {
            "description": "Use this data source to retrieve the list of codespaces secrets for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesSecrets({\n    name: \"example_repository\",\n});\nconst example2 = github.getCodespacesSecrets({\n    fullName: \"org/example_repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_secrets(name=\"example_repository\")\nexample2 = github.get_codespaces_secrets(full_name=\"org/example_repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesSecrets.Invoke(new()\n    {\n        Name = \"example_repository\",\n    });\n\n    var example2 = Github.GetCodespacesSecrets.Invoke(new()\n    {\n        FullName = \"org/example_repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesSecrets(ctx, \u0026github.GetCodespacesSecretsArgs{\n\t\t\tName: pulumi.StringRef(\"example_repository\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.GetCodespacesSecrets(ctx, \u0026github.GetCodespacesSecretsArgs{\n\t\t\tFullName: pulumi.StringRef(\"org/example_repository\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetCodespacesSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesSecrets(GetCodespacesSecretsArgs.builder()\n            .name(\"example_repository\")\n            .build());\n\n        final var example2 = GithubFunctions.getCodespacesSecrets(GetCodespacesSecretsArgs.builder()\n            .fullName(\"org/example_repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesSecrets\n      Arguments:\n        name: example_repository\n  example2:\n    fn::invoke:\n      Function: github:getCodespacesSecrets\n      Arguments:\n        fullName: org/example_repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCodespacesSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCodespacesSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Secret name\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getCodespacesSecretsSecret:getCodespacesSecretsSecret"
                        },
                        "description": "list of codespaces secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "fullName",
                    "name",
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesUserPublicKey:getCodespacesUserPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Codespaces User public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to an user to retrieve it's Codespaces public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesUserPublicKey({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_user_public_key()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesUserPublicKey.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesUserPublicKey(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesUserPublicKey();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesUserPublicKey\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCodespacesUserPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "id"
                ]
            }
        },
        "github:index/getCodespacesUserSecrets:getCodespacesUserSecrets": {
            "description": "Use this data source to retrieve the list of codespaces secrets of the user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getCodespacesUserSecrets({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_codespaces_user_secrets()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetCodespacesUserSecrets.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCodespacesUserSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getCodespacesUserSecrets();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getCodespacesUserSecrets\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCodespacesUserSecrets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getCodespacesUserSecretsSecret:getCodespacesUserSecretsSecret"
                        },
                        "description": "list of secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getCollaborators:getCollaborators": {
            "description": "Use this data source to retrieve the collaborators for a given repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = github.getCollaborators({\n    owner: \"example_owner\",\n    repository: \"example_repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_collaborators(owner=\"example_owner\",\n    repository=\"example_repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Github.GetCollaborators.Invoke(new()\n    {\n        Owner = \"example_owner\",\n        Repository = \"example_repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCollaborators(ctx, \u0026github.GetCollaboratorsArgs{\n\t\t\tOwner:      \"example_owner\",\n\t\t\tRepository: \"example_repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetCollaboratorsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()\n            .owner(\"example_owner\")\n            .repository(\"example_repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: github:getCollaborators\n      Arguments:\n        owner: example_owner\n        repository: example_repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCollaborators.\n",
                "properties": {
                    "affiliation": {
                        "type": "string",
                        "description": "Filter collaborators returned by their affiliation. Can be one of: `outside`, `direct`, `all`.  Defaults to `all`.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The organization that owns the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCollaborators.\n",
                "properties": {
                    "affiliation": {
                        "type": "string"
                    },
                    "collaborators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getCollaboratorsCollaborator:getCollaboratorsCollaborator"
                        },
                        "description": "An Array of GitHub collaborators.  Each `collaborator` block consists of the fields documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "collaborators",
                    "owner",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getDependabotOrganizationPublicKey:getDependabotOrganizationPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Dependabot Organization public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to an organization to retrieve it's Dependabot public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getDependabotOrganizationPublicKey({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_dependabot_organization_public_key()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetDependabotOrganizationPublicKey.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetDependabotOrganizationPublicKey(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getDependabotOrganizationPublicKey();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getDependabotOrganizationPublicKey\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDependabotOrganizationPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "id"
                ]
            }
        },
        "github:index/getDependabotOrganizationSecrets:getDependabotOrganizationSecrets": {
            "description": "Use this data source to retrieve the list of dependabot secrets of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getDependabotOrganizationSecrets({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_dependabot_organization_secrets()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetDependabotOrganizationSecrets.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetDependabotOrganizationSecrets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getDependabotOrganizationSecrets();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getDependabotOrganizationSecrets\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDependabotOrganizationSecrets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getDependabotOrganizationSecretsSecret:getDependabotOrganizationSecretsSecret"
                        },
                        "description": "list of secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getDependabotPublicKey:getDependabotPublicKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getDependabotPublicKey.\n",
                "properties": {
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDependabotPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getDependabotSecrets:getDependabotSecrets": {
            "description": "Use this data source to retrieve the list of dependabot secrets for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getDependabotSecrets({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_dependabot_secrets(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetDependabotSecrets.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetDependabotSecrets(ctx, \u0026github.GetDependabotSecretsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetDependabotSecretsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getDependabotSecrets(GetDependabotSecretsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getDependabotSecrets\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDependabotSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDependabotSecrets.\n",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Secret name\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getDependabotSecretsSecret:getDependabotSecretsSecret"
                        },
                        "description": "list of dependabot secrets for the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "fullName",
                    "name",
                    "secrets",
                    "id"
                ]
            }
        },
        "github:index/getEnterprise:getEnterprise": {
            "description": "Use this data source to retrieve basic information about a GitHub enterprise.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getEnterprise({\n    slug: \"example-co\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_enterprise(slug=\"example-co\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetEnterprise.Invoke(new()\n    {\n        Slug = \"example-co\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetEnterprise(ctx, \u0026github.GetEnterpriseArgs{\n\t\t\tSlug: \"example-co\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetEnterpriseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getEnterprise(GetEnterpriseArgs.builder()\n            .slug(\"example-co\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getEnterprise\n      Arguments:\n        slug: example-co\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnterprise.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The URL slug identifying the enterprise.\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnterprise.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The time the enterprise was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the enterprise.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the enterprise.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The URL slug identifying the enterprise.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url for the enterprise.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "name",
                    "slug",
                    "url",
                    "id"
                ]
            }
        },
        "github:index/getExternalGroups:getExternalGroups": {
            "description": "Use this data source to retrieve external groups belonging to an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleExternalGroups = github.getExternalGroups({});\nconst localGroups = exampleExternalGroups;\nexport const groups = localGroups;\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_external_groups = github.get_external_groups()\nlocal_groups = example_external_groups\npulumi.export(\"groups\", local_groups)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleExternalGroups = Github.GetExternalGroups.Invoke();\n\n    var localGroups = exampleExternalGroups;\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"groups\"] = localGroups,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleExternalGroups, err := github.GetExternalGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlocalGroups := exampleExternalGroups\n\t\tctx.Export(\"groups\", localGroups)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleExternalGroups = GithubFunctions.getExternalGroups();\n\n        final var localGroups = exampleExternalGroups.applyValue(getExternalGroupsResult -\u003e getExternalGroupsResult);\n\n        ctx.export(\"groups\", localGroups);\n    }\n}\n```\n```yaml\nvariables:\n  exampleExternalGroups:\n    fn::invoke:\n      Function: github:getExternalGroups\n      Arguments: {}\n  localGroups: ${exampleExternalGroups}\noutputs:\n  groups: ${localGroups}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getExternalGroups.\n",
                "properties": {
                    "externalGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getExternalGroupsExternalGroup:getExternalGroupsExternalGroup"
                        },
                        "description": "an array of external groups belonging to the organization. Each group consists of the fields documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "externalGroups",
                    "id"
                ]
            }
        },
        "github:index/getGithubApp:getGithubApp": {
            "description": "Use this data source to retrieve information about an app.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst foobar = github.getGithubApp({\n    slug: \"foobar\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoobar = github.get_github_app(slug=\"foobar\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = Github.GetGithubApp.Invoke(new()\n    {\n        Slug = \"foobar\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetGithubApp(ctx, \u0026github.GetGithubAppArgs{\n\t\t\tSlug: \"foobar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetGithubAppArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foobar = GithubFunctions.getGithubApp(GetGithubAppArgs.builder()\n            .slug(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foobar:\n    fn::invoke:\n      Function: github:getGithubApp\n      Arguments:\n        slug: foobar\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGithubApp.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The URL-friendly name of your GitHub App.\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGithubApp.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The app's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The app's full name.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "The Node ID of the app.\n"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "nodeId",
                    "slug",
                    "id"
                ]
            }
        },
        "github:index/getIpRanges:getIpRanges": {
            "description": "Use this data source to retrieve information about GitHub's IP addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = github.getIpRanges({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_ip_ranges()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Github.GetIpRanges.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetIpRanges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GithubFunctions.getIpRanges();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: github:getIpRanges\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIpRanges.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of IP addresses in CIDR format specifying the addresses that incoming requests from GitHub actions will originate from.\n"
                    },
                    "actionsIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `actions` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "actionsIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `actions` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "apiIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `api` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "apiIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `api` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "apis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format for the GitHub API.\n"
                    },
                    "dependabotIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `dependabot` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "dependabotIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `dependabot` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "dependabots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of IP addresses in CIDR format specifying the A records for dependabot.\n"
                    },
                    "gitIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `git` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "gitIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `git` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "gits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the Git servers.\n"
                    },
                    "hooks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.\n"
                    },
                    "hooksIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `hooks` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "hooksIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `hooks` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "importerIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `importer` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "importerIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `importer` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "importers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the A records for GitHub Importer.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the A records for GitHub Pages.\n"
                    },
                    "pagesIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `pages` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "pagesIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `pages` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "webIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `web` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "webIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `web` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "webs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format for GitHub Web.\n"
                    }
                },
                "type": "object",
                "required": [
                    "actions",
                    "actionsIpv4s",
                    "actionsIpv6s",
                    "apis",
                    "apiIpv4s",
                    "apiIpv6s",
                    "dependabots",
                    "dependabotIpv4s",
                    "dependabotIpv6s",
                    "gits",
                    "gitIpv4s",
                    "gitIpv6s",
                    "hooks",
                    "hooksIpv4s",
                    "hooksIpv6s",
                    "importers",
                    "importerIpv4s",
                    "importerIpv6s",
                    "pages",
                    "pagesIpv4s",
                    "pagesIpv6s",
                    "webs",
                    "webIpv4s",
                    "webIpv6s",
                    "id"
                ]
            }
        },
        "github:index/getIssueLabels:getIssueLabels": {
            "description": "Use this data source to retrieve the labels for a given repository.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIssueLabels.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIssueLabels.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getIssueLabelsLabel:getIssueLabelsLabel"
                        },
                        "description": "The list of this repository's labels. Each element of `labels` has the following attributes:\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "labels",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getMembership:getMembership": {
            "description": "Use this data source to find out if a user is a member of your organization, as well\nas what role they have within it.\nIf the user's membership in the organization is pending their acceptance of an invite,\nthe role they would have once they accept will be returned.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst membershipForSomeUser = github.getMembership({\n    username: \"SomeUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nmembership_for_some_user = github.get_membership(username=\"SomeUser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var membershipForSomeUser = Github.GetMembership.Invoke(new()\n    {\n        Username = \"SomeUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupMembership(ctx, \u0026github.LookupMembershipArgs{\n\t\t\tUsername: \"SomeUser\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()\n            .username(\"SomeUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  membershipForSomeUser:\n    fn::invoke:\n      Function: github:getMembership\n      Arguments:\n        username: SomeUser\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMembership.\n",
                "properties": {
                    "organization": {
                        "type": "string",
                        "description": "The organization to check for the above username.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to lookup in the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMembership.\n",
                "properties": {
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the membership object.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "`admin` or `member` -- the role the user has within the organization.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "`active` or `pending` -- the state of membership within the organization.  `active` if the member has accepted the invite, or `pending` if the invite is still pending.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "etag",
                    "role",
                    "state",
                    "username",
                    "id"
                ]
            }
        },
        "github:index/getOrganization:getOrganization": {
            "description": "Use this data source to retrieve basic information about a GitHub Organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getOrganization({\n    name: \"github\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_organization(name=\"github\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetOrganization.Invoke(new()\n    {\n        Name = \"github\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganization(ctx, \u0026github.GetOrganizationArgs{\n\t\t\tName: \"github\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getOrganization(GetOrganizationArgs.builder()\n            .name(\"github\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getOrganization\n      Arguments:\n        name: github\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The organization's public profile name\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "advancedSecurityEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether advanced security is enabled for new repositories.\n"
                    },
                    "defaultRepositoryPermission": {
                        "type": "string",
                        "description": "Default permission level members have for organization repositories.\n"
                    },
                    "dependabotAlertsEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether Dependabot alerts is automatically enabled for new repositories.\n"
                    },
                    "dependabotSecurityUpdatesEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether Dependabot security updates is automatically enabled for new repositories.\n"
                    },
                    "dependencyGraphEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether dependency graph is automatically enabled for new repositories.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The organization account description\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The members login\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "**Deprecated**: use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login` which will give you the same value, expect this field to be removed in next major version\n",
                        "deprecationMessage": "Use `users` instead by replacing `github_organization.example.members` to `github_organization.example.users[*].login`. Expect this field to be removed in next major version."
                    },
                    "membersAllowedRepositoryCreationType": {
                        "type": "string",
                        "description": "The type of repository allowed to be created by members of the organization. Can be one of `ALL`, `PUBLIC`, `PRIVATE`, `NONE`.\n"
                    },
                    "membersCanCreateInternalRepositories": {
                        "type": "boolean",
                        "description": "Whether organization members can create internal repositories.\n"
                    },
                    "membersCanCreatePages": {
                        "type": "boolean",
                        "description": "Whether organization members can create pages sites.\n"
                    },
                    "membersCanCreatePrivatePages": {
                        "type": "boolean",
                        "description": "Whether organization members can create private pages sites.\n"
                    },
                    "membersCanCreatePrivateRepositories": {
                        "type": "boolean",
                        "description": "Whether organization members can create private repositories.\n"
                    },
                    "membersCanCreatePublicPages": {
                        "type": "boolean",
                        "description": "Whether organization members can create public pages sites.\n"
                    },
                    "membersCanCreatePublicRepositories": {
                        "type": "boolean",
                        "description": "Whether organization members can create public repositories.\n"
                    },
                    "membersCanCreateRepositories": {
                        "type": "boolean",
                        "description": "Whether non-admin organization members can create repositories.\n"
                    },
                    "membersCanForkPrivateRepositories": {
                        "type": "boolean",
                        "description": "Whether organization members can create private repository forks.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The organization's public profile name\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "GraphQL global node ID for use with the v4 API\n"
                    },
                    "orgname": {
                        "type": "string",
                        "description": "The organization's name as used in URLs and the API\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The organization account plan name\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(`list`) A list of the full names of the repositories in the organization formatted as `owner/name` strings\n"
                    },
                    "secretScanningEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether secret scanning is automatically enabled for new repositories.\n"
                    },
                    "secretScanningPushProtectionEnabledForNewRepositories": {
                        "type": "boolean",
                        "description": "Whether secret scanning push protection is automatically enabled for new repositories.\n"
                    },
                    "twoFactorRequirementEnabled": {
                        "type": "boolean",
                        "description": "Whether two-factor authentication is required for all members of the organization.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "description": "(`list`) A list with the members of the organization with following fields:\n"
                    },
                    "webCommitSignoffRequired": {
                        "type": "boolean",
                        "description": "Whether organization members must sign all commits.\n"
                    }
                },
                "type": "object",
                "required": [
                    "advancedSecurityEnabledForNewRepositories",
                    "defaultRepositoryPermission",
                    "dependabotAlertsEnabledForNewRepositories",
                    "dependabotSecurityUpdatesEnabledForNewRepositories",
                    "dependencyGraphEnabledForNewRepositories",
                    "description",
                    "login",
                    "members",
                    "membersAllowedRepositoryCreationType",
                    "membersCanCreateInternalRepositories",
                    "membersCanCreatePages",
                    "membersCanCreatePrivatePages",
                    "membersCanCreatePrivateRepositories",
                    "membersCanCreatePublicPages",
                    "membersCanCreatePublicRepositories",
                    "membersCanCreateRepositories",
                    "membersCanForkPrivateRepositories",
                    "name",
                    "nodeId",
                    "orgname",
                    "plan",
                    "repositories",
                    "secretScanningEnabledForNewRepositories",
                    "secretScanningPushProtectionEnabledForNewRepositories",
                    "twoFactorRequirementEnabled",
                    "users",
                    "webCommitSignoffRequired",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationCustomRole:getOrganizationCustomRole": {
            "description": "Use this data source to retrieve information about a custom role in a GitHub Organization.\n\n\u003e Note: Custom roles are currently only available in GitHub Enterprise Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getOrganizationCustomRole({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_organization_custom_role(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetOrganizationCustomRole.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupOrganizationCustomRole(ctx, \u0026github.LookupOrganizationCustomRoleArgs{\n\t\t\tName: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetOrganizationCustomRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getOrganizationCustomRole(GetOrganizationCustomRoleArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getOrganizationCustomRole\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationCustomRole.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the custom role.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationCustomRole.\n",
                "properties": {
                    "baseRole": {
                        "type": "string",
                        "description": "The system role from which the role inherits permissions.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the custom role.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of additional permissions included in this role.\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRole",
                    "description",
                    "name",
                    "permissions",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationExternalIdentities:getOrganizationExternalIdentities": {
            "description": "Use this data source to retrieve each organization member's SAML or SCIM user\nattributes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst all = github.getOrganizationExternalIdentities({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nall = github.get_organization_external_identities()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Github.GetOrganizationExternalIdentities.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationExternalIdentities(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = GithubFunctions.getOrganizationExternalIdentities();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: github:getOrganizationExternalIdentities\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationExternalIdentities.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationExternalIdentitiesIdentity:getOrganizationExternalIdentitiesIdentity"
                        },
                        "description": "An Array of identities returned from GitHub\n"
                    }
                },
                "type": "object",
                "required": [
                    "identities",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationIpAllowList:getOrganizationIpAllowList": {
            "description": "Use this data source to retrieve information about the IP allow list of an organization.\nThe allow list for IP addresses will block access to private resources via the web, API,\nand Git from any IP addresses that are not on the allow list.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst all = github.getOrganizationIpAllowList({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nall = github.get_organization_ip_allow_list()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Github.GetOrganizationIpAllowList.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationIpAllowList(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = GithubFunctions.getOrganizationIpAllowList();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: github:getOrganizationIpAllowList\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationIpAllowList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAllowLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationIpAllowListIpAllowList:getOrganizationIpAllowListIpAllowList"
                        },
                        "description": "An Array of allowed IP addresses.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "ipAllowLists",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups": {
            "description": "Use this data source to retrieve the identity provider (IdP) groups for an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = github.getOrganizationTeamSyncGroups({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_organization_team_sync_groups()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Github.GetOrganizationTeamSyncGroups.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationTeamSyncGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GithubFunctions.getOrganizationTeamSyncGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: github:getOrganizationTeamSyncGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationTeamSyncGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationTeamSyncGroupsGroup:getOrganizationTeamSyncGroupsGroup"
                        },
                        "description": "An Array of GitHub Identity Provider Groups.  Each `group` block consists of the fields documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationTeams:getOrganizationTeams": {
            "description": "Use this data source to retrieve information about all GitHub teams in an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve *all* teams of the organization:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst all = github.getOrganizationTeams({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nall = github.get_organization_teams()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Github.GetOrganizationTeams.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationTeams(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetOrganizationTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = GithubFunctions.getOrganizationTeams();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: github:getOrganizationTeams\n      Arguments: {}\n```\n\nTo retrieve only the team's at the root of the organization:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst rootTeams = github.getOrganizationTeams({\n    rootTeamsOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nroot_teams = github.get_organization_teams(root_teams_only=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rootTeams = Github.GetOrganizationTeams.Invoke(new()\n    {\n        RootTeamsOnly = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationTeams(ctx, \u0026github.GetOrganizationTeamsArgs{\n\t\t\tRootTeamsOnly: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetOrganizationTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()\n            .rootTeamsOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  rootTeams:\n    fn::invoke:\n      Function: github:getOrganizationTeams\n      Arguments:\n        rootTeamsOnly: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationTeams.\n",
                "properties": {
                    "resultsPerPage": {
                        "type": "integer",
                        "description": "(Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.\n"
                    },
                    "rootTeamsOnly": {
                        "type": "boolean",
                        "description": "(Optional) Only return teams that are at the organization's root, i.e. no nested teams. Defaults to `false`.\n"
                    },
                    "summaryOnly": {
                        "type": "boolean",
                        "description": "(Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "resultsPerPage": {
                        "type": "integer",
                        "description": "(Optional) Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.\n"
                    },
                    "rootTeamsOnly": {
                        "type": "boolean",
                        "description": "(Optional) Only return teams that are at the organization's root, i.e. no nested teams. Defaults to `false`.\n"
                    },
                    "summaryOnly": {
                        "type": "boolean",
                        "description": "(Optional) Exclude the members and repositories of the team from the returned result. Defaults to `false`.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationTeamsTeam:getOrganizationTeamsTeam"
                        },
                        "description": "(Required) An Array of GitHub Teams.  Each `team` block consists of the fields documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationWebhooks:getOrganizationWebhooks": {
            "description": "Use this data source to retrieve all webhooks of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve *all* webhooks of the organization:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst all = github.getOrganizationWebhooks({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nall = github.get_organization_webhooks()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Github.GetOrganizationWebhooks.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationWebhooks(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = GithubFunctions.getOrganizationWebhooks();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: github:getOrganizationWebhooks\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationWebhooks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationWebhooksWebhook:getOrganizationWebhooksWebhook"
                        },
                        "description": "An Array of GitHub Webhooks.  Each `webhook` block consists of the fields documented below.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "webhooks",
                    "id"
                ]
            }
        },
        "github:index/getRef:getRef": {
            "description": "Use this data source to retrieve information about a repository ref.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst development = github.getRef({\n    owner: \"example\",\n    ref: \"heads/development\",\n    repository: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ndevelopment = github.get_ref(owner=\"example\",\n    ref=\"heads/development\",\n    repository=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = Github.GetRef.Invoke(new()\n    {\n        Owner = \"example\",\n        Ref = \"heads/development\",\n        Repository = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRef(ctx, \u0026github.GetRefArgs{\n\t\t\tOwner:      pulumi.StringRef(\"example\"),\n\t\t\tRef:        \"heads/development\",\n\t\t\tRepository: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRefArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var development = GithubFunctions.getRef(GetRefArgs.builder()\n            .owner(\"example\")\n            .ref(\"heads/development\")\n            .repository(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  development:\n    fn::invoke:\n      Function: github:getRef\n      Arguments:\n        owner: example\n        ref: heads/development\n        repository: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRef.\n",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The repository ref to look up. Must be formatted `heads/\u003cref\u003e` for branches, and `tags/\u003cref\u003e` for tags.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "ref",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRef.\n",
                "properties": {
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the ref.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "ref": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha": {
                        "type": "string",
                        "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                    }
                },
                "type": "object",
                "required": [
                    "etag",
                    "ref",
                    "repository",
                    "sha",
                    "id"
                ]
            }
        },
        "github:index/getRelease:getRelease": {
            "description": "Use this data source to retrieve information about a GitHub release in a specific repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve the latest release that is present in a repository:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRelease({\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n    retrieveBy: \"latest\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_release(owner=\"example-owner\",\n    repository=\"example-repository\",\n    retrieve_by=\"latest\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRelease.Invoke(new()\n    {\n        Owner = \"example-owner\",\n        Repository = \"example-repository\",\n        RetrieveBy = \"latest\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRelease(ctx, \u0026github.LookupReleaseArgs{\n\t\t\tOwner:      \"example-owner\",\n\t\t\tRepository: \"example-repository\",\n\t\t\tRetrieveBy: \"latest\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetReleaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()\n            .owner(\"example-owner\")\n            .repository(\"example-repository\")\n            .retrieveBy(\"latest\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRelease\n      Arguments:\n        owner: example-owner\n        repository: example-repository\n        retrieveBy: latest\n```\n\nTo retrieve a specific release from a repository based on it's ID:\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetReleaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()\n            .id(12345)\n            .owner(\"example-owner\")\n            .repository(\"example-repository\")\n            .retrieveBy(\"id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRelease\n      Arguments:\n        id: 12345\n        owner: example-owner\n        repository: example-repository\n        retrieveBy: id\n```\n\nFinally, to retrieve a release based on it's tag:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRelease({\n    owner: \"example-owner\",\n    releaseTag: \"v1.0.0\",\n    repository: \"example-repository\",\n    retrieveBy: \"tag\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_release(owner=\"example-owner\",\n    release_tag=\"v1.0.0\",\n    repository=\"example-repository\",\n    retrieve_by=\"tag\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRelease.Invoke(new()\n    {\n        Owner = \"example-owner\",\n        ReleaseTag = \"v1.0.0\",\n        Repository = \"example-repository\",\n        RetrieveBy = \"tag\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRelease(ctx, \u0026github.LookupReleaseArgs{\n\t\t\tOwner:      \"example-owner\",\n\t\t\tReleaseTag: pulumi.StringRef(\"v1.0.0\"),\n\t\t\tRepository: \"example-repository\",\n\t\t\tRetrieveBy: \"tag\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetReleaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()\n            .owner(\"example-owner\")\n            .releaseTag(\"v1.0.0\")\n            .repository(\"example-repository\")\n            .retrieveBy(\"tag\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRelease\n      Arguments:\n        owner: example-owner\n        releaseTag: v1.0.0\n        repository: example-repository\n        retrieveBy: tag\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRelease.\n",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository.\n"
                    },
                    "releaseId": {
                        "type": "integer",
                        "description": "ID of the release to retrieve. Must be specified when `retrieve_by` = `id`.\n"
                    },
                    "releaseTag": {
                        "type": "string",
                        "description": "Tag of the release to retrieve. Must be specified when `retrieve_by` = `tag`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the release from.\n"
                    },
                    "retrieveBy": {
                        "type": "string",
                        "description": "Describes how to fetch the release. Valid values are `id`, `tag`, `latest`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "repository",
                    "retrieveBy"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRelease.\n",
                "properties": {
                    "assertsUrl": {
                        "type": "string",
                        "description": "**Deprecated**: Use `assets_url` resource instead\n",
                        "deprecationMessage": "use assets_url instead"
                    },
                    "assets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getReleaseAsset:getReleaseAsset"
                        },
                        "description": "Collection of assets for the release. Each asset conforms to the following schema:\n"
                    },
                    "assetsUrl": {
                        "type": "string",
                        "description": "URL of any associated assets with the release\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Contents of the description (body) of a release\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date the asset was created\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "(`Boolean`) indicates whether the release is a draft\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL directing to detailed information on the release\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The file name of the asset\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "prerelease": {
                        "type": "boolean",
                        "description": "(`Boolean`) indicates whether the release is a prerelease\n"
                    },
                    "publishedAt": {
                        "type": "string",
                        "description": "Date of release publishing\n"
                    },
                    "releaseId": {
                        "type": "integer",
                        "description": "ID of release\n"
                    },
                    "releaseTag": {
                        "type": "string",
                        "description": "Tag of release\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "retrieveBy": {
                        "type": "string"
                    },
                    "tarballUrl": {
                        "type": "string",
                        "description": "Download URL of a specific release in `tar.gz` format\n"
                    },
                    "targetCommitish": {
                        "type": "string",
                        "description": "Commitish value that determines where the Git release is created from\n"
                    },
                    "uploadUrl": {
                        "type": "string",
                        "description": "URL that can be used to upload Assets to the release\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the asset\n"
                    },
                    "zipballUrl": {
                        "type": "string",
                        "description": "Download URL of a specific release in `zip` format\n"
                    }
                },
                "type": "object",
                "required": [
                    "assertsUrl",
                    "assets",
                    "assetsUrl",
                    "body",
                    "createdAt",
                    "draft",
                    "htmlUrl",
                    "name",
                    "owner",
                    "prerelease",
                    "publishedAt",
                    "repository",
                    "retrieveBy",
                    "tarballUrl",
                    "targetCommitish",
                    "uploadUrl",
                    "url",
                    "zipballUrl",
                    "id"
                ]
            }
        },
        "github:index/getRepositories:getRepositories": {
            "description": "\u003e **Note:** The data source will return a maximum of `1000` repositories\n\t[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).\n\nUse this data source to retrieve a list of GitHub repositories using a search query.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositories({\n    includeRepoId: true,\n    query: \"org:hashicorp language:Go\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repositories(include_repo_id=True,\n    query=\"org:hashicorp language:Go\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositories.Invoke(new()\n    {\n        IncludeRepoId = true,\n        Query = \"org:hashicorp language:Go\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositories(ctx, \u0026github.GetRepositoriesArgs{\n\t\t\tIncludeRepoId: pulumi.BoolRef(true),\n\t\t\tQuery:         \"org:hashicorp language:Go\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()\n            .includeRepoId(true)\n            .query(\"org:hashicorp language:Go\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositories\n      Arguments:\n        includeRepoId: true\n        query: org:hashicorp language:Go\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "includeRepoId": {
                        "type": "boolean",
                        "description": "Returns a list of found repository IDs\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Search query. See [documentation for the search syntax](https://help.github.com/articles/understanding-the-search-syntax/).\n"
                    },
                    "resultsPerPage": {
                        "type": "integer",
                        "description": "Set the number of repositories requested per API call. Can be useful to decrease if requests are timing out or to increase to reduce the number of API calls. Defaults to 100.\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sorts the repositories returned by the specified attribute. Valid values include `stars`, `fork`, and `updated`. Defaults to `updated`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "fullNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeRepoId": {
                        "type": "boolean"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "query": {
                        "type": "string"
                    },
                    "repoIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(Optional) A list of found repository IDs (e.g. `449898861`)\n"
                    },
                    "resultsPerPage": {
                        "type": "integer"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fullNames",
                    "names",
                    "query",
                    "repoIds",
                    "id"
                ]
            }
        },
        "github:index/getRepository:getRepository": {
            "description": "Use this data source to retrieve information about a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepository({\n    fullName: \"hashicorp/terraform\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository(full_name=\"hashicorp/terraform\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepository.Invoke(new()\n    {\n        FullName = \"hashicorp/terraform\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tFullName: pulumi.StringRef(\"hashicorp/terraform\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .fullName(\"hashicorp/terraform\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        fullName: hashicorp/terraform\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the license.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "allowAutoMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows auto-merging pull requests.\n"
                    },
                    "allowMergeCommit": {
                        "type": "boolean",
                        "description": "Whether the repository allows merge commits.\n"
                    },
                    "allowRebaseMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows rebase merges.\n"
                    },
                    "allowSquashMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows squash merges.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the repository is archived.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The name of the default branch of the repository.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the license.\n"
                    },
                    "fork": {
                        "type": "boolean",
                        "description": "Whether the repository is a fork.\n"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "gitCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                    },
                    "hasDiscussions": {
                        "type": "boolean",
                        "description": "Whether the repository has GitHub Discussions enabled.\n"
                    },
                    "hasDownloads": {
                        "type": "boolean",
                        "description": "Whether the repository has Downloads feature enabled.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "Whether the repository has GitHub Issues enabled.\n"
                    },
                    "hasProjects": {
                        "type": "boolean",
                        "description": "Whether the repository has the GitHub Projects enabled.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "Whether the repository has the GitHub Wiki enabled.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "The URL to view the license details on GitHub.\n"
                    },
                    "httpCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isTemplate": {
                        "type": "boolean",
                        "description": "Whether the repository is a template repository.\n"
                    },
                    "mergeCommitMessage": {
                        "type": "string",
                        "description": "The default value for a merge commit message.\n"
                    },
                    "mergeCommitTitle": {
                        "type": "string",
                        "description": "The default value for a merge commit title.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the license (e.g., \"Apache License 2.0\").\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "GraphQL global node id for use with v4 API\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryPage:getRepositoryPage"
                        },
                        "description": "The repository's GitHub Pages configuration.\n"
                    },
                    "primaryLanguage": {
                        "type": "string",
                        "description": "The primary language used in the repository.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether the repository is private.\n"
                    },
                    "repoId": {
                        "type": "integer",
                        "description": "GitHub ID for the repository\n"
                    },
                    "repositoryLicenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryRepositoryLicense:getRepositoryRepositoryLicense"
                        },
                        "description": "An Array of GitHub repository licenses. Each `repository_license` block consists of the fields documented below.\n"
                    },
                    "squashMergeCommitMessage": {
                        "type": "string",
                        "description": "The default value for a squash merge commit message.\n"
                    },
                    "squashMergeCommitTitle": {
                        "type": "string",
                        "description": "The default value for a squash merge commit title.\n"
                    },
                    "sshCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                    },
                    "svnUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                    },
                    "template": {
                        "$ref": "#/types/github:index/getRepositoryTemplate:getRepositoryTemplate",
                        "description": "The repository source template configuration.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topics of the repository.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Whether the repository is public, private or internal.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowAutoMerge",
                    "allowMergeCommit",
                    "allowRebaseMerge",
                    "allowSquashMerge",
                    "archived",
                    "defaultBranch",
                    "fork",
                    "fullName",
                    "gitCloneUrl",
                    "hasDiscussions",
                    "hasDownloads",
                    "hasIssues",
                    "hasProjects",
                    "hasWiki",
                    "htmlUrl",
                    "httpCloneUrl",
                    "isTemplate",
                    "mergeCommitMessage",
                    "mergeCommitTitle",
                    "name",
                    "nodeId",
                    "pages",
                    "primaryLanguage",
                    "private",
                    "repoId",
                    "repositoryLicenses",
                    "squashMergeCommitMessage",
                    "squashMergeCommitTitle",
                    "sshCloneUrl",
                    "svnUrl",
                    "template",
                    "topics",
                    "visibility",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryAutolinkReferences:getRepositoryAutolinkReferences": {
            "description": "Use this data source to retrieve autolink references for a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryAutolinkReferences({\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_autolink_references(repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryAutolinkReferences.Invoke(new()\n    {\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryAutolinkReferences(ctx, \u0026github.GetRepositoryAutolinkReferencesArgs{\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryAutolinkReferencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryAutolinkReferences(GetRepositoryAutolinkReferencesArgs.builder()\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryAutolinkReferences\n      Arguments:\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryAutolinkReferences.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the autolink references from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryAutolinkReferences.\n",
                "properties": {
                    "autolinkReferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryAutolinkReferencesAutolinkReference:getRepositoryAutolinkReferencesAutolinkReference"
                        },
                        "description": "The list of this repository's autolink references. Each element of `autolink_references` has the following attributes:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autolinkReferences",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryBranches:getRepositoryBranches": {
            "description": "Use this data source to retrieve information about branches in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryBranches({\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_branches(repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryBranches.Invoke(new()\n    {\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryBranches(ctx, \u0026github.GetRepositoryBranchesArgs{\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryBranchesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryBranches(GetRepositoryBranchesArgs.builder()\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryBranches\n      Arguments:\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryBranches.\n",
                "properties": {
                    "onlyNonProtectedBranches": {
                        "type": "boolean",
                        "description": ". If true, the `branches` attributes will be populated only with non protected branches. Default: `false`.\n"
                    },
                    "onlyProtectedBranches": {
                        "type": "boolean",
                        "description": ". If true, the `branches` attributes will be populated only with protected branches. Default: `false`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the branches from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryBranches.\n",
                "properties": {
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryBranchesBranch:getRepositoryBranchesBranch"
                        },
                        "description": "The list of this repository's branches. Each element of `branches` has the following attributes:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "onlyNonProtectedBranches": {
                        "type": "boolean"
                    },
                    "onlyProtectedBranches": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "branches",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryDeployKeys:getRepositoryDeployKeys": {
            "description": "Use this data source to retrieve all deploy keys of a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryDeployKeys({\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_deploy_keys(repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryDeployKeys.Invoke(new()\n    {\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryDeployKeys(ctx, \u0026github.GetRepositoryDeployKeysArgs{\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryDeployKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryDeployKeys(GetRepositoryDeployKeysArgs.builder()\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryDeployKeys\n      Arguments:\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryDeployKeys.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the branches from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryDeployKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryDeployKeysKey:getRepositoryDeployKeysKey"
                        },
                        "description": "The list of this repository's deploy keys. Each element of `keys` has the following attributes:\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "keys",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryDeploymentBranchPolicies:getRepositoryDeploymentBranchPolicies": {
            "description": "Use this data source to retrieve deployment branch policies for a repository / environment.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryDeploymentBranchPolicies({\n    environmentName: \"env_name\",\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_deployment_branch_policies(environment_name=\"env_name\",\n    repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryDeploymentBranchPolicies.Invoke(new()\n    {\n        EnvironmentName = \"env_name\",\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryDeploymentBranchPolicies(ctx, \u0026github.GetRepositoryDeploymentBranchPoliciesArgs{\n\t\t\tEnvironmentName: \"env_name\",\n\t\t\tRepository:      \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryDeploymentBranchPoliciesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryDeploymentBranchPolicies(GetRepositoryDeploymentBranchPoliciesArgs.builder()\n            .environmentName(\"env_name\")\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryDeploymentBranchPolicies\n      Arguments:\n        environmentName: env_name\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryDeploymentBranchPolicies.\n",
                "properties": {
                    "environmentName": {
                        "type": "string",
                        "description": "Name of the environment to retrieve the deployment branch policies  from.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the deployment branch policies from.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "environmentName",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryDeploymentBranchPolicies.\n",
                "properties": {
                    "deploymentBranchPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy:getRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy"
                        },
                        "description": "The list of this repository / environment deployment policies. Each element of `deployment_branch_policies` has the following attributes:\n"
                    },
                    "environmentName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentBranchPolicies",
                    "environmentName",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryEnvironments:getRepositoryEnvironments": {
            "description": "Use this data source to retrieve information about environments for a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryEnvironments({\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_environments(repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryEnvironments.Invoke(new()\n    {\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryEnvironments(ctx, \u0026github.GetRepositoryEnvironmentsArgs{\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryEnvironmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryEnvironments(GetRepositoryEnvironmentsArgs.builder()\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryEnvironments\n      Arguments:\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryEnvironments.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the environments from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryEnvironments.\n",
                "properties": {
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryEnvironmentsEnvironment:getRepositoryEnvironmentsEnvironment"
                        },
                        "description": "The list of this repository's environments. Each element of `environments` has the following attributes:\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "environments",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryFile:getRepositoryFile": {
            "description": "This data source allows you to read files within a\nGitHub repository.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst foo = github.getRepositoryFile({\n    repository: github_repository.foo.name,\n    branch: \"main\",\n    file: \".gitignore\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo = github.get_repository_file(repository=github_repository[\"foo\"][\"name\"],\n    branch=\"main\",\n    file=\".gitignore\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Github.GetRepositoryFile.Invoke(new()\n    {\n        Repository = github_repository.Foo.Name,\n        Branch = \"main\",\n        File = \".gitignore\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryFile(ctx, \u0026github.LookupRepositoryFileArgs{\n\t\t\tRepository: github_repository.Foo.Name,\n\t\t\tBranch:     pulumi.StringRef(\"main\"),\n\t\t\tFile:       \".gitignore\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()\n            .repository(github_repository.foo().name())\n            .branch(\"main\")\n            .file(\".gitignore\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: github:getRepositoryFile\n      Arguments:\n        repository: ${github_repository.foo.name}\n        branch: main\n        file: .gitignore\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryFile.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch. Defaults to the repository's default branch.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The path of the file to read.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to read the file from. If an unqualified repo name (without an owner) is passed, the owner will be inferred from the owner of the token used to execute the plan. If a name of the type \"owner/repo\" (with a slash in the middle) is passed, the owner will be as specified and not the owner of the token.\n"
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryFile.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "commitAuthor": {
                        "type": "string",
                        "description": "Committer author name.\n"
                    },
                    "commitEmail": {
                        "type": "string",
                        "description": "Committer email address.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message when file was last updated.\n"
                    },
                    "commitSha": {
                        "type": "string",
                        "description": "The SHA of the commit that modified the file.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n"
                    },
                    "file": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The name of the commit/branch/tag.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha": {
                        "type": "string",
                        "description": "The SHA blob of the file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "commitAuthor",
                    "commitEmail",
                    "commitMessage",
                    "commitSha",
                    "content",
                    "file",
                    "ref",
                    "repository",
                    "sha",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryMilestone:getRepositoryMilestone": {
            "description": "Use this data source to retrieve information about a specific GitHub milestone in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryMilestone({\n    number: 1,\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_milestone(number=1,\n    owner=\"example-owner\",\n    repository=\"example-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryMilestone.Invoke(new()\n    {\n        Number = 1,\n        Owner = \"example-owner\",\n        Repository = \"example-repository\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryMilestone(ctx, \u0026github.LookupRepositoryMilestoneArgs{\n\t\t\tNumber:     1,\n\t\t\tOwner:      \"example-owner\",\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryMilestoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()\n            .number(1)\n            .owner(\"example-owner\")\n            .repository(\"example-repository\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryMilestone\n      Arguments:\n        number: 1\n        owner: example-owner\n        repository: example-repository\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryMilestone.\n",
                "properties": {
                    "number": {
                        "type": "integer",
                        "description": "The number of the milestone.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the milestone from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "owner",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryMilestone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the milestone.\n"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "The milestone due date (in ISO-8601 `yyyy-mm-dd` format).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the milestone.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the milestone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dueDate",
                    "number",
                    "owner",
                    "repository",
                    "state",
                    "title",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryPullRequest:getRepositoryPullRequest": {
            "description": "Use this data source to retrieve information about a specific GitHub Pull Request in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryPullRequest({\n    baseRepository: \"example_repository\",\n    number: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_pull_request(base_repository=\"example_repository\",\n    number=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryPullRequest.Invoke(new()\n    {\n        BaseRepository = \"example_repository\",\n        Number = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryPullRequest(ctx, \u0026github.LookupRepositoryPullRequestArgs{\n\t\t\tBaseRepository: \"example_repository\",\n\t\t\tNumber:         1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryPullRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()\n            .baseRepository(\"example_repository\")\n            .number(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryPullRequest\n      Arguments:\n        baseRepository: example_repository\n        number: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryPullRequest.\n",
                "properties": {
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Request from.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the Pull Request within the repository.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository",
                    "number"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryPullRequest.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the ref (branch) of the Pull Request base.\n"
                    },
                    "baseRepository": {
                        "type": "string"
                    },
                    "baseSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request base.\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the Pull Request.\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Indicates Whether this Pull Request is a draft.\n"
                    },
                    "headOwner": {
                        "type": "string",
                        "description": "Owner of the Pull Request head repository.\n"
                    },
                    "headRef": {
                        "type": "string"
                    },
                    "headRepository": {
                        "type": "string",
                        "description": "Name of the Pull Request head repository.\n"
                    },
                    "headSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request head.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names set on the Pull Request.\n"
                    },
                    "maintainerCanModify": {
                        "type": "boolean",
                        "description": "Indicates whether the base repository maintainers can modify the Pull Request.\n"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "openedAt": {
                        "type": "integer",
                        "description": "Unix timestamp indicating the Pull Request creation time.\n"
                    },
                    "openedBy": {
                        "type": "string",
                        "description": "GitHub login of the user who opened the Pull Request.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Pull Request.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp of the last Pull Request update.\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRef",
                    "baseRepository",
                    "baseSha",
                    "body",
                    "draft",
                    "headOwner",
                    "headRef",
                    "headRepository",
                    "headSha",
                    "labels",
                    "maintainerCanModify",
                    "number",
                    "openedAt",
                    "openedBy",
                    "state",
                    "title",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryPullRequests:getRepositoryPullRequests": {
            "description": "Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryPullRequests({\n    baseRef: \"main\",\n    baseRepository: \"example-repository\",\n    sortBy: \"updated\",\n    sortDirection: \"desc\",\n    state: \"open\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_pull_requests(base_ref=\"main\",\n    base_repository=\"example-repository\",\n    sort_by=\"updated\",\n    sort_direction=\"desc\",\n    state=\"open\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryPullRequests.Invoke(new()\n    {\n        BaseRef = \"main\",\n        BaseRepository = \"example-repository\",\n        SortBy = \"updated\",\n        SortDirection = \"desc\",\n        State = \"open\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryPullRequests(ctx, \u0026github.LookupRepositoryPullRequestsArgs{\n\t\t\tBaseRef:        pulumi.StringRef(\"main\"),\n\t\t\tBaseRepository: \"example-repository\",\n\t\t\tSortBy:         pulumi.StringRef(\"updated\"),\n\t\t\tSortDirection:  pulumi.StringRef(\"desc\"),\n\t\t\tState:          pulumi.StringRef(\"open\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()\n            .baseRef(\"main\")\n            .baseRepository(\"example-repository\")\n            .sortBy(\"updated\")\n            .sortDirection(\"desc\")\n            .state(\"open\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryPullRequests\n      Arguments:\n        baseRef: main\n        baseRepository: example-repository\n        sortBy: updated\n        sortDirection: desc\n        state: open\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryPullRequests.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by base branch name.\n"
                    },
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by head user or head organization and branch name in the format of \"user:ref-name\" or \"organization:ref-name\". For example: \"github:new-script-format\" or \"octocat:test-branch\".\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "If set, indicates what to sort results by. Can be either \"created\", \"updated\", \"popularity\" (comment count) or \"long-running\" (age, filtering by pulls updated in the last month). Default: \"created\".\n"
                    },
                    "sortDirection": {
                        "type": "string",
                        "description": "If set, controls the direction of the sort. Can be either \"asc\" or \"desc\". Default: \"asc\".\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by state. Can be \"open\", \"closed\", or \"all\". Default: \"open\".\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryPullRequests.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the ref (branch) of the Pull Request base.\n"
                    },
                    "baseRepository": {
                        "type": "string"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "Value of the Pull Request `HEAD` reference.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryPullRequestsResult:getRepositoryPullRequestsResult"
                        },
                        "description": "Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:\n"
                    },
                    "sortBy": {
                        "type": "string"
                    },
                    "sortDirection": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository",
                    "results",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryTeams:getRepositoryTeams": {
            "description": "Use this data source to retrieve the list of teams which have access to a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRepositoryTeams({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_teams(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRepositoryTeams.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryTeams(ctx, \u0026github.GetRepositoryTeamsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryTeamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRepositoryTeams(GetRepositoryTeamsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRepositoryTeams\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryTeams.\n",
                "properties": {
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryTeams.\n",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryTeamsTeam:getRepositoryTeamsTeam"
                        },
                        "description": "List of teams which have access to the repository\n"
                    }
                },
                "type": "object",
                "required": [
                    "fullName",
                    "name",
                    "teams",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryWebhooks:getRepositoryWebhooks": {
            "description": "Use this data source to retrieve webhooks for a given repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve webhooks of a repository:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepositoryWebhooks({\n    repository: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository_webhooks(repository=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo = Github.GetRepositoryWebhooks.Invoke(new()\n    {\n        Repository = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositoryWebhooks(ctx, \u0026github.GetRepositoryWebhooksArgs{\n\t\t\tRepository: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryWebhooksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo = GithubFunctions.getRepositoryWebhooks(GetRepositoryWebhooksArgs.builder()\n            .repository(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  repo:\n    fn::invoke:\n      Function: github:getRepositoryWebhooks\n      Arguments:\n        repository: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryWebhooks.\n",
                "properties": {
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryWebhooks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryWebhooksWebhook:getRepositoryWebhooksWebhook"
                        },
                        "description": "An Array of GitHub Webhooks.  Each `webhook` block consists of the fields documented below.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository",
                    "webhooks",
                    "id"
                ]
            }
        },
        "github:index/getRestApi:getRestApi": {
            "description": "Use this data source to retrieve information about a GitHub resource through REST API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getRestApi({\n    endpoint: \"repos/example_repo/git/refs/heads/main\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_rest_api(endpoint=\"repos/example_repo/git/refs/heads/main\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetRestApi.Invoke(new()\n    {\n        Endpoint = \"repos/example_repo/git/refs/heads/main\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRestApi(ctx, \u0026github.GetRestApiArgs{\n\t\t\tEndpoint: \"repos/example_repo/git/refs/heads/main\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRestApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getRestApi(GetRestApiArgs.builder()\n            .endpoint(\"repos/example_repo/git/refs/heads/main\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getRestApi\n      Arguments:\n        endpoint: repos/example_repo/git/refs/heads/main\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRestApi.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "REST API endpoint to send the GET request to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "endpoint"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRestApi.\n",
                "properties": {
                    "body": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of response body.\n"
                    },
                    "code": {
                        "type": "integer",
                        "description": "A response status code.\n"
                    },
                    "endpoint": {
                        "type": "string"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of response headers.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A response status string.\n"
                    }
                },
                "type": "object",
                "required": [
                    "body",
                    "code",
                    "endpoint",
                    "headers",
                    "status",
                    "id"
                ]
            }
        },
        "github:index/getSshKeys:getSshKeys": {
            "description": "Use this data source to retrieve information about GitHub's SSH keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = github.getSshKeys({});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_ssh_keys()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Github.GetSshKeys.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetSshKeys(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = GithubFunctions.getSshKeys();\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: github:getSshKeys\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getSshKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of GitHub's SSH public keys.\n"
                    }
                },
                "type": "object",
                "required": [
                    "keys",
                    "id"
                ]
            }
        },
        "github:index/getTeam:getTeam": {
            "description": "Use this data source to retrieve information about a GitHub team.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getTeam({\n    slug: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_team(slug=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetTeam.Invoke(new()\n    {\n        Slug = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupTeam(ctx, \u0026github.LookupTeamArgs{\n\t\t\tSlug: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getTeam(GetTeamArgs.builder()\n            .slug(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getTeam\n      Arguments:\n        slug: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "membershipType": {
                        "type": "string",
                        "description": "Type of membership to be requested to fill the list of members. Can be either \"all\" or \"immediate\". Default: \"all\"\n"
                    },
                    "resultsPerPage": {
                        "type": "integer",
                        "description": "Set the number of results per graphql query. Reducing this number can alleviate timeout errors. Accepts a value between 0 - 100. Defaults to `100`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The team slug.\n"
                    },
                    "summaryOnly": {
                        "type": "boolean",
                        "description": "Exclude the members and repositories of the team from the returned result. Defaults to `false`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "the team's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of team members (list of GitHub usernames). Not returned if `summary_only = true`\n"
                    },
                    "membershipType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "the team's full name.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "the Node ID of the team.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "the team's permission level.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "the team's privacy type.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of team repositories (list of repo names). Not returned if `summary_only = true`\n"
                    },
                    "repositoriesDetaileds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getTeamRepositoriesDetailed:getTeamRepositoriesDetailed"
                        },
                        "description": "List of team repositories (list of `repo_id` and `role_name`). Not returned if `summary_only = true`\n"
                    },
                    "resultsPerPage": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "summaryOnly": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "members",
                    "name",
                    "nodeId",
                    "permission",
                    "privacy",
                    "repositories",
                    "repositoriesDetaileds",
                    "slug",
                    "id"
                ]
            }
        },
        "github:index/getTree:getTree": {
            "description": "Use this data source to retrieve information about a single tree.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst thisRepository = github.getRepository({\n    name: \"example\",\n});\nconst thisBranch = Promise.all([thisRepository, thisRepository]).then(([thisRepository, thisRepository1]) =\u003e github.getBranch({\n    branch: thisRepository.defaultBranch,\n    repository: thisRepository1.name,\n}));\nconst thisTree = Promise.all([thisRepository, thisBranch]).then(([thisRepository, thisBranch]) =\u003e github.getTree({\n    recursive: false,\n    repository: thisRepository.name,\n    treeSha: thisBranch.sha,\n}));\nexport const entries = thisTree.then(thisTree =\u003e thisTree.entries);\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nthis_repository = github.get_repository(name=\"example\")\nthis_branch = github.get_branch(branch=this_repository.default_branch,\n    repository=this_repository.name)\nthis_tree = github.get_tree(recursive=False,\n    repository=this_repository.name,\n    tree_sha=this_branch.sha)\npulumi.export(\"entries\", this_tree.entries)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisRepository = Github.GetRepository.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n    var thisBranch = Github.GetBranch.Invoke(new()\n    {\n        Branch = thisRepository.Apply(getRepositoryResult =\u003e getRepositoryResult.DefaultBranch),\n        Repository = thisRepository.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n    });\n\n    var thisTree = Github.GetTree.Invoke(new()\n    {\n        Recursive = false,\n        Repository = thisRepository.Apply(getRepositoryResult =\u003e getRepositoryResult.Name),\n        TreeSha = thisBranch.Apply(getBranchResult =\u003e getBranchResult.Sha),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"entries\"] = thisTree.Apply(getTreeResult =\u003e getTreeResult.Entries),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisRepository, err := github.LookupRepository(ctx, \u0026github.LookupRepositoryArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisBranch, err := github.LookupBranch(ctx, \u0026github.LookupBranchArgs{\n\t\t\tBranch:     thisRepository.DefaultBranch,\n\t\t\tRepository: thisRepository.Name,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisTree, err := github.GetTree(ctx, \u0026github.GetTreeArgs{\n\t\t\tRecursive:  pulumi.BoolRef(false),\n\t\t\tRepository: thisRepository.Name,\n\t\t\tTreeSha:    thisBranch.Sha,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"entries\", thisTree.Entries)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetRepositoryArgs;\nimport com.pulumi.github.inputs.GetBranchArgs;\nimport com.pulumi.github.inputs.GetTreeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()\n            .name(\"example\")\n            .build());\n\n        final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()\n            .branch(thisRepository.applyValue(getRepositoryResult -\u003e getRepositoryResult.defaultBranch()))\n            .repository(thisRepository.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .build());\n\n        final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()\n            .recursive(false)\n            .repository(thisRepository.applyValue(getRepositoryResult -\u003e getRepositoryResult.name()))\n            .treeSha(thisBranch.applyValue(getBranchResult -\u003e getBranchResult.sha()))\n            .build());\n\n        ctx.export(\"entries\", thisTree.applyValue(getTreeResult -\u003e getTreeResult.entries()));\n    }\n}\n```\n```yaml\nvariables:\n  thisRepository:\n    fn::invoke:\n      Function: github:getRepository\n      Arguments:\n        name: example\n  thisBranch:\n    fn::invoke:\n      Function: github:getBranch\n      Arguments:\n        branch: ${thisRepository.defaultBranch}\n        repository: ${thisRepository.name}\n  thisTree:\n    fn::invoke:\n      Function: github:getTree\n      Arguments:\n        recursive: false\n        repository: ${thisRepository.name}\n        treeSha: ${thisBranch.sha}\noutputs:\n  entries: ${thisTree.entries}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTree.\n",
                "properties": {
                    "recursive": {
                        "type": "boolean",
                        "description": "Setting this parameter to `true` returns the objects or subtrees referenced by the tree specified in `tree_sha`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "treeSha": {
                        "type": "string",
                        "description": "The SHA1 value for the tree.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository",
                    "treeSha"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTree.\n",
                "properties": {
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getTreeEntry:getTreeEntry"
                        },
                        "description": "Objects (of `path`, `mode`, `type`, `size`, and `sha`) specifying a tree structure.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "recursive": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "treeSha": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "entries",
                    "repository",
                    "treeSha",
                    "id"
                ]
            }
        },
        "github:index/getUser:getUser": {
            "description": "Use this data source to retrieve information about a GitHub user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getUser({\n    username: \"example\",\n});\nconst current = github.getUser({\n    username: \"\",\n});\nexport const currentGithubLogin = current.then(current =\u003e current.login);\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_user(username=\"example\")\ncurrent = github.get_user(username=\"\")\npulumi.export(\"currentGithubLogin\", current.login)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetUser.Invoke(new()\n    {\n        Username = \"example\",\n    });\n\n    var current = Github.GetUser.Invoke(new()\n    {\n        Username = \"\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"currentGithubLogin\"] = current.Apply(getUserResult =\u003e getUserResult.Login),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetUser(ctx, \u0026github.GetUserArgs{\n\t\t\tUsername: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcurrent, err := github.GetUser(ctx, \u0026github.GetUserArgs{\n\t\t\tUsername: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"currentGithubLogin\", current.Login)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getUser(GetUserArgs.builder()\n            .username(\"example\")\n            .build());\n\n        final var current = GithubFunctions.getUser(GetUserArgs.builder()\n            .username(\"\")\n            .build());\n\n        ctx.export(\"currentGithubLogin\", current.applyValue(getUserResult -\u003e getUserResult.login()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getUser\n      Arguments:\n        username: example\n  current:\n    fn::invoke:\n      Function: github:getUser\n      Arguments:\n        username:\noutputs:\n  currentGithubLogin: ${current.login}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username. Use an empty string `\"\"` to retrieve information about the currently authenticated user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "the user's avatar URL.\n"
                    },
                    "bio": {
                        "type": "string",
                        "description": "the user's bio.\n"
                    },
                    "blog": {
                        "type": "string",
                        "description": "the user's blog location.\n"
                    },
                    "company": {
                        "type": "string",
                        "description": "the user's company name.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "the creation date.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "the user's email.\n"
                    },
                    "followers": {
                        "type": "integer",
                        "description": "the number of followers.\n"
                    },
                    "following": {
                        "type": "integer",
                        "description": "the number of following users.\n"
                    },
                    "gpgKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of user's GPG keys.\n"
                    },
                    "gravatarId": {
                        "type": "string",
                        "description": "the user's gravatar ID.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "the user's location.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "the user's login.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the user's full name.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "the Node ID of the user.\n"
                    },
                    "publicGists": {
                        "type": "integer",
                        "description": "the number of public gists.\n"
                    },
                    "publicRepos": {
                        "type": "integer",
                        "description": "the number of public repositories.\n"
                    },
                    "siteAdmin": {
                        "type": "boolean",
                        "description": "whether the user is a GitHub admin.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of user's SSH keys.\n"
                    },
                    "suspendedAt": {
                        "type": "string",
                        "description": "the suspended date if the user is suspended.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "the update date.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "bio",
                    "blog",
                    "company",
                    "createdAt",
                    "email",
                    "followers",
                    "following",
                    "gpgKeys",
                    "gravatarId",
                    "location",
                    "login",
                    "name",
                    "nodeId",
                    "publicGists",
                    "publicRepos",
                    "siteAdmin",
                    "sshKeys",
                    "suspendedAt",
                    "updatedAt",
                    "username",
                    "id"
                ]
            }
        },
        "github:index/getUserExternalIdentity:getUserExternalIdentity": {
            "description": "Use this data source to retrieve a specific organization member's SAML or SCIM user\nattributes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleUser = github.getUserExternalIdentity({\n    username: \"example-user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_user = github.get_user_external_identity(username=\"example-user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Github.GetUserExternalIdentity.Invoke(new()\n    {\n        Username = \"example-user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetUserExternalIdentity(ctx, \u0026github.GetUserExternalIdentityArgs{\n\t\t\tUsername: \"example-user\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUserExternalIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = GithubFunctions.getUserExternalIdentity(GetUserExternalIdentityArgs.builder()\n            .username(\"example-user\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: github:getUserExternalIdentity\n      Arguments:\n        username: example-user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserExternalIdentity.\n",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the member to fetch external identity for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUserExternalIdentity.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The username of the GitHub user\n"
                    },
                    "samlIdentity": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An Object containing the user's SAML data. This object will\nbe empty if the user is not managed by SAML.\n"
                    },
                    "scimIdentity": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An Object contining the user's SCIM data. This object will\nbe empty if the user is not managed by SCIM.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The member's SAML Username\n"
                    }
                },
                "type": "object",
                "required": [
                    "login",
                    "samlIdentity",
                    "scimIdentity",
                    "username",
                    "id"
                ]
            }
        },
        "github:index/getUsers:getUsers": {
            "description": "Use this data source to retrieve information about multiple GitHub users at once.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = github.getUsers({\n    usernames: [\n        \"example1\",\n        \"example2\",\n        \"example3\",\n    ],\n});\nexport const validUsers = example.then(example =\u003e example.logins);\nexport const invalidUsers = example.then(example =\u003e example.unknownLogins);\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_users(usernames=[\n    \"example1\",\n    \"example2\",\n    \"example3\",\n])\npulumi.export(\"validUsers\", example.logins)\npulumi.export(\"invalidUsers\", example.unknown_logins)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Github.GetUsers.Invoke(new()\n    {\n        Usernames = new[]\n        {\n            \"example1\",\n            \"example2\",\n            \"example3\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"validUsers\"] = example.Apply(getUsersResult =\u003e getUsersResult.Logins),\n        [\"invalidUsers\"] = example.Apply(getUsersResult =\u003e getUsersResult.UnknownLogins),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v5/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.GetUsers(ctx, \u0026github.GetUsersArgs{\n\t\t\tUsernames: []string{\n\t\t\t\t\"example1\",\n\t\t\t\t\"example2\",\n\t\t\t\t\"example3\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"validUsers\", example.Logins)\n\t\tctx.Export(\"invalidUsers\", example.UnknownLogins)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.github.GithubFunctions;\nimport com.pulumi.github.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = GithubFunctions.getUsers(GetUsersArgs.builder()\n            .usernames(            \n                \"example1\",\n                \"example2\",\n                \"example3\")\n            .build());\n\n        ctx.export(\"validUsers\", example.applyValue(getUsersResult -\u003e getUsersResult.logins()));\n        ctx.export(\"invalidUsers\", example.applyValue(getUsersResult -\u003e getUsersResult.unknownLogins()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: github:getUsers\n      Arguments:\n        usernames:\n          - example1\n          - example2\n          - example3\noutputs:\n  validUsers: ${example.logins}\n  invalidUsers: ${example.unknownLogins}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of usernames.\n"
                    }
                },
                "type": "object",
                "required": [
                    "usernames"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "emails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of the user's publicly visible profile email (will be empty string in case if user decided not to show it).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of logins of users that could be found.\n"
                    },
                    "nodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Node IDs of users that could be found.\n"
                    },
                    "unknownLogins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of logins without matching user.\n"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "emails",
                    "logins",
                    "nodeIds",
                    "unknownLogins",
                    "usernames",
                    "id"
                ]
            }
        }
    }
}