{
    "name": "github",
    "description": "A Pulumi package for creating and managing github cloud resources.",
    "keywords": [
        "pulumi",
        "github"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`github` Terraform Provider](https://github.com/terraform-providers/terraform-provider-github).",
    "repository": "https://github.com/pulumi/pulumi-github",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "appAuth": {
                "$ref": "#/types/github:config/appAuth:appAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n",
                "default": "https://api.github.com/",
                "defaultInfo": {
                    "environment": [
                        "GITHUB_BASE_URL"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        }
    },
    "types": {
        "github:config/appAuth:appAuth": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "pemFile": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "installationId",
                "pemFile"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig": {
            "properties": {
                "githubOwnedAllowed": {
                    "type": "boolean",
                    "description": "Whether GitHub-owned actions are allowed in the organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "patternsAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*.\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verifiedAllowed": {
                    "type": "boolean",
                    "description": "Whether actions in GitHub Marketplace from verified creators are allowed. Set to true to allow all GitHub Marketplace actions by verified creators.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "githubOwnedAllowed"
            ]
        },
        "github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig": {
            "properties": {
                "repositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of repository IDs to enable for GitHub Actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repositoryIds"
            ]
        },
        "github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview": {
            "properties": {
                "dismissStaleReviews": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dismissalRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireCodeOwnerReviews": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restrictDismissals": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck": {
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strict": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews": {
            "properties": {
                "dismissStaleReviews": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dismissalTeams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dismissalUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAdmins": {
                    "type": "boolean",
                    "deprecationMessage": "Use enforce_admins instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireCodeOwnerReviews": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requiredApprovingReviewCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks": {
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAdmins": {
                    "type": "boolean",
                    "deprecationMessage": "Use enforce_admins instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strict": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL of the webhook\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "github:index/ProviderAppAuth:ProviderAppAuth": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "installationId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pemFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "installationId",
                "pemFile"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "github:index/RepositoryBranch:RepositoryBranch": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protected": {
                    "type": "boolean",
                    "description": "Whether the branch is protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "protected"
                    ]
                }
            }
        },
        "github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy": {
            "properties": {
                "customBranchPolicies": {
                    "type": "boolean",
                    "description": "Whether only branches that match the specified name patterns can deploy to this environment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protectedBranches": {
                    "type": "boolean",
                    "description": "Whether only branches with branch protection rules can deploy to this environment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "customBranchPolicies",
                "protectedBranches"
            ]
        },
        "github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer": {
            "properties": {
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 6 IDs for teams who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 6 IDs for users who may review jobs that reference the environment. Reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "github:index/RepositoryPages:RepositoryPages": {
            "properties": {
                "cname": {
                    "type": "string",
                    "description": "The custom domain for the repository. This can only be set after the repository has been created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "custom404": {
                    "type": "boolean",
                    "description": "Whether the rendered GitHub Pages site has a custom 404 page.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "$ref": "#/types/github:index/RepositoryPagesSource:RepositoryPagesSource",
                    "description": "The source branch and directory for the rendered Pages site. See GitHub Pages Source below for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The GitHub Pages site's build status e.g. `building` or `built`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "custom404",
                        "htmlUrl",
                        "source",
                        "status",
                        "url"
                    ]
                }
            }
        },
        "github:index/RepositoryPagesSource:RepositoryPagesSource": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch used to publish the site's source files. (i.e. `main` or `gh-pages`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The repository directory from which the site publishes (Default: `/`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "branch"
            ]
        },
        "github:index/RepositoryTemplate:RepositoryTemplate": {
            "properties": {
                "owner": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repository"
            ]
        },
        "github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "The content type for the payload. Valid values are either `form` or `json`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureSsl": {
                    "type": "boolean",
                    "description": "Insecure SSL boolean toggle. Defaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "The shared secret for the webhook. [See API documentation](https://developer.github.com/v3/repos/hooks/#create-a-hook).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the webhook.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup": {
            "properties": {
                "groupDescription": {
                    "type": "string",
                    "description": "The description of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupDescription",
                "groupId",
                "groupName"
            ]
        },
        "github:index/getCollaboratorsCollaborator:getCollaboratorsCollaborator": {
            "properties": {
                "eventsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's events.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "followersUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's followers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "followingUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for those following the collaborator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gistsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's gists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The GitHub HTML URL for the collaborator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the collaborator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "login": {
                    "type": "string",
                    "description": "The collaborator's login.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's organizations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The permission of the collaborator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receivedEventsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's received events.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reposUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "siteAdmin": {
                    "type": "boolean",
                    "description": "Whether the user is a GitHub admin.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "starredUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's starred repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionsUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator's subscribed repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the collaborator (ex. `user`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The GitHub API URL for the collaborator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eventsUrl",
                "followersUrl",
                "followingUrl",
                "gistsUrl",
                "htmlUrl",
                "id",
                "login",
                "organizationsUrl",
                "permission",
                "receivedEventsUrl",
                "reposUrl",
                "siteAdmin",
                "starredUrl",
                "subscriptionsUrl",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationTeamSyncGroupsGroup:getOrganizationTeamSyncGroupsGroup": {
            "properties": {
                "groupDescription": {
                    "type": "string",
                    "description": "The description of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "description": "The ID of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "The name of the IdP group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupDescription",
                "groupId",
                "groupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getOrganizationTeamsTeam:getOrganizationTeamsTeam": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "the team's description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "the ID of the team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of team members.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the team's full name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "the Node ID of the team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privacy": {
                    "type": "string",
                    "description": "the team's privacy type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repositories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of team repositories.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "the slug of the team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "members",
                "name",
                "nodeId",
                "privacy",
                "repositories",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryBranch:getRepositoryBranch": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protected": {
                    "type": "boolean",
                    "description": "Whether the branch is protected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "protected"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPage:getRepositoryPage": {
            "properties": {
                "cname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "custom404": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "URL to the repository on the web.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/getRepositoryPageSource:getRepositoryPageSource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cname",
                "custom404",
                "htmlUrl",
                "sources",
                "status",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPageSource:getRepositoryPageSource": {
            "properties": {
                "branch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "branch",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "github:index/getRepositoryPullRequestsResult:getRepositoryPullRequestsResult": {
            "properties": {
                "baseRef": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by base branch name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request base.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "draft": {
                    "type": "boolean",
                    "description": "Indicates Whether this Pull Request is a draft.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headOwner": {
                    "type": "string",
                    "description": "Owner of the Pull Request head repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headRef": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by head user or head organization and branch name in the format of \"user:ref-name\" or \"organization:ref-name\". For example: \"github:new-script-format\" or \"octocat:test-branch\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headRepository": {
                    "type": "string",
                    "description": "Name of the Pull Request head repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request head.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names set on the Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Indicates whether the base repository maintainers can modify the Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the Pull Request within the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openedAt": {
                    "type": "integer",
                    "description": "Unix timestamp indicating the Pull Request creation time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openedBy": {
                    "type": "string",
                    "description": "GitHub login of the user who opened the Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "If set, filters Pull Requests by state. Can be \"open\", \"closed\", or \"all\". Default: \"open\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp of the last Pull Request update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "baseRef",
                "baseSha",
                "body",
                "draft",
                "headOwner",
                "headRef",
                "headRepository",
                "headSha",
                "labels",
                "maintainerCanModify",
                "number",
                "openedAt",
                "openedBy",
                "state",
                "title",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the github package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "appAuth": {
                "$ref": "#/types/github:index/ProviderAppAuth:ProviderAppAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        },
        "inputProperties": {
            "appAuth": {
                "$ref": "#/types/github:index/ProviderAppAuth:ProviderAppAuth",
                "description": "The GitHub App credentials used to connect to GitHub. Conflicts with `token`. Anonymous mode is enabled if both `token`\nand `app_auth` are not set.\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "The GitHub Base API URL\n",
                "default": "https://api.github.com/",
                "defaultInfo": {
                    "environment": [
                        "GITHUB_BASE_URL"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Enable `insecure` mode for testing purposes\n"
            },
            "organization": {
                "type": "string",
                "description": "The GitHub organization name to manage. Use this field instead of `owner` when managing organization accounts.\n",
                "deprecationMessage": "Use owner (or GITHUB_OWNER) instead of organization (or GITHUB_ORGANIZATION)"
            },
            "owner": {
                "type": "string",
                "description": "The GitHub owner name to manage. Use this field instead of `organization` when managing individual accounts.\n"
            },
            "token": {
                "type": "string",
                "description": "The OAuth token used to connect to GitHub. Anonymous mode is enabled if both `token` and `app_auth` are not set.\n"
            },
            "writeDelayMs": {
                "type": "integer",
                "description": "Amount of time in milliseconds to sleep in between writes to GitHub API. Defaults to 1000ms or 1s if not set.\n"
            }
        }
    },
    "resources": {
        "github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret": {
            "description": "\n\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name\n\n```sh\n $ pulumi import github:index/actionsEnvironmentSecret:ActionsEnvironmentSecret test_secret test_secret_name\n```\n\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` field when importing. You may need to ignore changes for the `plaintext_value` as a workaround. ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_environment_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "environment",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                }
            },
            "requiredInputs": [
                "environment",
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsEnvironmentSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Name of the environment.\n"
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository.\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_environment_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions": {
            "description": "This resource allows you to create and manage GitHub Actions permissions within your GitHub enterprise organizations.\nYou must have admin access to an organization to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {});\nconst test = new github.ActionsOrganizationPermissions(\"test\", {\n    allowedActions: \"selected\",\n    enabledRepositories: \"selected\",\n    allowedActionsConfig: {\n        githubOwnedAllowed: true,\n        patternsAlloweds: [\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verifiedAllowed: true,\n    },\n    enabledRepositoriesConfig: {\n        repositoryIds: [example.repoId],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\")\ntest = github.ActionsOrganizationPermissions(\"test\",\n    allowed_actions=\"selected\",\n    enabled_repositories=\"selected\",\n    allowed_actions_config=github.ActionsOrganizationPermissionsAllowedActionsConfigArgs(\n        github_owned_allowed=True,\n        patterns_alloweds=[\n            \"actions/cache@*\",\n            \"actions/checkout@*\",\n        ],\n        verified_allowed=True,\n    ),\n    enabled_repositories_config=github.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs(\n        repository_ids=[example.repo_id],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.Repository(\"example\", new Github.RepositoryArgs\n        {\n        });\n        var test = new Github.ActionsOrganizationPermissions(\"test\", new Github.ActionsOrganizationPermissionsArgs\n        {\n            AllowedActions = \"selected\",\n            EnabledRepositories = \"selected\",\n            AllowedActionsConfig = new Github.Inputs.ActionsOrganizationPermissionsAllowedActionsConfigArgs\n            {\n                GithubOwnedAllowed = true,\n                PatternsAlloweds = \n                {\n                    \"actions/cache@*\",\n                    \"actions/checkout@*\",\n                },\n                VerifiedAllowed = true,\n            },\n            EnabledRepositoriesConfig = new Github.Inputs.ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs\n            {\n                RepositoryIds = \n                {\n                    example.RepoId,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationPermissions(ctx, \"test\", \u0026github.ActionsOrganizationPermissionsArgs{\n\t\t\tAllowedActions:      pulumi.String(\"selected\"),\n\t\t\tEnabledRepositories: pulumi.String(\"selected\"),\n\t\t\tAllowedActionsConfig: \u0026ActionsOrganizationPermissionsAllowedActionsConfigArgs{\n\t\t\t\tGithubOwnedAllowed: pulumi.Bool(true),\n\t\t\t\tPatternsAlloweds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"actions/cache@*\"),\n\t\t\t\t\tpulumi.String(\"actions/checkout@*\"),\n\t\t\t\t},\n\t\t\t\tVerifiedAllowed: pulumi.Bool(true),\n\t\t\t},\n\t\t\tEnabledRepositoriesConfig: \u0026ActionsOrganizationPermissionsEnabledRepositoriesConfigArgs{\n\t\t\t\tRepositoryIds: pulumi.IntArray{\n\t\t\t\t\texample.RepoId,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the ID of the GitHub organization\n\n```sh\n $ pulumi import github:index/actionsOrganizationPermissions:ActionsOrganizationPermissions test \u003cgithub_organization_name\u003e\n```\n\n ",
            "properties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabledRepositories": {
                    "type": "string",
                    "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                },
                "enabledRepositoriesConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                    "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                }
            },
            "required": [
                "enabledRepositories"
            ],
            "inputProperties": {
                "allowedActions": {
                    "type": "string",
                    "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                },
                "allowedActionsConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                    "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                },
                "enabledRepositories": {
                    "type": "string",
                    "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                },
                "enabledRepositoriesConfig": {
                    "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                    "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                }
            },
            "requiredInputs": [
                "enabledRepositories"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationPermissions resources.\n",
                "properties": {
                    "allowedActions": {
                        "type": "string",
                        "description": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.\n"
                    },
                    "allowedActionsConfig": {
                        "$ref": "#/types/github:index/ActionsOrganizationPermissionsAllowedActionsConfig:ActionsOrganizationPermissionsAllowedActionsConfig",
                        "description": "Sets the actions that are allowed in an organization. Only available when `allowed_actions` = `selected`. See Allowed Actions Config below for details.\n"
                    },
                    "enabledRepositories": {
                        "type": "string",
                        "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.\n"
                    },
                    "enabledRepositoriesConfig": {
                        "$ref": "#/types/github:index/ActionsOrganizationPermissionsEnabledRepositoriesConfig:ActionsOrganizationPermissionsEnabledRepositoriesConfig",
                        "description": "Sets the list of selected repositories that are enabled for GitHub Actions in an organization. Only available when `enabled_repositories` = `selected`. See Enabled Repositories Config below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationSecret:ActionsOrganizationSecret": {
            "description": "\n\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name\n\n```sh\n $ pulumi import github:index/actionsOrganizationSecret:ActionsOrganizationSecret test_secret test_secret_name\n```\n\n NOTEthe implementation is limited in that it won't fetch the value of the `plaintext_value` or `encrypted_value` fields when importing. You may need to ignore changes for these as a workaround. ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_secret update.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                }
            },
            "required": [
                "createdAt",
                "secretName",
                "updatedAt",
                "visibility"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                }
            },
            "requiredInputs": [
                "secretName",
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n"
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_secret update.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Configures the access that repositories have to the organization secret.\nMust be one of `all`, `private`, `selected`. `selected_repository_ids` is required if set to `selected`.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsOrganizationSecretRepositories:ActionsOrganizationSecretRepositories": {
            "description": "This resource allows you to manage repository allow list for existing GitHub Actions secrets within your GitHub organization.\nYou must have write access to an organization secret to use this resource.\n\nThis resource is only applicable when `visibility` of the existing organization secret has been set to `selected`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = github.getRepository({\n    fullName: \"my-org/repo\",\n});\nconst orgSecretRepos = new github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\", {\n    secretName: \"existing_secret_name\",\n    selectedRepositoryIds: [repo.then(repo =\u003e repo.repoId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.get_repository(full_name=\"my-org/repo\")\norg_secret_repos = github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\",\n    secret_name=\"existing_secret_name\",\n    selected_repository_ids=[repo.repo_id])\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repo = Output.Create(Github.GetRepository.InvokeAsync(new Github.GetRepositoryArgs\n        {\n            FullName = \"my-org/repo\",\n        }));\n        var orgSecretRepos = new Github.ActionsOrganizationSecretRepositories(\"orgSecretRepos\", new Github.ActionsOrganizationSecretRepositoriesArgs\n        {\n            SecretName = \"existing_secret_name\",\n            SelectedRepositoryIds = \n            {\n                repo.Apply(repo =\u003e repo.RepoId),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my-org/repo\"\n\t\trepo, err := github.LookupRepository(ctx, \u0026GetRepositoryArgs{\n\t\t\tFullName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsOrganizationSecretRepositories(ctx, \"orgSecretRepos\", \u0026github.ActionsOrganizationSecretRepositoriesArgs{\n\t\t\tSecretName: pulumi.String(\"existing_secret_name\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(repo.RepoId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using an ID made up of the secret name\n\n```sh\n $ pulumi import github:index/actionsOrganizationSecretRepositories:ActionsOrganizationSecretRepositories test_secret_repos test_secret_name\n```\n\n ",
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "required": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "inputProperties": {
                "secretName": {
                    "type": "string",
                    "description": "Name of the existing secret\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "An array of repository ids that can access the organization secret.\n"
                }
            },
            "requiredInputs": [
                "secretName",
                "selectedRepositoryIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsOrganizationSecretRepositories resources.\n",
                "properties": {
                    "secretName": {
                        "type": "string",
                        "description": "Name of the existing secret\n"
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "An array of repository ids that can access the organization secret.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsRunnerGroup:ActionsRunnerGroup": {
            "description": "This resource allows you to create and manage GitHub Actions runner groups within your GitHub enterprise organizations.\nYou must have admin access to an organization to use this resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleActionsRunnerGroup = new github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\", {\n    visibility: \"selected\",\n    selectedRepositoryIds: [exampleRepository.repoId],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_actions_runner_group = github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\",\n    visibility=\"selected\",\n    selected_repository_ids=[example_repository.repo_id])\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRepository = new Github.Repository(\"exampleRepository\", new Github.RepositoryArgs\n        {\n        });\n        var exampleActionsRunnerGroup = new Github.ActionsRunnerGroup(\"exampleActionsRunnerGroup\", new Github.ActionsRunnerGroupArgs\n        {\n            Visibility = \"selected\",\n            SelectedRepositoryIds = \n            {\n                exampleRepository.RepoId,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewActionsRunnerGroup(ctx, \"exampleActionsRunnerGroup\", \u0026github.ActionsRunnerGroupArgs{\n\t\t\tVisibility: pulumi.String(\"selected\"),\n\t\t\tSelectedRepositoryIds: pulumi.IntArray{\n\t\t\t\texampleRepository.RepoId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the ID of the runner group\n\n```sh\n $ pulumi import github:index/actionsRunnerGroup:ActionsRunnerGroup test 7\n```\n\n ",
            "properties": {
                "allowsPublicRepositories": {
                    "type": "boolean",
                    "description": "Whether public repositories can be added to the runner group\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Whether this is the default runner group\n"
                },
                "etag": {
                    "type": "string",
                    "description": "An etag representing the runner group object\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "Whether the runner group is inherited from the enterprise level\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the runner group\n"
                },
                "runnersUrl": {
                    "type": "string",
                    "description": "The GitHub API URL for the runner group's runners\n"
                },
                "selectedRepositoriesUrl": {
                    "type": "string",
                    "description": "Github API URL for the runner group's repositories\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the repositories which should be added to the runner group\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                }
            },
            "required": [
                "allowsPublicRepositories",
                "default",
                "etag",
                "inherited",
                "name",
                "runnersUrl",
                "selectedRepositoriesUrl",
                "visibility"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the runner group\n"
                },
                "selectedRepositoryIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of the repositories which should be added to the runner group\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                }
            },
            "requiredInputs": [
                "visibility"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsRunnerGroup resources.\n",
                "properties": {
                    "allowsPublicRepositories": {
                        "type": "boolean",
                        "description": "Whether public repositories can be added to the runner group\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether this is the default runner group\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the runner group object\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "Whether the runner group is inherited from the enterprise level\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the runner group\n"
                    },
                    "runnersUrl": {
                        "type": "string",
                        "description": "The GitHub API URL for the runner group's runners\n"
                    },
                    "selectedRepositoriesUrl": {
                        "type": "string",
                        "description": "Github API URL for the runner group's repositories\n"
                    },
                    "selectedRepositoryIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of the repositories which should be added to the runner group\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Visibility of a runner group. Whether the runner group can include `all`, `selected`, or `private` repositories. A value of `private` is not currently supported due to limitations in the GitHub API.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/actionsSecret:ActionsSecret": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Date of actions_secret creation.\n"
                },
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date of actions_secret update.\n"
                }
            },
            "required": [
                "createdAt",
                "repository",
                "secretName",
                "updatedAt"
            ],
            "inputProperties": {
                "encryptedValue": {
                    "type": "string",
                    "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                },
                "plaintextValue": {
                    "type": "string",
                    "description": "Plaintext value of the secret to be encrypted\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the repository\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the secret\n"
                }
            },
            "requiredInputs": [
                "repository",
                "secretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionsSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Date of actions_secret creation.\n"
                    },
                    "encryptedValue": {
                        "type": "string",
                        "description": "Encrypted value of the secret using the Github public key in Base64 format.\n"
                    },
                    "plaintextValue": {
                        "type": "string",
                        "description": "Plaintext value of the secret to be encrypted\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "Name of the secret\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date of actions_secret update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/appInstallationRepository:AppInstallationRepository": {
            "description": "\u003e **Note**: This resource is not compatible with the GitHub App Installation authentication method.\n\nThis resource manages relationships between app installations and repositories\nin your GitHub organization.\n\nCreating this resource installs a particular app on a particular repository.\n\nThe app installation and the repository must both belong to the same\norganization on GitHub. Note: you can review your organization's installations\nby the following the instructions at this\n[link](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/reviewing-your-organizations-installed-integrations).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a repository.\nconst someRepo = new github.Repository(\"some_repo\", {});\nconst someAppRepo = new github.AppInstallationRepository(\"some_app_repo\", {\n    // The installation id of the app (in the organization).\n    installationId: \"1234567\",\n    repository: someRepo.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a repository.\nsome_repo = github.Repository(\"someRepo\")\nsome_app_repo = github.AppInstallationRepository(\"someAppRepo\",\n    installation_id=\"1234567\",\n    repository=some_repo.name)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a repository.\n        var someRepo = new Github.Repository(\"someRepo\", new Github.RepositoryArgs\n        {\n        });\n        var someAppRepo = new Github.AppInstallationRepository(\"someAppRepo\", new Github.AppInstallationRepositoryArgs\n        {\n            InstallationId = \"1234567\",\n            Repository = someRepo.Name,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeRepo, err := github.NewRepository(ctx, \"someRepo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewAppInstallationRepository(ctx, \"someAppRepo\", \u0026github.AppInstallationRepositoryArgs{\n\t\t\tInstallationId: pulumi.String(\"1234567\"),\n\t\t\tRepository:     someRepo.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub App Installation Repository can be imported using an ID made up of `installation_id:repository`, e.g.\n\n```sh\n $ pulumi import github:index/appInstallationRepository:AppInstallationRepository terraform_repo 1234567:terraform\n```\n\n ",
            "properties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n"
                },
                "repoId": {
                    "type": "integer"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to install the app on.\n"
                }
            },
            "required": [
                "installationId",
                "repoId",
                "repository"
            ],
            "inputProperties": {
                "installationId": {
                    "type": "string",
                    "description": "The GitHub app installation id.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to install the app on.\n"
                }
            },
            "requiredInputs": [
                "installationId",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppInstallationRepository resources.\n",
                "properties": {
                    "installationId": {
                        "type": "string",
                        "description": "The GitHub app installation id.\n"
                    },
                    "repoId": {
                        "type": "integer"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to install the app on.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/branch:Branch": {
            "description": "This resource allows you to create and manage branches within your repository.\n\nAdditional constraints can be applied to ensure your branch is created from\nanother branch or commit.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst development = new github.Branch(\"development\", {\n    branch: \"development\",\n    repository: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ndevelopment = github.Branch(\"development\",\n    branch=\"development\",\n    repository=\"example\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var development = new Github.Branch(\"development\", new Github.BranchArgs\n        {\n            Branch = \"development\",\n            Repository = \"example\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewBranch(ctx, \"development\", \u0026github.BranchArgs{\n\t\t\tBranch:     pulumi.String(\"development\"),\n\t\t\tRepository: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch can be imported using an ID made up of `repository:branch`, e.g.\n\n```sh\n $ pulumi import github:index/branch:Branch terraform terraform:main\n```\n\n Optionally, a source branch may be specified using an ID of `repository:branch:source_branch`. This is useful for importing branches that do not branch directly off main.\n\n```sh\n $ pulumi import github:index/branch:Branch terraform terraform:feature-branch:dev\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch to create.\n",
                    "language": {
                        "csharp": {
                            "name": "BranchName"
                        }
                    }
                },
                "etag": {
                    "type": "string",
                    "description": "An etag representing the Branch object.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "sha": {
                    "type": "string",
                    "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                },
                "sourceBranch": {
                    "type": "string",
                    "description": "The branch name to start from. Defaults to `main`.\n"
                },
                "sourceSha": {
                    "type": "string",
                    "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n"
                }
            },
            "required": [
                "branch",
                "etag",
                "ref",
                "repository",
                "sha",
                "sourceSha"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The repository branch to create.\n",
                    "language": {
                        "csharp": {
                            "name": "BranchName"
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "sourceBranch": {
                    "type": "string",
                    "description": "The branch name to start from. Defaults to `main`.\n"
                },
                "sourceSha": {
                    "type": "string",
                    "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Branch resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The repository branch to create.\n",
                        "language": {
                            "csharp": {
                                "name": "BranchName"
                            }
                        }
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the Branch object.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n"
                    },
                    "sha": {
                        "type": "string",
                        "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                    },
                    "sourceBranch": {
                        "type": "string",
                        "description": "The branch name to start from. Defaults to `main`.\n"
                    },
                    "sourceSha": {
                        "type": "string",
                        "description": "The commit hash to start from. Defaults to the tip of `source_branch`. If provided, `source_branch` is ignored.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchDefault:BranchDefault": {
            "description": "Provides a GitHub branch default resource.\n\nThis resource allows you to set the default branch for a given repository. \n\nNote that use of this resource is incompatible with the `default_branch` option of the `github.Repository` resource.  Using both will result in plans always showing a diff.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    autoInit: true,\n});\nconst development = new github.Branch(\"development\", {\n    repository: example.name,\n    branch: \"development\",\n});\nconst _default = new github.BranchDefault(\"default\", {\n    repository: example.name,\n    branch: development.branch,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    auto_init=True)\ndevelopment = github.Branch(\"development\",\n    repository=example.name,\n    branch=\"development\")\ndefault = github.BranchDefault(\"default\",\n    repository=example.name,\n    branch=development.branch)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.Repository(\"example\", new Github.RepositoryArgs\n        {\n            Description = \"My awesome codebase\",\n            AutoInit = true,\n        });\n        var development = new Github.Branch(\"development\", new Github.BranchArgs\n        {\n            Repository = example.Name,\n            Branch = \"development\",\n        });\n        var @default = new Github.BranchDefault(\"default\", new Github.BranchDefaultArgs\n        {\n            Repository = example.Name,\n            Branch = development.BranchName,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tAutoInit:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevelopment, err := github.NewBranch(ctx, \"development\", \u0026github.BranchArgs{\n\t\t\tRepository: example.Name,\n\t\t\tBranch:     pulumi.String(\"development\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchDefault(ctx, \"default\", \u0026github.BranchDefaultArgs{\n\t\t\tRepository: example.Name,\n\t\t\tBranch:     development.Branch,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch Defaults can be imported using an ID made up of `repository`, e.g.\n\n```sh\n $ pulumi import github:index/branchDefault:BranchDefault branch_default my-repo\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch (e.g. `main`)\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "required": [
                "branch",
                "repository"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch (e.g. `main`)\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchDefault resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch (e.g. `main`)\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchProtection:BranchProtection": {
            "description": "Protects a GitHub branch.\n\nThis resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users, teams, and apps, can also be configured.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleUser = github.getUser({\n    username: \"example\",\n});\nconst exampleTeam = new github.Team(\"exampleTeam\", {});\n// Protect the main branch of the foo repository. Additionally, require that\n// the \"ci/travis\" context to be passing and only allow the engineers team merge\n// to the branch.\nconst exampleBranchProtection = new github.BranchProtection(\"exampleBranchProtection\", {\n    repositoryId: exampleRepository.nodeId,\n    pattern: \"main\",\n    enforceAdmins: true,\n    allowsDeletions: true,\n    requiredStatusChecks: [{\n        strict: false,\n        contexts: [\"ci/travis\"],\n    }],\n    requiredPullRequestReviews: [{\n        dismissStaleReviews: true,\n        restrictDismissals: true,\n        dismissalRestrictions: [\n            exampleUser.then(exampleUser =\u003e exampleUser.nodeId),\n            exampleTeam.nodeId,\n        ],\n    }],\n    pushRestrictions: [exampleUser.then(exampleUser =\u003e exampleUser.nodeId)],\n});\nconst exampleTeamRepository = new github.TeamRepository(\"exampleTeamRepository\", {\n    teamId: exampleTeam.id,\n    repository: exampleRepository.name,\n    permission: \"pull\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_user = github.get_user(username=\"example\")\nexample_team = github.Team(\"exampleTeam\")\n# Protect the main branch of the foo repository. Additionally, require that\n# the \"ci/travis\" context to be passing and only allow the engineers team merge\n# to the branch.\nexample_branch_protection = github.BranchProtection(\"exampleBranchProtection\",\n    repository_id=example_repository.node_id,\n    pattern=\"main\",\n    enforce_admins=True,\n    allows_deletions=True,\n    required_status_checks=[github.BranchProtectionRequiredStatusCheckArgs(\n        strict=False,\n        contexts=[\"ci/travis\"],\n    )],\n    required_pull_request_reviews=[github.BranchProtectionRequiredPullRequestReviewArgs(\n        dismiss_stale_reviews=True,\n        restrict_dismissals=True,\n        dismissal_restrictions=[\n            example_user.node_id,\n            example_team.node_id,\n        ],\n    )],\n    push_restrictions=[example_user.node_id])\nexample_team_repository = github.TeamRepository(\"exampleTeamRepository\",\n    team_id=example_team.id,\n    repository=example_repository.name,\n    permission=\"pull\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRepository = new Github.Repository(\"exampleRepository\", new Github.RepositoryArgs\n        {\n        });\n        var exampleUser = Output.Create(Github.GetUser.InvokeAsync(new Github.GetUserArgs\n        {\n            Username = \"example\",\n        }));\n        var exampleTeam = new Github.Team(\"exampleTeam\", new Github.TeamArgs\n        {\n        });\n        // Protect the main branch of the foo repository. Additionally, require that\n        // the \"ci/travis\" context to be passing and only allow the engineers team merge\n        // to the branch.\n        var exampleBranchProtection = new Github.BranchProtection(\"exampleBranchProtection\", new Github.BranchProtectionArgs\n        {\n            RepositoryId = exampleRepository.NodeId,\n            Pattern = \"main\",\n            EnforceAdmins = true,\n            AllowsDeletions = true,\n            RequiredStatusChecks = \n            {\n                new Github.Inputs.BranchProtectionRequiredStatusCheckArgs\n                {\n                    Strict = false,\n                    Contexts = \n                    {\n                        \"ci/travis\",\n                    },\n                },\n            },\n            RequiredPullRequestReviews = \n            {\n                new Github.Inputs.BranchProtectionRequiredPullRequestReviewArgs\n                {\n                    DismissStaleReviews = true,\n                    RestrictDismissals = true,\n                    DismissalRestrictions = \n                    {\n                        exampleUser.Apply(exampleUser =\u003e exampleUser.NodeId),\n                        exampleTeam.NodeId,\n                    },\n                },\n            },\n            PushRestrictions = \n            {\n                exampleUser.Apply(exampleUser =\u003e exampleUser.NodeId),\n            },\n        });\n        var exampleTeamRepository = new Github.TeamRepository(\"exampleTeamRepository\", new Github.TeamRepositoryArgs\n        {\n            TeamId = exampleTeam.Id,\n            Repository = exampleRepository.Name,\n            Permission = \"pull\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := github.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := github.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchProtection(ctx, \"exampleBranchProtection\", \u0026github.BranchProtectionArgs{\n\t\t\tRepositoryId:    exampleRepository.NodeId,\n\t\t\tPattern:         pulumi.String(\"main\"),\n\t\t\tEnforceAdmins:   pulumi.Bool(true),\n\t\t\tAllowsDeletions: pulumi.Bool(true),\n\t\t\tRequiredStatusChecks: BranchProtectionRequiredStatusCheckArray{\n\t\t\t\t\u0026BranchProtectionRequiredStatusCheckArgs{\n\t\t\t\t\tStrict: pulumi.Bool(false),\n\t\t\t\t\tContexts: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ci/travis\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRequiredPullRequestReviews: BranchProtectionRequiredPullRequestReviewArray{\n\t\t\t\t\u0026BranchProtectionRequiredPullRequestReviewArgs{\n\t\t\t\t\tDismissStaleReviews: pulumi.Bool(true),\n\t\t\t\t\tRestrictDismissals:  pulumi.Bool(true),\n\t\t\t\t\tDismissalRestrictions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(exampleUser.NodeId),\n\t\t\t\t\t\texampleTeam.NodeId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPushRestrictions: pulumi.StringArray{\n\t\t\t\tpulumi.String(exampleUser.NodeId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamRepository(ctx, \"exampleTeamRepository\", \u0026github.TeamRepositoryArgs{\n\t\t\tTeamId:     exampleTeam.ID(),\n\t\t\tRepository: exampleRepository.Name,\n\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch Protection can be imported using an ID made up of `repository:pattern`, e.g.\n\n```sh\n $ pulumi import github:index/branchProtection:BranchProtection terraform terraform:main\n```\n\n ",
            "properties": {
                "allowsDeletions": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                },
                "allowsForcePushes": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Identifies the protection rule pattern.\n"
                },
                "pushRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor IDs that may push to the branch.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The name or node ID of the repository associated with this branch protection rule.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                },
                "requiredPullRequestReviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                    },
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                    },
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                }
            },
            "required": [
                "pattern",
                "repositoryId"
            ],
            "inputProperties": {
                "allowsDeletions": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                },
                "allowsForcePushes": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Identifies the protection rule pattern.\n"
                },
                "pushRestrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of actor IDs that may push to the branch.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The name or node ID of the repository associated with this branch protection rule.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredLinearHistory": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                },
                "requiredPullRequestReviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                    },
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                    },
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                }
            },
            "requiredInputs": [
                "pattern",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtection resources.\n",
                "properties": {
                    "allowsDeletions": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` to allow the branch to be deleted.\n"
                    },
                    "allowsForcePushes": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` to allow force pushes on the branch.\n"
                    },
                    "enforceAdmins": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Identifies the protection rule pattern.\n"
                    },
                    "pushRestrictions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of actor IDs that may push to the branch.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The name or node ID of the repository associated with this branch protection rule.\n"
                    },
                    "requireConversationResolution": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                    },
                    "requireSignedCommits": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                    },
                    "requiredLinearHistory": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch\n"
                    },
                    "requiredPullRequestReviews": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/BranchProtectionRequiredPullRequestReview:BranchProtectionRequiredPullRequestReview"
                        },
                        "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                    },
                    "requiredStatusChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/BranchProtectionRequiredStatusCheck:BranchProtectionRequiredStatusCheck"
                        },
                        "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/branchProtectionV3:BranchProtectionV3": {
            "description": "Protects a GitHub branch.\n\nThe `github.BranchProtection` resource has moved to the GraphQL API, while this resource will continue to leverage the REST API.\n\nThis resource allows you to configure branch protection for repositories in your organization. When applied, the branch will be protected from forced pushes and deletion. Additional constraints, such as required status checks or restrictions on users, teams, and apps, can also be configured.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Protect the main branch of the foo repository. Only allow a specific user to merge to the branch.\nconst example = new github.BranchProtectionV3(\"example\", {\n    repository: github_repository.example.name,\n    branch: \"main\",\n    restrictions: {\n        users: [\"foo-user\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Protect the main branch of the foo repository. Only allow a specific user to merge to the branch.\nexample = github.BranchProtectionV3(\"example\",\n    repository=github_repository[\"example\"][\"name\"],\n    branch=\"main\",\n    restrictions=github.BranchProtectionV3RestrictionsArgs(\n        users=[\"foo-user\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Protect the main branch of the foo repository. Only allow a specific user to merge to the branch.\n        var example = new Github.BranchProtectionV3(\"example\", new Github.BranchProtectionV3Args\n        {\n            Repository = github_repository.Example.Name,\n            Branch = \"main\",\n            Restrictions = new Github.Inputs.BranchProtectionV3RestrictionsArgs\n            {\n                Users = \n                {\n                    \"foo-user\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewBranchProtectionV3(ctx, \"example\", \u0026github.BranchProtectionV3Args{\n\t\t\tRepository: pulumi.Any(github_repository.Example.Name),\n\t\t\tBranch:     pulumi.String(\"main\"),\n\t\t\tRestrictions: \u0026BranchProtectionV3RestrictionsArgs{\n\t\t\t\tUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo-user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleTeam = new github.Team(\"exampleTeam\", {});\n// Protect the main branch of the foo repository. Additionally, require that\n// the \"ci/travis\" context to be passing and only allow the engineers team merge\n// to the branch.\nconst exampleBranchProtectionV3 = new github.BranchProtectionV3(\"exampleBranchProtectionV3\", {\n    repository: exampleRepository.name,\n    branch: \"main\",\n    enforceAdmins: true,\n    requiredStatusChecks: {\n        strict: false,\n        contexts: [\"ci/travis\"],\n    },\n    requiredPullRequestReviews: {\n        dismissStaleReviews: true,\n        dismissalUsers: [\"foo-user\"],\n        dismissalTeams: [exampleTeam.slug],\n    },\n    restrictions: {\n        users: [\"foo-user\"],\n        teams: [exampleTeam.slug],\n        apps: [\"foo-app\"],\n    },\n});\nconst exampleTeamRepository = new github.TeamRepository(\"exampleTeamRepository\", {\n    teamId: exampleTeam.id,\n    repository: exampleRepository.name,\n    permission: \"pull\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_team = github.Team(\"exampleTeam\")\n# Protect the main branch of the foo repository. Additionally, require that\n# the \"ci/travis\" context to be passing and only allow the engineers team merge\n# to the branch.\nexample_branch_protection_v3 = github.BranchProtectionV3(\"exampleBranchProtectionV3\",\n    repository=example_repository.name,\n    branch=\"main\",\n    enforce_admins=True,\n    required_status_checks=github.BranchProtectionV3RequiredStatusChecksArgs(\n        strict=False,\n        contexts=[\"ci/travis\"],\n    ),\n    required_pull_request_reviews=github.BranchProtectionV3RequiredPullRequestReviewsArgs(\n        dismiss_stale_reviews=True,\n        dismissal_users=[\"foo-user\"],\n        dismissal_teams=[example_team.slug],\n    ),\n    restrictions=github.BranchProtectionV3RestrictionsArgs(\n        users=[\"foo-user\"],\n        teams=[example_team.slug],\n        apps=[\"foo-app\"],\n    ))\nexample_team_repository = github.TeamRepository(\"exampleTeamRepository\",\n    team_id=example_team.id,\n    repository=example_repository.name,\n    permission=\"pull\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRepository = new Github.Repository(\"exampleRepository\", new Github.RepositoryArgs\n        {\n        });\n        var exampleTeam = new Github.Team(\"exampleTeam\", new Github.TeamArgs\n        {\n        });\n        // Protect the main branch of the foo repository. Additionally, require that\n        // the \"ci/travis\" context to be passing and only allow the engineers team merge\n        // to the branch.\n        var exampleBranchProtectionV3 = new Github.BranchProtectionV3(\"exampleBranchProtectionV3\", new Github.BranchProtectionV3Args\n        {\n            Repository = exampleRepository.Name,\n            Branch = \"main\",\n            EnforceAdmins = true,\n            RequiredStatusChecks = new Github.Inputs.BranchProtectionV3RequiredStatusChecksArgs\n            {\n                Strict = false,\n                Contexts = \n                {\n                    \"ci/travis\",\n                },\n            },\n            RequiredPullRequestReviews = new Github.Inputs.BranchProtectionV3RequiredPullRequestReviewsArgs\n            {\n                DismissStaleReviews = true,\n                DismissalUsers = \n                {\n                    \"foo-user\",\n                },\n                DismissalTeams = \n                {\n                    exampleTeam.Slug,\n                },\n            },\n            Restrictions = new Github.Inputs.BranchProtectionV3RestrictionsArgs\n            {\n                Users = \n                {\n                    \"foo-user\",\n                },\n                Teams = \n                {\n                    exampleTeam.Slug,\n                },\n                Apps = \n                {\n                    \"foo-app\",\n                },\n            },\n        });\n        var exampleTeamRepository = new Github.TeamRepository(\"exampleTeamRepository\", new Github.TeamRepositoryArgs\n        {\n            TeamId = exampleTeam.Id,\n            Repository = exampleRepository.Name,\n            Permission = \"pull\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := github.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewBranchProtectionV3(ctx, \"exampleBranchProtectionV3\", \u0026github.BranchProtectionV3Args{\n\t\t\tRepository:    exampleRepository.Name,\n\t\t\tBranch:        pulumi.String(\"main\"),\n\t\t\tEnforceAdmins: pulumi.Bool(true),\n\t\t\tRequiredStatusChecks: \u0026BranchProtectionV3RequiredStatusChecksArgs{\n\t\t\t\tStrict: pulumi.Bool(false),\n\t\t\t\tContexts: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ci/travis\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRequiredPullRequestReviews: \u0026BranchProtectionV3RequiredPullRequestReviewsArgs{\n\t\t\t\tDismissStaleReviews: pulumi.Bool(true),\n\t\t\t\tDismissalUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo-user\"),\n\t\t\t\t},\n\t\t\t\tDismissalTeams: pulumi.StringArray{\n\t\t\t\t\texampleTeam.Slug,\n\t\t\t\t},\n\t\t\t},\n\t\t\tRestrictions: \u0026BranchProtectionV3RestrictionsArgs{\n\t\t\t\tUsers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo-user\"),\n\t\t\t\t},\n\t\t\t\tTeams: pulumi.StringArray{\n\t\t\t\t\texampleTeam.Slug,\n\t\t\t\t},\n\t\t\t\tApps: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo-app\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamRepository(ctx, \"exampleTeamRepository\", \u0026github.TeamRepositoryArgs{\n\t\t\tTeamId:     exampleTeam.ID(),\n\t\t\tRepository: exampleRepository.Name,\n\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Branch Protection can be imported using an ID made up of `repository:branch`, e.g.\n\n```sh\n $ pulumi import github:index/branchProtectionV3:BranchProtectionV3 github_branch_protection_v3.terraform terraform:main\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The Git branch to protect.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "etag": {
                    "type": "string"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredPullRequestReviews": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                },
                "restrictions": {
                    "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                    "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                }
            },
            "required": [
                "branch",
                "etag",
                "repository"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The Git branch to protect.\n"
                },
                "enforceAdmins": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository name.\n"
                },
                "requireConversationResolution": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                },
                "requireSignedCommits": {
                    "type": "boolean",
                    "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                },
                "requiredPullRequestReviews": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                    "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                },
                "requiredStatusChecks": {
                    "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                    "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                },
                "restrictions": {
                    "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                    "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                }
            },
            "requiredInputs": [
                "branch",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchProtectionV3 resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The Git branch to protect.\n"
                    },
                    "enforceAdmins": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` enforces status checks for repository administrators.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n"
                    },
                    "requireConversationResolution": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all conversations on code must be resolved before a pull request can be merged.\n"
                    },
                    "requireSignedCommits": {
                        "type": "boolean",
                        "description": "Boolean, setting this to `true` requires all commits to be signed with GPG.\n"
                    },
                    "requiredPullRequestReviews": {
                        "$ref": "#/types/github:index/BranchProtectionV3RequiredPullRequestReviews:BranchProtectionV3RequiredPullRequestReviews",
                        "description": "Enforce restrictions for pull request reviews. See Required Pull Request Reviews below for details.\n"
                    },
                    "requiredStatusChecks": {
                        "$ref": "#/types/github:index/BranchProtectionV3RequiredStatusChecks:BranchProtectionV3RequiredStatusChecks",
                        "description": "Enforce restrictions for required status checks. See Required Status Checks below for details.\n"
                    },
                    "restrictions": {
                        "$ref": "#/types/github:index/BranchProtectionV3Restrictions:BranchProtectionV3Restrictions",
                        "description": "Enforce restrictions for the users and teams that may push to the branch. See Restrictions below for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/issueLabel:IssueLabel": {
            "description": "\n\n\n## Import\n\nGitHub Issue Labels can be imported using an ID made up of `repository:name`, e.g.\n\n```sh\n $ pulumi import github:index/issueLabel:IssueLabel panic_label terraform:panic\n```\n\n ",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the issue label\n"
                }
            },
            "required": [
                "color",
                "etag",
                "name",
                "repository",
                "url"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the label.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the label.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                }
            },
            "requiredInputs": [
                "color",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IssueLabel resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "A 6 character hex code, **without the leading #**, identifying the color of the label.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the label.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the label.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the issue label\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/membership:Membership": {
            "description": "Provides a GitHub membership resource.\n\nThis resource allows you to add/remove users from your organization. When applied,\nan invitation will be sent to the user to become part of the organization. When\ndestroyed, either the invitation will be cancelled or the user will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a user to the organization\nconst membershipForSomeUser = new github.Membership(\"membership_for_some_user\", {\n    role: \"member\",\n    username: \"SomeUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a user to the organization\nmembership_for_some_user = github.Membership(\"membershipForSomeUser\",\n    role=\"member\",\n    username=\"SomeUser\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a user to the organization\n        var membershipForSomeUser = new Github.Membership(\"membershipForSomeUser\", new Github.MembershipArgs\n        {\n            Role = \"member\",\n            Username = \"SomeUser\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewMembership(ctx, \"membershipForSomeUser\", \u0026github.MembershipArgs{\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Membership can be imported using an ID made up of `organization:username`, e.g.\n\n```sh\n $ pulumi import github:index/membership:Membership member hashicorp:someuser\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the organization.\n"
                }
            },
            "required": [
                "etag",
                "username"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the organization.\n"
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Membership resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the user within the organization.\nMust be one of `member` or `admin`. Defaults to `member`.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationBlock:OrganizationBlock": {
            "description": "This resource allows you to create and manage blocks for GitHub organizations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.OrganizationBlock(\"example\", {\n    username: \"paultyng\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.OrganizationBlock(\"example\", username=\"paultyng\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.OrganizationBlock(\"example\", new Github.OrganizationBlockArgs\n        {\n            Username = \"paultyng\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationBlock(ctx, \"example\", \u0026github.OrganizationBlockArgs{\n\t\t\tUsername: pulumi.String(\"paultyng\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user to block.\n"
                }
            },
            "required": [
                "etag",
                "username"
            ],
            "inputProperties": {
                "username": {
                    "type": "string",
                    "description": "The name of the user to block.\n"
                }
            },
            "requiredInputs": [
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationBlock resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user to block.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationProject:OrganizationProject": {
            "description": "This resource allows you to create and manage projects for GitHub organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {\n    body: \"This is a organization project.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is a organization project.\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new Github.OrganizationProject(\"project\", new Github.OrganizationProjectArgs\n        {\n            Body = \"This is a organization project.\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is a organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the project\n"
                }
            },
            "required": [
                "etag",
                "name",
                "url"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationProject resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the project.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/organizationWebhook:OrganizationWebhook": {
            "description": "This resource allows you to create and manage webhooks for GitHub organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst foo = new github.OrganizationWebhook(\"foo\", {\n    active: false,\n    configuration: {\n        contentType: \"form\",\n        insecureSsl: false,\n        url: \"https://google.de/\",\n    },\n    events: [\"issues\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo = github.OrganizationWebhook(\"foo\",\n    active=False,\n    configuration=github.OrganizationWebhookConfigurationArgs(\n        content_type=\"form\",\n        insecure_ssl=False,\n        url=\"https://google.de/\",\n    ),\n    events=[\"issues\"])\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Github.OrganizationWebhook(\"foo\", new Github.OrganizationWebhookArgs\n        {\n            Active = false,\n            Configuration = new Github.Inputs.OrganizationWebhookConfigurationArgs\n            {\n                ContentType = \"form\",\n                InsecureSsl = false,\n                Url = \"https://google.de/\",\n            },\n            Events = \n            {\n                \"issues\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewOrganizationWebhook(ctx, \"foo\", \u0026github.OrganizationWebhookArgs{\n\t\t\tActive: pulumi.Bool(false),\n\t\t\tConfiguration: \u0026OrganizationWebhookConfigurationArgs{\n\t\t\t\tContentType: pulumi.String(\"form\"),\n\t\t\t\tInsecureSsl: pulumi.Bool(false),\n\t\t\t\tUrl:         pulumi.String(\"https://google.de/\"),\n\t\t\t},\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"issues\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nOrganization webhooks can be imported using the `id` of the webhook. The `id` of the webhook can be found in the URL of the webhook. For example, `\"https://github.com/organizations/foo-org/settings/hooks/123456789\"`.\n\n```sh\n $ pulumi import github:index/organizationWebhook:OrganizationWebhook terraform 123456789\n```\n\n If secret is populated in the webhook's configuration, the value will be imported as \"********\". ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                    "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                },
                "etag": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the webhook\n"
                }
            },
            "required": [
                "etag",
                "events",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                    "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                }
            },
            "requiredInputs": [
                "events"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationWebhook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicate of the webhook should receive events. Defaults to `true`.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/github:index/OrganizationWebhookConfiguration:OrganizationWebhookConfiguration",
                        "description": "key/value pair of configuration for this webhook. Available keys are `url`, `content_type`, `secret` and `insecure_ssl`.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the webhook\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/projectCard:ProjectCard": {
            "description": "This resource allows you to create and manage cards for GitHub projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {body: \"This is an organization project.\"});\nconst column = new github.ProjectColumn(\"column\", {projectId: project.id});\nconst card = new github.ProjectCard(\"card\", {\n    columnId: column.columnId,\n    note: \"## Unaccepted 👇\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is an organization project.\")\ncolumn = github.ProjectColumn(\"column\", project_id=project.id)\ncard = github.ProjectCard(\"card\",\n    column_id=column.column_id,\n    note=\"## Unaccepted 👇\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new Github.OrganizationProject(\"project\", new Github.OrganizationProjectArgs\n        {\n            Body = \"This is an organization project.\",\n        });\n        var column = new Github.ProjectColumn(\"column\", new Github.ProjectColumnArgs\n        {\n            ProjectId = project.Id,\n        });\n        var card = new Github.ProjectCard(\"card\", new Github.ProjectCardArgs\n        {\n            ColumnId = column.ColumnId,\n            Note = \"## Unaccepted 👇\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is an organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcolumn, err := github.NewProjectColumn(ctx, \"column\", \u0026github.ProjectColumnArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProjectCard(ctx, \"card\", \u0026github.ProjectCardArgs{\n\t\t\tColumnId: column.ColumnId,\n\t\t\tNote:     pulumi.String(\"## Unaccepted 👇\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA GitHub Project Card can be imported using its [Card ID](https://developer.github.com/v3/projects/cards/#get-a-project-card)\n\n```sh\n $ pulumi import github:index/projectCard:ProjectCard card 01234567\n```\n\n ",
            "properties": {
                "cardId": {
                    "type": "integer"
                },
                "columnId": {
                    "type": "string",
                    "description": "The ID of the card.\n"
                },
                "etag": {
                    "type": "string"
                },
                "note": {
                    "type": "string",
                    "description": "The note contents of the card. Markdown supported.\n"
                }
            },
            "required": [
                "cardId",
                "columnId",
                "etag",
                "note"
            ],
            "inputProperties": {
                "columnId": {
                    "type": "string",
                    "description": "The ID of the card.\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note contents of the card. Markdown supported.\n"
                }
            },
            "requiredInputs": [
                "columnId",
                "note"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectCard resources.\n",
                "properties": {
                    "cardId": {
                        "type": "integer"
                    },
                    "columnId": {
                        "type": "string",
                        "description": "The ID of the card.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note contents of the card. Markdown supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/projectColumn:ProjectColumn": {
            "description": "This resource allows you to create and manage columns for GitHub projects.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst project = new github.OrganizationProject(\"project\", {body: \"This is an organization project.\"});\nconst column = new github.ProjectColumn(\"column\", {projectId: project.id});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nproject = github.OrganizationProject(\"project\", body=\"This is an organization project.\")\ncolumn = github.ProjectColumn(\"column\", project_id=project.id)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new Github.OrganizationProject(\"project\", new Github.OrganizationProjectArgs\n        {\n            Body = \"This is an organization project.\",\n        });\n        var column = new Github.ProjectColumn(\"column\", new Github.ProjectColumnArgs\n        {\n            ProjectId = project.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := github.NewOrganizationProject(ctx, \"project\", \u0026github.OrganizationProjectArgs{\n\t\t\tBody: pulumi.String(\"This is an organization project.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewProjectColumn(ctx, \"column\", \u0026github.ProjectColumnArgs{\n\t\t\tProjectId: project.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "columnId": {
                    "type": "integer"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of an existing project that the column will be created in.\n"
                }
            },
            "required": [
                "columnId",
                "etag",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the column.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of an existing project that the column will be created in.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectColumn resources.\n",
                "properties": {
                    "columnId": {
                        "type": "integer"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the column.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of an existing project that the column will be created in.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repository:Repository": {
            "description": "This resource allows you to create and manage repositories within your\nGitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    template: {\n        owner: \"github\",\n        repository: \"terraform-module-template\",\n    },\n    visibility: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    template=github.RepositoryTemplateArgs(\n        owner=\"github\",\n        repository=\"terraform-module-template\",\n    ),\n    visibility=\"public\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.Repository(\"example\", new Github.RepositoryArgs\n        {\n            Description = \"My awesome codebase\",\n            Template = new Github.Inputs.RepositoryTemplateArgs\n            {\n                Owner = \"github\",\n                Repository = \"terraform-module-template\",\n            },\n            Visibility = \"public\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tTemplate: \u0026RepositoryTemplateArgs{\n\t\t\t\tOwner:      pulumi.String(\"github\"),\n\t\t\t\tRepository: pulumi.String(\"terraform-module-template\"),\n\t\t\t},\n\t\t\tVisibility: pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### With GitHub Pages Enabled\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome web page\",\n    pages: {\n        source: {\n            branch: \"master\",\n            path: \"/docs\",\n        },\n    },\n    private: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome web page\",\n    pages=github.RepositoryPagesArgs(\n        source=github.RepositoryPagesSourceArgs(\n            branch=\"master\",\n            path=\"/docs\",\n        ),\n    ),\n    private=False)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.Repository(\"example\", new Github.RepositoryArgs\n        {\n            Description = \"My awesome web page\",\n            Pages = new Github.Inputs.RepositoryPagesArgs\n            {\n                Source = new Github.Inputs.RepositoryPagesSourceArgs\n                {\n                    Branch = \"master\",\n                    Path = \"/docs\",\n                },\n            },\n            Private = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome web page\"),\n\t\t\tPages: \u0026RepositoryPagesArgs{\n\t\t\t\tSource: \u0026RepositoryPagesSourceArgs{\n\t\t\t\t\tBranch: pulumi.String(\"master\"),\n\t\t\t\t\tPath:   pulumi.String(\"/docs\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrivate: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepositories can be imported using the `name`, e.g.\n\n```sh\n $ pulumi import github:index/repository:Repository terraform terraform\n```\n\n ",
            "properties": {
                "allowAutoMerge": {
                    "type": "boolean",
                    "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                },
                "allowMergeCommit": {
                    "type": "boolean",
                    "description": "Set to `false` to disable merge commits on the repository.\n"
                },
                "allowRebaseMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable rebase merges on the repository.\n"
                },
                "allowSquashMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable squash merges on the repository.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                },
                "autoInit": {
                    "type": "boolean",
                    "description": "Set to `true` to produce an initial commit in the repository.\n"
                },
                "branches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryBranch:RepositoryBranch"
                    },
                    "description": "The list of this repository's branches. Each element of `branches` has the following attributes:\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                    "deprecationMessage": "Use the github_branch_default resource instead"
                },
                "deleteBranchOnMerge": {
                    "type": "boolean",
                    "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the repository.\n"
                },
                "etag": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string",
                    "description": "A string of the form \"orgname/reponame\".\n"
                },
                "gitCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                },
                "gitignoreTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                },
                "hasDownloads": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                },
                "hasProjects": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "URL of a page describing the project.\n"
                },
                "htmlUrl": {
                    "type": "string",
                    "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n"
                },
                "httpCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                },
                "licenseTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "GraphQL global node id for use with v4 API\n"
                },
                "pages": {
                    "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                    "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                    "deprecationMessage": "use visibility instead"
                },
                "repoId": {
                    "type": "integer",
                    "description": "GitHub ID for the repository\n"
                },
                "sshCloneUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                },
                "svnUrl": {
                    "type": "string",
                    "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                },
                "template": {
                    "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                    "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics of the repository.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                },
                "vulnerabilityAlerts": {
                    "type": "boolean",
                    "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                }
            },
            "required": [
                "branches",
                "defaultBranch",
                "etag",
                "fullName",
                "gitCloneUrl",
                "htmlUrl",
                "httpCloneUrl",
                "name",
                "nodeId",
                "private",
                "repoId",
                "sshCloneUrl",
                "svnUrl",
                "visibility"
            ],
            "inputProperties": {
                "allowAutoMerge": {
                    "type": "boolean",
                    "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                },
                "allowMergeCommit": {
                    "type": "boolean",
                    "description": "Set to `false` to disable merge commits on the repository.\n"
                },
                "allowRebaseMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable rebase merges on the repository.\n"
                },
                "allowSquashMerge": {
                    "type": "boolean",
                    "description": "Set to `false` to disable squash merges on the repository.\n"
                },
                "archiveOnDestroy": {
                    "type": "boolean",
                    "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                },
                "archived": {
                    "type": "boolean",
                    "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                },
                "autoInit": {
                    "type": "boolean",
                    "description": "Set to `true` to produce an initial commit in the repository.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                    "deprecationMessage": "Use the github_branch_default resource instead"
                },
                "deleteBranchOnMerge": {
                    "type": "boolean",
                    "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the repository.\n"
                },
                "gitignoreTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                },
                "hasDownloads": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                },
                "hasProjects": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "URL of a page describing the project.\n"
                },
                "isTemplate": {
                    "type": "boolean",
                    "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                },
                "licenseTemplate": {
                    "type": "string",
                    "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "pages": {
                    "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                    "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                    "deprecationMessage": "use visibility instead"
                },
                "template": {
                    "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                    "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of topics of the repository.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                },
                "vulnerabilityAlerts": {
                    "type": "boolean",
                    "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "allowAutoMerge": {
                        "type": "boolean",
                        "description": "Set to `true` to allow auto-merging pull requests on the repository.\n"
                    },
                    "allowMergeCommit": {
                        "type": "boolean",
                        "description": "Set to `false` to disable merge commits on the repository.\n"
                    },
                    "allowRebaseMerge": {
                        "type": "boolean",
                        "description": "Set to `false` to disable rebase merges on the repository.\n"
                    },
                    "allowSquashMerge": {
                        "type": "boolean",
                        "description": "Set to `false` to disable squash merges on the repository.\n"
                    },
                    "archiveOnDestroy": {
                        "type": "boolean",
                        "description": "Set to `true` to archive the repository instead of deleting on destroy.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Specifies if the repository should be archived. Defaults to `false`. **NOTE** Currently, the API does not support unarchiving.\n"
                    },
                    "autoInit": {
                        "type": "boolean",
                        "description": "Set to `true` to produce an initial commit in the repository.\n"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryBranch:RepositoryBranch"
                        },
                        "description": "The list of this repository's branches. Each element of `branches` has the following attributes:\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "(Deprecated: Use `github.BranchDefault` resource instead) The name of the default branch of the repository. **NOTE:** This can only be set after a repository has already been created,\nand after a correct reference has been created for the target branch inside the repository. This means a user will have to omit this parameter from the\ninitial repository creation and create the target branch inside of the repository prior to setting this attribute.\n",
                        "deprecationMessage": "Use the github_branch_default resource instead"
                    },
                    "deleteBranchOnMerge": {
                        "type": "boolean",
                        "description": "Automatically delete head branch after a pull request is merged. Defaults to `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the repository.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "A string of the form \"orgname/reponame\".\n"
                    },
                    "gitCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                    },
                    "gitignoreTemplate": {
                        "type": "string",
                        "description": "Use the [name of the template](https://github.com/github/gitignore) without the extension. For example, \"Haskell\".\n"
                    },
                    "hasDownloads": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the (deprecated) downloads features on the repository.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Issues features\non the repository.\n"
                    },
                    "hasProjects": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Projects features on the repository. Per the GitHub [documentation](https://developer.github.com/v3/repos/#create) when in an organization that has disabled repository projects it will default to `false` and will otherwise default to `true`. If you specify `true` when it has been disabled it will return an error.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the GitHub Wiki features on\nthe repository.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "The absolute URL (including scheme) of the rendered GitHub Pages site e.g. `https://username.github.io`.\n"
                    },
                    "httpCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                    },
                    "isTemplate": {
                        "type": "boolean",
                        "description": "Set to `true` to tell GitHub that this is a template repository.\n"
                    },
                    "licenseTemplate": {
                        "type": "string",
                        "description": "Use the [name of the template](https://github.com/github/choosealicense.com/tree/gh-pages/_licenses) without the extension. For example, \"mit\" or \"mpl-2.0\".\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "GraphQL global node id for use with v4 API\n"
                    },
                    "pages": {
                        "$ref": "#/types/github:index/RepositoryPages:RepositoryPages",
                        "description": "The repository's GitHub Pages configuration. See GitHub Pages Configuration below for details.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Set to `true` to create a private repository.\nRepositories are created as public (e.g. open source) by default.\n",
                        "deprecationMessage": "use visibility instead"
                    },
                    "repoId": {
                        "type": "integer",
                        "description": "GitHub ID for the repository\n"
                    },
                    "sshCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                    },
                    "svnUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                    },
                    "template": {
                        "$ref": "#/types/github:index/RepositoryTemplate:RepositoryTemplate",
                        "description": "Use a template repository to create this resource. See Template Repositories below for details.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topics of the repository.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be `internal`. The `visibility` parameter overrides the `private` parameter.\n"
                    },
                    "vulnerabilityAlerts": {
                        "type": "boolean",
                        "description": "Set to `true` to enable security alerts for vulnerable dependencies. Enabling requires alerts to be enabled on the owner level. (Note for importing: GitHub enables the alerts on public repos but disables them on private repos by default.) See [GitHub Documentation](https://help.github.com/en/github/managing-security-vulnerabilities/about-security-alerts-for-vulnerable-dependencies) for details. Note that vulnerability alerts have not been successfully tested on any GitHub Enterprise instance and may be unavailable in those settings.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryAutolinkReference:RepositoryAutolinkReference": {
            "description": "This resource allows you to create and manage an autolink reference for a single repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = new github.Repository(\"repo\", {\n    description: \"GitHub repo managed by Terraform\",\n    \"private\": false,\n});\nconst auto = new github.RepositoryAutolinkReference(\"auto\", {\n    repository: repo.name,\n    keyPrefix: \"TICKET-\",\n    targetUrlTemplate: \"https://hello.there/TICKET?query=\u003cnum\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.Repository(\"repo\",\n    description=\"GitHub repo managed by Terraform\",\n    private=False)\nauto = github.RepositoryAutolinkReference(\"auto\",\n    repository=repo.name,\n    key_prefix=\"TICKET-\",\n    target_url_template=\"https://hello.there/TICKET?query=\u003cnum\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repo = new Github.Repository(\"repo\", new Github.RepositoryArgs\n        {\n            Description = \"GitHub repo managed by Terraform\",\n            Private = false,\n        });\n        var auto = new Github.RepositoryAutolinkReference(\"auto\", new Github.RepositoryAutolinkReferenceArgs\n        {\n            Repository = repo.Name,\n            KeyPrefix = \"TICKET-\",\n            TargetUrlTemplate = \"https://hello.there/TICKET?query=\u003cnum\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.NewRepository(ctx, \"repo\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"GitHub repo managed by Terraform\"),\n\t\t\tPrivate:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryAutolinkReference(ctx, \"auto\", \u0026github.RepositoryAutolinkReferenceArgs{\n\t\t\tRepository:        repo.Name,\n\t\t\tKeyPrefix:         pulumi.String(\"TICKET-\"),\n\t\t\tTargetUrlTemplate: pulumi.String(\"https://hello.there/TICKET?query=\u003cnum\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAutolink references can be imported using the `name` of the repository, combined with the `id` of the autolink reference and a `/` character for separating components, e.g.\n\n```sh\n $ pulumi import github:index/repositoryAutolinkReference:RepositoryAutolinkReference auto oof/123\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string",
                    "description": "An etag representing the autolink reference object.\n"
                },
                "keyPrefix": {
                    "type": "string",
                    "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the autolink reference.\n"
                },
                "targetUrlTemplate": {
                    "type": "string",
                    "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n"
                }
            },
            "required": [
                "etag",
                "keyPrefix",
                "repository",
                "targetUrlTemplate"
            ],
            "inputProperties": {
                "keyPrefix": {
                    "type": "string",
                    "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the autolink reference.\n"
                },
                "targetUrlTemplate": {
                    "type": "string",
                    "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n"
                }
            },
            "requiredInputs": [
                "keyPrefix",
                "repository",
                "targetUrlTemplate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryAutolinkReference resources.\n",
                "properties": {
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the autolink reference object.\n"
                    },
                    "keyPrefix": {
                        "type": "string",
                        "description": "This prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the autolink reference.\n"
                    },
                    "targetUrlTemplate": {
                        "type": "string",
                        "description": "The template of the target URL used for the links; must be a valid URL and contain `\u003cnum\u003e` for the reference number\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryCollaborator:RepositoryCollaborator": {
            "description": "Provides a GitHub repository collaborator resource.\n\nThis resource allows you to add/remove collaborators from repositories in your\norganization or personal account. For organization repositories, collaborators can\nhave explicit (and differing levels of) read, write, or administrator access to \nspecific repositories, without giving the user full organization membership. \nFor personal repositories, collaborators can only be granted write\n(implictly includes read) permission. \n\nWhen applied, an invitation will be sent to the user to become a collaborator\non a repository. When destroyed, either the invitation will be cancelled or the\ncollaborator will be removed from the repository.\n\nFurther documentation on GitHub collaborators:\n\n- [Adding outside collaborators to your personal repositories](https://help.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-access-to-your-personal-repositories)\n- [Adding outside collaborators to repositories in your organization](https://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/)\n- [Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a collaborator to a repository\nconst aRepoCollaborator = new github.RepositoryCollaborator(\"a_repo_collaborator\", {\n    permission: \"admin\",\n    repository: \"our-cool-repo\",\n    username: \"SomeUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a collaborator to a repository\na_repo_collaborator = github.RepositoryCollaborator(\"aRepoCollaborator\",\n    permission=\"admin\",\n    repository=\"our-cool-repo\",\n    username=\"SomeUser\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a collaborator to a repository\n        var aRepoCollaborator = new Github.RepositoryCollaborator(\"aRepoCollaborator\", new Github.RepositoryCollaboratorArgs\n        {\n            Permission = \"admin\",\n            Repository = \"our-cool-repo\",\n            Username = \"SomeUser\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryCollaborator(ctx, \"aRepoCollaborator\", \u0026github.RepositoryCollaboratorArgs{\n\t\t\tPermission: pulumi.String(\"admin\"),\n\t\t\tRepository: pulumi.String(\"our-cool-repo\"),\n\t\t\tUsername:   pulumi.String(\"SomeUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Collaborators can be imported using an ID made up of `repository:username`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryCollaborator:RepositoryCollaborator collaborator terraform:someuser\n```\n\n ",
            "properties": {
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to be used in `github.UserInvitationAccepter`\n"
                },
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                },
                "permissionDiffSuppression": {
                    "type": "boolean",
                    "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the repository as a collaborator.\n"
                }
            },
            "required": [
                "invitationId",
                "repository",
                "username"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                },
                "permissionDiffSuppression": {
                    "type": "boolean",
                    "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The GitHub repository\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the repository as a collaborator.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryCollaborator resources.\n",
                "properties": {
                    "invitationId": {
                        "type": "string",
                        "description": "ID of the invitation to be used in `github.UserInvitationAccepter`\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permission of the outside collaborator for the repository.\nMust be one of `pull`, `push`, `maintain`, `triage` or `admin` for organization-owned repositories.\nMust be `push` for personal repositories. Defaults to `push`.\n"
                    },
                    "permissionDiffSuppression": {
                        "type": "boolean",
                        "description": "Suppress plan diffs for `triage` and `maintain`.  Defaults to `false`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the repository as a collaborator.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryDeployKey:RepositoryDeployKey": {
            "description": "Provides a GitHub repository deploy key resource.\n\nA deploy key is an SSH key that is stored on your server and grants\naccess to a single GitHub repository. This key is attached directly to the repository instead of to a personal user\naccount.\n\nThis resource allows you to add/remove repository deploy keys.\n\nFurther documentation on GitHub repository deploy keys:\n- [About deploy keys](https://developer.github.com/guides/managing-deploy-keys/#deploy-keys)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a deploy key\nconst exampleRepositoryDeployKey = new github.RepositoryDeployKey(\"example_repository_deploy_key\", {\n    key: \"ssh-rsa AAA...\",\n    readOnly: false,\n    repository: \"test-repo\",\n    title: \"Repository test key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a deploy key\nexample_repository_deploy_key = github.RepositoryDeployKey(\"exampleRepositoryDeployKey\",\n    key=\"ssh-rsa AAA...\",\n    read_only=False,\n    repository=\"test-repo\",\n    title=\"Repository test key\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a deploy key\n        var exampleRepositoryDeployKey = new Github.RepositoryDeployKey(\"exampleRepositoryDeployKey\", new Github.RepositoryDeployKeyArgs\n        {\n            Key = \"ssh-rsa AAA...\",\n            ReadOnly = false,\n            Repository = \"test-repo\",\n            Title = \"Repository test key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryDeployKey(ctx, \"exampleRepositoryDeployKey\", \u0026github.RepositoryDeployKeyArgs{\n\t\t\tKey:        pulumi.String(\"ssh-rsa AAA...\"),\n\t\t\tReadOnly:   pulumi.Bool(false),\n\t\t\tRepository: pulumi.String(\"test-repo\"),\n\t\t\tTitle:      pulumi.String(\"Repository test key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository deploy keys can be imported using a colon-separated pair of repository name and GitHub's key id. The latter can be obtained by GitHub's SDKs and API.\n\n```sh\n $ pulumi import github:index/repositoryDeployKey:RepositoryDeployKey foo test-repo:23824728\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "A SSH key.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "A boolean qualifying the key to be either read only or read/write.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the GitHub repository.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title.\n"
                }
            },
            "required": [
                "etag",
                "key",
                "repository",
                "title"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "A SSH key.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "A boolean qualifying the key to be either read only or read/write.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Name of the GitHub repository.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A title.\n"
                }
            },
            "requiredInputs": [
                "key",
                "repository",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryDeployKey resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "A SSH key.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "A boolean qualifying the key to be either read only or read/write.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the GitHub repository.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "A title.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryEnvironment:RepositoryEnvironment": {
            "description": "This resource allows you to create and manage environments for a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst current = github.getUser({\n    username: \"\",\n});\nconst exampleRepository = new github.Repository(\"exampleRepository\", {description: \"My awesome codebase\"});\nconst exampleRepositoryEnvironment = new github.RepositoryEnvironment(\"exampleRepositoryEnvironment\", {\n    environment: \"example\",\n    repository: exampleRepository.name,\n    reviewers: [{\n        users: [current.then(current =\u003e current.id)],\n    }],\n    deploymentBranchPolicy: {\n        protectedBranches: true,\n        customBranchPolicies: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ncurrent = github.get_user(username=\"\")\nexample_repository = github.Repository(\"exampleRepository\", description=\"My awesome codebase\")\nexample_repository_environment = github.RepositoryEnvironment(\"exampleRepositoryEnvironment\",\n    environment=\"example\",\n    repository=example_repository.name,\n    reviewers=[github.RepositoryEnvironmentReviewerArgs(\n        users=[current.id],\n    )],\n    deployment_branch_policy=github.RepositoryEnvironmentDeploymentBranchPolicyArgs(\n        protected_branches=True,\n        custom_branch_policies=False,\n    ))\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var current = Output.Create(Github.GetUser.InvokeAsync(new Github.GetUserArgs\n        {\n            Username = \"\",\n        }));\n        var exampleRepository = new Github.Repository(\"exampleRepository\", new Github.RepositoryArgs\n        {\n            Description = \"My awesome codebase\",\n        });\n        var exampleRepositoryEnvironment = new Github.RepositoryEnvironment(\"exampleRepositoryEnvironment\", new Github.RepositoryEnvironmentArgs\n        {\n            Environment = \"example\",\n            Repository = exampleRepository.Name,\n            Reviewers = \n            {\n                new Github.Inputs.RepositoryEnvironmentReviewerArgs\n                {\n                    Users = \n                    {\n                        current.Apply(current =\u003e current.Id),\n                    },\n                },\n            },\n            DeploymentBranchPolicy = new Github.Inputs.RepositoryEnvironmentDeploymentBranchPolicyArgs\n            {\n                ProtectedBranches = true,\n                CustomBranchPolicies = false,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := github.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryEnvironment(ctx, \"exampleRepositoryEnvironment\", \u0026github.RepositoryEnvironmentArgs{\n\t\t\tEnvironment: pulumi.String(\"example\"),\n\t\t\tRepository:  exampleRepository.Name,\n\t\t\tReviewers: RepositoryEnvironmentReviewerArray{\n\t\t\t\t\u0026RepositoryEnvironmentReviewerArgs{\n\t\t\t\t\tUsers: pulumi.IntArray{\n\t\t\t\t\t\tpulumi.String(current.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeploymentBranchPolicy: \u0026RepositoryEnvironmentDeploymentBranchPolicyArgs{\n\t\t\t\tProtectedBranches:    pulumi.Bool(true),\n\t\t\t\tCustomBranchPolicies: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Repository Environment can be imported using an ID made up of `name` of the repository combined with the `environment` name of the environment, separated by a `:` character, e.g.\n\n```sh\n $ pulumi import github:index/repositoryEnvironment:RepositoryEnvironment daily terraform:daily\n```\n\n ",
            "properties": {
                "deploymentBranchPolicy": {
                    "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                    }
                },
                "waitTimer": {
                    "type": "integer",
                    "description": "Amount of time to delay a job after the job is initially triggered.\n"
                }
            },
            "required": [
                "environment",
                "repository"
            ],
            "inputProperties": {
                "deploymentBranchPolicy": {
                    "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy"
                },
                "environment": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the environment.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                    }
                },
                "waitTimer": {
                    "type": "integer",
                    "description": "Amount of time to delay a job after the job is initially triggered.\n"
                }
            },
            "requiredInputs": [
                "environment",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryEnvironment resources.\n",
                "properties": {
                    "deploymentBranchPolicy": {
                        "$ref": "#/types/github:index/RepositoryEnvironmentDeploymentBranchPolicy:RepositoryEnvironmentDeploymentBranchPolicy"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the environment.\n"
                    },
                    "reviewers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/RepositoryEnvironmentReviewer:RepositoryEnvironmentReviewer"
                        }
                    },
                    "waitTimer": {
                        "type": "integer",
                        "description": "Amount of time to delay a job after the job is initially triggered.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryFile:RepositoryFile": {
            "description": "This resource allows you to create and manage files within a\nGitHub repository.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst fooRepository = new github.Repository(\"fooRepository\", {autoInit: true});\nconst fooRepositoryFile = new github.RepositoryFile(\"fooRepositoryFile\", {\n    repository: fooRepository.name,\n    branch: \"main\",\n    file: \".gitignore\",\n    content: \"**/*.tfstate\",\n    commitMessage: \"Managed by Terraform\",\n    commitAuthor: \"Terraform User\",\n    commitEmail: \"terraform@example.com\",\n    overwriteOnCreate: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo_repository = github.Repository(\"fooRepository\", auto_init=True)\nfoo_repository_file = github.RepositoryFile(\"fooRepositoryFile\",\n    repository=foo_repository.name,\n    branch=\"main\",\n    file=\".gitignore\",\n    content=\"**/*.tfstate\",\n    commit_message=\"Managed by Terraform\",\n    commit_author=\"Terraform User\",\n    commit_email=\"terraform@example.com\",\n    overwrite_on_create=True)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooRepository = new Github.Repository(\"fooRepository\", new Github.RepositoryArgs\n        {\n            AutoInit = true,\n        });\n        var fooRepositoryFile = new Github.RepositoryFile(\"fooRepositoryFile\", new Github.RepositoryFileArgs\n        {\n            Repository = fooRepository.Name,\n            Branch = \"main\",\n            File = \".gitignore\",\n            Content = \"**/*.tfstate\",\n            CommitMessage = \"Managed by Terraform\",\n            CommitAuthor = \"Terraform User\",\n            CommitEmail = \"terraform@example.com\",\n            OverwriteOnCreate = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooRepository, err := github.NewRepository(ctx, \"fooRepository\", \u0026github.RepositoryArgs{\n\t\t\tAutoInit: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryFile(ctx, \"fooRepositoryFile\", \u0026github.RepositoryFileArgs{\n\t\t\tRepository:        fooRepository.Name,\n\t\t\tBranch:            pulumi.String(\"main\"),\n\t\t\tFile:              pulumi.String(\".gitignore\"),\n\t\t\tContent:           pulumi.String(\"**/*.tfstate\"),\n\t\t\tCommitMessage:     pulumi.String(\"Managed by Terraform\"),\n\t\t\tCommitAuthor:      pulumi.String(\"Terraform User\"),\n\t\t\tCommitEmail:       pulumi.String(\"terraform@example.com\"),\n\t\t\tOverwriteOnCreate: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository files can be imported using a combination of the `repo` and `file`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore\n```\n\n To import a file from a branch other than main, append `:` and the branch name, e.g.\n\n```sh\n $ pulumi import github:index/repositoryFile:RepositoryFile gitignore example/.gitignore:dev\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to `main`).\nThe branch must already exist, it will not be created if it does not already exist.\n"
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author name to use.\n"
                },
                "commitEmail": {
                    "type": "string",
                    "description": "Committer email address to use.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "commitSha": {
                    "type": "string",
                    "description": "The SHA of the commit that modified the file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n"
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the file in.\n"
                },
                "sha": {
                    "type": "string",
                    "description": "The SHA blob of the file.\n"
                }
            },
            "required": [
                "commitAuthor",
                "commitEmail",
                "commitMessage",
                "commitSha",
                "content",
                "file",
                "repository",
                "sha"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch (defaults to `main`).\nThe branch must already exist, it will not be created if it does not already exist.\n"
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author name to use.\n"
                },
                "commitEmail": {
                    "type": "string",
                    "description": "Committer email address to use.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message when adding or updating the managed file.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "file": {
                    "type": "string",
                    "description": "The path of the file to manage.\n"
                },
                "overwriteOnCreate": {
                    "type": "boolean",
                    "description": "Enable overwriting existing files\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to create the file in.\n"
                }
            },
            "requiredInputs": [
                "content",
                "file",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryFile resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch (defaults to `main`).\nThe branch must already exist, it will not be created if it does not already exist.\n"
                    },
                    "commitAuthor": {
                        "type": "string",
                        "description": "Committer author name to use.\n"
                    },
                    "commitEmail": {
                        "type": "string",
                        "description": "Committer email address to use.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message when adding or updating the managed file.\n"
                    },
                    "commitSha": {
                        "type": "string",
                        "description": "The SHA of the commit that modified the file.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The path of the file to manage.\n"
                    },
                    "overwriteOnCreate": {
                        "type": "boolean",
                        "description": "Enable overwriting existing files\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to create the file in.\n"
                    },
                    "sha": {
                        "type": "string",
                        "description": "The SHA blob of the file.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryMilestone:RepositoryMilestone": {
            "description": "Provides a GitHub repository milestone resource.\n\nThis resource allows you to create and manage milestones for a GitHub Repository within an organization or user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Create a milestone for a repository\nconst example = new github.RepositoryMilestone(\"example\", {\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n    title: \"v1.1.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Create a milestone for a repository\nexample = github.RepositoryMilestone(\"example\",\n    owner=\"example-owner\",\n    repository=\"example-repository\",\n    title=\"v1.1.0\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a milestone for a repository\n        var example = new Github.RepositoryMilestone(\"example\", new Github.RepositoryMilestoneArgs\n        {\n            Owner = \"example-owner\",\n            Repository = \"example-repository\",\n            Title = \"v1.1.0\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryMilestone(ctx, \"example\", \u0026github.RepositoryMilestoneArgs{\n\t\t\tOwner:      pulumi.String(\"example-owner\"),\n\t\t\tRepository: pulumi.String(\"example-repository\"),\n\t\t\tTitle:      pulumi.String(\"v1.1.0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA GitHub Repository Milestone can be imported using an ID made up of `owner/repository/number`, e.g.\n\n```sh\n $ pulumi import github:index/repositoryMilestone:RepositoryMilestone example example-owner/example-repository/1\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the milestone.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the milestone.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the GitHub Repository.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the GitHub Repository.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the milestone.\n"
                }
            },
            "required": [
                "number",
                "owner",
                "repository",
                "title"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the milestone.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the GitHub Repository.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the GitHub Repository.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the milestone.\n"
                }
            },
            "requiredInputs": [
                "owner",
                "repository",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryMilestone resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the milestone.\n"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "The milestone due date. In `yyyy-mm-dd` format.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the milestone.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the GitHub Repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the GitHub Repository.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the milestone. Either `open` or `closed`. Default: `open`\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the milestone.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryProject:RepositoryProject": {
            "description": "This resource allows you to create and manage projects for GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.Repository(\"example\", {\n    description: \"My awesome codebase\",\n    hasProjects: true,\n});\nconst project = new github.RepositoryProject(\"project\", {\n    body: \"This is a repository project.\",\n    repository: example.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.Repository(\"example\",\n    description=\"My awesome codebase\",\n    has_projects=True)\nproject = github.RepositoryProject(\"project\",\n    body=\"This is a repository project.\",\n    repository=example.name)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.Repository(\"example\", new Github.RepositoryArgs\n        {\n            Description = \"My awesome codebase\",\n            HasProjects = true,\n        });\n        var project = new Github.RepositoryProject(\"project\", new Github.RepositoryProjectArgs\n        {\n            Body = \"This is a repository project.\",\n            Repository = example.Name,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := github.NewRepository(ctx, \"example\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"My awesome codebase\"),\n\t\t\tHasProjects: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryProject(ctx, \"project\", \u0026github.RepositoryProjectArgs{\n\t\t\tBody:       pulumi.String(\"This is a repository project.\"),\n\t\t\tRepository: example.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "etag": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the project.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the project\n"
                }
            },
            "required": [
                "etag",
                "name",
                "repository",
                "url"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "The body of the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the project.\n"
                }
            },
            "requiredInputs": [
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryProject resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "The body of the project.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the project.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryPullRequest:RepositoryPullRequest": {
            "description": "This resource allows you to create and manage PullRequests for repositories within your GitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.RepositoryPullRequest(\"example\", {\n    baseRef: \"main\",\n    baseRepository: \"example-repository\",\n    body: \"This will change everything\",\n    headRef: \"feature-branch\",\n    title: \"My newest feature\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.RepositoryPullRequest(\"example\",\n    base_ref=\"main\",\n    base_repository=\"example-repository\",\n    body=\"This will change everything\",\n    head_ref=\"feature-branch\",\n    title=\"My newest feature\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.RepositoryPullRequest(\"example\", new Github.RepositoryPullRequestArgs\n        {\n            BaseRef = \"main\",\n            BaseRepository = \"example-repository\",\n            Body = \"This will change everything\",\n            HeadRef = \"feature-branch\",\n            Title = \"My newest feature\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewRepositoryPullRequest(ctx, \"example\", \u0026github.RepositoryPullRequestArgs{\n\t\t\tBaseRef:        pulumi.String(\"main\"),\n\t\t\tBaseRepository: pulumi.String(\"example-repository\"),\n\t\t\tBody:           pulumi.String(\"This will change everything\"),\n\t\t\tHeadRef:        pulumi.String(\"feature-branch\"),\n\t\t\tTitle:          pulumi.String(\"My newest feature\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "baseRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the base of the Pull Request.\n"
                },
                "baseRepository": {
                    "type": "string",
                    "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                },
                "baseSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request base.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n"
                },
                "draft": {
                    "type": "boolean",
                    "description": "Indicates Whether this Pull Request is a draft.\n"
                },
                "headRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the head of the Pull Request.\n"
                },
                "headSha": {
                    "type": "string",
                    "description": "Head commit SHA of the Pull Request head.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label names set on the Pull Request.\n"
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The number of the Pull Request within the repository.\n"
                },
                "openedAt": {
                    "type": "integer",
                    "description": "Unix timestamp indicating the Pull Request creation time.\n"
                },
                "openedBy": {
                    "type": "string",
                    "description": "GitHub login of the user who opened the Pull Request.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                },
                "state": {
                    "type": "string",
                    "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "The timestamp of the last Pull Request update.\n"
                }
            },
            "required": [
                "baseRef",
                "baseRepository",
                "baseSha",
                "draft",
                "headRef",
                "headSha",
                "labels",
                "number",
                "openedAt",
                "openedBy",
                "state",
                "title",
                "updatedAt"
            ],
            "inputProperties": {
                "baseRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the base of the Pull Request.\n"
                },
                "baseRepository": {
                    "type": "string",
                    "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Body of the Pull Request.\n"
                },
                "headRef": {
                    "type": "string",
                    "description": "Name of the branch serving as the head of the Pull Request.\n"
                },
                "maintainerCanModify": {
                    "type": "boolean",
                    "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the Pull Request.\n"
                }
            },
            "requiredInputs": [
                "baseRef",
                "baseRepository",
                "headRef",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryPullRequest resources.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the branch serving as the base of the Pull Request.\n"
                    },
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                    },
                    "baseSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request base.\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the Pull Request.\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Indicates Whether this Pull Request is a draft.\n"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "Name of the branch serving as the head of the Pull Request.\n"
                    },
                    "headSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request head.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names set on the Pull Request.\n"
                    },
                    "maintainerCanModify": {
                        "type": "boolean",
                        "description": "Controls whether the base repository maintainers can modify the Pull Request. Default: false.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the Pull Request within the repository.\n"
                    },
                    "openedAt": {
                        "type": "integer",
                        "description": "Unix timestamp indicating the Pull Request creation time.\n"
                    },
                    "openedBy": {
                        "type": "string",
                        "description": "GitHub login of the user who opened the Pull Request.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Pull Request.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp of the last Pull Request update.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/repositoryWebhook:RepositoryWebhook": {
            "description": "This resource allows you to create and manage webhooks for repositories within your\nGitHub organization or personal account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst repo = new github.Repository(\"repo\", {\n    description: \"Terraform acceptance tests\",\n    homepageUrl: \"http://example.com/\",\n    \"private\": false,\n});\nconst foo = new github.RepositoryWebhook(\"foo\", {\n    repository: repo.name,\n    configuration: {\n        url: \"https://google.de/\",\n        contentType: \"form\",\n        insecureSsl: false,\n    },\n    active: false,\n    events: [\"issues\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nrepo = github.Repository(\"repo\",\n    description=\"Terraform acceptance tests\",\n    homepage_url=\"http://example.com/\",\n    private=False)\nfoo = github.RepositoryWebhook(\"foo\",\n    repository=repo.name,\n    configuration=github.RepositoryWebhookConfigurationArgs(\n        url=\"https://google.de/\",\n        content_type=\"form\",\n        insecure_ssl=False,\n    ),\n    active=False,\n    events=[\"issues\"])\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repo = new Github.Repository(\"repo\", new Github.RepositoryArgs\n        {\n            Description = \"Terraform acceptance tests\",\n            HomepageUrl = \"http://example.com/\",\n            Private = false,\n        });\n        var foo = new Github.RepositoryWebhook(\"foo\", new Github.RepositoryWebhookArgs\n        {\n            Repository = repo.Name,\n            Configuration = new Github.Inputs.RepositoryWebhookConfigurationArgs\n            {\n                Url = \"https://google.de/\",\n                ContentType = \"form\",\n                InsecureSsl = false,\n            },\n            Active = false,\n            Events = \n            {\n                \"issues\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := github.NewRepository(ctx, \"repo\", \u0026github.RepositoryArgs{\n\t\t\tDescription: pulumi.String(\"Terraform acceptance tests\"),\n\t\t\tHomepageUrl: pulumi.String(\"http://example.com/\"),\n\t\t\tPrivate:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewRepositoryWebhook(ctx, \"foo\", \u0026github.RepositoryWebhookArgs{\n\t\t\tRepository: repo.Name,\n\t\t\tConfiguration: \u0026RepositoryWebhookConfigurationArgs{\n\t\t\t\tUrl:         pulumi.String(\"https://google.de/\"),\n\t\t\t\tContentType: pulumi.String(\"form\"),\n\t\t\t\tInsecureSsl: pulumi.Bool(false),\n\t\t\t},\n\t\t\tActive: pulumi.Bool(false),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"issues\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository webhooks can be imported using the `name` of the repository, combined with the `id` of the webhook, separated by a `/` character. The `id` of the webhook can be found in the URL of the webhook. For example`\"https://github.com/foo-org/foo-repo/settings/hooks/14711452\"`. Importing uses the name of the repository, as well as the ID of the webhook, e.g.\n\n```sh\n $ pulumi import github:index/repositoryWebhook:RepositoryWebhook terraform terraform/11235813\n```\n\n If secret is populated in the webhook's configuration, the value will be imported as \"********\". ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                    "description": "Configuration block for the webhook. Detailed below.\n"
                },
                "etag": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the webhook.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the webhook.\n"
                }
            },
            "required": [
                "etag",
                "events",
                "repository",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                },
                "configuration": {
                    "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                    "description": "Configuration block for the webhook. Detailed below.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository of the webhook.\n"
                }
            },
            "requiredInputs": [
                "events",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryWebhook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Indicate if the webhook should receive events. Defaults to `true`.\n"
                    },
                    "configuration": {
                        "$ref": "#/types/github:index/RepositoryWebhookConfiguration:RepositoryWebhookConfiguration",
                        "description": "Configuration block for the webhook. Detailed below.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of events which should trigger the webhook. See a list of [available events](https://developer.github.com/v3/activity/events/types/).\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository of the webhook.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the webhook.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/team:Team": {
            "description": "Provides a GitHub team resource.\n\nThis resource allows you to add/remove teams from your organization. When applied,\na new team will be created. When destroyed, that team will be removed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a team to the organization\nconst someTeam = new github.Team(\"some_team\", {\n    description: \"Some cool team\",\n    privacy: \"closed\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a team to the organization\nsome_team = github.Team(\"someTeam\",\n    description=\"Some cool team\",\n    privacy=\"closed\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a team to the organization\n        var someTeam = new Github.Team(\"someTeam\", new Github.TeamArgs\n        {\n            Description = \"Some cool team\",\n            Privacy = \"closed\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t\tPrivacy:     pulumi.String(\"closed\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Teams can be imported using the GitHub team ID e.g.\n\n```sh\n $ pulumi import github:index/team:Team core 1234567\n```\n\n ",
            "properties": {
                "createDefaultMaintainer": {
                    "type": "boolean",
                    "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "etag": {
                    "type": "string"
                },
                "ldapDn": {
                    "type": "string",
                    "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                },
                "membersCount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "The Node ID of the created team.\n"
                },
                "parentTeamId": {
                    "type": "integer",
                    "description": "The ID of the parent team, if this is a nested team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the created team, which may or may not differ from `name`,\ndepending on whether `name` contains \"URL-unsafe\" characters.\nUseful when referencing the team in [`github.BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).\n"
                }
            },
            "required": [
                "etag",
                "membersCount",
                "name",
                "nodeId",
                "slug"
            ],
            "inputProperties": {
                "createDefaultMaintainer": {
                    "type": "boolean",
                    "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the team.\n"
                },
                "ldapDn": {
                    "type": "string",
                    "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "parentTeamId": {
                    "type": "integer",
                    "description": "The ID of the parent team, if this is a nested team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "createDefaultMaintainer": {
                        "type": "boolean",
                        "description": "Adds a default maintainer to the team. Defaults to `false` and adds the creating user to the team when `true`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the team.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "ldapDn": {
                        "type": "string",
                        "description": "The LDAP Distinguished Name of the group where membership will be synchronized. Only available in GitHub Enterprise Server.\n"
                    },
                    "membersCount": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "The Node ID of the created team.\n"
                    },
                    "parentTeamId": {
                        "type": "integer",
                        "description": "The ID of the parent team, if this is a nested team.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The level of privacy for the team. Must be one of `secret` or `closed`.\nDefaults to `secret`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the created team, which may or may not differ from `name`,\ndepending on whether `name` contains \"URL-unsafe\" characters.\nUseful when referencing the team in [`github.BranchProtection`](https://www.terraform.io/docs/providers/github/r/branch_protection.html).\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamMembership:TeamMembership": {
            "description": "Provides a GitHub team membership resource.\n\nThis resource allows you to add/remove users from teams in your organization. When applied,\nthe user will be added to the team. If the user hasn't accepted their invitation to the\norganization, they won't be part of the team until they do. When\ndestroyed, the user will be removed from the team.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a user to the organization\nconst membershipForSomeUser = new github.Membership(\"membershipForSomeUser\", {\n    username: \"SomeUser\",\n    role: \"member\",\n});\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someTeamMembership = new github.TeamMembership(\"someTeamMembership\", {\n    teamId: someTeam.id,\n    username: \"SomeUser\",\n    role: \"member\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a user to the organization\nmembership_for_some_user = github.Membership(\"membershipForSomeUser\",\n    username=\"SomeUser\",\n    role=\"member\")\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_team_membership = github.TeamMembership(\"someTeamMembership\",\n    team_id=some_team.id,\n    username=\"SomeUser\",\n    role=\"member\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a user to the organization\n        var membershipForSomeUser = new Github.Membership(\"membershipForSomeUser\", new Github.MembershipArgs\n        {\n            Username = \"SomeUser\",\n            Role = \"member\",\n        });\n        var someTeam = new Github.Team(\"someTeam\", new Github.TeamArgs\n        {\n            Description = \"Some cool team\",\n        });\n        var someTeamMembership = new Github.TeamMembership(\"someTeamMembership\", new Github.TeamMembershipArgs\n        {\n            TeamId = someTeam.Id,\n            Username = \"SomeUser\",\n            Role = \"member\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewMembership(ctx, \"membershipForSomeUser\", \u0026github.MembershipArgs{\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamMembership(ctx, \"someTeamMembership\", \u0026github.TeamMembershipArgs{\n\t\t\tTeamId:   someTeam.ID(),\n\t\t\tUsername: pulumi.String(\"SomeUser\"),\n\t\t\tRole:     pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Team Membership can be imported using an ID made up of `teamid:username`, e.g.\n\n```sh\n $ pulumi import github:index/teamMembership:TeamMembership member 1234567:someuser\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the team.\n"
                }
            },
            "required": [
                "etag",
                "teamId",
                "username"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user to add to the team.\n"
                }
            },
            "requiredInputs": [
                "teamId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMembership resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the user within the team.\nMust be one of `member` or `maintainer`. Defaults to `member`.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GitHub team id\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user to add to the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamRepository:TeamRepository": {
            "description": "This resource manages relationships between teams and repositories\nin your GitHub organization.\n\nCreating this resource grants a particular team permissions on a\nparticular repository.\n\nThe repository and the team must both belong to the same organization\non GitHub. This resource does not actually *create* any repositories;\nto do that, see `github.Repository`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Add a repository to the team\nconst someTeam = new github.Team(\"someTeam\", {description: \"Some cool team\"});\nconst someRepo = new github.Repository(\"someRepo\", {});\nconst someTeamRepo = new github.TeamRepository(\"someTeamRepo\", {\n    teamId: someTeam.id,\n    repository: someRepo.name,\n    permission: \"pull\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\n# Add a repository to the team\nsome_team = github.Team(\"someTeam\", description=\"Some cool team\")\nsome_repo = github.Repository(\"someRepo\")\nsome_team_repo = github.TeamRepository(\"someTeamRepo\",\n    team_id=some_team.id,\n    repository=some_repo.name,\n    permission=\"pull\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Add a repository to the team\n        var someTeam = new Github.Team(\"someTeam\", new Github.TeamArgs\n        {\n            Description = \"Some cool team\",\n        });\n        var someRepo = new Github.Repository(\"someRepo\", new Github.RepositoryArgs\n        {\n        });\n        var someTeamRepo = new Github.TeamRepository(\"someTeamRepo\", new Github.TeamRepositoryArgs\n        {\n            TeamId = someTeam.Id,\n            Repository = someRepo.Name,\n            Permission = \"pull\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsomeTeam, err := github.NewTeam(ctx, \"someTeam\", \u0026github.TeamArgs{\n\t\t\tDescription: pulumi.String(\"Some cool team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsomeRepo, err := github.NewRepository(ctx, \"someRepo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewTeamRepository(ctx, \"someTeamRepo\", \u0026github.TeamRepositoryArgs{\n\t\t\tTeamId:     someTeam.ID(),\n\t\t\tRepository: someRepo.Name,\n\t\t\tPermission: pulumi.String(\"pull\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGitHub Team Repository can be imported using an ID made up of `teamid:repository`, e.g.\n\n```sh\n $ pulumi import github:index/teamRepository:TeamRepository terraform_repo 1234567:terraform\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "permission": {
                    "type": "string",
                    "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to add to the team.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                }
            },
            "required": [
                "etag",
                "repository",
                "teamId"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository to add to the team.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GitHub team id or the GitHub team slug\n"
                }
            },
            "requiredInputs": [
                "repository",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamRepository resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "permission": {
                        "type": "string",
                        "description": "The permissions of team members regarding the repository.\nMust be one of `pull`, `triage`, `push`, `maintain`, or `admin`. Defaults to `pull`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to add to the team.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GitHub team id or the GitHub team slug\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/teamSyncGroupMapping:TeamSyncGroupMapping": {
            "description": "This resource allows you to create and manage Identity Provider (IdP) group connections within your GitHub teams.\nYou must have team synchronization enabled for organizations owned by enterprise accounts.\n\nTo learn more about team synchronization between IdPs and GitHub, please refer to:\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/synchronizing-teams-between-your-identity-provider-and-github\n\n\n## Import\n\nGitHub Team Sync Group Mappings can be imported using the GitHub team `slug` e.g.\n\n```sh\n $ pulumi import github:index/teamSyncGroupMapping:TeamSyncGroupMapping example some_team\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                    },
                    "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the team\n"
                }
            },
            "required": [
                "etag",
                "teamSlug"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                    },
                    "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n"
                },
                "teamSlug": {
                    "type": "string",
                    "description": "Slug of the team\n"
                }
            },
            "requiredInputs": [
                "teamSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamSyncGroupMapping resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/TeamSyncGroupMappingGroup:TeamSyncGroupMappingGroup"
                        },
                        "description": "An Array of GitHub Identity Provider Groups (or empty []).  Each `group` block consists of the fields documented below.\n___\n"
                    },
                    "teamSlug": {
                        "type": "string",
                        "description": "Slug of the team\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/userGpgKey:UserGpgKey": {
            "description": "Provides a GitHub user's GPG key resource.\n\nThis resource allows you to add/remove GPG keys from your user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = new github.UserGpgKey(\"example\", {\n    armoredPublicKey: `-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----`,\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.UserGpgKey(\"example\", armored_public_key=\"\"\"-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.UserGpgKey(\"example\", new Github.UserGpgKeyArgs\n        {\n            ArmoredPublicKey = @\"-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewUserGpgKey(ctx, \"example\", \u0026github.UserGpgKeyArgs{\n\t\t\tArmoredPublicKey: pulumi.String(fmt.Sprintf(\"%v%v%v\", \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n\", \"...\\n\", \"-----END PGP PUBLIC KEY BLOCK-----\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGPG keys are not importable due to the fact that [API](https://developer.github.com/v3/users/gpg_keys/#gpg-keys) does not return previously uploaded GPG key. ",
            "properties": {
                "armoredPublicKey": {
                    "type": "string",
                    "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n"
                },
                "etag": {
                    "type": "string"
                },
                "keyId": {
                    "type": "string",
                    "description": "The key ID of the GPG key, e.g. `3262EFF25BA0D270`\n"
                }
            },
            "required": [
                "armoredPublicKey",
                "etag",
                "keyId"
            ],
            "inputProperties": {
                "armoredPublicKey": {
                    "type": "string",
                    "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n"
                }
            },
            "requiredInputs": [
                "armoredPublicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGpgKey resources.\n",
                "properties": {
                    "armoredPublicKey": {
                        "type": "string",
                        "description": "Your public GPG key, generated in ASCII-armored format.\nSee [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.\n"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The key ID of the GPG key, e.g. `3262EFF25BA0D270`\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/userInvitationAccepter:UserInvitationAccepter": {
            "description": "Provides a resource to manage GitHub repository collaborator invitations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst exampleRepository = new github.Repository(\"exampleRepository\", {});\nconst exampleRepositoryCollaborator = new github.RepositoryCollaborator(\"exampleRepositoryCollaborator\", {\n    repository: exampleRepository.name,\n    username: \"example-username\",\n    permission: \"push\",\n});\nconst invitee = new github.Provider(\"invitee\", {token: _var.invitee_token});\nconst exampleUserInvitationAccepter = new github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", {invitationId: exampleRepositoryCollaborator.invitationId}, {\n    provider: \"github.invitee\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\nimport pulumi_pulumi as pulumi\n\nexample_repository = github.Repository(\"exampleRepository\")\nexample_repository_collaborator = github.RepositoryCollaborator(\"exampleRepositoryCollaborator\",\n    repository=example_repository.name,\n    username=\"example-username\",\n    permission=\"push\")\ninvitee = pulumi.providers.Github(\"invitee\", token=var[\"invitee_token\"])\nexample_user_invitation_accepter = github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", invitation_id=example_repository_collaborator.invitation_id,\nopts=pulumi.ResourceOptions(provider=\"github.invitee\"))\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleRepository = new Github.Repository(\"exampleRepository\", new Github.RepositoryArgs\n        {\n        });\n        var exampleRepositoryCollaborator = new Github.RepositoryCollaborator(\"exampleRepositoryCollaborator\", new Github.RepositoryCollaboratorArgs\n        {\n            Repository = exampleRepository.Name,\n            Username = \"example-username\",\n            Permission = \"push\",\n        });\n        var invitee = new Github.Provider(\"invitee\", new Github.ProviderArgs\n        {\n            Token = @var.Invitee_token,\n        });\n        var exampleUserInvitationAccepter = new Github.UserInvitationAccepter(\"exampleUserInvitationAccepter\", new Github.UserInvitationAccepterArgs\n        {\n            InvitationId = exampleRepositoryCollaborator.InvitationId,\n        }, new CustomResourceOptions\n        {\n            Provider = \"github.invitee\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github/providers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRepository, err := github.NewRepository(ctx, \"exampleRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRepositoryCollaborator, err := github.NewRepositoryCollaborator(ctx, \"exampleRepositoryCollaborator\", \u0026github.RepositoryCollaboratorArgs{\n\t\t\tRepository: exampleRepository.Name,\n\t\t\tUsername:   pulumi.String(\"example-username\"),\n\t\t\tPermission: pulumi.String(\"push\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = providers.Newgithub(ctx, \"invitee\", \u0026providers.githubArgs{\n\t\t\tToken: _var.Invitee_token,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = github.NewUserInvitationAccepter(ctx, \"exampleUserInvitationAccepter\", \u0026github.UserInvitationAccepterArgs{\n\t\t\tInvitationId: exampleRepositoryCollaborator.InvitationId,\n\t\t}, pulumi.Provider(\"github.invitee\"))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to accept\n"
                }
            },
            "required": [
                "invitationId"
            ],
            "inputProperties": {
                "invitationId": {
                    "type": "string",
                    "description": "ID of the invitation to accept\n"
                }
            },
            "requiredInputs": [
                "invitationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserInvitationAccepter resources.\n",
                "properties": {
                    "invitationId": {
                        "type": "string",
                        "description": "ID of the invitation to accept\n"
                    }
                },
                "type": "object"
            }
        },
        "github:index/userSshKey:UserSshKey": {
            "description": "Provides a GitHub user's SSH key resource.\n\nThis resource allows you to add/remove SSH keys from your user account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\nimport * from \"fs\";\n\nconst example = new github.UserSshKey(\"example\", {\n    title: \"example title\",\n    key: fs.readFileSync(\"~/.ssh/id_rsa.pub\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.UserSshKey(\"example\",\n    title=\"example title\",\n    key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Github.UserSshKey(\"example\", new Github.UserSshKeyArgs\n        {\n            Title = \"example title\",\n            Key = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.NewUserSshKey(ctx, \"example\", \u0026github.UserSshKeyArgs{\n\t\t\tTitle: pulumi.String(\"example title\"),\n\t\t\tKey:   readFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using their ID e.g.\n\n```sh\n $ pulumi import github:index/userSshKey:UserSshKey example 1234567\n```\n\n ",
            "properties": {
                "etag": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "description": "The public SSH key to add to your GitHub account.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the SSH key\n"
                }
            },
            "required": [
                "etag",
                "key",
                "title",
                "url"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The public SSH key to add to your GitHub account.\n"
                },
                "title": {
                    "type": "string",
                    "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n"
                }
            },
            "requiredInputs": [
                "key",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSshKey resources.\n",
                "properties": {
                    "etag": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public SSH key to add to your GitHub account.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "A descriptive name for the new key. e.g. `Personal MacBook Air`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the SSH key\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "github:index/getActionsPublicKey:getActionsPublicKey": {
            "description": "Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.\nNote that the provider `token` must have admin rights to a repository to retrieve it's action public key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getActionsPublicKey({\n    repository: \"example_repo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_actions_public_key(repository=\"example_repo\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetActionsPublicKey.InvokeAsync(new Github.GetActionsPublicKeyArgs\n        {\n            Repository = \"example_repo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetActionsPublicKey(ctx, \u0026GetActionsPublicKeyArgs{\n\t\t\tRepository: \"example_repo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getActionsPublicKey.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to get public key from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getActionsPublicKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Actual key retrieved.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the key that has been retrieved.\n"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "key",
                    "keyId",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getBranch:getBranch": {
            "description": "Use this data source to retrieve information about a repository branch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst development = pulumi.output(github.getBranch({\n    branch: \"development\",\n    repository: \"example\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ndevelopment = github.get_branch(branch=\"development\",\n    repository=\"example\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var development = Output.Create(Github.GetBranch.InvokeAsync(new Github.GetBranchArgs\n        {\n            Branch = \"development\",\n            Repository = \"example\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupBranch(ctx, \u0026GetBranchArgs{\n\t\t\tBranch:     \"development\",\n\t\t\tRepository: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBranch.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The repository branch to create.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The GitHub repository name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBranch.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the Branch object.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ref": {
                        "type": "string",
                        "description": "A string representing a branch reference, in the form of `refs/heads/\u003cbranch\u003e`.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha": {
                        "type": "string",
                        "description": "A string storing the reference's `HEAD` commit's SHA1.\n"
                    }
                },
                "type": "object",
                "required": [
                    "branch",
                    "etag",
                    "ref",
                    "repository",
                    "sha",
                    "id"
                ]
            }
        },
        "github:index/getCollaborators:getCollaborators": {
            "description": "Use this data source to retrieve the collaborators for a given repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = pulumi.output(github.getCollaborators({\n    owner: \"example_owner\",\n    repository: \"example_repository\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_collaborators(owner=\"example_owner\",\n    repository=\"example_repository\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Github.GetCollaborators.InvokeAsync(new Github.GetCollaboratorsArgs\n        {\n            Owner = \"example_owner\",\n            Repository = \"example_repository\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetCollaborators(ctx, \u0026GetCollaboratorsArgs{\n\t\t\tOwner:      \"example_owner\",\n\t\t\tRepository: \"example_repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCollaborators.\n",
                "properties": {
                    "affiliation": {
                        "type": "string",
                        "description": "Filter collaborators returned by their affiliation. Can be one of: `outside`, `direct`, `all`.  Defaults to `all`.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The organization that owns the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCollaborators.\n",
                "properties": {
                    "affiliation": {
                        "type": "string"
                    },
                    "collaborators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getCollaboratorsCollaborator:getCollaboratorsCollaborator"
                        },
                        "description": "An Array of GitHub collaborators.  Each `collaborator` block consists of the fields documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "collaborators",
                    "owner",
                    "repository",
                    "id"
                ]
            }
        },
        "github:index/getIpRanges:getIpRanges": {
            "description": "Use this data source to retrieve information about GitHub's IP addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = pulumi.output(github.getIpRanges());\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_ip_ranges()\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Github.GetIpRanges.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetIpRanges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIpRanges.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of IP addresses in CIDR format specifying the addresses that incoming requests from GitHub actions will originate from.\n"
                    },
                    "actionsIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `actions` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "actionsIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `actions` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "dependabotIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `dependabot` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "dependabotIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `dependabot` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "dependabots": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of IP addresses in CIDR format specifying the A records for dependabot.\n"
                    },
                    "gitIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `git` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "gitIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `git` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "gits": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the Git servers.\n"
                    },
                    "hooks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the addresses that incoming service hooks will originate from.\n"
                    },
                    "hooksIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `hooks` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "hooksIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `hooks` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "importerIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `importer` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "importerIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `importer` array that contains IP addresses in IPv6 CIDR format.\n"
                    },
                    "importers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the A records for GitHub Importer.\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An Array of IP addresses in CIDR format specifying the A records for GitHub Pages.\n"
                    },
                    "pagesIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `pages` array that contains IP addresses in IPv4 CIDR format.\n"
                    },
                    "pagesIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A subset of the `pages` array that contains IP addresses in IPv6 CIDR format.\n"
                    }
                },
                "type": "object",
                "required": [
                    "actions",
                    "actionsIpv4s",
                    "actionsIpv6s",
                    "dependabots",
                    "dependabotIpv4s",
                    "dependabotIpv6s",
                    "gits",
                    "gitIpv4s",
                    "gitIpv6s",
                    "hooks",
                    "hooksIpv4s",
                    "hooksIpv6s",
                    "importers",
                    "importerIpv4s",
                    "importerIpv6s",
                    "pages",
                    "pagesIpv4s",
                    "pagesIpv6s",
                    "id"
                ]
            }
        },
        "github:index/getMembership:getMembership": {
            "description": "Use this data source to find out if a user is a member of your organization, as well\nas what role they have within it.\nIf the user's membership in the organization is pending their acceptance of an invite,\nthe role they would have once they accept will be returned.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst membershipForSomeUser = pulumi.output(github.getMembership({\n    username: \"SomeUser\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nmembership_for_some_user = github.get_membership(username=\"SomeUser\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var membershipForSomeUser = Output.Create(Github.GetMembership.InvokeAsync(new Github.GetMembershipArgs\n        {\n            Username = \"SomeUser\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupMembership(ctx, \u0026GetMembershipArgs{\n\t\t\tUsername: \"SomeUser\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMembership.\n",
                "properties": {
                    "organization": {
                        "type": "string",
                        "description": "The organization to check for the above username.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to lookup in the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMembership.\n",
                "properties": {
                    "etag": {
                        "type": "string",
                        "description": "An etag representing the membership object.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string",
                        "description": "`admin` or `member` -- the role the user has within the organization.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "etag",
                    "role",
                    "username",
                    "id"
                ]
            }
        },
        "github:index/getOrganization:getOrganization": {
            "description": "Use this data source to retrieve basic information about a GitHub Organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = pulumi.output(github.getOrganization({\n    name: \"github\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_organization(name=\"github\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Github.GetOrganization.InvokeAsync(new Github.GetOrganizationArgs\n        {\n            Name = \"github\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganization(ctx, \u0026GetOrganizationArgs{\n\t\t\tName: \"github\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization account\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description the organization account\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The login of the organization account\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(`list`) A list with the members of the organization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization account\n"
                    },
                    "nodeId": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name for the organization account\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(`list`) A list with the repositories on the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "login",
                    "members",
                    "name",
                    "nodeId",
                    "plan",
                    "repositories",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups": {
            "description": "Use this data source to retrieve the identity provider (IdP) groups for an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst test = pulumi.output(github.getOrganizationTeamSyncGroups());\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\ntest = github.get_organization_team_sync_groups()\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Github.GetOrganizationTeamSyncGroups.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationTeamSyncGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrganizationTeamSyncGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationTeamSyncGroupsGroup:getOrganizationTeamSyncGroupsGroup"
                        },
                        "description": "An Array of GitHub Identity Provider Groups.  Each `group` block consists of the fields documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "id"
                ]
            }
        },
        "github:index/getOrganizationTeams:getOrganizationTeams": {
            "description": "Use this data source to retrieve information about all GitHub teams in an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve *all* teams of the organization:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst all = pulumi.output(github.getOrganizationTeams());\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nall = github.get_organization_teams()\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var all = Output.Create(Github.GetOrganizationTeams.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetOrganizationTeams(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nTo retrieve only the team's at the root of the organization:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst rootTeams = pulumi.output(github.getOrganizationTeams({\n    rootTeamsOnly: true,\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nroot_teams = github.get_organization_teams(root_teams_only=True)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rootTeams = Output.Create(Github.GetOrganizationTeams.InvokeAsync(new Github.GetOrganizationTeamsArgs\n        {\n            RootTeamsOnly = true,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := true\n\t\t_, err := github.GetOrganizationTeams(ctx, \u0026GetOrganizationTeamsArgs{\n\t\t\tRootTeamsOnly: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationTeams.\n",
                "properties": {
                    "rootTeamsOnly": {
                        "type": "boolean",
                        "description": "Only return teams that are at the organization's root, i.e. no nested teams. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "rootTeamsOnly": {
                        "type": "boolean",
                        "description": "Only return teams that are at the organization's root, i.e. no nested teams. Defaults to `false`.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getOrganizationTeamsTeam:getOrganizationTeamsTeam"
                        },
                        "description": "An Array of GitHub Teams.  Each `team` block consists of the fields documented below.\n___\n"
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "github:index/getRelease:getRelease": {
            "description": "Use this data source to retrieve information about a GitHub release in a specific repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nTo retrieve the latest release that is present in a repository:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRelease({\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n    retrieveBy: \"latest\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_release(owner=\"example-owner\",\n    repository=\"example-repository\",\n    retrieve_by=\"latest\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRelease.InvokeAsync(new Github.GetReleaseArgs\n        {\n            Owner = \"example-owner\",\n            Repository = \"example-repository\",\n            RetrieveBy = \"latest\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRelease(ctx, \u0026GetReleaseArgs{\n\t\t\tOwner:      \"example-owner\",\n\t\t\tRepository: \"example-repository\",\n\t\t\tRetrieveBy: \"latest\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nTo retrieve a specific release from a repository based on it's ID:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRelease({\n    id: \"12345\",\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n    retrieveBy: \"id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_release(id=12345,\n    owner=\"example-owner\",\n    repository=\"example-repository\",\n    retrieve_by=\"id\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRelease.InvokeAsync(new Github.GetReleaseArgs\n        {\n            Id = 12345,\n            Owner = \"example-owner\",\n            Repository = \"example-repository\",\n            RetrieveBy = \"id\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRelease(ctx, \u0026GetReleaseArgs{\n\t\t\tId:         12345,\n\t\t\tOwner:      \"example-owner\",\n\t\t\tRepository: \"example-repository\",\n\t\t\tRetrieveBy: \"id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nFinally, to retrieve a release based on it's tag:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRelease({\n    owner: \"example-owner\",\n    releaseTag: \"v1.0.0\",\n    repository: \"example-repository\",\n    retrieveBy: \"tag\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_release(owner=\"example-owner\",\n    release_tag=\"v1.0.0\",\n    repository=\"example-repository\",\n    retrieve_by=\"tag\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRelease.InvokeAsync(new Github.GetReleaseArgs\n        {\n            Owner = \"example-owner\",\n            ReleaseTag = \"v1.0.0\",\n            Repository = \"example-repository\",\n            RetrieveBy = \"tag\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"v1.0.0\"\n\t\t_, err := github.GetRelease(ctx, \u0026GetReleaseArgs{\n\t\t\tOwner:      \"example-owner\",\n\t\t\tReleaseTag: \u0026opt0,\n\t\t\tRepository: \"example-repository\",\n\t\t\tRetrieveBy: \"tag\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRelease.\n",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository.\n"
                    },
                    "releaseId": {
                        "type": "integer",
                        "description": "ID of the release to retrieve. Must be specified when `retrieve_by` = `id`.\n"
                    },
                    "releaseTag": {
                        "type": "string",
                        "description": "Tag of the release to retrieve. Must be specified when `retrieve_by` = `tag`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the release from.\n"
                    },
                    "retrieveBy": {
                        "type": "string",
                        "description": "Describes how to fetch the release. Valid values are `id`, `tag`, `latest`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "repository",
                    "retrieveBy"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRelease.\n",
                "properties": {
                    "assertsUrl": {
                        "type": "string",
                        "description": "URL of any associated assets with the release\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Contents of the description (body) of a release\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date of release creation\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "(`Boolean`) indicates whether the release is a draft\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL directing to detailed information on the release\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of release\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "prerelease": {
                        "type": "boolean",
                        "description": "(`Boolean`) indicates whether the release is a prerelease\n"
                    },
                    "publishedAt": {
                        "type": "string",
                        "description": "Date of release publishing\n"
                    },
                    "releaseId": {
                        "type": "integer",
                        "description": "ID of release\n"
                    },
                    "releaseTag": {
                        "type": "string",
                        "description": "Tag of release\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "retrieveBy": {
                        "type": "string"
                    },
                    "tarballUrl": {
                        "type": "string",
                        "description": "Download URL of a specific release in `tar.gz` format\n"
                    },
                    "targetCommitish": {
                        "type": "string",
                        "description": "Commitish value that determines where the Git release is created from\n"
                    },
                    "uploadUrl": {
                        "type": "string",
                        "description": "URL that can be used to upload Assets to the release\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Base URL of the release\n"
                    },
                    "zipballUrl": {
                        "type": "string",
                        "description": "Download URL of a specific release in `zip` format\n"
                    }
                },
                "type": "object",
                "required": [
                    "assertsUrl",
                    "body",
                    "createdAt",
                    "draft",
                    "htmlUrl",
                    "name",
                    "owner",
                    "prerelease",
                    "publishedAt",
                    "repository",
                    "retrieveBy",
                    "tarballUrl",
                    "targetCommitish",
                    "uploadUrl",
                    "url",
                    "zipballUrl",
                    "id"
                ]
            }
        },
        "github:index/getRepositories:getRepositories": {
            "description": "\u003e **Note:** The data source will return a maximum of `1000` repositories\n\t[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).\n\nUse this data source to retrieve a list of GitHub repositories using a search query.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRepositories({\n    query: \"org:hashicorp language:Go\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repositories(query=\"org:hashicorp language:Go\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRepositories.InvokeAsync(new Github.GetRepositoriesArgs\n        {\n            Query = \"org:hashicorp language:Go\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetRepositories(ctx, \u0026GetRepositoriesArgs{\n\t\t\tQuery: \"org:hashicorp language:Go\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositories.\n",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query. See [documentation for the search syntax](https://help.github.com/articles/understanding-the-search-syntax/).\n"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Sorts the repositories returned by the specified attribute. Valid values include `stars`, `fork`, and `updated`. Defaults to `updated`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositories.\n",
                "properties": {
                    "fullNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "query": {
                        "type": "string"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fullNames",
                    "names",
                    "query",
                    "id"
                ]
            }
        },
        "github:index/getRepository:getRepository": {
            "description": "Use this data source to retrieve information about a GitHub repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRepository({\n    fullName: \"hashicorp/terraform\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository(full_name=\"hashicorp/terraform\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRepository.InvokeAsync(new Github.GetRepositoryArgs\n        {\n            FullName = \"hashicorp/terraform\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"hashicorp/terraform\"\n\t\t_, err := github.LookupRepository(ctx, \u0026GetRepositoryArgs{\n\t\t\tFullName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepository.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the repository.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "Full name of the repository (in `org/name` format).\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRepository.\n",
                "properties": {
                    "allowAutoMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows auto-merging pull requests.\n"
                    },
                    "allowMergeCommit": {
                        "type": "boolean",
                        "description": "Whether the repository allows merge commits.\n"
                    },
                    "allowRebaseMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows rebase merges.\n"
                    },
                    "allowSquashMerge": {
                        "type": "boolean",
                        "description": "Whether the repository allows squash merges.\n"
                    },
                    "archived": {
                        "type": "boolean",
                        "description": "Whether the repository is archived.\n"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryBranch:getRepositoryBranch"
                        },
                        "description": "The list of this repository's branches. Each element of `branches` has the following attributes:\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The name of the default branch of the repository.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the repository.\n"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "gitCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository anonymously via the git protocol.\n"
                    },
                    "hasDownloads": {
                        "type": "boolean",
                        "description": "Whether the repository has Downloads feature enabled.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "Whether the repository has GitHub Issues enabled.\n"
                    },
                    "hasProjects": {
                        "type": "boolean",
                        "description": "Whether the repository has the GitHub Projects enabled.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "Whether the repository has the GitHub Wiki enabled.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "URL of a page describing the project.\n"
                    },
                    "htmlUrl": {
                        "type": "string",
                        "description": "URL to the repository on the web.\n"
                    },
                    "httpCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via HTTPS.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the branch.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "GraphQL global node id for use with v4 API\n"
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryPage:getRepositoryPage"
                        },
                        "description": "The repository's GitHub Pages configuration.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether the repository is private.\n"
                    },
                    "repoId": {
                        "type": "integer",
                        "description": "GitHub ID for the repository\n"
                    },
                    "sshCloneUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `git clone` to clone the repository via SSH.\n"
                    },
                    "svnUrl": {
                        "type": "string",
                        "description": "URL that can be provided to `svn checkout` to check out the repository via GitHub's Subversion protocol emulation.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of topics of the repository.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Whether the repository is public, private or internal.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowAutoMerge",
                    "allowMergeCommit",
                    "allowRebaseMerge",
                    "allowSquashMerge",
                    "archived",
                    "branches",
                    "defaultBranch",
                    "fullName",
                    "gitCloneUrl",
                    "hasDownloads",
                    "hasIssues",
                    "hasProjects",
                    "hasWiki",
                    "htmlUrl",
                    "httpCloneUrl",
                    "name",
                    "nodeId",
                    "pages",
                    "private",
                    "repoId",
                    "sshCloneUrl",
                    "svnUrl",
                    "topics",
                    "visibility",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryFile:getRepositoryFile": {
            "description": "This data source allows you to read files within a\nGitHub repository.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst foo = github.getRepositoryFile({\n    repository: github_repository.foo.name,\n    branch: \"main\",\n    file: \".gitignore\",\n});\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nfoo = github.get_repository_file(repository=github_repository[\"foo\"][\"name\"],\n    branch=\"main\",\n    file=\".gitignore\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Github.GetRepositoryFile.InvokeAsync(new Github.GetRepositoryFileArgs\n        {\n            Repository = github_repository.Foo.Name,\n            Branch = \"main\",\n            File = \".gitignore\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"main\"\n\t\t_, err := github.LookupRepositoryFile(ctx, \u0026GetRepositoryFileArgs{\n\t\t\tRepository: github_repository.Foo.Name,\n\t\t\tBranch:     \u0026opt0,\n\t\t\tFile:       \".gitignore\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryFile.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch (defaults to `main`).\nThe branch must already exist, it will not be created if it does not already exist.\n"
                    },
                    "file": {
                        "type": "string",
                        "description": "The path of the file to manage.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository to create the file in.\n"
                    }
                },
                "type": "object",
                "required": [
                    "file",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryFile.\n",
                "properties": {
                    "branch": {
                        "type": "string"
                    },
                    "commitAuthor": {
                        "type": "string",
                        "description": "Committer author name.\n"
                    },
                    "commitEmail": {
                        "type": "string",
                        "description": "Committer email address.\n"
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "Commit message when file was last updated.\n"
                    },
                    "commitSha": {
                        "type": "string",
                        "description": "The SHA of the commit that modified the file.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n"
                    },
                    "file": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "sha": {
                        "type": "string",
                        "description": "The SHA blob of the file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "commitAuthor",
                    "commitEmail",
                    "commitMessage",
                    "commitSha",
                    "content",
                    "file",
                    "repository",
                    "sha",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryMilestone:getRepositoryMilestone": {
            "description": "Use this data source to retrieve information about a specific GitHub milestone in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRepositoryMilestone({\n    number: 1,\n    owner: \"example-owner\",\n    repository: \"example-repository\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_milestone(number=1,\n    owner=\"example-owner\",\n    repository=\"example-repository\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRepositoryMilestone.InvokeAsync(new Github.GetRepositoryMilestoneArgs\n        {\n            Number = 1,\n            Owner = \"example-owner\",\n            Repository = \"example-repository\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryMilestone(ctx, \u0026GetRepositoryMilestoneArgs{\n\t\t\tNumber:     1,\n\t\t\tOwner:      \"example-owner\",\n\t\t\tRepository: \"example-repository\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryMilestone.\n",
                "properties": {
                    "number": {
                        "type": "integer",
                        "description": "The number of the milestone.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Name of the repository to retrieve the milestone from.\n"
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "owner",
                    "repository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryMilestone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the milestone.\n"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "The milestone due date (in ISO-8601 `yyyy-mm-dd` format).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the milestone.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the milestone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dueDate",
                    "number",
                    "owner",
                    "repository",
                    "state",
                    "title",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryPullRequest:getRepositoryPullRequest": {
            "description": "Use this data source to retrieve information about a specific GitHub Pull Request in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRepositoryPullRequest({\n    baseRepository: \"example_repository\",\n    number: 1,\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_pull_request(base_repository=\"example_repository\",\n    number=1)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRepositoryPullRequest.InvokeAsync(new Github.GetRepositoryPullRequestArgs\n        {\n            BaseRepository = \"example_repository\",\n            Number = 1,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupRepositoryPullRequest(ctx, \u0026GetRepositoryPullRequestArgs{\n\t\t\tBaseRepository: \"example_repository\",\n\t\t\tNumber:         1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryPullRequest.\n",
                "properties": {
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Request from.\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The number of the Pull Request within the repository.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository",
                    "number"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryPullRequest.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the ref (branch) of the Pull Request base.\n"
                    },
                    "baseRepository": {
                        "type": "string"
                    },
                    "baseSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request base.\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the Pull Request.\n"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Indicates Whether this Pull Request is a draft.\n"
                    },
                    "headOwner": {
                        "type": "string",
                        "description": "Owner of the Pull Request head repository.\n"
                    },
                    "headRef": {
                        "type": "string"
                    },
                    "headRepository": {
                        "type": "string",
                        "description": "Name of the Pull Request head repository.\n"
                    },
                    "headSha": {
                        "type": "string",
                        "description": "Head commit SHA of the Pull Request head.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label names set on the Pull Request.\n"
                    },
                    "maintainerCanModify": {
                        "type": "boolean",
                        "description": "Indicates whether the base repository maintainers can modify the Pull Request.\n"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "openedAt": {
                        "type": "integer",
                        "description": "Unix timestamp indicating the Pull Request creation time.\n"
                    },
                    "openedBy": {
                        "type": "string",
                        "description": "GitHub login of the user who opened the Pull Request.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the Pull Request.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "The timestamp of the last Pull Request update.\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRef",
                    "baseRepository",
                    "baseSha",
                    "body",
                    "draft",
                    "headOwner",
                    "headRef",
                    "headRepository",
                    "headSha",
                    "labels",
                    "maintainerCanModify",
                    "number",
                    "openedAt",
                    "openedBy",
                    "state",
                    "title",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "github:index/getRepositoryPullRequests:getRepositoryPullRequests": {
            "description": "Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getRepositoryPullRequests({\n    baseRef: \"main\",\n    baseRepository: \"example-repository\",\n    sortBy: \"updated\",\n    sortDirection: \"desc\",\n    state: \"open\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_repository_pull_requests(base_ref=\"main\",\n    base_repository=\"example-repository\",\n    sort_by=\"updated\",\n    sort_direction=\"desc\",\n    state=\"open\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetRepositoryPullRequests.InvokeAsync(new Github.GetRepositoryPullRequestsArgs\n        {\n            BaseRef = \"main\",\n            BaseRepository = \"example-repository\",\n            SortBy = \"updated\",\n            SortDirection = \"desc\",\n            State = \"open\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"main\"\n\t\topt1 := \"updated\"\n\t\topt2 := \"desc\"\n\t\topt3 := \"open\"\n\t\t_, err := github.LookupRepositoryPullRequests(ctx, \u0026GetRepositoryPullRequestsArgs{\n\t\t\tBaseRef:        \u0026opt0,\n\t\t\tBaseRepository: \"example-repository\",\n\t\t\tSortBy:         \u0026opt1,\n\t\t\tSortDirection:  \u0026opt2,\n\t\t\tState:          \u0026opt3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRepositoryPullRequests.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by base branch name.\n"
                    },
                    "baseRepository": {
                        "type": "string",
                        "description": "Name of the base repository to retrieve the Pull Requests from.\n"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by head user or head organization and branch name in the format of \"user:ref-name\" or \"organization:ref-name\". For example: \"github:new-script-format\" or \"octocat:test-branch\".\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owner of the repository. If not provided, the provider's default owner is used.\n"
                    },
                    "sortBy": {
                        "type": "string",
                        "description": "If set, indicates what to sort results by. Can be either \"created\", \"updated\", \"popularity\" (comment count) or \"long-running\" (age, filtering by pulls updated in the last month). Default: \"created\".\n"
                    },
                    "sortDirection": {
                        "type": "string",
                        "description": "If set, controls the direction of the sort. Can be either \"asc\" or \"desc\". Default: \"asc\".\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "If set, filters Pull Requests by state. Can be \"open\", \"closed\", or \"all\". Default: \"open\".\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRepositoryPullRequests.\n",
                "properties": {
                    "baseRef": {
                        "type": "string",
                        "description": "Name of the ref (branch) of the Pull Request base.\n"
                    },
                    "baseRepository": {
                        "type": "string"
                    },
                    "headRef": {
                        "type": "string",
                        "description": "Value of the Pull Request `HEAD` reference.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/github:index/getRepositoryPullRequestsResult:getRepositoryPullRequestsResult"
                        },
                        "description": "Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:\n"
                    },
                    "sortBy": {
                        "type": "string"
                    },
                    "sortDirection": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "the current Pull Request state - can be \"open\", \"closed\" or \"merged\".\n"
                    }
                },
                "type": "object",
                "required": [
                    "baseRepository",
                    "results",
                    "id"
                ]
            }
        },
        "github:index/getTeam:getTeam": {
            "description": "Use this data source to retrieve information about a GitHub team.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\nconst example = pulumi.output(github.getTeam({\n    slug: \"example\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_team(slug=\"example\")\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetTeam.InvokeAsync(new Github.GetTeamArgs\n        {\n            Slug = \"example\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.LookupTeam(ctx, \u0026GetTeamArgs{\n\t\t\tSlug: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The team slug.\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "the team's description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of team members\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the team's full name.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "the Node ID of the team.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "the team's permission level.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "the team's privacy type.\n"
                    },
                    "repositories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of team repositories\n"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "members",
                    "name",
                    "nodeId",
                    "permission",
                    "privacy",
                    "repositories",
                    "slug",
                    "id"
                ]
            }
        },
        "github:index/getUser:getUser": {
            "description": "Use this data source to retrieve information about a GitHub user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Retrieve information about a GitHub user.\nconst example = pulumi.output(github.getUser({\n    username: \"example\",\n}));\n// Retrieve information about the currently authenticated user.\nconst current = pulumi.output(github.getUser({\n    username: \"\",\n}));\n\nexport const currentGithubLogin = current.login;\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_user(username=\"example\")\ncurrent = github.get_user(username=\"\")\npulumi.export(\"currentGithubLogin\", current.login)\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetUser.InvokeAsync(new Github.GetUserArgs\n        {\n            Username = \"example\",\n        }));\n        var current = Output.Create(Github.GetUser.InvokeAsync(new Github.GetUserArgs\n        {\n            Username = \"\",\n        }));\n        this.CurrentGithubLogin = current.Apply(current =\u003e current.Login);\n    }\n\n    [Output(\"currentGithubLogin\")]\n    public Output\u003cstring\u003e CurrentGithubLogin { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcurrent, err := github.GetUser(ctx, \u0026GetUserArgs{\n\t\t\tUsername: \"\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"currentGithubLogin\", current.Login)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username. Use an empty string `\"\"` to retrieve information about the currently authenticated user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string",
                        "description": "the user's avatar URL.\n"
                    },
                    "bio": {
                        "type": "string",
                        "description": "the user's bio.\n"
                    },
                    "blog": {
                        "type": "string",
                        "description": "the user's blog location.\n"
                    },
                    "company": {
                        "type": "string",
                        "description": "the user's company name.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "the creation date.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "the user's email.\n"
                    },
                    "followers": {
                        "type": "integer",
                        "description": "the number of followers.\n"
                    },
                    "following": {
                        "type": "integer",
                        "description": "the number of following users.\n"
                    },
                    "gpgKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of user's GPG keys.\n"
                    },
                    "gravatarId": {
                        "type": "string",
                        "description": "the user's gravatar ID.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "the user's location.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "the user's login.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the user's full name.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "the Node ID of the user.\n"
                    },
                    "publicGists": {
                        "type": "integer",
                        "description": "the number of public gists.\n"
                    },
                    "publicRepos": {
                        "type": "integer",
                        "description": "the number of public repositories.\n"
                    },
                    "siteAdmin": {
                        "type": "boolean",
                        "description": "whether the user is a GitHub admin.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of user's SSH keys.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "the update date.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "bio",
                    "blog",
                    "company",
                    "createdAt",
                    "email",
                    "followers",
                    "following",
                    "gpgKeys",
                    "gravatarId",
                    "location",
                    "login",
                    "name",
                    "nodeId",
                    "publicGists",
                    "publicRepos",
                    "siteAdmin",
                    "sshKeys",
                    "updatedAt",
                    "username",
                    "id"
                ]
            }
        },
        "github:index/getUsers:getUsers": {
            "description": "Use this data source to retrieve information about multiple GitHub users at once.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as github from \"@pulumi/github\";\n\n// Retrieve information about multiple GitHub users.\nconst example = pulumi.output(github.getUsers({\n    usernames: [\n        \"example1\",\n        \"example2\",\n        \"example3\",\n    ],\n}));\n\nexport const validUsers = github_user_example.logins;\nexport const invalidUsers = github_user_example.unknownLogins;\n```\n```python\nimport pulumi\nimport pulumi_github as github\n\nexample = github.get_users(usernames=[\n    \"example1\",\n    \"example2\",\n    \"example3\",\n])\npulumi.export(\"validUsers\", data[\"github_user\"][\"example\"][\"logins\"])\npulumi.export(\"invalidUsers\", data[\"github_user\"][\"example\"][\"unknown_logins\"])\n```\n```csharp\nusing Pulumi;\nusing Github = Pulumi.Github;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Github.GetUsers.InvokeAsync(new Github.GetUsersArgs\n        {\n            Usernames = \n            {\n                \"example1\",\n                \"example2\",\n                \"example3\",\n            },\n        }));\n        this.ValidUsers = data.Github_user.Example.Logins;\n        this.InvalidUsers = data.Github_user.Example.Unknown_logins;\n    }\n\n    [Output(\"validUsers\")]\n    public Output\u003cstring\u003e ValidUsers { get; set; }\n    [Output(\"invalidUsers\")]\n    public Output\u003cstring\u003e InvalidUsers { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-github/sdk/v4/go/github\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := github.GetUsers(ctx, \u0026GetUsersArgs{\n\t\t\tUsernames: []string{\n\t\t\t\t\"example1\",\n\t\t\t\t\"example2\",\n\t\t\t\t\"example3\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"validUsers\", data.Github_user.Example.Logins)\n\t\tctx.Export(\"invalidUsers\", data.Github_user.Example.Unknown_logins)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of usernames.\n"
                    }
                },
                "type": "object",
                "required": [
                    "usernames"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of logins of users that could be found.\n"
                    },
                    "nodeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Node IDs of users that could be found.\n"
                    },
                    "unknownLogins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of logins without matching user.\n"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "logins",
                    "nodeIds",
                    "unknownLogins",
                    "usernames",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-github/sdk/v4/go/github"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing github cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-github)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-github` repo](https://github.com/pulumi/pulumi-github/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-github` repo](https://github.com/terraform-providers/terraform-provider-github/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-github)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-github` repo](https://github.com/pulumi/pulumi-github/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-github` repo](https://github.com/terraform-providers/terraform-provider-github/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}